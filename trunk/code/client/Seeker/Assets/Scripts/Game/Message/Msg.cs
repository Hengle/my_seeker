// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: msg.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from msg.proto</summary>
public static partial class MsgReflection {

  #region Descriptor
  /// <summary>File descriptor for msg.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MsgReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgltc2cucHJvdG8aDW9wdGlvbnMucHJvdG8iOwoRRXhjZXB0aW9uUmVzcG9u",
          "c2USHwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXM6BZiCGZADIkUK",
          "HEV4Y2VwdGlvblJlbW90ZUxvZ2luUmVzcG9uc2USHwoGc3RhdHVzGAEgASgL",
          "Mg8uUmVzcG9uc2VTdGF0dXM6BJiCGQEiKwoOUmVzcG9uc2VTdGF0dXMSDAoE",
          "Y29kZRgBIAEoBRILCgNtc2cYAiABKAkiTgoJR21BZGRBdHRyEhAKCHBsYXll",
          "cklkGAEgASgDEg0KBWNvdW50GAIgASgFEgwKBHR5cGUYAyABKAU6EpiCGWSS",
          "ghkKZ20vYWRkYXR0ciJQCglHbUFkZFByb3ASEAoIcGxheWVySWQYASABKAMS",
          "DgoGcHJvcElkGAIgASgDEg0KBWNvdW50GAMgASgFOhKYghllkoIZCmdtL2Fk",
          "ZHByb3AiWgoMR21GaW5pc2hUYXNrEhAKCHBsYXllcklkGAEgASgDEhEKCWNo",
          "YXB0ZXJJZBgCIAEoAxIOCgZ0YXNrSWQYAyABKAM6FZiCGWaSghkNZ20vZmlu",
          "aXNodGFzayJSCglHbU9mZmljZXISEAoIcGxheWVySWQYASABKAMSEQoJb2Zm",
          "aWNlcklkGAIgASgDEgwKBHR5cGUYAyABKAU6EpiCGWeSghkKZ20vb2ZmaWNl",
          "ciJGChlHTUdldFBsYXllck1lc3NhZ2VSZXF1ZXN0EhAKCHBsYXllcklkGAEg",
          "ASgDOheYghlqkoIZD2dtL2dtUGxheWVySW5mbyIzChpHTUdldFBsYXllck1l",
          "c3NhZ2VSZXNwb25zZRIPCgdtZXNzYWdlGAEgASgJOgSYghlrIl4KDkNTRW50",
          "ZXJSZXF1ZXN0EhAKCHBsYXllcklkGAEgASgDEg8KB3NjZW5lSWQYAiABKAMS",
          "EgoKb2ZmaWNlcklkcxgDIAMoAzoVmIIZlQqSghkMamlnc2F3L2VudGVyInQK",
          "D1NDRW50ZXJSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSEgoKdml0Q29uc3Vt",
          "ZRgCIAEoBRIPCgdzZWNvbmRzGAMgASgFEhEKCWZyYWdtZW50cxgEIAMoAxIS",
          "CgpvZmZpY2VySWRzGAUgAygDOgWYghmWCiJICg1DU1F1aXRSZXF1ZXN0EhAK",
          "CHBsYXllcklkGAEgASgDEg8KB3NjZW5lSWQYAiABKAM6FJiCGZkKkoIZC2pp",
          "Z3Nhdy9xdWl0IicKDlNDUXVpdFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBToF",
          "mIIZmgoiPQoQQ1NTdXNwZW5kUmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoAzoX",
          "mIIZmwqSghkOamlnc2F3L3N1c3BlbmQiKgoRU0NTdXNwZW5kUmVzcG9uc2US",
          "DgoGcmVzdWx0GAEgASgFOgWYghmcCiI7Cg9DU1Jlc3VtZVJlcXVlc3QSEAoI",
          "cGxheWVySWQYASABKAM6FpiCGZ0KkoIZDWppZ3Nhdy9yZXN1bWUiKQoQU0NS",
          "ZXN1bWVSZXNwb25zZRIOCgZyZXN1bHQYASABKAU6BZiCGZ4KIjkKDkNTU3Rh",
          "cnRSZXF1ZXN0EhAKCHBsYXllcklkGAEgASgDOhWYghmfCpKCGQxqaWdzYXcv",
          "c3RhcnQiKAoPU0NTdGFydFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBToFmIIZ",
          "oAoibQoPQ1NGaW5pc2hSZXF1ZXN0Eg8KB3NjZW5lSWQYASABKAMSDgoGcmVz",
          "dWx0GAIgASgFEhAKCHJlc3RUaW1lGAMgASgFEg8KB2FsbFRpbWUYBCABKAU6",
          "FpiCGaEKkoIZDWppZ3Nhdy9maW5pc2girAEKEFNDRmluaXNoUmVzcG9uc2US",
          "DgoGcmVzdWx0GAEgASgFEg8KB3NjZW5lSWQYAiABKAMSDgoGcHJvcElkGAMg",
          "ASgDEhgKB3Jld2FyZHMYBCADKAsyBy5SZXdhcmQSEwoLamlnc2F3U3RhdGUY",
          "BSABKAUSMQoTc2NlbmVSZXdhcmRDb21wcmlzZRgGIAMoCzIULlNjZW5lUmV3",
          "YXJkQ29tcHJpc2U6BZiCGaIKIjQKBlJld2FyZBIPCgdwZXJjZW50GAEgASgF",
          "EgwKBHR5cGUYAiABKAUSCwoDbnVtGAMgASgFIkAKDENTUmVnUmVxdWVzdBIQ",
          "Cgh1c2VybmFtZRgBIAEoCRILCgNwd2QYAiABKAk6EZiCGekHkoIZCGF1dGgv",
          "cmVnIiYKDVNDUmVnUmVzcG9uc2USDgoGcmVzdWx0GAEgASgFOgWYghnqByJC",
          "Cg1DU0F1dGhSZXF1ZXN0EhAKCHVzZXJuYW1lGAEgASgJEgsKA3B3ZBgCIAEo",
          "CToSmIIZ6weSghkJYXV0aC9hdXRoIk4KDlNDQXV0aFJlc3BvbnNlEg4KBnJl",
          "c3VsdBgBIAEoBRITCgthY2Nlc3NUb2tlbhgCIAEoCRIQCgh1c2VybmFtZRgD",
          "IAEoCToFmIIZ7AciaQoOQ1Nsb2dpblJlcXVlc3QSEAoIdXNlcm5hbWUYASAB",
          "KAkSCwoDcHdkGAIgASgJEhAKCHBsYXRmb3JtGAMgASgFEhAKCG5pY2tuYW1l",
          "GAQgASgJOhSYghnvB5KCGQtsb2dpbi9sb2dpbiLmAgoPU0Nsb2dpblJlc3Bv",
          "bnNlEg4KBnJlc3VsdBgBIAEoBRIQCghwbGF5ZXJJZBgCIAEoAxISCgpwbGF5",
          "ZXJOYW1lGAMgASgJEhIKCnBsYXllckljb24YBCABKAkSDAoEY29pbhgFIAEo",
          "BRIMCgRjYXNoGAYgASgFEgsKA3ZpdBgHIAEoBRINCgVsZXZlbBgIIAEoBRIL",
          "CgNleHAYCSABKAUSEgoKbGFib3JVbmlvbhgKIAEoBRISCgp1cGdyYWRlRXhw",
          "GAsgASgFEhMKC2V4cE11bHRpcGxlGAwgASgCEhAKCHBsYXRmb3JtGA0gASgF",
          "EhAKCG5pY2tuYW1lGA4gASgJEhMKC2FjY2Vzc1Rva2VuGA8gASgJEhYKDmxh",
          "c3RBZGRWaXRUaW1lGBAgASgDEhsKE21pbGxpc1JlY292ZXJPbmVWaXQYEiAB",
          "KAMSEgoKaGFzUmVuYW1lZBgTIAEoBToFmIIZ8AciLQoUQ1NDaGFwdGVyTGlz",
          "dFJlcXVlc3Q6FZiCGfMHkoIZDGNoYXB0ZXIvbGlzdCJEChVTQ0NoYXB0ZXJM",
          "aXN0UmVzcG9uc2USJAoIY2hhcHRlcnMYASADKAsyEi5QbGF5ZXJDaGFwdGVy",
          "SW5mbzoFmIIZ9AciTwoRUGxheWVyQ2hhcHRlckluZm8SFwoPcGxheWVyQ2hh",
          "cHRlcklkGAEgASgDEhEKCWNoYXB0ZXJJZBgCIAEoAxIOCgZzdGF0dXMYAyAB",
          "KAUiSgoWQ1NDaGFwdGVyRGV0YWlsUmVxdWVzdBIXCg9wbGF5ZXJDaGFwdGVy",
          "SWQYASABKAM6F5iCGfUHkoIZDmNoYXB0ZXIvZGV0YWlsIuABChdTQ0NoYXB0",
          "ZXJEZXRhaWxSZXNwb25zZRIXCg9wbGF5ZXJDaGFwdGVySWQYASABKAMSEQoJ",
          "Y2hhcHRlcklkGAIgASgDEg4KBnN0YXR1cxgDIAEoBRIdCgRucGNzGAQgAygL",
          "Mg8uQ2hhcHRlck5wY0luZm8SHwoFY2x1ZXMYBSADKAsyEC5DaGFwdGVyQ2x1",
          "ZUluZm8SIQoGc2NlbmVzGAYgAygLMhEuQ2hhcHRlclNjZW5lSW5mbxIfCgV0",
          "YXNrcxgHIAMoCzIQLkNoYXB0ZXJUYXNrSW5mbzoFmIIZ9gciQwoOQ2hhcHRl",
          "ck5wY0luZm8SDQoFbnBjSWQYASABKAMSDgoGc3RhdHVzGAIgASgFEhIKCmRp",
          "YWxvZ3VlSWQYAyABKAMiMQoPQ2hhcHRlckNsdWVJbmZvEg4KBmNsdWVJZBgB",
          "IAEoCRIOCgZzdGF0dXMYAiABKAUiMwoQQ2hhcHRlclNjZW5lSW5mbxIPCgdz",
          "Y2VuZUlkGAEgASgDEg4KBnN0YXR1cxgCIAEoBSIxCg9DaGFwdGVyVGFza0lu",
          "Zm8SDgoGdGFza0lkGAEgASgDEg4KBnN0YXR1cxgCIAEoBSJXChJTQ0NsdWVV",
          "bmxvY2tOb3RpY2USFwoPcGxheWVyQ2hhcHRlcklkGAEgASgDEhEKCWNoYXB0",
          "ZXJJZBgCIAEoAxIOCgZjbHVlSWQYAyABKAk6BZiCGfsHIlUKEVNDTnBjVW5M",
          "b2NrTm90aWNlEhcKD3BsYXllckNoYXB0ZXJJZBgBIAEoAxIRCgljaGFwdGVy",
          "SWQYAiABKAMSDQoFbnBjSWQYAyABKAM6BZiCGfwHIlkKE1NDU2NlbmVVbkxv",
          "Y2tOb3RpY2USFwoPcGxheWVyQ2hhcHRlcklkGAEgASgDEhEKCWNoYXB0ZXJJ",
          "ZBgCIAEoAxIPCgdzY2VuZUlkGAMgASgDOgWYghn9ByJ3Ch9TQ0NoYXB0ZXJU",
          "YXNrU3RhdHVzQ2hhbmdlTm90aWNlEhcKD3BsYXllckNoYXB0ZXJJZBgBIAEo",
          "AxIRCgljaGFwdGVySWQYAiABKAMSDgoGdGFza0lkGAMgASgDEhEKCW5ld1N0",
          "YXR1cxgEIAEoBToFmIIZ/gciYwobU0NDaGFwdGVyU3RhdHVzQ2hhbmdlTm90",
          "aWNlEhcKD3BsYXllckNoYXB0ZXJJZBgBIAEoAxIRCgljaGFwdGVySWQYAiAB",
          "KAMSEQoJbmV3U3RhdHVzGAMgASgFOgWYghn/ByIpChJTQ0NoYXB0ZXJSZWRO",
          "b3RpY2USDAoEcmVkcxgBIAMoBToFmIIZgAgiSAoYQ1NDbGVhckNoYXB0ZXJS",
          "ZWRSZXF1ZXN0EhEKCWNsZWFyVHlwZRgBIAEoBToZmIIZgQiSghkQY2hhcHRl",
          "ci9jbGVhclJlZCJiChNDU1NjZW5lRW50ZXJSZXF1ZXN0EhAKCHBsYXllcklk",
          "GAEgASgDEg8KB3NjZW5lSWQYAiABKAMSEgoKb2ZmaWNlcklkcxgDIAMoAzoU",
          "mIIZzQiSghkLc2NlbmUvZW50ZXIi8AEKFFNDU2NlbmVFbnRlclJlc3BvbnNl",
          "EicKDnJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXMSFQoN",
          "c2NlbmVFeGhpYml0cxgCIAMoAxIUCgx0YXNrRXhoaWJpdHMYAyADKAMSEgoK",
          "dml0Q29uc3VtZRgEIAEoBRIPCgdzZWNvbmRzGAUgASgFEhIKCm9mZmljZXJJ",
          "ZHMYBiADKAMSEwoLaXNEcm9wU2NlbmUYByABKAgSHAoJZHJvcEl0ZW1zGAgg",
          "AygLMgkuR2lmdEl0ZW0SDwoHbXVsdGlJZBgJIAEoAzoFmIIZzggiiQEKFENT",
          "U2NlbmVSZXdhcmRSZXF1ZXN0EhAKCHBsYXllcklkGAEgASgDEg8KB3NjZW5l",
          "SWQYAiABKAMSDgoGcmVzdWx0GAMgASgFEhAKCGNvc3RUaW1lGAQgASgFEhUK",
          "DXVzZUNsaWNrQ291bnQYBSABKAU6FZiCGc8IkoIZDHNjZW5lL3Jld2FyZCK7",
          "AgoVU0NTY2VuZVJld2FyZFJlc3BvbnNlEicKDnJlc3BvbnNlU3RhdHVzGAEg",
          "ASgLMg8uUmVzcG9uc2VTdGF0dXMSDwoHc2NlbmVJZBgCIAEoAxISCgpvdXRw",
          "dXRDb2luGAMgASgFEhIKCm91dHB1dENhc2gYBCABKAUSEQoJb3V0cHV0Vml0",
          "GAUgASgFEhEKCW91dHB1dEV4cBgGIAEoBRIcCglnaWZ0SXRlbXMYByADKAsy",
          "CS5HaWZ0SXRlbRIxChNzY2VuZVJld2FyZENvbXByaXNlGAggAygLMhQuU2Nl",
          "bmVSZXdhcmRDb21wcmlzZRISCgpkaWZmaWN1bHR5GAkgASgFEgsKA2V4cBgK",
          "IAEoBRIhCg51cExldmVsUmV3YXJkcxgLIAMoCzIJLkdpZnRJdGVtOgWYghnQ",
          "CCInCghHaWZ0SXRlbRIOCgZpdGVtSWQYASABKAMSCwoDbnVtGAIgASgFIkkK",
          "EkNTU2NlbmVRdWl0UmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoAxIMCgR0eXBl",
          "GAIgASgFOhOYghnRCJKCGQpzY2VuZS9xdWl0IiwKE1NDU2NlbmVRdWl0UmVz",
          "cG9uc2USDgoGcmVzdWx0GAEgASgFOgWYghnSCCJBChVDU1NjZW5lU3VzcGVu",
          "ZFJlcXVlc3QSEAoIcGxheWVySWQYASABKAM6FpiCGdMIkoIZDXNjZW5lL3N1",
          "c3BlbmQiLwoWU0NTY2VuZVN1c3BlbmRSZXNwb25zZRIOCgZyZXN1bHQYASAB",
          "KAU6BZiCGdQIIj8KFENTU2NlbmVSZXN1bWVSZXF1ZXN0EhAKCHBsYXllcklk",
          "GAEgASgDOhWYghnVCJKCGQxzY2VuZS9yZXN1bWUiLgoVU0NTY2VuZVJlc3Vt",
          "ZVJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBToFmIIZ1ggiPQoTQ1NTY2VuZVN0",
          "YXJ0UmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoAzoUmIIZ1wiSghkLc2NlbmUv",
          "c3RhcnQiLQoUU0NTY2VuZVN0YXJ0UmVzcG9uc2USDgoGcmVzdWx0GAEgASgF",
          "OgWYghnYCCJRCh1DU1NlYXJjaFNjZW5lU2VsZWN0T2ZmaWNlclJlcRISCgpv",
          "ZmZpY2VySWRzGAEgAygDOhyYghnZCJKCGRNzY2VuZS9zZWxlY3RvZmZpY2Vy",
          "InkKHlNDU2VhcmNoU2NlbmVTZWxlY3RPZmZpY2VyUmVzcBISCgp2aXRDb25z",
          "dW1lGAEgASgFEhMKC2Nvc3RTZWNvbmRzGAIgASgFEicKDnJlc3BvbnNlU3Rh",
          "dHVzGAMgASgLMg8uUmVzcG9uc2VTdGF0dXM6BZiCGdoIIlYKEENTQnV5SXRl",
          "bVJlcXVlc3QSEAoIcGxheWVySWQYASABKAMSDgoGcHJvcElkGAIgASgDEg0K",
          "BWNvdW50GAMgASgFOhGYghnhCJKCGQhpdGVtL2J1eSJJChFTQ0J1eUl0ZW1S",
          "ZXNwb25zZRIOCgZwcm9wSWQYASABKAMSDQoFY291bnQYAiABKAUSDgoGcmVz",
          "dWx0GAMgASgFOgWYghniCCJCCg1QbGF5ZXJQcm9wTXNnEg4KBnByb3BJZBgB",
          "IAEoAxINCgVjb3VudBgCIAEoBRISCgpleHBpcmVUaW1lGAMgASgDIjAKE0NT",
          "UGxheWVyUHJvcFJlcXVlc3Q6GZiCGbEJkoIZEHBsYXllci9wcm9wL2xpc3Qi",
          "jgEKFFNDUGxheWVyUHJvcFJlc3BvbnNlEiUKDXJlcG9uc2VTdGF0dXMYASAB",
          "KAsyDi5SZXBvbnNlU3RhdHVzEiMKC3BsYXllclByb3BzGAIgAygLMg4uUGxh",
          "eWVyUHJvcE1zZxIjCgtyZWNlbnRQcm9wcxgDIAMoCzIOLlBsYXllclByb3BN",
          "c2c6BZiCGbIJIj4KGUNTUGxheWVyUHJvcFJlY2VudFJlcXVlc3Q6IZiCGbMJ",
          "koIZGHBsYXllci9wcm9wL3JlY2VudC9lbXB0eSJKChpTQ1BsYXllclByb3BS",
          "ZWNlbnRSZXNwb3NuZRIlCg1yZXBvbnNlU3RhdHVzGAEgASgLMg4uUmVwb25z",
          "ZVN0YXR1czoFmIIZtAkiKgoNUmVwb25zZVN0YXR1cxIMCgRjb2RlGAEgASgF",
          "EgsKA21zZxgCIAEoCSJCChNDU1BsYXllckluZm9SZXF1ZXN0EhAKCHBsYXll",
          "cklkGAEgASgDOhmYghn5CpKCGRBwbGF5ZXIvaW5mby9pbmZvIr8CChRTQ1Bs",
          "YXllckluZm9SZXNwb25zZRIQCghwbGF5ZXJJZBgBIAEoAxISCgpwbGF5ZXJO",
          "YW1lGAIgASgJEhIKCnBsYXllckljb24YAyABKAkSDAoEY29pbhgEIAEoBRIM",
          "CgRjYXNoGAUgASgFEgsKA3ZpdBgGIAEoBRINCgVsZXZlbBgHIAEoBRILCgNl",
          "eHAYCCABKAUSEgoKbGFib3JVbmlvbhgJIAEoBRISCgp1cGdyYWRlRXhwGAog",
          "ASgFEhMKC2V4cE11bHRpcGxlGAsgASgCEhYKDmxhc3RBZGRWaXRUaW1lGAwg",
          "ASgDEhsKE21pbGxpc1JlY292ZXJPbmVWaXQYDSABKAMSEgoKaGFzUmVuYW1l",
          "ZBgOIAEoBRIbChNpbmZpbml0ZVZpdFJlc3RUaW1lGA8gASgDOgWYghn6CiJR",
          "Cg9DU1JlbmFtZVJlcXVlc3QSEAoIcGxheWVySWQYASABKAMSDwoHbmV3TmFt",
          "ZRgCIAEoCTobmIIZ+wqSghkScGxheWVyL2luZm8vcmVuYW1lIkwKEFNDUmVu",
          "YW1lUmVzcG9uc2USEAoIcGxheWVySWQYASABKAMSDgoGcmVzdWx0GAIgASgF",
          "Eg8KB25ld05hbWUYAyABKAk6BZiCGfwKIj8KFENTT2ZmaWNlckxpc3RSZXF1",
          "ZXN0EhAKCHBsYXllcklkGAEgASgDOhWYghndC5KCGQxvZmZpY2VyL2xpc3Qi",
          "UAoVU0NPZmZpY2VyTGlzdFJlc3BvbnNlEhAKCHBsYXllcklkGAEgASgDEh4K",
          "CG9mZmljZXJzGAIgAygLMgwuT2ZmaWNlckluZm86BZiCGd4LIrgBCgtPZmZp",
          "Y2VySW5mbxIXCg9wbGF5ZXJPZmZpY2VySWQYASABKAMSEQoJb2ZmaWNlcklk",
          "GAIgASgDEg0KBWxldmVsGAMgASgFEhAKCG91dHNpZ2h0GAQgASgFEhEKCXdp",
          "bGxQb3dlchgFIAEoBRIRCglhdHRlbnRpb24YBiABKAUSDgoGbWVtb3J5GAcg",
          "ASgFEhIKCnZpdENvbnN1bWUYCCABKAUSEgoKc2Vjb25kR2FpbhgJIAEoBSJY",
          "ChRDU09mZmljZXJJbmZvUmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoAxIXCg9w",
          "bGF5ZXJPZmZpY2VySWQYAiABKAM6FZiCGd8LkoIZDG9mZmljZXIvaW5mbyI8",
          "ChVTQ09mZmljZXJJbmZvUmVzcG9uc2USHAoGb2ZmaWNlGAEgASgLMgwuT2Zm",
          "aWNlckluZm86BZiCGeALIm4KG0NTRXZlbnRQaGFzZUZlZWRiYWNrUmVxdWVz",
          "dBIPCgdldmVudElkGAEgASgDEhcKD3BsYXllck9mZmljZXJJZBgCIAMoAzol",
          "mIIZ4wuSghkcb2ZmaWNlci9ldmVudC9waGFzZS9mZWVkYmFjayKVAQocU0NF",
          "dmVudFBoYXNlRmVlZGJhY2tSZXNwb25zZRInCg5SZXNwb25zZVN0YXR1cxgB",
          "IAEoCzIPLlJlc3BvbnNlU3RhdHVzEhEKCXZhbHVhdGlvbhgCIAEoCBISCgp0",
          "b3RhbFNjb3JlGAMgASgFEh4KCnBoYXNlSW5mb3MYBCADKAsyCi5QaGFzZUlu",
          "Zm86BZiCGeQLItIBCglQaGFzZUluZm8SDwoHcGhhc2VJZBgBIAEoBRIZChFv",
          "ZmZpY2VyVGVtcGxhdGVJZBgCIAEoAxISCgpwaGFzZVNjb3JlGAMgASgFEhQK",
          "DG9mZmljZXJTY29yZRgEIAEoBRIPCgdwZXJmZWN0GAUgASgIEhQKDHBlcmZl",
          "Y3RTY29yZRgGIAEoBRIXCg9waGFzZVRlbXBsYXRlSWQYByABKAMSLwoSbWF0",
          "Y2hXb3JkU2NvcmVJbmZvGAggAygLMhMuTWF0Y2hXb3JkU2NvcmVJbmZvIkIK",
          "Ek1hdGNoV29yZFNjb3JlSW5mbxIRCglrZXlXb3JkSWQYASABKAUSGQoRa2V5",
          "V29yZE1hdGNoU2NvcmUYAiABKAUiWAoUQ1NFdmVudFJld2FyZFJlcXVlc3QS",
          "EAoIcGxheWVySWQYASABKAMSDwoHZXZlbnRJZBgCIAEoAzodmIIZ5QuSghkU",
          "b2ZmaWNlci9ldmVudC9yZXdhcmQi8AEKFVNDRXZlbnRSZXdhcmRSZXNwb25z",
          "ZRInCg5SZXNwb25zZVN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzEg0K",
          "BXNjb3JlGAIgASgFEhEKCXZhbHVhdGlvbhgDIAEoBRIcCgdyZXdhcmRzGAQg",
          "AygLMgsuUmV3YXJkSXRlbRILCgNleHAYBSABKAUSCwoDdml0GAYgASgFEgwK",
          "BGNvaW4YByABKAUSDAoEY2FzaBgIIAEoBRIxChNzY2VuZVJld2FyZENvbXBy",
          "aXNlGAkgAygLMhQuU2NlbmVSZXdhcmRDb21wcmlzZToFmIIZ5gsiKQoKUmV3",
          "YXJkSXRlbRIOCgZwcm9wSWQYASABKAMSCwoDbnVtGAIgASgFIlgKF0NTT2Zm",
          "aWNlckNvbWJpbmVSZXF1ZXN0EhAKCHBsYXllcklkGAEgASgDEhEKCW9mZmlj",
          "ZXJJZBgCIAEoAzoYmIIZ4QuSghkPb2ZmaWNlci9jb21iaW5lIkMKGFNDT2Zm",
          "aWNlckNvbWJpbmVSZXNwb25zZRIOCgZyZXN1bHQYASABKAUSEAoIb2ZmaWNl",
          "SWQYAiABKAM6BZiCGeILIlwKFkNTT2ZmaWNlclVwZGF0ZVJlcXVlc3QSEAoI",
          "cGxheWVySWQYASABKAMSFwoPcGxheWVyT2ZmaWNlcklkGAIgASgDOheYghnn",
          "C5KCGQ5vZmZpY2VyL3VwZGF0ZSJRChdTQ09mZmljZXJVcGRhdGVSZXNwb25z",
          "ZRIOCgZyZXN1bHQYASABKAUSEAoIb2ZmaWNlSWQYAiABKAMSDQoFbGV2ZWwY",
          "AyABKAU6BZiCGegLIlYKE0NTRXZlbnRFbnRlclJlcXVlc3QSEAoIcGxheWVy",
          "SWQYASABKAMSDwoHZXZlbnRJZBgCIAEoAzocmIIZ6QuSghkTb2ZmaWNlci9l",
          "dmVudC9lbnRlciItChRTQ0V2ZW50RW50ZXJSZXNwb25zZRIOCgZyZXN1bHQY",
          "ASABKAU6BZiCGeoLIkoKFkNTRXZlbnREcm9wSW5mb1JlcXVlc3QSDwoHZXZl",
          "bnRJZBgBIAEoAzofmIIZ6wuSghkWb2ZmaWNlci9ldmVudC9kcm9wSW5mbyJ8",
          "ChdTQ0V2ZW50RHJvcEluZm9SZXNwb25zZRIkCgxwZXJmZWN0UHJvcHMYASAD",
          "KAsyDi5FdmVudERyb3BJbmZvEiMKC25vcm1hbFByb3BzGAIgAygLMg4uRXZl",
          "bnREcm9wSW5mbxIPCgdldmVudElkGAMgASgDOgWYghnsCyIuCg1FdmVudERy",
          "b3BJbmZvEg4KBnByb3BJZBgBIAEoAxINCgVjb3VudBgCIAEoBSJtChJDU1Nr",
          "aWxsRW1pdFJlcXVlc3QSDgoGcHJvcElkGAEgASgDEg0KBWNvdW50GAIgASgF",
          "EiMKDGluT3JPdXRTY2VuZRgDIAEoDjINLkluT3JPdXRTY2VuZToTmIIZwQyS",
          "ghkKc2tpbGwvZW1pdCJNChNTQ1NraWxsRW1pdFJlc3BvbnNlEg4KBnJlc3Vs",
          "dBgBIAEoBRIPCgdza2lsbElkGAIgASgDEg4KBnByb3BJZBgDIAEoAzoFmIIZ",
          "wgwiMAoTQ1NTa2lsbFRpbWVyRW1pdFJlcToZmIIZwwySghkQc2tpbGwvZW1p",
          "dC90aW1lciJXChRTQ1NraWxsVGltZXJFbWl0UmVzcBIOCgZyZXN1bHQYASAB",
          "KAUSDwoHc2tpbGxJZBgCIAEoAxIXCg9wbGF5ZXJPZmZpY2VySWQYAyABKAM6",
          "BZiCGcQMIk4KFENTUmVhc29uaW5nUmV3YXJkUmVxEhMKC3JlYXNvbmluZ0lk",
          "GAEgASgDOiGYghnFDJKCGRhvZmZpY2VyL3JlYXNvbmluZy9yZXdhcmQiPQoO",
          "Q1NGaW5kRW50ZXJSZXESDgoGZmluZElkGAEgASgDOhuYghnGDJKCGRJvZmZp",
          "Y2VyL2ZpbmQvZW50ZXIiKAoPU0NGaW5kRW50ZXJSZXNwEg4KBnJlc3VsdBgB",
          "IAEoBToFmIIZxwwicwoPQ1NGaW5kUmV3YXJkUmVxEg4KBmZpbmRJZBgBIAEo",
          "AxIOCgZyZXN1bHQYAiABKAUSEAoIZm91bmROdW0YAyABKAUSEAoIdG90YWxO",
          "dW0YBCABKAU6HJiCGcgMkoIZE29mZmljZXIvZmluZC9yZXdhcmQiggEKEFND",
          "RmluZFJld2FyZFJlc3ASJwoOUmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNw",
          "b25zZVN0YXR1cxILCgN2aXQYAiABKAUSMQoTc2NlbmVSZXdhcmRDb21wcmlz",
          "ZRgDIAMoCzIULlNjZW5lUmV3YXJkQ29tcHJpc2U6BZiCGckMIkUKEUNTU2t5",
          "RXllUmV3YXJkUmVxEhAKCHNreUV5ZUlkGAEgASgDOh6YghnKDJKCGRVvZmZp",
          "Y2VyL3NreUV5ZS9yZXdhcmQicQoRU0NTa3lFeWVSZXdhcmRSZXESEAoIc2t5",
          "RXllSWQYASABKAMSJwoOUmVzcG9uc2VTdGF0dXMYAiABKAsyDy5SZXNwb25z",
          "ZVN0YXR1cxIaCgVpdGVtcxgDIAMoCzILLlJld2FyZEl0ZW06BZiCGcsMIisK",
          "C0NTU2t5RXllUmVxOhyYghnMDJKCGRNvZmZpY2VyL3NreUV5ZS9saXN0IikK",
          "C1NDU2t5RXllUmVxEhMKC2hhc1Jld2FyZGVkGAEgAygDOgWYghnNDCJ4CgxE",
          "aXNjb3VudEluZm8SFAoMZGlzY291bnRDb3N0GAEgASgFEhAKCGRpc2NvdW50",
          "GAIgASgFEhUKDWRpc2NvdW50U3RhcnQYAyABKAMSEwoLZGlzY291bnRFbmQY",
          "BCABKAMSFAoMZGlzY291bnRJY29uGAUgASgJIrIBCg1NYXJrZXRJdGVtTXNn",
          "EgoKAmlkGAEgASgDEg4KBnNlbGxJZBgCIAEoAxIRCglzZWxsQ291bnQYAyAB",
          "KAUSGwoIY29zdFR5cGUYBCABKA4yCS5Db3N0VHlwZRIMCgRjb3N0GAUgASgF",
          "EhAKCGJ1eUxpbWl0GAYgASgFEiMKDGRpc2NvdW50SW5mbxgHIAEoCzINLkRp",
          "c2NvdW50SW5mbxIQCghtYXhMaW1pdBgIIAEoBSJwCgtNYXJrZXRCbGFjaxIK",
          "CgJpZBgBIAEoAxIWCg5sYXN0VXBkYXRlVGltZRgCIAEoAxIWCg5uZXh0VXBk",
          "YXRlVGltZRgDIAEoAxIRCglmcmVzaENvc3QYBCABKAUSEgoKZnJlc2hMaW1p",
          "dBgFIAEoBSJJCg1NYXJrZXRSZXF1ZXN0EhsKCGNhdGVnb3J5GAEgASgOMgku",
          "Q2F0ZWdvcnk6G5iCGaUNkoIZEnBsYXllci9tYXJrZXQvbGlzdCKlAQoOTWFy",
          "a2V0UmVzcG9uc2USJwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNwb25z",
          "ZVN0YXR1cxIjCgttYXJrZXRJdGVtcxgCIAMoCzIOLk1hcmtldEl0ZW1Nc2cS",
          "IQoLbWFya2V0QmxhY2sYAyABKAsyDC5NYXJrZXRCbGFjaxIbCghjYXRlZ29y",
          "eRgEIAEoDjIJLkNhdGVnb3J5OgWYghmmDSJSCg9NYXJrZUJ1eVJlcXVlc3QS",
          "FAoMbWFya2V0SXRlbUlkGAEgASgDEg0KBWNvdW50GAIgASgFOhqYghmnDZKC",
          "GRFwbGF5ZXIvbWFya2V0L2J1eSJhChBNYXJrZUJ1eVJlc3BvbnNlEicKDnJl",
          "c3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXMSHQoFcHJvcHMY",
          "AiABKAsyDi5QbGF5ZXJQcm9wTXNnOgWYghmoDSJCChNDU01hcmtldEl0ZW1S",
          "ZXF1ZXN0Eg4KBnByb3BJZBgBIAEoAzobmIIZrw2SghkScGxheWVyL21hcmtl",
          "dC9pdGVtImsKFFNDTWFya2V0SXRlbVJlc3BvbnNlEicKDnJlc3BvbnNlU3Rh",
          "dHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXMSIwoLbWFya2V0SXRlbXMYAiAB",
          "KAsyDi5NYXJrZXRJdGVtTXNnOgWYghmwDSI3ChFNYXJrZUZyZXNoUmVxdWVz",
          "dDoimIIZqQ2SghkZcGxheWVyL21hcmtldC9ibGFjay9mcmVzaCK1AQoSTWFy",
          "a2VGcmVzaFJlc3BvbnNlEicKDnJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVz",
          "cG9uc2VTdGF0dXMSJwoOcGxheWVyQmFzZUluZm8YAiABKAsyDy5QbGF5ZXJC",
          "YXNlSW5mbxIhCgtNYXJrZXRCbGFjaxgDIAEoCzIMLk1hcmtldEJsYWNrEiMK",
          "C21hcmtldEl0ZW1zGAQgAygLMg4uTWFya2V0SXRlbU1zZzoFmIIZqg0iLAoO",
          "UGxheWVyQmFzZUluZm8SDAoEY29pbhgBIAEoBRIMCgRjYXNoGAIgASgFIkUK",
          "E0NTTm90aWNlTGlzdFJlcXVlc3QSCgoCaWQYASABKAMSDAoEdHlwZRgCIAEo",
          "BToUmIIZiQ6SghkLbm90aWNlL2xpc3QiOwoUU0NOb3RpY2VMaXN0UmVzcG9u",
          "c2USHAoHbm90aWNlcxgBIAMoCzILLk5vdGljZUluZm86BZiCGYoOIqMBCgpO",
          "b3RpY2VJbmZvEgoKAmlkGAEgASgDEgwKBHR5cGUYAiABKAUSDwoHcGljdHVy",
          "ZRgDIAEoCRINCgV0aXRsZRgEIAEoCRIPCgdjb250ZW50GAUgASgJEhIKCmxl",
          "dmVsTGltaXQYBiABKAUSEQoJc3RhcnRUaW1lGAcgASgDEg8KB2VuZFRpbWUY",
          "CCABKAMSEgoKdXBkYXRlVGltZRgJIAEoAyIjCg1DU1BpbmdSZXF1ZXN0OhKY",
          "ghntDpKCGQlwaW5nL3BpbmciTQoOU0NQaW5nUmVzcG9uc2USDQoFY291bnQY",
          "ASABKAUSJQoHY29udGVudBgCIAMoCzIULlBpbmdSZXNwb25zZUNvbnRlbnQ6",
          "BZiCGe4OIkMKE1BpbmdSZXNwb25zZUNvbnRlbnQSDQoFbXNnSWQYASABKAUS",
          "DAoEZGF0YRgCIAEoCRIPCgdpc0VtcHR5GAMgASgIIikKEENTTWVzc2FnZVJl",
          "cXVlc3Q6FZiCGe8OkoIZDHBpbmcvbWVzc2FnZSJbCg5Mb3R0b0l0ZW1Qcm90",
          "bxIOCgZwcm9wSWQYASABKAMSDQoFY291bnQYAiABKAUSDwoHc3BlY2lhbBgD",
          "IAEoCBINCgVsdWNreRgEIAEoBRIKCgJpZBgFIAEoAyJGCgxMb3R0b1JlcXVl",
          "c3QSGwoIY29zdFR5cGUYASABKA4yCS5Db3N0VHlwZToZmIIZqw2SghkQcGxh",
          "eWVyL2xvdHRvL2dldCKvAQoNTG90dG9SZXNwb25zZRInCg5yZXNwb25zZVN0",
          "YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzEhsKCGNvc3RUeXBlGAIgASgO",
          "MgkuQ29zdFR5cGUSEQoJY29zdFZhbHVlGAMgASgFEg8KB2xvdHRvSWQYBCAB",
          "KAMSHgoFaXRlbXMYBSADKAsyDy5Mb3R0b0l0ZW1Qcm90bxINCgVsdWNreRgG",
          "IAEoBToFmIIZrA0iPQoPTG90dG9CdXlSZXF1ZXN0Eg8KB2xvdHRvSWQYASAB",
          "KAM6GZiCGa0NkoIZEHBsYXllci9sb3R0by9idXkigQEKEExvdHRvQnV5UmVz",
          "cG9uc2USJwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1",
          "cxIdCgVwcm9wcxgCIAMoCzIOLlBsYXllclByb3BNc2cSCgoCaWQYAyABKAMS",
          "EgoKbG90dG9Db3VudBgEIAEoBToFmIIZrg0icQoYQ1NHb29nbGVQYXlDaGFy",
          "Z2VSZXF1ZXN0EhAKCGpzb25EYXRhGAEgASgJEhEKCXNpZ25hdHVyZRgCIAEo",
          "CRIRCglwcm9kdWN0SWQYAyABKAk6HZiCGbENkoIZFHBsYXllci9jaGFyZ2Uv",
          "Z29vZ2xlIl4KGVNDR29vZ2xlUGF5Q2hhcmdlUmVzcG9uc2USJwoOcmVzcG9u",
          "c2VTdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1cxIRCglwcm9kdWN0SWQY",
          "AiABKAk6BZiCGbINIlgKFUNTSU9TUGF5Q2hhcmdlUmVxdWVzdBIQCghqc29u",
          "RGF0YRgBIAEoCRIRCglwcm9kdWN0SWQYAiABKAk6GpiCGbMNkoIZEXBsYXll",
          "ci9jaGFyZ2UvaW9zIm0KFlNDSU9TUGF5Q2hhcmdlUmVzcG9uc2USJwoOcmVz",
          "cG9uc2VTdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1cxIRCglwcm9kdWN0",
          "SWQYAiABKAkSEAoIanNvbkRhdGEYAyABKAk6BZiCGbQNIkEKElNDQWNjZXB0",
          "VGFza05vdGljZRIkCgthY2NlcHRUYXNrcxgBIAMoCzIPLkFjY2VwdFRhc2tJ",
          "bmZvOgWYghmcDiJGCg5BY2NlcHRUYXNrSW5mbxIOCgZ0YXNrSWQYASABKAMS",
          "FAoMcGxheWVyVGFza0lkGAIgASgDEg4KBnN0YXR1cxgDIAEoBSJGChFDU1Rh",
          "c2tMaXN0UmVxdWVzdBIMCgR0eXBlGAEgASgFEg8KB3Rhc2tJZHMYAiADKAM6",
          "EpiCGZ0OkoIZCXRhc2svbGlzdCI5ChJTQ1Rhc2tMaXN0UmVzcG9uc2USHAoJ",
          "dGFza0luZm9zGAEgAygLMgkuVGFza0luZm86BZiCGZ4OIvABCghUYXNrSW5m",
          "bxIUCgxwbGF5ZXJUYXNrSWQYASABKAMSDgoGdGFza0lkGAIgASgDEg4KBnN0",
          "YXR1cxgDIAEoBRINCgVsZXZlbBgEIAEoBRIoCg1wcm9wUHJvZ3Jlc3NzGAUg",
          "AygLMhEuVGFza1Byb3BQcm9ncmVzcxIYChBkaWFsb2d1ZVByb2dyZXNzGAYg",
          "ASgFEhUKDWV2ZW50UHJvZ3Jlc3MYByABKAUSFQoNc2NlbmVQcm9ncmVzcxgI",
          "IAEoBRItCg9leGhpYml0UHJvZ3Jlc3MYCSADKAsyFC5UYXNrRXhoaWJpdFBy",
          "b2dyZXNzIjEKEFRhc2tQcm9wUHJvZ3Jlc3MSDgoGcHJvcElkGAEgASgDEg0K",
          "BWNvdW50GAIgASgFIjcKE1Rhc2tFeGhpYml0UHJvZ3Jlc3MSEQoJZXhoaWJp",
          "dElkGAEgASgDEg0KBWNvdW50GAIgASgFIkEKE0NTVGFza0NvbW1pdFJlcXVl",
          "c3QSFAoMcGxheWVyVGFza0lkGAEgASgDOhSYghmfDpKCGQt0YXNrL2NvbW1p",
          "dCKqAQoUU0NUYXNrQ29tbWl0UmVzcG9uc2USDgoGcmVzdWx0GAEgASgFEgwK",
          "BGNvaW4YAiABKAUSDAoEY2FzaBgDIAEoBRILCgN2aXQYBCABKAUSCwoDZXhw",
          "GAUgASgFEg8KB3RpdGxlSWQYBiABKAMSJAoLcHJvcFJld2FyZHMYByADKAsy",
          "Dy5UYXNrUHJvcFJld2FyZBIOCgZ0YXNrSWQYCCABKAM6BZiCGaAOIi8KDlRh",
          "c2tQcm9wUmV3YXJkEg4KBnByb3BJZBgBIAEoAxINCgVjb3VudBgCIAEoBSJ0",
          "ChhTQ1Rhc2tTdGF0dXNDaGFuZ2VOb3RpY2USFAoMcGxheWVyVGFza0lkGAEg",
          "ASgDEg4KBnRhc2tJZBgCIAEoAxIOCgZzdGF0dXMYAyABKAUSGwoIdGFza0lu",
          "Zm8YBCABKAsyCS5UYXNrSW5mbzoFmIIZoQ4iQwoaQ1NUcmlnZ2VyVGFza0Fj",
          "dGl2ZVJlcXVlc3QSDgoGdGFza0lkGAEgASgDOhWYghmjDpKCGQx0YXNrL3Ry",
          "aWdnZXIiRAobU0NUcmlnZ2VyVGFza0FjdGl2ZVJlc3BvbnNlEg4KBnJlc3Vs",
          "dBgBIAEoBRIOCgZ0YXNrSWQYAiABKAM6BZiCGaQOIisKE0NTVGFza0lkTGlz",
          "dFJlcXVlc3Q6FJiCGbEOkoIZC3Rhc2svaWRMaXN0Ij8KFFNDVGFza0lkTGlz",
          "dFJlc3BvbnNlEiAKC3Rhc2tJZEluZm9zGAEgAygLMgsuVGFza0lkSW5mbzoF",
          "mIIZsg4iMgoKVGFza0lkSW5mbxIUCgxwbGF5ZXJUYXNrSWQYASABKAMSDgoG",
          "dGFza0lkGAIgASgDIjkKFENTQWNoaWV2ZW1lbnRSZXF1ZXN0OiGYghmlDpKC",
          "GRgvcGxheWVyL2FjaGlldmVtZW50L2xpc3QiggEKDkFjaGlldmVtZW50TXNn",
          "EgoKAmlkGAEgASgDEhAKCHByb2dyZXNzGAIgASgFEhQKDHN1Ym1pdFN0YXR1",
          "cxgDIAEoBRISCgpmaW5pc2hUaW1lGAQgASgDEhMKC2ZpbmlzaFRpbWUxGAUg",
          "ASgDEhMKC2ZpbmlzaFRpbWUyGAYgASgDInoKFVNDQWNoaWV2ZW1lbnRSZXNw",
          "b25zZRIfCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1cxIlCgxBY2hp",
          "ZXZlbWVudHMYAiADKAsyDy5BY2hpZXZlbWVudE1zZxISCgp0b3RhbENvdW50",
          "GAMgASgFOgWYghmmDiJcChpDU0FjaGlldmVtZW50U3VibWl0UmVxdWVzdBIK",
          "CgJpZBgBIAEoAxINCgVzdGFnZRgCIAEoBTojmIIZpw6SghkaL3BsYXllci9h",
          "Y2hpZXZlbWVudC9zdWJtaXQiRQobU0NBY2hpZXZlbWVudFN1Ym1pdFJlc3Bv",
          "bnNlEh8KBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzOgWYghmoDiI4",
          "ChlDU0FjdGl2aXR5QmFzZUxpc3RSZXF1ZXN0OhuYghnlD5KCGRJhY3Rpdml0",
          "eS9iYXNlL2xpc3QiSQoaU0NBY3Rpdml0eUJhc2VMaXN0UmVzcG9uc2USJAoJ",
          "YmFzZUluZm9zGAEgAygLMhEuQWN0aXZpdHlCYXNlSW5mbzoFmIIZ5g8ijgIK",
          "EEFjdGl2aXR5QmFzZUluZm8SCgoCaWQYASABKAMSDAoEdHlwZRgCIAEoBRIM",
          "CgRpY29uGAMgASgJEg0KBWRlc2NzGAQgASgJEhIKCnRhcmdldFR5cGUYBSAB",
          "KAUSFAoMdGFyZ2V0UHJlZmFiGAYgASgJEhIKCndhcm11cFRpbWUYByABKAMS",
          "EQoJc3RhcnRUaW1lGAggASgDEg8KB2VuZFRpbWUYCSABKAMSDQoFc3RhZ2UY",
          "CiABKAUSEAoIdGltZVR5cGUYCyABKAUSDAoEZGF5cxgMIAEoBRIZChFwZXJz",
          "b25hbEJlZ2luVGltZRgNIAEoAxIXCg9wZXJzb25hbEVuZFRpbWUYDiABKAMi",
          "MwoIUHJvcEl0ZW0SCgoCaWQYASABKAMSCwoDbnVtGAIgASgFEg4KBmhhc051",
          "bRgDIAEoBSI9ChFDU0FjdGl2aXR5UmVxdWVzdBIKCgJpZBgBIAEoAzocmIIZ",
          "6A+SghkTYWN0aXZpdHkvYmFzZS9xdWVzdCKnAgoWU0NBY3Rpdml0eURyb3BS",
          "ZXNwb25zZRIKCgJpZBgBIAEoAxITCgtkZXNjcmlwdGlvbhgCIAEoCRIYChBi",
          "YWNrZ3JvdW5kU291cmNlGAMgASgJEhQKDHdhcm11cFNvdXJjZRgEIAEoCRIQ",
          "CghyZXdhcmRpZBgFIAEoAxIYCgVpdGVtcxgGIAMoCzIJLlByb3BJdGVtEg8K",
          "B3NjZW5lSWQYByADKAMSDQoFc3RhZ2UYCCABKAUSEQoJaGFzUmV3YXJkGAkg",
          "ASgIEgwKBG5hbWUYCiABKAkSEgoKY29sbGVjdERlcxgLIAEoCRIQCghzY2Vu",
          "ZURlcxgMIAEoCRIUCgxyZXdhcmRTb3VyY2UYDSABKAkSDAoEdGlwcxgOIAEo",
          "CToFmIIZ6Q8iPwoXQ1NBY3Rpdml0eVJld2FyZFJlcXVlc3QSCgoCaWQYASAB",
          "KAM6GJiCGeoPkoIZD2FjdGl2aXR5L3Jld2FyZCJkChhTQ0FjdGl2aXR5UmV3",
          "YXJkUmVzcG9uc2USJwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNwb25z",
          "ZVN0YXR1cxIYCgVpdGVtcxgCIAMoCzIJLkdpZnRJdGVtOgWYghnrDyJAChVD",
          "U0NhcnRvb25FbnRlclJlcXVlc3QSDwoHc2NlbmVJZBgBIAEoAzoWmIIZtRCS",
          "ghkNY2FydG9vbi9lbnRlciIvChZTQ0NhcnRvb25FbnRlclJlc3BvbnNlEg4K",
          "BnJlc3VsdBgBIAEoBToFmIIZthAiMQoWQ1NDYXJ0b29uUmV3YXJkUmVxdWVz",
          "dDoXmIIZtxCSghkOY2FydG9vbi9yZXdhcmQiigEKGFNDQ2FydG9vblJld2Fy",
          "ZFJlcXNwb25zZRIMCgRjYXNoGAEgASgFEgwKBGNvaW4YAiABKAUSCwoDZXhw",
          "GAMgASgFEgsKA3ZpdBgEIAEoBRIxChNzY2VuZVJld2FyZENvbXByaXNlGAUg",
          "AygLMhQuU2NlbmVSZXdhcmRDb21wcmlzZToFmIIZuBAiLQoUQ1NDYXJ0b29u",
          "UXVpdFJlcXVlc3Q6FZiCGbkQkoIZDGNhcnRvb24vcXVpdCIpChJDU0VtYWls",
          "TGlzdFJlcXVlc3Q6E5iCGZkRkoIZCmVtYWlsL2xpc3QiOAoTU0NFbWFpbExp",
          "c3RSZXNwb25zZRIaCgZlbWFpbHMYASADKAsyCi5FbWFpbEluZm86BZiCGZoR",
          "IpsBCglFbWFpbEluZm8SCgoCaWQYASABKAMSDAoEdHlwZRgCIAEoBRIOCgZz",
          "dGF0dXMYAyABKAUSDQoFdGl0bGUYBCABKAkSDwoHY29udGVudBgFIAEoCRIT",
          "CgtyZWNlaXZlVGltZRgGIAEoAxIQCghkZWFkbGluZRgHIAEoAxIdCgdyZXdh",
          "cmRzGAggAygLMgwuRW1haWxSZXdhcmQiLAoLRW1haWxSZXdhcmQSDgoGcHJv",
          "cElkGAEgASgDEg0KBWNvdW50GAIgASgFIjkKFENTRW1haWxSZXdhcmRSZXF1",
          "ZXN0EgoKAmlkGAEgASgDOhWYghmbEZKCGQxlbWFpbC9yZXdhcmQiOgoVU0NF",
          "bWFpbFJld2FyZFJlc3BvbnNlEg4KBnJlc3VsdBgBIAEoBRIKCgJpZBgCIAEo",
          "AzoFmIIZnBEiNQoSQ1NFbWFpbFJlYWRSZXF1ZXN0EgoKAmlkGAEgASgDOhOY",
          "ghmdEZKCGQplbWFpbC9yZWFkIjAKE1NDRW1haWxDaGFuZ2VOb3RpY2USEgoK",
          "c3dpdGNoVGltZRgBIAEoAzoFmIIZnxEiTgoIVGl0bGVNc2cSDwoHdGl0bGVJ",
          "ZBgBIAEoAxIQCghkZWFkbGluZRgCIAEoAxIPCgdnZXRUaW1lGAMgASgDEg4K",
          "BmFjdGl2ZRgEIAEoCCItCg5DU1RpdGxlUmVxdWVzdDobmIIZqQ6SghkSL3Bs",
          "YXllci90aXRsZS9saXN0IlQKD1NDVGl0bGVSZXNwb25zZRIfCgZzdGF0dXMY",
          "ASABKAsyDy5SZXNwb25zZVN0YXR1cxIZCgZ0aXRsZXMYAiADKAsyCS5UaXRs",
          "ZU1zZzoFmIIZqg4iRgoUQ1NUaXRsZUFjdGl2ZVJlcXVlc3QSDwoHdGl0bGVJ",
          "ZBgBIAEoAzodmIIZqw6SghkUL3BsYXllci90aXRsZS9hY3RpdmUiWQoVU0NU",
          "aXRsZUFjdGl2ZVJlc3BvbnNlEh8KBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNl",
          "U3RhdHVzEhgKBXRpdGxlGAIgASgLMgkuVGl0bGVNc2c6BZiCGawOIi8KEUNT",
          "VGl0bGVHZXRSZXF1ZXN0OhqYghmtDpKCGREvcGxheWVyL3RpdGxlL2dldCJW",
          "ChJTQ1RpdGxlR2V0UmVzcG9uc2USHwoGc3RhdHVzGAEgASgLMg8uUmVzcG9u",
          "c2VTdGF0dXMSGAoFdGl0bGUYAiABKAsyCS5UaXRsZU1zZzoFmIIZrg4ikQEK",
          "D1BsYXllckZyaWVuZE1zZxIQCghwbGF5ZXJJZBgBIAEoAxIMCgRuYW1lGAIg",
          "ASgJEg0KBWxldmVsGAMgASgFEg4KBmdlbmRlchgEIAEoBRIMCgRpY29uGAUg",
          "ASgJEg8KB3RpdGxlSWQYBiABKAMSDAoEZ2lmdBgHIAEoCBISCgpzdGF0dXNU",
          "aW1lGAggASgDIkwKD0NTRnJpZW5kUmVxdWVzdBIcCgR0eXBlGAEgASgOMg4u",
          "RnJpZW5kUmVxVHlwZTobmIIZ/RGSghkScGxheWVyL2ZyaWVuZC9saXN0ItYB",
          "ChBTQ0ZyaWVuZFJlc3BvbnNlEh8KBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNl",
          "U3RhdHVzEiEKB2ZyaWVuZHMYAiADKAsyEC5QbGF5ZXJGcmllbmRNc2cSDQoF",
          "bGltaXQYAyABKAUSDQoFdG90YWwYBCABKAUSFQoNZ2lmdENvdW50TGVmdBgF",
          "IAEoBRIcCgRUeXBlGAYgASgOMg4uRnJpZW5kUmVxVHlwZRIRCglsYXN0QWdy",
          "ZWUYByABKAgSEQoJYWRkU3dpdGNoGAggASgIOgWYghn+ESJCChJDU0ZyaWVu",
          "ZEFkZFJlcXVlc3QSEAoIcGxheWVySWQYASABKAM6GpiCGf8RkoIZEXBsYXll",
          "ci9mcmllbmQvYWRkIj0KE1NDRnJpZW5kQWRkUmVzcG9uc2USHwoGc3RhdHVz",
          "GAEgASgLMg8uUmVzcG9uc2VTdGF0dXM6BZiCGYASIkIKEkNTRnJpZW5kRGVs",
          "UmVxdWVzdBIQCghwbGF5ZXJJZBgBIAEoAzoamIIZgRKSghkRcGxheWVyL2Zy",
          "aWVuZC9kZWwiPQoTU0NGcmllbmREZWxSZXNwb25zZRIfCgZzdGF0dXMYASAB",
          "KAsyDy5SZXNwb25zZVN0YXR1czoFmIIZghIiRgoUQ1NGcmllbmRBZ3JlZVJl",
          "cXVlc3QSEAoIcGxheWVySWQYASABKAM6HJiCGYMSkoIZE3BsYXllci9mcmll",
          "bmQvYWdyZWUiPwoVU0NGcmllbmRBZ3JlZVJlc3BvbnNlEh8KBnN0YXR1cxgB",
          "IAEoCzIPLlJlc3BvbnNlU3RhdHVzOgWYghmEEiJMChdDU0ZyaWVuZERlbEFw",
          "cGx5UmVxdWVzdBIQCghmcmllbmRJZBgBIAEoAzofmIIZhRKSghkWcGxheWVy",
          "L2ZyaWVuZC9kZWxBcHBseSJCChhTQ0ZyaWVuZERlbEFwcGx5UmVzcG9uc2US",
          "HwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXM6BZiCGYYSIjcKE0NT",
          "RnJpZW5kR2lmdFJlcXVlc3Q6IJiCGYcSkoIZF3BsYXllci9mcmllbmQvZ2lm",
          "dC9saXN0ImoKCkZyaWVuZEdpZnQSJwoNcGxheWVyRnJpZW5kcxgBIAEoCzIQ",
          "LlBsYXllckZyaWVuZE1zZxIjCgtwbGF5UHJvcE1zZxgCIAEoCzIOLlBsYXll",
          "clByb3BNc2cSDgoGZ2lmdElkGAMgASgDIoIBChRTQ0ZyaWVuZEdpZnRSZXNw",
          "b25zZRIfCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1cxIkCg9mcmll",
          "bmRHaWZ0TGlzdHMYAiADKAsyCy5GcmllbmRHaWZ0Eg0KBWxpbWl0GAMgASgF",
          "Eg0KBWNvdW50GAQgASgFOgWYghmIEiJNChdDU0ZyaWVuZEdpZnRTZW5kUmVx",
          "dWVzdBIQCghmcmllbmRJZBgBIAEoAzogmIIZiRKSghkXcGxheWVyL2ZyaWVu",
          "ZC9naWZ0L3NlbmQiQgoYU0NGcmllbmRHaWZ0U2VuZFJlc3BvbnNlEh8KBnN0",
          "YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzOgWYghmKEiJLChdDU0ZyaWVu",
          "ZEdpZnREcmF3UmVxdWVzdBIOCgZnaWZ0SWQYASABKAM6IJiCGYwSkoIZF3Bs",
          "YXllci9mcmllbmQvZ2lmdC9kcmF3ImkKGFNDRnJpZW5kR2lmdERyYXdSZXNw",
          "b25zZRIfCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1cxIlCg1wbGF5",
          "ZXJQcm9wTXNnGAIgAygLMg4uUGxheWVyUHJvcE1zZzoFmIIZjRIiRAoTQ1NG",
          "cmllbmRWaWV3UmVxdWVzdBIQCghmcmllbmRJZBgBIAEoAzobmIIZjhKSghkS",
          "cGxheWVyL2ZyaWVuZC92aWV3IogBChRBY2hpZXZlbWVudEZyaWVuZE1zZxIK",
          "CgJpZBgBIAEoAxIQCghwcm9ncmVzcxgCIAEoBRIUCgxzdWJtaXRTdGF0dXMY",
          "AyABKAUSEgoKZmluaXNoVGltZRgEIAEoAxITCgtmaW5pc2hUaW1lMRgFIAEo",
          "AxITCgtmaW5pc2hUaW1lMhgGIAEoAyKZAQoUU0NGcmllbmRWaWV3UmVzcG9u",
          "c2USHwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXMSKQoPcGxheWVy",
          "RnJpZW5kTXNnGAIgASgLMhAuUGxheWVyRnJpZW5kTXNnEi4KD2FjaGlldmVt",
          "ZW50TXNncxgDIAMoCzIVLkFjaGlldmVtZW50RnJpZW5kTXNnOgWYghmPEiI2",
          "ChVDU0ZyaWVuZFN3aXRjaFJlcXVlc3Q6HZiCGZASkoIZFHBsYXllci9mcmll",
          "bmQvc3dpdGNoIkAKFlNDRnJpZW5kU3dpdGNoUmVzcG9uc2USHwoGc3RhdHVz",
          "GAEgASgLMg8uUmVzcG9uc2VTdGF0dXM6BZiCGZESIjAKFVNDRnJpZW5kQXBw",
          "bHlSZXNwb25zZRIQCghmcmllbmRJZBgBIAEoAzoFmIIZkxIiLgoWU0NGcmll",
          "bmROb3RpY2VSZXNwb25zZRINCgVwb2ludBgBIAEoBToFmIIZlBIicgoSRnJp",
          "ZW5kUmVjb21tZW5kTXNnEgwKBG5hbWUYASABKAkSDAoEYmluZBgCIAEoBRIO",
          "CgZzdGF0dXMYAyABKAUSDQoFbGV2ZWwYBCABKAUSDAoEaWNvbhgFIAEoCRIT",
          "CgtyZWNvbW1lbmRJZBgGIAEoAyJFChxDU0ZyaWVuZFJlY29tbWVuZExpc3RS",
          "ZXF1ZXN0OiWYghmVEpKCGRxwbGF5ZXIvZnJpZW5kL3JlY29tbWVuZC9saXN0",
          "IoEBCh1TQ0ZyaWVuZFJlY29tbWVuZExpc3RSZXNwb25zZRIfCgZzdGF0dXMY",
          "ASABKAsyDy5SZXNwb25zZVN0YXR1cxImCglyZWNvbW1lbmQYAiADKAsyEy5G",
          "cmllbmRSZWNvbW1lbmRNc2cSEAoIdGltZURvd24YAyABKAU6BZiCGZYSIlgK",
          "G0NTRnJpZW5kUmVjb21tZW5kR2V0UmVxdWVzdBITCgtyZWNvbW1lbmRJZBgB",
          "IAEoAzokmIIZlxKSghkbcGxheWVyL2ZyaWVuZC9yZWNvbW1lbmQvZ2V0IqEB",
          "ChxTQ0ZyaWVuZFJlY29tbWVuZEdldFJlc3BvbnNlEh8KBnN0YXR1cxgBIAEo",
          "CzIPLlJlc3BvbnNlU3RhdHVzEikKD3BsYXllckZyaWVuZE1zZxgCIAEoCzIQ",
          "LlBsYXllckZyaWVuZE1zZxIuCg9hY2hpZXZlbWVudE1zZ3MYAyADKAsyFS5B",
          "Y2hpZXZlbWVudEZyaWVuZE1zZzoFmIIZmBIiXAodQ1NGcmllbmRSZWNvbW1l",
          "bmRBcHBseVJlcXVlc3QSEwoLcmVjb21tZW5kSWQYASADKAM6JpiCGZkSkoIZ",
          "HXBsYXllci9mcmllbmQvcmVjb21tZW5kL2FwcGx5Il0KHlNDRnJpZW5kUmVj",
          "b21tZW5kQXBwbHlSZXNwb25zZRIfCgZzdGF0dXMYASABKAsyDy5SZXNwb25z",
          "ZVN0YXR1cxITCgtyZWNvbW1lbmRJZBgCIAMoAzoFmIIZmhIiKwoRQ1NCdWls",
          "ZGluZ0xpc3RSZXE6FpiCGeESkoIZDWJ1aWxkaW5nL2xpc3QiOQoSU0NCdWls",
          "ZGluZ0xpc3RSZXNwEhwKBWluZm9zGAEgAygLMg0uQnVpbGRpbmdJbmZvOgWY",
          "ghniEiIyCgxCdWlsZGluZ0luZm8SEgoKYnVpbGRpbmdJZBgBIAEoAxIOCgZz",
          "dGF0dXMYAiABKAUiQwoTQ1NCdWlsZGluZ1VubG9ja1JlcRISCgpidWlsZGlu",
          "Z0lkGAEgASgDOhiYghnjEpKCGQ9idWlsZGluZy91bmxvY2siWgoUU0NCdWls",
          "ZGluZ1VubG9ja1Jlc3ASJwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNw",
          "b25zZVN0YXR1cxISCgpidWlsZGluZ0lkGAIgASgDOgWYghnkEiI5ChBDU0Nh",
          "blRhc2tSZXF1ZXN0Eg4KBnRhc2tJZBgBIAEoAzoVmIIZuA6SghkMdGFzay9j",
          "YW5UYXNrIjsKEVNDQ2FuVGFza1Jlc3BvbnNlEg8KB2NhblRhc2sYASABKAgS",
          "DgoGdGFza0lkGAIgASgDOgWYghm5DiIpChFTQ3JlY2VpdmVOZXdUaXRsZRIN",
          "CgV0aXRsZRgBIAEoAzoFmIIZug4iWgoRQ1NSZWdHdWVzdFJlcXVlc3QSEAoI",
          "ZGV2aWNlSWQYASABKAkSDgoGb3NUeXBlGAIgASgJEgoKAmFkGAMgASgJOheY",
          "ghmQCJKCGQ5hdXRoL2d1ZXN0L3JlZyJUChJTQ1JlZ0d1ZXN0UmVzcG9uc2US",
          "HwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXMSFgoOZ3Vlc3RfaWRl",
          "bnRpZnkYAiABKAk6BZiCGZEIIkgKFkNTSWRlbnRpZnlDaGVja1JlcXVlc3QS",
          "EAoIaWRlbnRpZnkYASABKAk6HJiCGZQIkoIZE2F1dGgvaWRlbnRpZnkvY2hl",
          "Y2sijgEKF1NDSWRlbnRpZnlDaGVja1JlcHNvbnNlEh8KBnN0YXR1cxgBIAEo",
          "CzIPLlJlc3BvbnNlU3RhdHVzEhMKC2FjY2Vzc1Rva2VuGAIgASgJEhEKCXN0",
          "YXJ0VGltZRgDIAEoAxIQCghkZWFkbGluZRgEIAEoAxIRCgl0aGlyZEJpbmQY",
          "BSABKAU6BZiCGZUIIpcBChBDU0ZCTG9naW5SZXF1ZXN0EhMKC2FjY2Vzc1Rv",
          "a2VuGAEgASgJEgwKBGZiSWQYAiABKAkSEQoJZXhwaXJlc0luGAMgASgDEhAK",
          "CGRldmljZUlkGAQgASgJEhcKBm9zVHlwZRgFIAEoDjIHLk9zVHlwZRIKCgJh",
          "ZBgGIAEoCToWmIIZlgiSghkNYXV0aC9mYi9sb2dpbiJpChFTQ0ZCTG9naW5S",
          "ZXNwb25zZRIfCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1cxIQCghp",
          "ZGVudGlmeRgCIAEoCRIaChJsb25nTGlmZUFjZXNzVG9rZW4YAyABKAk6BZiC",
          "GZcIInAKD0NTRkJCaW5kUmVxdWVzdBIQCghpZGVudGlmeRgBIAEoCRITCgth",
          "Y2Nlc3NUb2tlbhgCIAEoCRIMCgRmYklkGAMgASgJEhEKCWV4cGlyZXNJbhgE",
          "IAEoAzoVmIIZmAiSghkMYXV0aC9mYi9iaW5kIskBChBTQ0ZCQmluZFJlc3Bv",
          "bnNlEh8KBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzEhAKCGlkZW50",
          "aWZ5GAIgASgJEhoKEmxvbmdMaWZlQWNlc3NUb2tlbhgDIAEoCRIVCg1oYXNC",
          "ZWVuQmluZGVkGAQgASgIEgoKAmlkGAUgASgDEgwKBG5hbWUYBiABKAkSDQoF",
          "bGV2ZWwYByABKAUSEQoJY2FzaENvdW50GAggASgFEgwKBGljb24YCSABKAk6",
          "BZiCGZkIIncKHFNDSWRlbnRpZnlDaGVja011aWx0eU1lc3NhZ2USLwoIY29u",
          "dGVudHMYASADKAsyHS5JZGVudGlmeUNoZWNrUmVzcG9uc2VDb250ZW50Eh8K",
          "BnN0YXR1cxgCIAEoCzIPLlJlc3BvbnNlU3RhdHVzOgWYghmaCCI7ChxJZGVu",
          "dGlmeUNoZWNrUmVzcG9uc2VDb250ZW50Eg0KBW1zZ0lkGAEgASgFEgwKBGRh",
          "dGEYAiABKAkiVwoVUGxheWVyUHJvcFNlbGxSZXF1ZXN0EiMKC3BsYXllclBy",
          "b3BzGAEgAygLMg4uUGxheWVyUHJvcE1zZzoZmIIZtwmSghkQcGxheWVyL3By",
          "b3Avc2VsbCJHChZQbGF5ZXJQcm9wU2VsbFJlc3Bvc25lEiYKDXJlcG9uc2VT",
          "dGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1czoFmIIZuAkiRQoJQ1NEcm9w",
          "UmVxEg4KBnByb3BJZBgBIAEoAxINCgVjb3VudBgCIAEoBToZmIIZuQmSghkQ",
          "cGxheWVyL3Byb3AvZHJvcCIxCgpTQ0Ryb3BSZXNwEhwKCWRyb3BJbmZvcxgB",
          "IAMoCzIJLkRyb3BJbmZvOgWYghm6CSI9ChZTQ0F1dG9PcGVuR2lmdERyb3BS",
          "ZXNwEhwKCWRyb3BJbmZvcxgBIAMoCzIJLkRyb3BJbmZvOgWYghm7CSIpCghE",
          "cm9wSW5mbxIOCgZwcm9wSWQYASABKAMSDQoFY291bnQYAiABKAUiQgoTQ1ND",
          "aGF0RmluaXNoUmVxdWVzdBIOCgZjaGF0SWQYASABKAM6G5iCGbMOkoIZEnBs",
          "YXllci9jaGF0L2ZpbmlzaCI+ChRTQ0NoYXRGaW5pc2hSZXNwb25zZRIfCgZz",
          "dGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1czoFmIIZtA4iQQocQ1NHZXRB",
          "bGxSZXdhcmRlZFRhc2tzUmVxdWVzdDohmIIZtQ6SghkYdGFzay9nZXRBbGxS",
          "ZXdhcmRlZFRhc2tzIkYKHVNDR2V0QWxsUmV3YXJkZWRUYXNrc1Jlc3BvbnNl",
          "Eh4KBXRhc2tzGAEgAygLMg8uVGFza0lkVHlwZUluZm86BZiCGbYOIkUKDlRh",
          "c2tJZFR5cGVJbmZvEg4KBnRhc2tJZBgBIAEoAxIRCgljaGFwdGVySWQYAiAB",
          "KAMSEAoIdGFza1R5cGUYAyABKAUiLwoWQ1NQbGF5ZXJDaGVja0luSW5mb1Jl",
          "cToVmIIZ/QqSghkMY2hlY2tpbi9pbmZvIkkKF1NDUGxheWVyQ2hlY2tJbklu",
          "Zm9SZXNwEgoKAmlkGAEgASgDEgsKA2RheRgCIAEoBRIOCgZzdGF0dXMYAyAB",
          "KAU6BZiCGf4KIi4KEkNTUGxheWVyQ2hlY2tJblJlcToYmIIZ/wqSghkPY2hl",
          "Y2tpbi9jaGVja2luIiwKE1NDUGxheWVyQ2hlY2tJblJlc3ASDgoGcmVzdWx0",
          "GAEgASgFOgWYghmACyJHChRDU1BsYXllclJlbmV3SWNvblJlcRIPCgduZXdJ",
          "Y29uGAEgASgJOh6YghmBC5KCGRVwbGF5ZXIvaW5mby9yZW5ld2ljb24iPwoV",
          "U0NQbGF5ZXJSZW5ld0ljb25SZXNwEg4KBnJlc3VsdBgBIAEoBRIPCgduZXdJ",
          "Y29uGAIgASgJOgWYghmCCyKPAQoPU0NQbGF5ZXJVcExldmVsEhAKCG9sZExl",
          "dmVsGAEgASgFEhAKCG5ld0xldmVsGAIgASgFEhwKB3Jld2FyZHMYAyADKAsy",
          "Cy5SZXdhcmRJdGVtEhUKDXVuTG9ja0J1aWxkSWQYBCABKAMSHAoIcHVzaElu",
          "Zm8YBSABKAsyCi5QdXNoX0luZm86BZiCGYMLIjIKFENTUGxheWVyR3VpbGRS",
          "ZXF1ZXN0OhqYghmEC5KCGRFwbGF5ZXIvaW5mby9ndWlsZCItChVTQ1BsYXll",
          "ckd1aWxkUmVzcG9uc2USDQoFZ3VpbGQYASABKAk6BZiCGYULIk0KGkNTUGxh",
          "eWVyR3VpbGRVcGRhdGVSZXF1ZXN0Eg0KBWd1aWxkGAEgASgJOiCYghmGC5KC",
          "GRdwbGF5ZXIvaW5mby9ndWlsZFVwZGF0ZSK3AQoXQ1NQbGF5ZXJGZWVkYmFj",
          "a1JlcXVlc3QSDwoHY29udGVudBgBIAEoCRIQCghwbGF0Zm9ybRgCIAEoCRIP",
          "CgdyZWxlYXNlGAMgASgJEiMKDGZlZWRiYWNrVHlwZRgEIAEoDjINLkZlZWRi",
          "YWNrVHlwZRINCgVlbWFpbBgFIAEoCRITCgtpbmZvcm1hdGlvbhgGIAEoCTof",
          "mIIZxBOSghkWcGxheWVyL2ZlZWRiYWNrL3N1Ym1pdCJvChhTQ1BsYXllckZl",
          "ZWRiYWNrUmVzcG9uc2USHwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0",
          "dXMSGQoRbmV4dEF2YWlsYWJsZVRpbWUYAiABKAMSEAoIdGltZUxlZnQYAyAB",
          "KAU6BZiCGcUTIjAKG1NDQWNoaWV2ZW1lbnRVbmxvY2tSZXNwb25zZRIKCgJp",
          "ZBgBIAEoAzoFmIIZtw4iLwoVU0NBY3Rpdml0eU5ld1Jlc3BvbnNlEg8KB2hh",
          "dmVOZXcYASABKAU6BZiCGecPImgKF0NTU2NlbmVSZWNvbm5lY3RSZXF1ZXN0",
          "Eg8KB3NjZW5lSWQYASABKAMSEQoJc3RhcnRUaW1lGAIgASgDEg8KB2VuZFRp",
          "bWUYAyABKAM6GJiCGdsIkoIZD3NjZW5lL3JlY29ubmVjdCJKChhTQ1NjZW5l",
          "UmVjb25uZWN0UmVzcG9uc2USJwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5S",
          "ZXNwb25zZVN0YXR1czoFmIIZ3AgiRAoUQ1NTY2VuZURpZmZpY3VsdHlSZXES",
          "DgoGYmlnSWRzGAEgAygDOhyYghndCJKCGRNzY2VuZS9nZXREaWZmaWN1bHR5",
          "IkUKE1NjZW5lRGlmZmljdWx0eUluZm8SDQoFYmlnSWQYASABKAMSEgoKZGlm",
          "ZmljdWx0eRgCIAEoBRILCgNleHAYAyABKAUiQwoVU0NTY2VuZURpZmZpY3Vs",
          "dHlSZXNwEiMKBWluZm9zGAEgAygLMhQuU2NlbmVEaWZmaWN1bHR5SW5mbzoF",
          "mIIZ3ggiagoYQ1NKaWdzYXdSZWNvbm5lY3RSZXF1ZXN0Eg8KB3NjZW5lSWQY",
          "ASABKAMSEQoJc3RhcnRUaW1lGAIgASgDEg8KB2VuZFRpbWUYAyABKAM6GZiC",
          "GaMKkoIZEGppZ3Nhdy9yZWNvbm5lY3QiSwoZU0NKaWdzYXdSZWNvbm5lY3RS",
          "ZXNwb25zZRInCg5yZXNwb25zZVN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3Rh",
          "dHVzOgWYghmkCiIvChFTZXJ2aWNlQ29uZmlnSW5mbxILCgNrZXkYASABKAkS",
          "DQoFdmFsdWUYAiABKAkiOgoZQ1NHZXRTZXJ2aWNlQ29uZmlnUmVxdWVzdDod",
          "mIIZmxKSghkUc3lzL2dldFNlcnZpY2VDb25maWciRQoaU0NHZXRTZXJ2aWNl",
          "Q29uZmlnUmVzcG9uc2USIAoEaW5mbxgBIAMoCzISLlNlcnZpY2VDb25maWdJ",
          "bmZvOgWYghmcEiJTCh9DU0dldFNlcnZpY2VDb25maWdTaW5nbGVSZXF1ZXN0",
          "EgsKA2tleRgBIAEoCTojmIIZnRKSghkac3lzL2dldFNpbmdsZVNlcnZpY2VD",
          "b25maWciOAogU0NHZXRTZXJ2aWNlQ29uZmlnU2luZ2xlUmVzcG9uc2USDQoF",
          "dmFsdWUYASABKAk6BZiCGZ4SIlYKC0dldFBhdGhJbmZvEgoKAmlkGAEgASgD",
          "EgwKBHBhdGgYAiABKAkSDgoGc3RhdHVzGAMgASgFEg8KB3ZlcnNpb24YBCAB",
          "KAkSDAoEcGxhdBgFIAEoCSI5ChZDU0dldFBhdGhDb25maWdSZXF1ZXN0EgwK",
          "BHBsYXQYASABKAk6EZiCGZ8SkoIZCHN5cy9wYXRoIj0KF1NDR2V0UGF0aENv",
          "bmZpZ1Jlc3BvbnNlEhsKBWluZm9zGAEgASgLMgwuR2V0UGF0aEluZm86BZiC",
          "GaASInUKEkNTQ2xpZW50TG9nUmVxdWVzdBISCgpldmVudF9uYW1lGAEgASgJ",
          "EhEKCXZhbHVlNHN1bRgCIAEoAhIOCgZwYXJhbXMYAyABKAkSEAoIcGxheWVy",
          "SWQYBCABKAM6FpiCGaESkoIZDXN5cy9jbGllbnRMb2cicQoTU2NlbmVSZXdh",
          "cmRDb21wcmlzZRIMCgR0eXBlGAEgASgFEhIKCm91dHB1dENvaW4YAiABKAUS",
          "EgoKb3V0cHV0Q2FzaBgDIAEoBRIRCglvdXRwdXRWaXQYBCABKAUSEQoJb3V0",
          "cHV0RXhwGAUgASgFIkkKCVB1c2hfSW5mbxIMCgR0eXBlGAEgASgFEg4KBnB1",
          "c2hJZBgCIAEoAxIPCgdlbmRUaW1lGAMgASgDEg0KBWJ1eWVkGAQgASgIIikK",
          "EENTR2V0UHVzaFJlcXVlc3Q6FZiCGfEVkoIZDHB1c2gvZ2V0UHVzaCI1ChFT",
          "Q0dldFB1c2hSZXNwb25zZRIZCgVpbmZvcxgBIAMoCzIKLlB1c2hfSW5mbzoF",
          "mIIZ8hUiOQoQQ1NCdXlQdXNoUmVxdWVzdBIOCgZwdXNoSWQYASABKAM6FZiC",
          "GfMVkoIZDHB1c2gvYnV5UHVzaCJSChFTQ0J1eVB1c2hSZXNwb25zZRIOCgZw",
          "dXNoSWQYASABKAMSJgoNcmVwb25zZVN0YXR1cxgCIAEoCzIPLlJlc3BvbnNl",
          "U3RhdHVzOgWYghn0FSItChRDU0NvbWJpbmVJbmZvUmVxdWVzdDoVmIIZ7QuS",
          "ghkMY29tYmluZS9saXN0IlQKFVNDQ29tYmluZUluZm9SZXNwb25zZRIRCglj",
          "b21iaW5lSWQYASADKAMSDQoFY291bnQYAiADKAUSEgoKY291bnRMaW1pdBgD",
          "IAMoBToFmIIZ7gsiOgoQQ1NDb21iaW5lUmVxdWVzdBIRCgljb21iaW5lSWQY",
          "ASABKAM6E5iCGe8LkoIZCmNvbWJpbmUvZG8iTAoRU0NDb21iaW5lUmVzcG9u",
          "c2USHwoGcmVzdWx0GAEgASgLMg8uUmVzcG9uc2VTdGF0dXMSDwoHc3VjY2Vz",
          "cxgCIAEoCDoFmIIZ8AsqKwoMSW5Pck91dFNjZW5lEg0KCU9VVF9TQ0VORRAA",
          "EgwKCElOX1NDRU5FEAEqPgoIQ2F0ZWdvcnkSCAoEQ0FTSBAAEggKBENPSU4Q",
          "ARIHCgNWSVQQAhIKCgZDT01NT04QAxIJCgVCTEFDSxAEKjkKCENvc3RUeXBl",
          "Eg0KCUNPU1RfQ0FTSBAAEg0KCUNPU1RfQ09JThABEg8KC0NPU1RfRE9MTEFS",
          "EAIqQwoNRnJpZW5kUmVxVHlwZRIMCghBUFBMWUlORxAAEgwKCEFHUkVFSU5H",
          "EAESCwoHQURESU5GTxACEgkKBUFEREVEEAMqJwoGT3NUeXBlEgcKA2lvcxAA",
          "EgsKB2FuZG9yaWQQARIHCgN3ZWIQAioXCgxGZWVkYmFja1R5cGUSBwoDQUxM",
          "EABCJgofY29tLmZvdG9hYmxlLmNvbmFuLmNvbW1vbi5wcm90b0IDTXNnYgZw",
          "cm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::OptionsReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::InOrOutScene), typeof(global::Category), typeof(global::CostType), typeof(global::FriendReqType), typeof(global::OsType), typeof(global::FeedbackType), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ExceptionResponse), global::ExceptionResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExceptionRemoteLoginResponse), global::ExceptionRemoteLoginResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ResponseStatus), global::ResponseStatus.Parser, new[]{ "Code", "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GmAddAttr), global::GmAddAttr.Parser, new[]{ "PlayerId", "Count", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GmAddProp), global::GmAddProp.Parser, new[]{ "PlayerId", "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GmFinishTask), global::GmFinishTask.Parser, new[]{ "PlayerId", "ChapterId", "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GmOfficer), global::GmOfficer.Parser, new[]{ "PlayerId", "OfficerId", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GMGetPlayerMessageRequest), global::GMGetPlayerMessageRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GMGetPlayerMessageResponse), global::GMGetPlayerMessageResponse.Parser, new[]{ "Message" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEnterRequest), global::CSEnterRequest.Parser, new[]{ "PlayerId", "SceneId", "OfficerIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEnterResponse), global::SCEnterResponse.Parser, new[]{ "Result", "VitConsume", "Seconds", "Fragments", "OfficerIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSQuitRequest), global::CSQuitRequest.Parser, new[]{ "PlayerId", "SceneId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCQuitResponse), global::SCQuitResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSuspendRequest), global::CSSuspendRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSuspendResponse), global::SCSuspendResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSResumeRequest), global::CSResumeRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCResumeResponse), global::SCResumeResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSStartRequest), global::CSStartRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCStartResponse), global::SCStartResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFinishRequest), global::CSFinishRequest.Parser, new[]{ "SceneId", "Result", "RestTime", "AllTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFinishResponse), global::SCFinishResponse.Parser, new[]{ "Result", "SceneId", "PropId", "Rewards", "JigsawState", "SceneRewardComprise" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Reward), global::Reward.Parser, new[]{ "Percent", "Type", "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSRegRequest), global::CSRegRequest.Parser, new[]{ "Username", "Pwd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCRegResponse), global::SCRegResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSAuthRequest), global::CSAuthRequest.Parser, new[]{ "Username", "Pwd" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCAuthResponse), global::SCAuthResponse.Parser, new[]{ "Result", "AccessToken", "Username" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSloginRequest), global::CSloginRequest.Parser, new[]{ "Username", "Pwd", "Platform", "Nickname" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCloginResponse), global::SCloginResponse.Parser, new[]{ "Result", "PlayerId", "PlayerName", "PlayerIcon", "Coin", "Cash", "Vit", "Level", "Exp", "LaborUnion", "UpgradeExp", "ExpMultiple", "Platform", "Nickname", "AccessToken", "LastAddVitTime", "MillisRecoverOneVit", "HasRenamed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSChapterListRequest), global::CSChapterListRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCChapterListResponse), global::SCChapterListResponse.Parser, new[]{ "Chapters" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerChapterInfo), global::PlayerChapterInfo.Parser, new[]{ "PlayerChapterId", "ChapterId", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSChapterDetailRequest), global::CSChapterDetailRequest.Parser, new[]{ "PlayerChapterId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCChapterDetailResponse), global::SCChapterDetailResponse.Parser, new[]{ "PlayerChapterId", "ChapterId", "Status", "Npcs", "Clues", "Scenes", "Tasks" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterNpcInfo), global::ChapterNpcInfo.Parser, new[]{ "NpcId", "Status", "DialogueId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterClueInfo), global::ChapterClueInfo.Parser, new[]{ "ClueId", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterSceneInfo), global::ChapterSceneInfo.Parser, new[]{ "SceneId", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ChapterTaskInfo), global::ChapterTaskInfo.Parser, new[]{ "TaskId", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCClueUnlockNotice), global::SCClueUnlockNotice.Parser, new[]{ "PlayerChapterId", "ChapterId", "ClueId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCNpcUnLockNotice), global::SCNpcUnLockNotice.Parser, new[]{ "PlayerChapterId", "ChapterId", "NpcId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneUnLockNotice), global::SCSceneUnLockNotice.Parser, new[]{ "PlayerChapterId", "ChapterId", "SceneId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCChapterTaskStatusChangeNotice), global::SCChapterTaskStatusChangeNotice.Parser, new[]{ "PlayerChapterId", "ChapterId", "TaskId", "NewStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCChapterStatusChangeNotice), global::SCChapterStatusChangeNotice.Parser, new[]{ "PlayerChapterId", "ChapterId", "NewStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCChapterRedNotice), global::SCChapterRedNotice.Parser, new[]{ "Reds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSClearChapterRedRequest), global::CSClearChapterRedRequest.Parser, new[]{ "ClearType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneEnterRequest), global::CSSceneEnterRequest.Parser, new[]{ "PlayerId", "SceneId", "OfficerIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneEnterResponse), global::SCSceneEnterResponse.Parser, new[]{ "ResponseStatus", "SceneExhibits", "TaskExhibits", "VitConsume", "Seconds", "OfficerIds", "IsDropScene", "DropItems", "MultiId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneRewardRequest), global::CSSceneRewardRequest.Parser, new[]{ "PlayerId", "SceneId", "Result", "CostTime", "UseClickCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneRewardResponse), global::SCSceneRewardResponse.Parser, new[]{ "ResponseStatus", "SceneId", "OutputCoin", "OutputCash", "OutputVit", "OutputExp", "GiftItems", "SceneRewardComprise", "Difficulty", "Exp", "UpLevelRewards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GiftItem), global::GiftItem.Parser, new[]{ "ItemId", "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneQuitRequest), global::CSSceneQuitRequest.Parser, new[]{ "PlayerId", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneQuitResponse), global::SCSceneQuitResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneSuspendRequest), global::CSSceneSuspendRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneSuspendResponse), global::SCSceneSuspendResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneResumeRequest), global::CSSceneResumeRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneResumeResponse), global::SCSceneResumeResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneStartRequest), global::CSSceneStartRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneStartResponse), global::SCSceneStartResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSearchSceneSelectOfficerReq), global::CSSearchSceneSelectOfficerReq.Parser, new[]{ "OfficerIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSearchSceneSelectOfficerResp), global::SCSearchSceneSelectOfficerResp.Parser, new[]{ "VitConsume", "CostSeconds", "ResponseStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSBuyItemRequest), global::CSBuyItemRequest.Parser, new[]{ "PlayerId", "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCBuyItemResponse), global::SCBuyItemResponse.Parser, new[]{ "PropId", "Count", "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPropMsg), global::PlayerPropMsg.Parser, new[]{ "PropId", "Count", "ExpireTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerPropRequest), global::CSPlayerPropRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerPropResponse), global::SCPlayerPropResponse.Parser, new[]{ "ReponseStatus", "PlayerProps", "RecentProps" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerPropRecentRequest), global::CSPlayerPropRecentRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerPropRecentResposne), global::SCPlayerPropRecentResposne.Parser, new[]{ "ReponseStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ReponseStatus), global::ReponseStatus.Parser, new[]{ "Code", "Msg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerInfoRequest), global::CSPlayerInfoRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerInfoResponse), global::SCPlayerInfoResponse.Parser, new[]{ "PlayerId", "PlayerName", "PlayerIcon", "Coin", "Cash", "Vit", "Level", "Exp", "LaborUnion", "UpgradeExp", "ExpMultiple", "LastAddVitTime", "MillisRecoverOneVit", "HasRenamed", "InfiniteVitRestTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSRenameRequest), global::CSRenameRequest.Parser, new[]{ "PlayerId", "NewName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCRenameResponse), global::SCRenameResponse.Parser, new[]{ "PlayerId", "Result", "NewName" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSOfficerListRequest), global::CSOfficerListRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCOfficerListResponse), global::SCOfficerListResponse.Parser, new[]{ "PlayerId", "Officers" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OfficerInfo), global::OfficerInfo.Parser, new[]{ "PlayerOfficerId", "OfficerId", "Level", "Outsight", "WillPower", "Attention", "Memory", "VitConsume", "SecondGain" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSOfficerInfoRequest), global::CSOfficerInfoRequest.Parser, new[]{ "PlayerId", "PlayerOfficerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCOfficerInfoResponse), global::SCOfficerInfoResponse.Parser, new[]{ "Office" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEventPhaseFeedbackRequest), global::CSEventPhaseFeedbackRequest.Parser, new[]{ "EventId", "PlayerOfficerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEventPhaseFeedbackResponse), global::SCEventPhaseFeedbackResponse.Parser, new[]{ "ResponseStatus", "Valuation", "TotalScore", "PhaseInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PhaseInfo), global::PhaseInfo.Parser, new[]{ "PhaseId", "OfficerTemplateId", "PhaseScore", "OfficerScore", "Perfect", "PerfectScore", "PhaseTemplateId", "MatchWordScoreInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MatchWordScoreInfo), global::MatchWordScoreInfo.Parser, new[]{ "KeyWordId", "KeyWordMatchScore" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEventRewardRequest), global::CSEventRewardRequest.Parser, new[]{ "PlayerId", "EventId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEventRewardResponse), global::SCEventRewardResponse.Parser, new[]{ "ResponseStatus", "Score", "Valuation", "Rewards", "Exp", "Vit", "Coin", "Cash", "SceneRewardComprise" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RewardItem), global::RewardItem.Parser, new[]{ "PropId", "Num" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSOfficerCombineRequest), global::CSOfficerCombineRequest.Parser, new[]{ "PlayerId", "OfficerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCOfficerCombineResponse), global::SCOfficerCombineResponse.Parser, new[]{ "Result", "OfficeId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSOfficerUpdateRequest), global::CSOfficerUpdateRequest.Parser, new[]{ "PlayerId", "PlayerOfficerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCOfficerUpdateResponse), global::SCOfficerUpdateResponse.Parser, new[]{ "Result", "OfficeId", "Level" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEventEnterRequest), global::CSEventEnterRequest.Parser, new[]{ "PlayerId", "EventId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEventEnterResponse), global::SCEventEnterResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEventDropInfoRequest), global::CSEventDropInfoRequest.Parser, new[]{ "EventId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEventDropInfoResponse), global::SCEventDropInfoResponse.Parser, new[]{ "PerfectProps", "NormalProps", "EventId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EventDropInfo), global::EventDropInfo.Parser, new[]{ "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSkillEmitRequest), global::CSSkillEmitRequest.Parser, new[]{ "PropId", "Count", "InOrOutScene" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSkillEmitResponse), global::SCSkillEmitResponse.Parser, new[]{ "Result", "SkillId", "PropId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSkillTimerEmitReq), global::CSSkillTimerEmitReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSkillTimerEmitResp), global::SCSkillTimerEmitResp.Parser, new[]{ "Result", "SkillId", "PlayerOfficerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSReasoningRewardReq), global::CSReasoningRewardReq.Parser, new[]{ "ReasoningId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFindEnterReq), global::CSFindEnterReq.Parser, new[]{ "FindId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFindEnterResp), global::SCFindEnterResp.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFindRewardReq), global::CSFindRewardReq.Parser, new[]{ "FindId", "Result", "FoundNum", "TotalNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFindRewardResp), global::SCFindRewardResp.Parser, new[]{ "ResponseStatus", "Vit", "SceneRewardComprise" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSkyEyeRewardReq), global::CSSkyEyeRewardReq.Parser, new[]{ "SkyEyeId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSkyEyeRewardReq), global::SCSkyEyeRewardReq.Parser, new[]{ "SkyEyeId", "ResponseStatus", "Items" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSkyEyeReq), global::CSSkyEyeReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSkyEyeReq), global::SCSkyEyeReq.Parser, new[]{ "HasRewarded" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DiscountInfo), global::DiscountInfo.Parser, new[]{ "DiscountCost", "Discount", "DiscountStart", "DiscountEnd", "DiscountIcon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarketItemMsg), global::MarketItemMsg.Parser, new[]{ "Id", "SellId", "SellCount", "CostType", "Cost", "BuyLimit", "DiscountInfo", "MaxLimit" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarketBlack), global::MarketBlack.Parser, new[]{ "Id", "LastUpdateTime", "NextUpdateTime", "FreshCost", "FreshLimit" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarketRequest), global::MarketRequest.Parser, new[]{ "Category" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarketResponse), global::MarketResponse.Parser, new[]{ "ResponseStatus", "MarketItems", "MarketBlack", "Category" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarkeBuyRequest), global::MarkeBuyRequest.Parser, new[]{ "MarketItemId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarkeBuyResponse), global::MarkeBuyResponse.Parser, new[]{ "ResponseStatus", "Props" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSMarketItemRequest), global::CSMarketItemRequest.Parser, new[]{ "PropId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCMarketItemResponse), global::SCMarketItemResponse.Parser, new[]{ "ResponseStatus", "MarketItems" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarkeFreshRequest), global::MarkeFreshRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MarkeFreshResponse), global::MarkeFreshResponse.Parser, new[]{ "ResponseStatus", "PlayerBaseInfo", "MarketBlack", "MarketItems" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerBaseInfo), global::PlayerBaseInfo.Parser, new[]{ "Coin", "Cash" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSNoticeListRequest), global::CSNoticeListRequest.Parser, new[]{ "Id", "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCNoticeListResponse), global::SCNoticeListResponse.Parser, new[]{ "Notices" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::NoticeInfo), global::NoticeInfo.Parser, new[]{ "Id", "Type", "Picture", "Title", "Content", "LevelLimit", "StartTime", "EndTime", "UpdateTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPingRequest), global::CSPingRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPingResponse), global::SCPingResponse.Parser, new[]{ "Count", "Content" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PingResponseContent), global::PingResponseContent.Parser, new[]{ "MsgId", "Data", "IsEmpty" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSMessageRequest), global::CSMessageRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LottoItemProto), global::LottoItemProto.Parser, new[]{ "PropId", "Count", "Special", "Lucky", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LottoRequest), global::LottoRequest.Parser, new[]{ "CostType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LottoResponse), global::LottoResponse.Parser, new[]{ "ResponseStatus", "CostType", "CostValue", "LottoId", "Items", "Lucky" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LottoBuyRequest), global::LottoBuyRequest.Parser, new[]{ "LottoId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LottoBuyResponse), global::LottoBuyResponse.Parser, new[]{ "ResponseStatus", "Props", "Id", "LottoCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGooglePayChargeRequest), global::CSGooglePayChargeRequest.Parser, new[]{ "JsonData", "Signature", "ProductId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCGooglePayChargeResponse), global::SCGooglePayChargeResponse.Parser, new[]{ "ResponseStatus", "ProductId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSIOSPayChargeRequest), global::CSIOSPayChargeRequest.Parser, new[]{ "JsonData", "ProductId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCIOSPayChargeResponse), global::SCIOSPayChargeResponse.Parser, new[]{ "ResponseStatus", "ProductId", "JsonData" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCAcceptTaskNotice), global::SCAcceptTaskNotice.Parser, new[]{ "AcceptTasks" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AcceptTaskInfo), global::AcceptTaskInfo.Parser, new[]{ "TaskId", "PlayerTaskId", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTaskListRequest), global::CSTaskListRequest.Parser, new[]{ "Type", "TaskIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTaskListResponse), global::SCTaskListResponse.Parser, new[]{ "TaskInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaskInfo), global::TaskInfo.Parser, new[]{ "PlayerTaskId", "TaskId", "Status", "Level", "PropProgresss", "DialogueProgress", "EventProgress", "SceneProgress", "ExhibitProgress" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaskPropProgress), global::TaskPropProgress.Parser, new[]{ "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaskExhibitProgress), global::TaskExhibitProgress.Parser, new[]{ "ExhibitId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTaskCommitRequest), global::CSTaskCommitRequest.Parser, new[]{ "PlayerTaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTaskCommitResponse), global::SCTaskCommitResponse.Parser, new[]{ "Result", "Coin", "Cash", "Vit", "Exp", "TitleId", "PropRewards", "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaskPropReward), global::TaskPropReward.Parser, new[]{ "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTaskStatusChangeNotice), global::SCTaskStatusChangeNotice.Parser, new[]{ "PlayerTaskId", "TaskId", "Status", "TaskInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTriggerTaskActiveRequest), global::CSTriggerTaskActiveRequest.Parser, new[]{ "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTriggerTaskActiveResponse), global::SCTriggerTaskActiveResponse.Parser, new[]{ "Result", "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTaskIdListRequest), global::CSTaskIdListRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTaskIdListResponse), global::SCTaskIdListResponse.Parser, new[]{ "TaskIdInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaskIdInfo), global::TaskIdInfo.Parser, new[]{ "PlayerTaskId", "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSAchievementRequest), global::CSAchievementRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AchievementMsg), global::AchievementMsg.Parser, new[]{ "Id", "Progress", "SubmitStatus", "FinishTime", "FinishTime1", "FinishTime2" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCAchievementResponse), global::SCAchievementResponse.Parser, new[]{ "Status", "Achievements", "TotalCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSAchievementSubmitRequest), global::CSAchievementSubmitRequest.Parser, new[]{ "Id", "Stage" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCAchievementSubmitResponse), global::SCAchievementSubmitResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSActivityBaseListRequest), global::CSActivityBaseListRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCActivityBaseListResponse), global::SCActivityBaseListResponse.Parser, new[]{ "BaseInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActivityBaseInfo), global::ActivityBaseInfo.Parser, new[]{ "Id", "Type", "Icon", "Descs", "TargetType", "TargetPrefab", "WarmupTime", "StartTime", "EndTime", "Stage", "TimeType", "Days", "PersonalBeginTime", "PersonalEndTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PropItem), global::PropItem.Parser, new[]{ "Id", "Num", "HasNum" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSActivityRequest), global::CSActivityRequest.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCActivityDropResponse), global::SCActivityDropResponse.Parser, new[]{ "Id", "Description", "BackgroundSource", "WarmupSource", "Rewardid", "Items", "SceneId", "Stage", "HasReward", "Name", "CollectDes", "SceneDes", "RewardSource", "Tips" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSActivityRewardRequest), global::CSActivityRewardRequest.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCActivityRewardResponse), global::SCActivityRewardResponse.Parser, new[]{ "ResponseStatus", "Items" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSCartoonEnterRequest), global::CSCartoonEnterRequest.Parser, new[]{ "SceneId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCCartoonEnterResponse), global::SCCartoonEnterResponse.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSCartoonRewardRequest), global::CSCartoonRewardRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCCartoonRewardReqsponse), global::SCCartoonRewardReqsponse.Parser, new[]{ "Cash", "Coin", "Exp", "Vit", "SceneRewardComprise" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSCartoonQuitRequest), global::CSCartoonQuitRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEmailListRequest), global::CSEmailListRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEmailListResponse), global::SCEmailListResponse.Parser, new[]{ "Emails" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EmailInfo), global::EmailInfo.Parser, new[]{ "Id", "Type", "Status", "Title", "Content", "ReceiveTime", "Deadline", "Rewards" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EmailReward), global::EmailReward.Parser, new[]{ "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEmailRewardRequest), global::CSEmailRewardRequest.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEmailRewardResponse), global::SCEmailRewardResponse.Parser, new[]{ "Result", "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSEmailReadRequest), global::CSEmailReadRequest.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCEmailChangeNotice), global::SCEmailChangeNotice.Parser, new[]{ "SwitchTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TitleMsg), global::TitleMsg.Parser, new[]{ "TitleId", "Deadline", "GetTime", "Active" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTitleRequest), global::CSTitleRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTitleResponse), global::SCTitleResponse.Parser, new[]{ "Status", "Titles" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTitleActiveRequest), global::CSTitleActiveRequest.Parser, new[]{ "TitleId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTitleActiveResponse), global::SCTitleActiveResponse.Parser, new[]{ "Status", "Title" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSTitleGetRequest), global::CSTitleGetRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCTitleGetResponse), global::SCTitleGetResponse.Parser, new[]{ "Status", "Title" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerFriendMsg), global::PlayerFriendMsg.Parser, new[]{ "PlayerId", "Name", "Level", "Gender", "Icon", "TitleId", "Gift", "StatusTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendRequest), global::CSFriendRequest.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendResponse), global::SCFriendResponse.Parser, new[]{ "Status", "Friends", "Limit", "Total", "GiftCountLeft", "Type", "LastAgree", "AddSwitch" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendAddRequest), global::CSFriendAddRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendAddResponse), global::SCFriendAddResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendDelRequest), global::CSFriendDelRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendDelResponse), global::SCFriendDelResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendAgreeRequest), global::CSFriendAgreeRequest.Parser, new[]{ "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendAgreeResponse), global::SCFriendAgreeResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendDelApplyRequest), global::CSFriendDelApplyRequest.Parser, new[]{ "FriendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendDelApplyResponse), global::SCFriendDelApplyResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendGiftRequest), global::CSFriendGiftRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FriendGift), global::FriendGift.Parser, new[]{ "PlayerFriends", "PlayPropMsg", "GiftId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendGiftResponse), global::SCFriendGiftResponse.Parser, new[]{ "Status", "FriendGiftLists", "Limit", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendGiftSendRequest), global::CSFriendGiftSendRequest.Parser, new[]{ "FriendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendGiftSendResponse), global::SCFriendGiftSendResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendGiftDrawRequest), global::CSFriendGiftDrawRequest.Parser, new[]{ "GiftId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendGiftDrawResponse), global::SCFriendGiftDrawResponse.Parser, new[]{ "Status", "PlayerPropMsg" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendViewRequest), global::CSFriendViewRequest.Parser, new[]{ "FriendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AchievementFriendMsg), global::AchievementFriendMsg.Parser, new[]{ "Id", "Progress", "SubmitStatus", "FinishTime", "FinishTime1", "FinishTime2" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendViewResponse), global::SCFriendViewResponse.Parser, new[]{ "Status", "PlayerFriendMsg", "AchievementMsgs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendSwitchRequest), global::CSFriendSwitchRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendSwitchResponse), global::SCFriendSwitchResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendApplyResponse), global::SCFriendApplyResponse.Parser, new[]{ "FriendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendNoticeResponse), global::SCFriendNoticeResponse.Parser, new[]{ "Point" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FriendRecommendMsg), global::FriendRecommendMsg.Parser, new[]{ "Name", "Bind", "Status", "Level", "Icon", "RecommendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendRecommendListRequest), global::CSFriendRecommendListRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendRecommendListResponse), global::SCFriendRecommendListResponse.Parser, new[]{ "Status", "Recommend", "TimeDown" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendRecommendGetRequest), global::CSFriendRecommendGetRequest.Parser, new[]{ "RecommendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendRecommendGetResponse), global::SCFriendRecommendGetResponse.Parser, new[]{ "Status", "PlayerFriendMsg", "AchievementMsgs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFriendRecommendApplyRequest), global::CSFriendRecommendApplyRequest.Parser, new[]{ "RecommendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFriendRecommendApplyResponse), global::SCFriendRecommendApplyResponse.Parser, new[]{ "Status", "RecommendId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSBuildingListReq), global::CSBuildingListReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCBuildingListResp), global::SCBuildingListResp.Parser, new[]{ "Infos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BuildingInfo), global::BuildingInfo.Parser, new[]{ "BuildingId", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSBuildingUnlockReq), global::CSBuildingUnlockReq.Parser, new[]{ "BuildingId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCBuildingUnlockResp), global::SCBuildingUnlockResp.Parser, new[]{ "ResponseStatus", "BuildingId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSCanTaskRequest), global::CSCanTaskRequest.Parser, new[]{ "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCCanTaskResponse), global::SCCanTaskResponse.Parser, new[]{ "CanTask", "TaskId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCreceiveNewTitle), global::SCreceiveNewTitle.Parser, new[]{ "Title" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSRegGuestRequest), global::CSRegGuestRequest.Parser, new[]{ "DeviceId", "OsType", "Ad" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCRegGuestResponse), global::SCRegGuestResponse.Parser, new[]{ "Status", "GuestIdentify" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSIdentifyCheckRequest), global::CSIdentifyCheckRequest.Parser, new[]{ "Identify" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCIdentifyCheckRepsonse), global::SCIdentifyCheckRepsonse.Parser, new[]{ "Status", "AccessToken", "StartTime", "Deadline", "ThirdBind" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFBLoginRequest), global::CSFBLoginRequest.Parser, new[]{ "AccessToken", "FbId", "ExpiresIn", "DeviceId", "OsType", "Ad" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFBLoginResponse), global::SCFBLoginResponse.Parser, new[]{ "Status", "Identify", "LongLifeAcessToken" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSFBBindRequest), global::CSFBBindRequest.Parser, new[]{ "Identify", "AccessToken", "FbId", "ExpiresIn" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCFBBindResponse), global::SCFBBindResponse.Parser, new[]{ "Status", "Identify", "LongLifeAcessToken", "HasBeenBinded", "Id", "Name", "Level", "CashCount", "Icon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCIdentifyCheckMuiltyMessage), global::SCIdentifyCheckMuiltyMessage.Parser, new[]{ "Contents", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::IdentifyCheckResponseContent), global::IdentifyCheckResponseContent.Parser, new[]{ "MsgId", "Data" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPropSellRequest), global::PlayerPropSellRequest.Parser, new[]{ "PlayerProps" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerPropSellResposne), global::PlayerPropSellResposne.Parser, new[]{ "ReponseStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSDropReq), global::CSDropReq.Parser, new[]{ "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCDropResp), global::SCDropResp.Parser, new[]{ "DropInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCAutoOpenGiftDropResp), global::SCAutoOpenGiftDropResp.Parser, new[]{ "DropInfos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DropInfo), global::DropInfo.Parser, new[]{ "PropId", "Count" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSChatFinishRequest), global::CSChatFinishRequest.Parser, new[]{ "ChatId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCChatFinishResponse), global::SCChatFinishResponse.Parser, new[]{ "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGetAllRewardedTasksRequest), global::CSGetAllRewardedTasksRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCGetAllRewardedTasksResponse), global::SCGetAllRewardedTasksResponse.Parser, new[]{ "Tasks" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TaskIdTypeInfo), global::TaskIdTypeInfo.Parser, new[]{ "TaskId", "ChapterId", "TaskType" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerCheckInInfoReq), global::CSPlayerCheckInInfoReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerCheckInInfoResp), global::SCPlayerCheckInInfoResp.Parser, new[]{ "Id", "Day", "Status" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerCheckInReq), global::CSPlayerCheckInReq.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerCheckInResp), global::SCPlayerCheckInResp.Parser, new[]{ "Result" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerRenewIconReq), global::CSPlayerRenewIconReq.Parser, new[]{ "NewIcon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerRenewIconResp), global::SCPlayerRenewIconResp.Parser, new[]{ "Result", "NewIcon" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerUpLevel), global::SCPlayerUpLevel.Parser, new[]{ "OldLevel", "NewLevel", "Rewards", "UnLockBuildId", "PushInfo" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerGuildRequest), global::CSPlayerGuildRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerGuildResponse), global::SCPlayerGuildResponse.Parser, new[]{ "Guild" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerGuildUpdateRequest), global::CSPlayerGuildUpdateRequest.Parser, new[]{ "Guild" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSPlayerFeedbackRequest), global::CSPlayerFeedbackRequest.Parser, new[]{ "Content", "Platform", "Release", "FeedbackType", "Email", "Information" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCPlayerFeedbackResponse), global::SCPlayerFeedbackResponse.Parser, new[]{ "Status", "NextAvailableTime", "TimeLeft" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCAchievementUnlockResponse), global::SCAchievementUnlockResponse.Parser, new[]{ "Id" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCActivityNewResponse), global::SCActivityNewResponse.Parser, new[]{ "HaveNew" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneReconnectRequest), global::CSSceneReconnectRequest.Parser, new[]{ "SceneId", "StartTime", "EndTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneReconnectResponse), global::SCSceneReconnectResponse.Parser, new[]{ "ResponseStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSSceneDifficultyReq), global::CSSceneDifficultyReq.Parser, new[]{ "BigIds" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneDifficultyInfo), global::SceneDifficultyInfo.Parser, new[]{ "BigId", "Difficulty", "Exp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCSceneDifficultyResp), global::SCSceneDifficultyResp.Parser, new[]{ "Infos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSJigsawReconnectRequest), global::CSJigsawReconnectRequest.Parser, new[]{ "SceneId", "StartTime", "EndTime" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCJigsawReconnectResponse), global::SCJigsawReconnectResponse.Parser, new[]{ "ResponseStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServiceConfigInfo), global::ServiceConfigInfo.Parser, new[]{ "Key", "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGetServiceConfigRequest), global::CSGetServiceConfigRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCGetServiceConfigResponse), global::SCGetServiceConfigResponse.Parser, new[]{ "Info" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGetServiceConfigSingleRequest), global::CSGetServiceConfigSingleRequest.Parser, new[]{ "Key" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCGetServiceConfigSingleResponse), global::SCGetServiceConfigSingleResponse.Parser, new[]{ "Value" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetPathInfo), global::GetPathInfo.Parser, new[]{ "Id", "Path", "Status", "Version", "Plat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGetPathConfigRequest), global::CSGetPathConfigRequest.Parser, new[]{ "Plat" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCGetPathConfigResponse), global::SCGetPathConfigResponse.Parser, new[]{ "Infos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSClientLogRequest), global::CSClientLogRequest.Parser, new[]{ "EventName", "Value4Sum", "Params", "PlayerId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneRewardComprise), global::SceneRewardComprise.Parser, new[]{ "Type", "OutputCoin", "OutputCash", "OutputVit", "OutputExp" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Push_Info), global::Push_Info.Parser, new[]{ "Type", "PushId", "EndTime", "Buyed" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSGetPushRequest), global::CSGetPushRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCGetPushResponse), global::SCGetPushResponse.Parser, new[]{ "Infos" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSBuyPushRequest), global::CSBuyPushRequest.Parser, new[]{ "PushId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCBuyPushResponse), global::SCBuyPushResponse.Parser, new[]{ "PushId", "ReponseStatus" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSCombineInfoRequest), global::CSCombineInfoRequest.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCCombineInfoResponse), global::SCCombineInfoResponse.Parser, new[]{ "CombineId", "Count", "CountLimit" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CSCombineRequest), global::CSCombineRequest.Parser, new[]{ "CombineId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SCCombineResponse), global::SCCombineResponse.Parser, new[]{ "Result", "Success" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
///技能start
/// </summary>
public enum InOrOutScene {
  /// <summary>
  ///局外
  /// </summary>
  [pbr::OriginalName("OUT_SCENE")] OutScene = 0,
  /// <summary>
  ///局内	
  /// </summary>
  [pbr::OriginalName("IN_SCENE")] InScene = 1,
}

public enum Category {
  /// <summary>
  /// 纸钞
  /// </summary>
  [pbr::OriginalName("CASH")] Cash = 0,
  /// <summary>
  ///金币
  /// </summary>
  [pbr::OriginalName("COIN")] Coin = 1,
  /// <summary>
  ///体力
  /// </summary>
  [pbr::OriginalName("VIT")] Vit = 2,
  [pbr::OriginalName("COMMON")] Common = 3,
  [pbr::OriginalName("BLACK")] Black = 4,
}

public enum CostType {
  /// <summary>
  /// 纸钞
  /// </summary>
  [pbr::OriginalName("COST_CASH")] CostCash = 0,
  /// <summary>
  ///金币
  /// </summary>
  [pbr::OriginalName("COST_COIN")] CostCoin = 1,
  [pbr::OriginalName("COST_DOLLAR")] CostDollar = 2,
}

public enum FriendReqType {
  /// <summary>
  ///发送请求
  /// </summary>
  [pbr::OriginalName("APPLYING")] Applying = 0,
  /// <summary>
  ///好友申请
  /// </summary>
  [pbr::OriginalName("AGREEING")] Agreeing = 1,
  /// <summary>
  ///添加成功消息
  /// </summary>
  [pbr::OriginalName("ADDINFO")] Addinfo = 2,
  /// <summary>
  ///好友列表
  /// </summary>
  [pbr::OriginalName("ADDED")] Added = 3,
}

public enum OsType {
  [pbr::OriginalName("ios")] Ios = 0,
  [pbr::OriginalName("andorid")] Andorid = 1,
  [pbr::OriginalName("web")] Web = 2,
}

public enum FeedbackType {
  [pbr::OriginalName("ALL")] All = 0,
}

#endregion

#region Messages
public sealed partial class ExceptionResponse : pb::IMessage<ExceptionResponse> {
  private static readonly pb::MessageParser<ExceptionResponse> _parser = new pb::MessageParser<ExceptionResponse>(() => new ExceptionResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExceptionResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExceptionResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExceptionResponse(ExceptionResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExceptionResponse Clone() {
    return new ExceptionResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExceptionResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExceptionResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExceptionResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

public sealed partial class ExceptionRemoteLoginResponse : pb::IMessage<ExceptionRemoteLoginResponse> {
  private static readonly pb::MessageParser<ExceptionRemoteLoginResponse> _parser = new pb::MessageParser<ExceptionRemoteLoginResponse>(() => new ExceptionRemoteLoginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExceptionRemoteLoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExceptionRemoteLoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExceptionRemoteLoginResponse(ExceptionRemoteLoginResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExceptionRemoteLoginResponse Clone() {
    return new ExceptionRemoteLoginResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExceptionRemoteLoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExceptionRemoteLoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExceptionRemoteLoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

public sealed partial class ResponseStatus : pb::IMessage<ResponseStatus> {
  private static readonly pb::MessageParser<ResponseStatus> _parser = new pb::MessageParser<ResponseStatus>(() => new ResponseStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ResponseStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResponseStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResponseStatus(ResponseStatus other) : this() {
    code_ = other.code_;
    msg_ = other.msg_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ResponseStatus Clone() {
    return new ResponseStatus(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 2;
  private string msg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ResponseStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ResponseStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Msg != other.Msg) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Msg);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ResponseStatus other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          Msg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///GM消息start
/// </summary>
public sealed partial class GmAddAttr : pb::IMessage<GmAddAttr> {
  private static readonly pb::MessageParser<GmAddAttr> _parser = new pb::MessageParser<GmAddAttr>(() => new GmAddAttr());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GmAddAttr> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmAddAttr() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmAddAttr(GmAddAttr other) : this() {
    playerId_ = other.playerId_;
    count_ = other.count_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmAddAttr Clone() {
    return new GmAddAttr(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  ///1表示加cash 2表示加coin 3表示加vit 4表示加exp
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GmAddAttr);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GmAddAttr other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Count != other.Count) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GmAddAttr other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GmAddProp : pb::IMessage<GmAddProp> {
  private static readonly pb::MessageParser<GmAddProp> _parser = new pb::MessageParser<GmAddProp>(() => new GmAddProp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GmAddProp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmAddProp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmAddProp(GmAddProp other) : this() {
    playerId_ = other.playerId_;
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmAddProp Clone() {
    return new GmAddProp(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 2;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 3;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GmAddProp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GmAddProp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (PropId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GmAddProp other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          PropId = input.ReadInt64();
          break;
        }
        case 24: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GmFinishTask : pb::IMessage<GmFinishTask> {
  private static readonly pb::MessageParser<GmFinishTask> _parser = new pb::MessageParser<GmFinishTask>(() => new GmFinishTask());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GmFinishTask> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmFinishTask() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmFinishTask(GmFinishTask other) : this() {
    playerId_ = other.playerId_;
    chapterId_ = other.chapterId_;
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmFinishTask Clone() {
    return new GmFinishTask(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 3;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GmFinishTask);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GmFinishTask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GmFinishTask other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GmOfficer : pb::IMessage<GmOfficer> {
  private static readonly pb::MessageParser<GmOfficer> _parser = new pb::MessageParser<GmOfficer>(() => new GmOfficer());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GmOfficer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmOfficer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmOfficer(GmOfficer other) : this() {
    playerId_ = other.playerId_;
    officerId_ = other.officerId_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GmOfficer Clone() {
    return new GmOfficer(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "officerId" field.</summary>
  public const int OfficerIdFieldNumber = 2;
  private long officerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OfficerId {
    get { return officerId_; }
    set {
      officerId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 3;
  private int type_;
  /// <summary>
  ///1得到警员 2警员升级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GmOfficer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GmOfficer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (OfficerId != other.OfficerId) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (OfficerId != 0L) hash ^= OfficerId.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (OfficerId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(OfficerId);
    }
    if (Type != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (OfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficerId);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GmOfficer other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.OfficerId != 0L) {
      OfficerId = other.OfficerId;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          OfficerId = input.ReadInt64();
          break;
        }
        case 24: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class GMGetPlayerMessageRequest : pb::IMessage<GMGetPlayerMessageRequest> {
  private static readonly pb::MessageParser<GMGetPlayerMessageRequest> _parser = new pb::MessageParser<GMGetPlayerMessageRequest>(() => new GMGetPlayerMessageRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GMGetPlayerMessageRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMGetPlayerMessageRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMGetPlayerMessageRequest(GMGetPlayerMessageRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMGetPlayerMessageRequest Clone() {
    return new GMGetPlayerMessageRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GMGetPlayerMessageRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GMGetPlayerMessageRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GMGetPlayerMessageRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class GMGetPlayerMessageResponse : pb::IMessage<GMGetPlayerMessageResponse> {
  private static readonly pb::MessageParser<GMGetPlayerMessageResponse> _parser = new pb::MessageParser<GMGetPlayerMessageResponse>(() => new GMGetPlayerMessageResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GMGetPlayerMessageResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMGetPlayerMessageResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMGetPlayerMessageResponse(GMGetPlayerMessageResponse other) : this() {
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GMGetPlayerMessageResponse Clone() {
    return new GMGetPlayerMessageResponse(this);
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 1;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GMGetPlayerMessageResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GMGetPlayerMessageResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Message.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GMGetPlayerMessageResponse other) {
    if (other == null) {
      return;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*进入场景
/// </summary>
public sealed partial class CSEnterRequest : pb::IMessage<CSEnterRequest> {
  private static readonly pb::MessageParser<CSEnterRequest> _parser = new pb::MessageParser<CSEnterRequest>(() => new CSEnterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEnterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEnterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEnterRequest(CSEnterRequest other) : this() {
    playerId_ = other.playerId_;
    sceneId_ = other.sceneId_;
    officerIds_ = other.officerIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEnterRequest Clone() {
    return new CSEnterRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "officerIds" field.</summary>
  public const int OfficerIdsFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_officerIds_codec
      = pb::FieldCodec.ForInt64(26);
  private readonly pbc::RepeatedField<long> officerIds_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> OfficerIds {
    get { return officerIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEnterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEnterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (SceneId != other.SceneId) return false;
    if(!officerIds_.Equals(other.officerIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    hash ^= officerIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SceneId);
    }
    officerIds_.WriteTo(output, _repeated_officerIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    size += officerIds_.CalculateSize(_repeated_officerIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEnterRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    officerIds_.Add(other.officerIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          SceneId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          officerIds_.AddEntriesFrom(input, _repeated_officerIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SCEnterResponse : pb::IMessage<SCEnterResponse> {
  private static readonly pb::MessageParser<SCEnterResponse> _parser = new pb::MessageParser<SCEnterResponse>(() => new SCEnterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEnterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEnterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEnterResponse(SCEnterResponse other) : this() {
    result_ = other.result_;
    vitConsume_ = other.vitConsume_;
    seconds_ = other.seconds_;
    fragments_ = other.fragments_.Clone();
    officerIds_ = other.officerIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEnterResponse Clone() {
    return new SCEnterResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///服务器验证结果，1表示成功，2表示体力值不足，3表示未解锁，4表示场景不存在
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "vitConsume" field.</summary>
  public const int VitConsumeFieldNumber = 2;
  private int vitConsume_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VitConsume {
    get { return vitConsume_; }
    set {
      vitConsume_ = value;
    }
  }

  /// <summary>Field number for the "seconds" field.</summary>
  public const int SecondsFieldNumber = 3;
  private int seconds_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seconds {
    get { return seconds_; }
    set {
      seconds_ = value;
    }
  }

  /// <summary>Field number for the "fragments" field.</summary>
  public const int FragmentsFieldNumber = 4;
  private static readonly pb::FieldCodec<long> _repeated_fragments_codec
      = pb::FieldCodec.ForInt64(34);
  private readonly pbc::RepeatedField<long> fragments_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///想要解锁此局必须获取的碎片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> Fragments {
    get { return fragments_; }
  }

  /// <summary>Field number for the "officerIds" field.</summary>
  public const int OfficerIdsFieldNumber = 5;
  private static readonly pb::FieldCodec<long> _repeated_officerIds_codec
      = pb::FieldCodec.ForInt64(42);
  private readonly pbc::RepeatedField<long> officerIds_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///玩家给当前场景选的警员
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> OfficerIds {
    get { return officerIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEnterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEnterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (VitConsume != other.VitConsume) return false;
    if (Seconds != other.Seconds) return false;
    if(!fragments_.Equals(other.fragments_)) return false;
    if(!officerIds_.Equals(other.officerIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (VitConsume != 0) hash ^= VitConsume.GetHashCode();
    if (Seconds != 0) hash ^= Seconds.GetHashCode();
    hash ^= fragments_.GetHashCode();
    hash ^= officerIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (VitConsume != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(VitConsume);
    }
    if (Seconds != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Seconds);
    }
    fragments_.WriteTo(output, _repeated_fragments_codec);
    officerIds_.WriteTo(output, _repeated_officerIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (VitConsume != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VitConsume);
    }
    if (Seconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
    }
    size += fragments_.CalculateSize(_repeated_fragments_codec);
    size += officerIds_.CalculateSize(_repeated_officerIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEnterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.VitConsume != 0) {
      VitConsume = other.VitConsume;
    }
    if (other.Seconds != 0) {
      Seconds = other.Seconds;
    }
    fragments_.Add(other.fragments_);
    officerIds_.Add(other.officerIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          VitConsume = input.ReadInt32();
          break;
        }
        case 24: {
          Seconds = input.ReadInt32();
          break;
        }
        case 34:
        case 32: {
          fragments_.AddEntriesFrom(input, _repeated_fragments_codec);
          break;
        }
        case 42:
        case 40: {
          officerIds_.AddEntriesFrom(input, _repeated_officerIds_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*退出场景
/// </summary>
public sealed partial class CSQuitRequest : pb::IMessage<CSQuitRequest> {
  private static readonly pb::MessageParser<CSQuitRequest> _parser = new pb::MessageParser<CSQuitRequest>(() => new CSQuitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSQuitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSQuitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSQuitRequest(CSQuitRequest other) : this() {
    playerId_ = other.playerId_;
    sceneId_ = other.sceneId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSQuitRequest Clone() {
    return new CSQuitRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSQuitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSQuitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (SceneId != other.SceneId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SceneId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSQuitRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          SceneId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCQuitResponse : pb::IMessage<SCQuitResponse> {
  private static readonly pb::MessageParser<SCQuitResponse> _parser = new pb::MessageParser<SCQuitResponse>(() => new SCQuitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCQuitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCQuitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCQuitResponse(SCQuitResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCQuitResponse Clone() {
    return new SCQuitResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCQuitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCQuitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCQuitResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSSuspendRequest : pb::IMessage<CSSuspendRequest> {
  private static readonly pb::MessageParser<CSSuspendRequest> _parser = new pb::MessageParser<CSSuspendRequest>(() => new CSSuspendRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSuspendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSuspendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSuspendRequest(CSSuspendRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSuspendRequest Clone() {
    return new CSSuspendRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSuspendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSuspendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSuspendRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSuspendResponse : pb::IMessage<SCSuspendResponse> {
  private static readonly pb::MessageParser<SCSuspendResponse> _parser = new pb::MessageParser<SCSuspendResponse>(() => new SCSuspendResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSuspendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSuspendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSuspendResponse(SCSuspendResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSuspendResponse Clone() {
    return new SCSuspendResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSuspendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSuspendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSuspendResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSResumeRequest : pb::IMessage<CSResumeRequest> {
  private static readonly pb::MessageParser<CSResumeRequest> _parser = new pb::MessageParser<CSResumeRequest>(() => new CSResumeRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSResumeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSResumeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSResumeRequest(CSResumeRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSResumeRequest Clone() {
    return new CSResumeRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSResumeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSResumeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSResumeRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCResumeResponse : pb::IMessage<SCResumeResponse> {
  private static readonly pb::MessageParser<SCResumeResponse> _parser = new pb::MessageParser<SCResumeResponse>(() => new SCResumeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCResumeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCResumeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCResumeResponse(SCResumeResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCResumeResponse Clone() {
    return new SCResumeResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCResumeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCResumeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCResumeResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSStartRequest : pb::IMessage<CSStartRequest> {
  private static readonly pb::MessageParser<CSStartRequest> _parser = new pb::MessageParser<CSStartRequest>(() => new CSStartRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSStartRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSStartRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSStartRequest(CSStartRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSStartRequest Clone() {
    return new CSStartRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSStartRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSStartRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSStartRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCStartResponse : pb::IMessage<SCStartResponse> {
  private static readonly pb::MessageParser<SCStartResponse> _parser = new pb::MessageParser<SCStartResponse>(() => new SCStartResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCStartResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCStartResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCStartResponse(SCStartResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCStartResponse Clone() {
    return new SCStartResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCStartResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCStartResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCStartResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSFinishRequest : pb::IMessage<CSFinishRequest> {
  private static readonly pb::MessageParser<CSFinishRequest> _parser = new pb::MessageParser<CSFinishRequest>(() => new CSFinishRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFinishRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFinishRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFinishRequest(CSFinishRequest other) : this() {
    sceneId_ = other.sceneId_;
    result_ = other.result_;
    restTime_ = other.restTime_;
    allTime_ = other.allTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFinishRequest Clone() {
    return new CSFinishRequest(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///0表示失败，1表示成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "restTime" field.</summary>
  public const int RestTimeFieldNumber = 3;
  private int restTime_;
  /// <summary>
  ///剩余时间(秒)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RestTime {
    get { return restTime_; }
    set {
      restTime_ = value;
    }
  }

  /// <summary>Field number for the "allTime" field.</summary>
  public const int AllTimeFieldNumber = 4;
  private int allTime_;
  /// <summary>
  ///总时间(秒)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AllTime {
    get { return allTime_; }
    set {
      allTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFinishRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFinishRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (Result != other.Result) return false;
    if (RestTime != other.RestTime) return false;
    if (AllTime != other.AllTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (RestTime != 0) hash ^= RestTime.GetHashCode();
    if (AllTime != 0) hash ^= AllTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SceneId);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (RestTime != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(RestTime);
    }
    if (AllTime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(AllTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (RestTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RestTime);
    }
    if (AllTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFinishRequest other) {
    if (other == null) {
      return;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.RestTime != 0) {
      RestTime = other.RestTime;
    }
    if (other.AllTime != 0) {
      AllTime = other.AllTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneId = input.ReadInt64();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          RestTime = input.ReadInt32();
          break;
        }
        case 32: {
          AllTime = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFinishResponse : pb::IMessage<SCFinishResponse> {
  private static readonly pb::MessageParser<SCFinishResponse> _parser = new pb::MessageParser<SCFinishResponse>(() => new SCFinishResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFinishResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFinishResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFinishResponse(SCFinishResponse other) : this() {
    result_ = other.result_;
    sceneId_ = other.sceneId_;
    propId_ = other.propId_;
    rewards_ = other.rewards_.Clone();
    jigsawState_ = other.jigsawState_;
    sceneRewardComprise_ = other.sceneRewardComprise_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFinishResponse Clone() {
    return new SCFinishResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///0失败，1成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 3;
  private long propId_;
  /// <summary>
  ///奖励的物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::Reward> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(34, global::Reward.Parser);
  private readonly pbc::RepeatedField<global::Reward> rewards_ = new pbc::RepeatedField<global::Reward>();
  /// <summary>
  ///奖励的属性
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Reward> Rewards {
    get { return rewards_; }
  }

  /// <summary>Field number for the "jigsawState" field.</summary>
  public const int JigsawStateFieldNumber = 5;
  private int jigsawState_;
  /// <summary>
  ///奖励阶段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int JigsawState {
    get { return jigsawState_; }
    set {
      jigsawState_ = value;
    }
  }

  /// <summary>Field number for the "sceneRewardComprise" field.</summary>
  public const int SceneRewardCompriseFieldNumber = 6;
  private static readonly pb::FieldCodec<global::SceneRewardComprise> _repeated_sceneRewardComprise_codec
      = pb::FieldCodec.ForMessage(50, global::SceneRewardComprise.Parser);
  private readonly pbc::RepeatedField<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::RepeatedField<global::SceneRewardComprise>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneRewardComprise> SceneRewardComprise {
    get { return sceneRewardComprise_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFinishResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFinishResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (SceneId != other.SceneId) return false;
    if (PropId != other.PropId) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    if (JigsawState != other.JigsawState) return false;
    if(!sceneRewardComprise_.Equals(other.sceneRewardComprise_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    hash ^= rewards_.GetHashCode();
    if (JigsawState != 0) hash ^= JigsawState.GetHashCode();
    hash ^= sceneRewardComprise_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SceneId);
    }
    if (PropId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(PropId);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
    if (JigsawState != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(JigsawState);
    }
    sceneRewardComprise_.WriteTo(output, _repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    if (JigsawState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(JigsawState);
    }
    size += sceneRewardComprise_.CalculateSize(_repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFinishResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    rewards_.Add(other.rewards_);
    if (other.JigsawState != 0) {
      JigsawState = other.JigsawState;
    }
    sceneRewardComprise_.Add(other.sceneRewardComprise_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          SceneId = input.ReadInt64();
          break;
        }
        case 24: {
          PropId = input.ReadInt64();
          break;
        }
        case 34: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
        case 40: {
          JigsawState = input.ReadInt32();
          break;
        }
        case 50: {
          sceneRewardComprise_.AddEntriesFrom(input, _repeated_sceneRewardComprise_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Reward : pb::IMessage<Reward> {
  private static readonly pb::MessageParser<Reward> _parser = new pb::MessageParser<Reward>(() => new Reward());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Reward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reward(Reward other) : this() {
    percent_ = other.percent_;
    type_ = other.type_;
    num_ = other.num_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Reward Clone() {
    return new Reward(this);
  }

  /// <summary>Field number for the "percent" field.</summary>
  public const int PercentFieldNumber = 1;
  private int percent_;
  /// <summary>
  ///分段百分比
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Percent {
    get { return percent_; }
    set {
      percent_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///奖励类型0=金币1=钞票2经验3体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 3;
  private int num_;
  /// <summary>
  ///奖励值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Reward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Reward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Percent != other.Percent) return false;
    if (Type != other.Type) return false;
    if (Num != other.Num) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Percent != 0) hash ^= Percent.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Percent != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Percent);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Num != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Num);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Percent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Percent);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Reward other) {
    if (other == null) {
      return;
    }
    if (other.Percent != 0) {
      Percent = other.Percent;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Percent = input.ReadInt32();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///注册
/// </summary>
public sealed partial class CSRegRequest : pb::IMessage<CSRegRequest> {
  private static readonly pb::MessageParser<CSRegRequest> _parser = new pb::MessageParser<CSRegRequest>(() => new CSRegRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSRegRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRegRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRegRequest(CSRegRequest other) : this() {
    username_ = other.username_;
    pwd_ = other.pwd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRegRequest Clone() {
    return new CSRegRequest(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  /// <summary>
  ///用户名，唯一且不可变，建议使用手机号或邮箱
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pwd" field.</summary>
  public const int PwdFieldNumber = 2;
  private string pwd_ = "";
  /// <summary>
  ///密码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pwd {
    get { return pwd_; }
    set {
      pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSRegRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSRegRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Pwd != other.Pwd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Pwd.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Pwd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Pwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSRegRequest other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Pwd.Length != 0) {
      Pwd = other.Pwd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Pwd = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCRegResponse : pb::IMessage<SCRegResponse> {
  private static readonly pb::MessageParser<SCRegResponse> _parser = new pb::MessageParser<SCRegResponse>(() => new SCRegResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCRegResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRegResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRegResponse(SCRegResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRegResponse Clone() {
    return new SCRegResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1表示注册成功，2表示用户名已注册，3表示注册失败（待细化）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCRegResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCRegResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCRegResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///客户端验证请求
/// </summary>
public sealed partial class CSAuthRequest : pb::IMessage<CSAuthRequest> {
  private static readonly pb::MessageParser<CSAuthRequest> _parser = new pb::MessageParser<CSAuthRequest>(() => new CSAuthRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSAuthRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAuthRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAuthRequest(CSAuthRequest other) : this() {
    username_ = other.username_;
    pwd_ = other.pwd_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAuthRequest Clone() {
    return new CSAuthRequest(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pwd" field.</summary>
  public const int PwdFieldNumber = 2;
  private string pwd_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pwd {
    get { return pwd_; }
    set {
      pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSAuthRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSAuthRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Pwd != other.Pwd) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Pwd.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Pwd);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Pwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSAuthRequest other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Pwd.Length != 0) {
      Pwd = other.Pwd;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Pwd = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCAuthResponse : pb::IMessage<SCAuthResponse> {
  private static readonly pb::MessageParser<SCAuthResponse> _parser = new pb::MessageParser<SCAuthResponse>(() => new SCAuthResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCAuthResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAuthResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAuthResponse(SCAuthResponse other) : this() {
    result_ = other.result_;
    accessToken_ = other.accessToken_;
    username_ = other.username_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAuthResponse Clone() {
    return new SCAuthResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private string accessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 3;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCAuthResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCAuthResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (AccessToken != other.AccessToken) return false;
    if (Username != other.Username) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (AccessToken.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (Username.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Username);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (AccessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCAuthResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.AccessToken.Length != 0) {
      AccessToken = other.AccessToken;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
        case 26: {
          Username = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*登录请求
/// </summary>
public sealed partial class CSloginRequest : pb::IMessage<CSloginRequest> {
  private static readonly pb::MessageParser<CSloginRequest> _parser = new pb::MessageParser<CSloginRequest>(() => new CSloginRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSloginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSloginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSloginRequest(CSloginRequest other) : this() {
    username_ = other.username_;
    pwd_ = other.pwd_;
    platform_ = other.platform_;
    nickname_ = other.nickname_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSloginRequest Clone() {
    return new CSloginRequest(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  /// <summary>
  ///第三方平台返回的用户唯一凭证，第三方保证同一用户的username永不会变并且在该渠道下的唯一性.自有渠道在注册时填写的用户名，不可修改。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pwd" field.</summary>
  public const int PwdFieldNumber = 2;
  private string pwd_ = "";
  /// <summary>
  ///自有渠道的用户密码或者第三方平台返回的accessToken.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Pwd {
    get { return pwd_; }
    set {
      pwd_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 3;
  private int platform_;
  /// <summary>
  ///平台标识，客户端根据不同的第三方sdk填约定好的值(自有渠道暂定为0),username+platform即可确定唯一玩家.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Platform {
    get { return platform_; }
    set {
      platform_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 4;
  private string nickname_ = "";
  /// <summary>
  ///昵称。第三方平台返回的值，第一次创建玩家信息的时候会使用。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSloginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSloginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Pwd != other.Pwd) return false;
    if (Platform != other.Platform) return false;
    if (Nickname != other.Nickname) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Pwd.Length != 0) hash ^= Pwd.GetHashCode();
    if (Platform != 0) hash ^= Platform.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Pwd.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Pwd);
    }
    if (Platform != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Platform);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Nickname);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Pwd.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Pwd);
    }
    if (Platform != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSloginRequest other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Pwd.Length != 0) {
      Pwd = other.Pwd;
    }
    if (other.Platform != 0) {
      Platform = other.Platform;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Pwd = input.ReadString();
          break;
        }
        case 24: {
          Platform = input.ReadInt32();
          break;
        }
        case 34: {
          Nickname = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*登录返回信息
/// </summary>
public sealed partial class SCloginResponse : pb::IMessage<SCloginResponse> {
  private static readonly pb::MessageParser<SCloginResponse> _parser = new pb::MessageParser<SCloginResponse>(() => new SCloginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCloginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCloginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCloginResponse(SCloginResponse other) : this() {
    result_ = other.result_;
    playerId_ = other.playerId_;
    playerName_ = other.playerName_;
    playerIcon_ = other.playerIcon_;
    coin_ = other.coin_;
    cash_ = other.cash_;
    vit_ = other.vit_;
    level_ = other.level_;
    exp_ = other.exp_;
    laborUnion_ = other.laborUnion_;
    upgradeExp_ = other.upgradeExp_;
    expMultiple_ = other.expMultiple_;
    platform_ = other.platform_;
    nickname_ = other.nickname_;
    accessToken_ = other.accessToken_;
    lastAddVitTime_ = other.lastAddVitTime_;
    millisRecoverOneVit_ = other.millisRecoverOneVit_;
    hasRenamed_ = other.hasRenamed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCloginResponse Clone() {
    return new SCloginResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///是否登录成功，1表示成功，2表示失败。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "playerName" field.</summary>
  public const int PlayerNameFieldNumber = 3;
  private string playerName_ = "";
  /// <summary>
  ///用户名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerName {
    get { return playerName_; }
    set {
      playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playerIcon" field.</summary>
  public const int PlayerIconFieldNumber = 4;
  private string playerIcon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerIcon {
    get { return playerIcon_; }
    set {
      playerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 5;
  private int coin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "cash" field.</summary>
  public const int CashFieldNumber = 6;
  private int cash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cash {
    get { return cash_; }
    set {
      cash_ = value;
    }
  }

  /// <summary>Field number for the "vit" field.</summary>
  public const int VitFieldNumber = 7;
  private int vit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vit {
    get { return vit_; }
    set {
      vit_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 8;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 9;
  private int exp_;
  /// <summary>
  ///当前等级以获得经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "laborUnion" field.</summary>
  public const int LaborUnionFieldNumber = 10;
  private int laborUnion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaborUnion {
    get { return laborUnion_; }
    set {
      laborUnion_ = value;
    }
  }

  /// <summary>Field number for the "upgradeExp" field.</summary>
  public const int UpgradeExpFieldNumber = 11;
  private int upgradeExp_;
  /// <summary>
  ///当前等级总经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpgradeExp {
    get { return upgradeExp_; }
    set {
      upgradeExp_ = value;
    }
  }

  /// <summary>Field number for the "expMultiple" field.</summary>
  public const int ExpMultipleFieldNumber = 12;
  private float expMultiple_;
  /// <summary>
  ///经验加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ExpMultiple {
    get { return expMultiple_; }
    set {
      expMultiple_ = value;
    }
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 13;
  private int platform_;
  /// <summary>
  ///平台标识
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Platform {
    get { return platform_; }
    set {
      platform_ = value;
    }
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 14;
  private string nickname_ = "";
  /// <summary>
  ///昵称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 15;
  private string accessToken_ = "";
  /// <summary>
  ///访问唯一标识
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "lastAddVitTime" field.</summary>
  public const int LastAddVitTimeFieldNumber = 16;
  private long lastAddVitTime_;
  /// <summary>
  ///上次增加体力值的时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastAddVitTime {
    get { return lastAddVitTime_; }
    set {
      lastAddVitTime_ = value;
    }
  }

  /// <summary>Field number for the "millisRecoverOneVit" field.</summary>
  public const int MillisRecoverOneVitFieldNumber = 18;
  private long millisRecoverOneVit_;
  /// <summary>
  ///恢复一点体力值需要的毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MillisRecoverOneVit {
    get { return millisRecoverOneVit_; }
    set {
      millisRecoverOneVit_ = value;
    }
  }

  /// <summary>Field number for the "hasRenamed" field.</summary>
  public const int HasRenamedFieldNumber = 19;
  private int hasRenamed_;
  /// <summary>
  ///0表示未修改过，1表示已修改过
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HasRenamed {
    get { return hasRenamed_; }
    set {
      hasRenamed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCloginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCloginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (PlayerId != other.PlayerId) return false;
    if (PlayerName != other.PlayerName) return false;
    if (PlayerIcon != other.PlayerIcon) return false;
    if (Coin != other.Coin) return false;
    if (Cash != other.Cash) return false;
    if (Vit != other.Vit) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (LaborUnion != other.LaborUnion) return false;
    if (UpgradeExp != other.UpgradeExp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpMultiple, other.ExpMultiple)) return false;
    if (Platform != other.Platform) return false;
    if (Nickname != other.Nickname) return false;
    if (AccessToken != other.AccessToken) return false;
    if (LastAddVitTime != other.LastAddVitTime) return false;
    if (MillisRecoverOneVit != other.MillisRecoverOneVit) return false;
    if (HasRenamed != other.HasRenamed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
    if (PlayerIcon.Length != 0) hash ^= PlayerIcon.GetHashCode();
    if (Coin != 0) hash ^= Coin.GetHashCode();
    if (Cash != 0) hash ^= Cash.GetHashCode();
    if (Vit != 0) hash ^= Vit.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (LaborUnion != 0) hash ^= LaborUnion.GetHashCode();
    if (UpgradeExp != 0) hash ^= UpgradeExp.GetHashCode();
    if (ExpMultiple != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpMultiple);
    if (Platform != 0) hash ^= Platform.GetHashCode();
    if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
    if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
    if (LastAddVitTime != 0L) hash ^= LastAddVitTime.GetHashCode();
    if (MillisRecoverOneVit != 0L) hash ^= MillisRecoverOneVit.GetHashCode();
    if (HasRenamed != 0) hash ^= HasRenamed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (PlayerId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerId);
    }
    if (PlayerName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(PlayerName);
    }
    if (PlayerIcon.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(PlayerIcon);
    }
    if (Coin != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Coin);
    }
    if (Cash != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Cash);
    }
    if (Vit != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Vit);
    }
    if (Level != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Exp);
    }
    if (LaborUnion != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(LaborUnion);
    }
    if (UpgradeExp != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(UpgradeExp);
    }
    if (ExpMultiple != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(ExpMultiple);
    }
    if (Platform != 0) {
      output.WriteRawTag(104);
      output.WriteInt32(Platform);
    }
    if (Nickname.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(Nickname);
    }
    if (AccessToken.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(AccessToken);
    }
    if (LastAddVitTime != 0L) {
      output.WriteRawTag(128, 1);
      output.WriteInt64(LastAddVitTime);
    }
    if (MillisRecoverOneVit != 0L) {
      output.WriteRawTag(144, 1);
      output.WriteInt64(MillisRecoverOneVit);
    }
    if (HasRenamed != 0) {
      output.WriteRawTag(152, 1);
      output.WriteInt32(HasRenamed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (PlayerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
    }
    if (PlayerIcon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIcon);
    }
    if (Coin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
    }
    if (Cash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
    }
    if (Vit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (LaborUnion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaborUnion);
    }
    if (UpgradeExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeExp);
    }
    if (ExpMultiple != 0F) {
      size += 1 + 4;
    }
    if (Platform != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Platform);
    }
    if (Nickname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (AccessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (LastAddVitTime != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(LastAddVitTime);
    }
    if (MillisRecoverOneVit != 0L) {
      size += 2 + pb::CodedOutputStream.ComputeInt64Size(MillisRecoverOneVit);
    }
    if (HasRenamed != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(HasRenamed);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCloginResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.PlayerName.Length != 0) {
      PlayerName = other.PlayerName;
    }
    if (other.PlayerIcon.Length != 0) {
      PlayerIcon = other.PlayerIcon;
    }
    if (other.Coin != 0) {
      Coin = other.Coin;
    }
    if (other.Cash != 0) {
      Cash = other.Cash;
    }
    if (other.Vit != 0) {
      Vit = other.Vit;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.LaborUnion != 0) {
      LaborUnion = other.LaborUnion;
    }
    if (other.UpgradeExp != 0) {
      UpgradeExp = other.UpgradeExp;
    }
    if (other.ExpMultiple != 0F) {
      ExpMultiple = other.ExpMultiple;
    }
    if (other.Platform != 0) {
      Platform = other.Platform;
    }
    if (other.Nickname.Length != 0) {
      Nickname = other.Nickname;
    }
    if (other.AccessToken.Length != 0) {
      AccessToken = other.AccessToken;
    }
    if (other.LastAddVitTime != 0L) {
      LastAddVitTime = other.LastAddVitTime;
    }
    if (other.MillisRecoverOneVit != 0L) {
      MillisRecoverOneVit = other.MillisRecoverOneVit;
    }
    if (other.HasRenamed != 0) {
      HasRenamed = other.HasRenamed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 26: {
          PlayerName = input.ReadString();
          break;
        }
        case 34: {
          PlayerIcon = input.ReadString();
          break;
        }
        case 40: {
          Coin = input.ReadInt32();
          break;
        }
        case 48: {
          Cash = input.ReadInt32();
          break;
        }
        case 56: {
          Vit = input.ReadInt32();
          break;
        }
        case 64: {
          Level = input.ReadInt32();
          break;
        }
        case 72: {
          Exp = input.ReadInt32();
          break;
        }
        case 80: {
          LaborUnion = input.ReadInt32();
          break;
        }
        case 88: {
          UpgradeExp = input.ReadInt32();
          break;
        }
        case 101: {
          ExpMultiple = input.ReadFloat();
          break;
        }
        case 104: {
          Platform = input.ReadInt32();
          break;
        }
        case 114: {
          Nickname = input.ReadString();
          break;
        }
        case 122: {
          AccessToken = input.ReadString();
          break;
        }
        case 128: {
          LastAddVitTime = input.ReadInt64();
          break;
        }
        case 144: {
          MillisRecoverOneVit = input.ReadInt64();
          break;
        }
        case 152: {
          HasRenamed = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*请求玩家解锁的章节列表
/// </summary>
public sealed partial class CSChapterListRequest : pb::IMessage<CSChapterListRequest> {
  private static readonly pb::MessageParser<CSChapterListRequest> _parser = new pb::MessageParser<CSChapterListRequest>(() => new CSChapterListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSChapterListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChapterListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChapterListRequest(CSChapterListRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChapterListRequest Clone() {
    return new CSChapterListRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSChapterListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSChapterListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSChapterListRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
///*返回玩家解锁的章节列表
/// </summary>
public sealed partial class SCChapterListResponse : pb::IMessage<SCChapterListResponse> {
  private static readonly pb::MessageParser<SCChapterListResponse> _parser = new pb::MessageParser<SCChapterListResponse>(() => new SCChapterListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCChapterListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterListResponse(SCChapterListResponse other) : this() {
    chapters_ = other.chapters_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterListResponse Clone() {
    return new SCChapterListResponse(this);
  }

  /// <summary>Field number for the "chapters" field.</summary>
  public const int ChaptersFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerChapterInfo> _repeated_chapters_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerChapterInfo.Parser);
  private readonly pbc::RepeatedField<global::PlayerChapterInfo> chapters_ = new pbc::RepeatedField<global::PlayerChapterInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerChapterInfo> Chapters {
    get { return chapters_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCChapterListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCChapterListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!chapters_.Equals(other.chapters_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= chapters_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    chapters_.WriteTo(output, _repeated_chapters_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += chapters_.CalculateSize(_repeated_chapters_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCChapterListResponse other) {
    if (other == null) {
      return;
    }
    chapters_.Add(other.chapters_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          chapters_.AddEntriesFrom(input, _repeated_chapters_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*章节信息
/// </summary>
public sealed partial class PlayerChapterInfo : pb::IMessage<PlayerChapterInfo> {
  private static readonly pb::MessageParser<PlayerChapterInfo> _parser = new pb::MessageParser<PlayerChapterInfo>(() => new PlayerChapterInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerChapterInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerChapterInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerChapterInfo(PlayerChapterInfo other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerChapterInfo Clone() {
    return new PlayerChapterInfo(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///0表示未解锁(理论上不会有)，1表示已解锁，2表示已完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerChapterInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerChapterInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerChapterInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*请求某一章节的详细信息
/// </summary>
public sealed partial class CSChapterDetailRequest : pb::IMessage<CSChapterDetailRequest> {
  private static readonly pb::MessageParser<CSChapterDetailRequest> _parser = new pb::MessageParser<CSChapterDetailRequest>(() => new CSChapterDetailRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSChapterDetailRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChapterDetailRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChapterDetailRequest(CSChapterDetailRequest other) : this() {
    playerChapterId_ = other.playerChapterId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChapterDetailRequest Clone() {
    return new CSChapterDetailRequest(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSChapterDetailRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSChapterDetailRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSChapterDetailRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*返回某一章节的详细信息
/// </summary>
public sealed partial class SCChapterDetailResponse : pb::IMessage<SCChapterDetailResponse> {
  private static readonly pb::MessageParser<SCChapterDetailResponse> _parser = new pb::MessageParser<SCChapterDetailResponse>(() => new SCChapterDetailResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCChapterDetailResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterDetailResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterDetailResponse(SCChapterDetailResponse other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    status_ = other.status_;
    npcs_ = other.npcs_.Clone();
    clues_ = other.clues_.Clone();
    scenes_ = other.scenes_.Clone();
    tasks_ = other.tasks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterDetailResponse Clone() {
    return new SCChapterDetailResponse(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///0表示未解锁，1表示已解锁，2表示已完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "npcs" field.</summary>
  public const int NpcsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ChapterNpcInfo> _repeated_npcs_codec
      = pb::FieldCodec.ForMessage(34, global::ChapterNpcInfo.Parser);
  private readonly pbc::RepeatedField<global::ChapterNpcInfo> npcs_ = new pbc::RepeatedField<global::ChapterNpcInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ChapterNpcInfo> Npcs {
    get { return npcs_; }
  }

  /// <summary>Field number for the "clues" field.</summary>
  public const int CluesFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ChapterClueInfo> _repeated_clues_codec
      = pb::FieldCodec.ForMessage(42, global::ChapterClueInfo.Parser);
  private readonly pbc::RepeatedField<global::ChapterClueInfo> clues_ = new pbc::RepeatedField<global::ChapterClueInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ChapterClueInfo> Clues {
    get { return clues_; }
  }

  /// <summary>Field number for the "scenes" field.</summary>
  public const int ScenesFieldNumber = 6;
  private static readonly pb::FieldCodec<global::ChapterSceneInfo> _repeated_scenes_codec
      = pb::FieldCodec.ForMessage(50, global::ChapterSceneInfo.Parser);
  private readonly pbc::RepeatedField<global::ChapterSceneInfo> scenes_ = new pbc::RepeatedField<global::ChapterSceneInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ChapterSceneInfo> Scenes {
    get { return scenes_; }
  }

  /// <summary>Field number for the "tasks" field.</summary>
  public const int TasksFieldNumber = 7;
  private static readonly pb::FieldCodec<global::ChapterTaskInfo> _repeated_tasks_codec
      = pb::FieldCodec.ForMessage(58, global::ChapterTaskInfo.Parser);
  private readonly pbc::RepeatedField<global::ChapterTaskInfo> tasks_ = new pbc::RepeatedField<global::ChapterTaskInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ChapterTaskInfo> Tasks {
    get { return tasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCChapterDetailResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCChapterDetailResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (Status != other.Status) return false;
    if(!npcs_.Equals(other.npcs_)) return false;
    if(!clues_.Equals(other.clues_)) return false;
    if(!scenes_.Equals(other.scenes_)) return false;
    if(!tasks_.Equals(other.tasks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    hash ^= npcs_.GetHashCode();
    hash ^= clues_.GetHashCode();
    hash ^= scenes_.GetHashCode();
    hash ^= tasks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    npcs_.WriteTo(output, _repeated_npcs_codec);
    clues_.WriteTo(output, _repeated_clues_codec);
    scenes_.WriteTo(output, _repeated_scenes_codec);
    tasks_.WriteTo(output, _repeated_tasks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    size += npcs_.CalculateSize(_repeated_npcs_codec);
    size += clues_.CalculateSize(_repeated_clues_codec);
    size += scenes_.CalculateSize(_repeated_scenes_codec);
    size += tasks_.CalculateSize(_repeated_tasks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCChapterDetailResponse other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    npcs_.Add(other.npcs_);
    clues_.Add(other.clues_);
    scenes_.Add(other.scenes_);
    tasks_.Add(other.tasks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 34: {
          npcs_.AddEntriesFrom(input, _repeated_npcs_codec);
          break;
        }
        case 42: {
          clues_.AddEntriesFrom(input, _repeated_clues_codec);
          break;
        }
        case 50: {
          scenes_.AddEntriesFrom(input, _repeated_scenes_codec);
          break;
        }
        case 58: {
          tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*章节包含的npc信息
/// </summary>
public sealed partial class ChapterNpcInfo : pb::IMessage<ChapterNpcInfo> {
  private static readonly pb::MessageParser<ChapterNpcInfo> _parser = new pb::MessageParser<ChapterNpcInfo>(() => new ChapterNpcInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterNpcInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterNpcInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterNpcInfo(ChapterNpcInfo other) : this() {
    npcId_ = other.npcId_;
    status_ = other.status_;
    dialogueId_ = other.dialogueId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterNpcInfo Clone() {
    return new ChapterNpcInfo(this);
  }

  /// <summary>Field number for the "npcId" field.</summary>
  public const int NpcIdFieldNumber = 1;
  private long npcId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NpcId {
    get { return npcId_; }
    set {
      npcId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///0未解锁，1已解锁
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "dialogueId" field.</summary>
  public const int DialogueIdFieldNumber = 3;
  private long dialogueId_;
  /// <summary>
  ///当前对话
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DialogueId {
    get { return dialogueId_; }
    set {
      dialogueId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterNpcInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterNpcInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NpcId != other.NpcId) return false;
    if (Status != other.Status) return false;
    if (DialogueId != other.DialogueId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NpcId != 0L) hash ^= NpcId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (DialogueId != 0L) hash ^= DialogueId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NpcId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(NpcId);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
    if (DialogueId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(DialogueId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NpcId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NpcId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (DialogueId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DialogueId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterNpcInfo other) {
    if (other == null) {
      return;
    }
    if (other.NpcId != 0L) {
      NpcId = other.NpcId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.DialogueId != 0L) {
      DialogueId = other.DialogueId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          NpcId = input.ReadInt64();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
        case 24: {
          DialogueId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*章节包含的线索信息
/// </summary>
public sealed partial class ChapterClueInfo : pb::IMessage<ChapterClueInfo> {
  private static readonly pb::MessageParser<ChapterClueInfo> _parser = new pb::MessageParser<ChapterClueInfo>(() => new ChapterClueInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterClueInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterClueInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterClueInfo(ChapterClueInfo other) : this() {
    clueId_ = other.clueId_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterClueInfo Clone() {
    return new ChapterClueInfo(this);
  }

  /// <summary>Field number for the "clueId" field.</summary>
  public const int ClueIdFieldNumber = 1;
  private string clueId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClueId {
    get { return clueId_; }
    set {
      clueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///0未解锁，1已解锁
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterClueInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterClueInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClueId != other.ClueId) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClueId.Length != 0) hash ^= ClueId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClueId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ClueId);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClueId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClueId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterClueInfo other) {
    if (other == null) {
      return;
    }
    if (other.ClueId.Length != 0) {
      ClueId = other.ClueId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ClueId = input.ReadString();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*章节包含的场景信息
/// </summary>
public sealed partial class ChapterSceneInfo : pb::IMessage<ChapterSceneInfo> {
  private static readonly pb::MessageParser<ChapterSceneInfo> _parser = new pb::MessageParser<ChapterSceneInfo>(() => new ChapterSceneInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterSceneInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterSceneInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterSceneInfo(ChapterSceneInfo other) : this() {
    sceneId_ = other.sceneId_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterSceneInfo Clone() {
    return new ChapterSceneInfo(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private long sceneId_;
  /// <summary>
  ///场景配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///0未解锁，1表示已解锁
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterSceneInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterSceneInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SceneId);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterSceneInfo other) {
    if (other == null) {
      return;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneId = input.ReadInt64();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*章节包含的任务信息
/// </summary>
public sealed partial class ChapterTaskInfo : pb::IMessage<ChapterTaskInfo> {
  private static readonly pb::MessageParser<ChapterTaskInfo> _parser = new pb::MessageParser<ChapterTaskInfo>(() => new ChapterTaskInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ChapterTaskInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterTaskInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterTaskInfo(ChapterTaskInfo other) : this() {
    taskId_ = other.taskId_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ChapterTaskInfo Clone() {
    return new ChapterTaskInfo(this);
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private long taskId_;
  /// <summary>
  ///任务配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///0未解锁，1表示进行中，2表示已完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ChapterTaskInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ChapterTaskInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TaskId != other.TaskId) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TaskId);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ChapterTaskInfo other) {
    if (other == null) {
      return;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TaskId = input.ReadInt64();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCClueUnlockNotice : pb::IMessage<SCClueUnlockNotice> {
  private static readonly pb::MessageParser<SCClueUnlockNotice> _parser = new pb::MessageParser<SCClueUnlockNotice>(() => new SCClueUnlockNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCClueUnlockNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCClueUnlockNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCClueUnlockNotice(SCClueUnlockNotice other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    clueId_ = other.clueId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCClueUnlockNotice Clone() {
    return new SCClueUnlockNotice(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "clueId" field.</summary>
  public const int ClueIdFieldNumber = 3;
  private string clueId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ClueId {
    get { return clueId_; }
    set {
      clueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCClueUnlockNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCClueUnlockNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (ClueId != other.ClueId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (ClueId.Length != 0) hash ^= ClueId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (ClueId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ClueId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (ClueId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ClueId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCClueUnlockNotice other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.ClueId.Length != 0) {
      ClueId = other.ClueId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 26: {
          ClueId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCNpcUnLockNotice : pb::IMessage<SCNpcUnLockNotice> {
  private static readonly pb::MessageParser<SCNpcUnLockNotice> _parser = new pb::MessageParser<SCNpcUnLockNotice>(() => new SCNpcUnLockNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCNpcUnLockNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCNpcUnLockNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCNpcUnLockNotice(SCNpcUnLockNotice other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    npcId_ = other.npcId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCNpcUnLockNotice Clone() {
    return new SCNpcUnLockNotice(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "npcId" field.</summary>
  public const int NpcIdFieldNumber = 3;
  private long npcId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NpcId {
    get { return npcId_; }
    set {
      npcId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCNpcUnLockNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCNpcUnLockNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (NpcId != other.NpcId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (NpcId != 0L) hash ^= NpcId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (NpcId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(NpcId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (NpcId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NpcId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCNpcUnLockNotice other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.NpcId != 0L) {
      NpcId = other.NpcId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          NpcId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneUnLockNotice : pb::IMessage<SCSceneUnLockNotice> {
  private static readonly pb::MessageParser<SCSceneUnLockNotice> _parser = new pb::MessageParser<SCSceneUnLockNotice>(() => new SCSceneUnLockNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneUnLockNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneUnLockNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneUnLockNotice(SCSceneUnLockNotice other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    sceneId_ = other.sceneId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneUnLockNotice Clone() {
    return new SCSceneUnLockNotice(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 3;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneUnLockNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneUnLockNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (SceneId != other.SceneId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(SceneId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneUnLockNotice other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          SceneId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCChapterTaskStatusChangeNotice : pb::IMessage<SCChapterTaskStatusChangeNotice> {
  private static readonly pb::MessageParser<SCChapterTaskStatusChangeNotice> _parser = new pb::MessageParser<SCChapterTaskStatusChangeNotice>(() => new SCChapterTaskStatusChangeNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCChapterTaskStatusChangeNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterTaskStatusChangeNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterTaskStatusChangeNotice(SCChapterTaskStatusChangeNotice other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    taskId_ = other.taskId_;
    newStatus_ = other.newStatus_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterTaskStatusChangeNotice Clone() {
    return new SCChapterTaskStatusChangeNotice(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 3;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "newStatus" field.</summary>
  public const int NewStatusFieldNumber = 4;
  private int newStatus_;
  /// <summary>
  ///1表示已接受，2表示已完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewStatus {
    get { return newStatus_; }
    set {
      newStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCChapterTaskStatusChangeNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCChapterTaskStatusChangeNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (TaskId != other.TaskId) return false;
    if (NewStatus != other.NewStatus) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (NewStatus != 0) hash ^= NewStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(TaskId);
    }
    if (NewStatus != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(NewStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (NewStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCChapterTaskStatusChangeNotice other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    if (other.NewStatus != 0) {
      NewStatus = other.NewStatus;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          TaskId = input.ReadInt64();
          break;
        }
        case 32: {
          NewStatus = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCChapterStatusChangeNotice : pb::IMessage<SCChapterStatusChangeNotice> {
  private static readonly pb::MessageParser<SCChapterStatusChangeNotice> _parser = new pb::MessageParser<SCChapterStatusChangeNotice>(() => new SCChapterStatusChangeNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCChapterStatusChangeNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterStatusChangeNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterStatusChangeNotice(SCChapterStatusChangeNotice other) : this() {
    playerChapterId_ = other.playerChapterId_;
    chapterId_ = other.chapterId_;
    newStatus_ = other.newStatus_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterStatusChangeNotice Clone() {
    return new SCChapterStatusChangeNotice(this);
  }

  /// <summary>Field number for the "playerChapterId" field.</summary>
  public const int PlayerChapterIdFieldNumber = 1;
  private long playerChapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerChapterId {
    get { return playerChapterId_; }
    set {
      playerChapterId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "newStatus" field.</summary>
  public const int NewStatusFieldNumber = 3;
  private int newStatus_;
  /// <summary>
  ///1表示已接受，2表示已完成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewStatus {
    get { return newStatus_; }
    set {
      newStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCChapterStatusChangeNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCChapterStatusChangeNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerChapterId != other.PlayerChapterId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (NewStatus != other.NewStatus) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerChapterId != 0L) hash ^= PlayerChapterId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (NewStatus != 0) hash ^= NewStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerChapterId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (NewStatus != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NewStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerChapterId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (NewStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCChapterStatusChangeNotice other) {
    if (other == null) {
      return;
    }
    if (other.PlayerChapterId != 0L) {
      PlayerChapterId = other.PlayerChapterId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.NewStatus != 0) {
      NewStatus = other.NewStatus;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerChapterId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          NewStatus = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCChapterRedNotice : pb::IMessage<SCChapterRedNotice> {
  private static readonly pb::MessageParser<SCChapterRedNotice> _parser = new pb::MessageParser<SCChapterRedNotice>(() => new SCChapterRedNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCChapterRedNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterRedNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterRedNotice(SCChapterRedNotice other) : this() {
    reds_ = other.reds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChapterRedNotice Clone() {
    return new SCChapterRedNotice(this);
  }

  /// <summary>Field number for the "reds" field.</summary>
  public const int RedsFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_reds_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> reds_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///0 NPC,1CLUE,2SCENE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Reds {
    get { return reds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCChapterRedNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCChapterRedNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!reds_.Equals(other.reds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= reds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    reds_.WriteTo(output, _repeated_reds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += reds_.CalculateSize(_repeated_reds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCChapterRedNotice other) {
    if (other == null) {
      return;
    }
    reds_.Add(other.reds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          reds_.AddEntriesFrom(input, _repeated_reds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CSClearChapterRedRequest : pb::IMessage<CSClearChapterRedRequest> {
  private static readonly pb::MessageParser<CSClearChapterRedRequest> _parser = new pb::MessageParser<CSClearChapterRedRequest>(() => new CSClearChapterRedRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSClearChapterRedRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSClearChapterRedRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSClearChapterRedRequest(CSClearChapterRedRequest other) : this() {
    clearType_ = other.clearType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSClearChapterRedRequest Clone() {
    return new CSClearChapterRedRequest(this);
  }

  /// <summary>Field number for the "clearType" field.</summary>
  public const int ClearTypeFieldNumber = 1;
  private int clearType_;
  /// <summary>
  ///0 NPC,1CLUE,2SCENE
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ClearType {
    get { return clearType_; }
    set {
      clearType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSClearChapterRedRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSClearChapterRedRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ClearType != other.ClearType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ClearType != 0) hash ^= ClearType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ClearType != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ClearType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ClearType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClearType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSClearChapterRedRequest other) {
    if (other == null) {
      return;
    }
    if (other.ClearType != 0) {
      ClearType = other.ClearType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ClearType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*start 寻物场景
/// </summary>
public sealed partial class CSSceneEnterRequest : pb::IMessage<CSSceneEnterRequest> {
  private static readonly pb::MessageParser<CSSceneEnterRequest> _parser = new pb::MessageParser<CSSceneEnterRequest>(() => new CSSceneEnterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneEnterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneEnterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneEnterRequest(CSSceneEnterRequest other) : this() {
    playerId_ = other.playerId_;
    sceneId_ = other.sceneId_;
    officerIds_ = other.officerIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneEnterRequest Clone() {
    return new CSSceneEnterRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private long sceneId_;
  /// <summary>
  ///经过计算的小场景ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "officerIds" field.</summary>
  public const int OfficerIdsFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_officerIds_codec
      = pb::FieldCodec.ForInt64(26);
  private readonly pbc::RepeatedField<long> officerIds_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> OfficerIds {
    get { return officerIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneEnterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneEnterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (SceneId != other.SceneId) return false;
    if(!officerIds_.Equals(other.officerIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    hash ^= officerIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SceneId);
    }
    officerIds_.WriteTo(output, _repeated_officerIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    size += officerIds_.CalculateSize(_repeated_officerIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneEnterRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    officerIds_.Add(other.officerIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          SceneId = input.ReadInt64();
          break;
        }
        case 26:
        case 24: {
          officerIds_.AddEntriesFrom(input, _repeated_officerIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneEnterResponse : pb::IMessage<SCSceneEnterResponse> {
  private static readonly pb::MessageParser<SCSceneEnterResponse> _parser = new pb::MessageParser<SCSceneEnterResponse>(() => new SCSceneEnterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneEnterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneEnterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneEnterResponse(SCSceneEnterResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    sceneExhibits_ = other.sceneExhibits_.Clone();
    taskExhibits_ = other.taskExhibits_.Clone();
    vitConsume_ = other.vitConsume_;
    seconds_ = other.seconds_;
    officerIds_ = other.officerIds_.Clone();
    isDropScene_ = other.isDropScene_;
    dropItems_ = other.dropItems_.Clone();
    multiId_ = other.multiId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneEnterResponse Clone() {
    return new SCSceneEnterResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  /// <summary>
  ///服务器验证结果，0表示成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "sceneExhibits" field.</summary>
  public const int SceneExhibitsFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_sceneExhibits_codec
      = pb::FieldCodec.ForInt64(18);
  private readonly pbc::RepeatedField<long> sceneExhibits_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///展示物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SceneExhibits {
    get { return sceneExhibits_; }
  }

  /// <summary>Field number for the "taskExhibits" field.</summary>
  public const int TaskExhibitsFieldNumber = 3;
  private static readonly pb::FieldCodec<long> _repeated_taskExhibits_codec
      = pb::FieldCodec.ForInt64(26);
  private readonly pbc::RepeatedField<long> taskExhibits_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///寻物物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> TaskExhibits {
    get { return taskExhibits_; }
  }

  /// <summary>Field number for the "vitConsume" field.</summary>
  public const int VitConsumeFieldNumber = 4;
  private int vitConsume_;
  /// <summary>
  ///体力消耗
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VitConsume {
    get { return vitConsume_; }
    set {
      vitConsume_ = value;
    }
  }

  /// <summary>Field number for the "seconds" field.</summary>
  public const int SecondsFieldNumber = 5;
  private int seconds_;
  /// <summary>
  ///这一局的时间长度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Seconds {
    get { return seconds_; }
    set {
      seconds_ = value;
    }
  }

  /// <summary>Field number for the "officerIds" field.</summary>
  public const int OfficerIdsFieldNumber = 6;
  private static readonly pb::FieldCodec<long> _repeated_officerIds_codec
      = pb::FieldCodec.ForInt64(50);
  private readonly pbc::RepeatedField<long> officerIds_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///玩家给当前场景选的警员
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> OfficerIds {
    get { return officerIds_; }
  }

  /// <summary>Field number for the "isDropScene" field.</summary>
  public const int IsDropSceneFieldNumber = 7;
  private bool isDropScene_;
  /// <summary>
  ///是否是掉落活动局
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDropScene {
    get { return isDropScene_; }
    set {
      isDropScene_ = value;
    }
  }

  /// <summary>Field number for the "dropItems" field.</summary>
  public const int DropItemsFieldNumber = 8;
  private static readonly pb::FieldCodec<global::GiftItem> _repeated_dropItems_codec
      = pb::FieldCodec.ForMessage(66, global::GiftItem.Parser);
  private readonly pbc::RepeatedField<global::GiftItem> dropItems_ = new pbc::RepeatedField<global::GiftItem>();
  /// <summary>
  ///掉落活动：本局掉落的物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GiftItem> DropItems {
    get { return dropItems_; }
  }

  /// <summary>Field number for the "multiId" field.</summary>
  public const int MultiIdFieldNumber = 9;
  private long multiId_;
  /// <summary>
  ///多物玩法物件ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MultiId {
    get { return multiId_; }
    set {
      multiId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneEnterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneEnterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if(!sceneExhibits_.Equals(other.sceneExhibits_)) return false;
    if(!taskExhibits_.Equals(other.taskExhibits_)) return false;
    if (VitConsume != other.VitConsume) return false;
    if (Seconds != other.Seconds) return false;
    if(!officerIds_.Equals(other.officerIds_)) return false;
    if (IsDropScene != other.IsDropScene) return false;
    if(!dropItems_.Equals(other.dropItems_)) return false;
    if (MultiId != other.MultiId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    hash ^= sceneExhibits_.GetHashCode();
    hash ^= taskExhibits_.GetHashCode();
    if (VitConsume != 0) hash ^= VitConsume.GetHashCode();
    if (Seconds != 0) hash ^= Seconds.GetHashCode();
    hash ^= officerIds_.GetHashCode();
    if (IsDropScene != false) hash ^= IsDropScene.GetHashCode();
    hash ^= dropItems_.GetHashCode();
    if (MultiId != 0L) hash ^= MultiId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    sceneExhibits_.WriteTo(output, _repeated_sceneExhibits_codec);
    taskExhibits_.WriteTo(output, _repeated_taskExhibits_codec);
    if (VitConsume != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(VitConsume);
    }
    if (Seconds != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Seconds);
    }
    officerIds_.WriteTo(output, _repeated_officerIds_codec);
    if (IsDropScene != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsDropScene);
    }
    dropItems_.WriteTo(output, _repeated_dropItems_codec);
    if (MultiId != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(MultiId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    size += sceneExhibits_.CalculateSize(_repeated_sceneExhibits_codec);
    size += taskExhibits_.CalculateSize(_repeated_taskExhibits_codec);
    if (VitConsume != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VitConsume);
    }
    if (Seconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Seconds);
    }
    size += officerIds_.CalculateSize(_repeated_officerIds_codec);
    if (IsDropScene != false) {
      size += 1 + 1;
    }
    size += dropItems_.CalculateSize(_repeated_dropItems_codec);
    if (MultiId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MultiId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneEnterResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    sceneExhibits_.Add(other.sceneExhibits_);
    taskExhibits_.Add(other.taskExhibits_);
    if (other.VitConsume != 0) {
      VitConsume = other.VitConsume;
    }
    if (other.Seconds != 0) {
      Seconds = other.Seconds;
    }
    officerIds_.Add(other.officerIds_);
    if (other.IsDropScene != false) {
      IsDropScene = other.IsDropScene;
    }
    dropItems_.Add(other.dropItems_);
    if (other.MultiId != 0L) {
      MultiId = other.MultiId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18:
        case 16: {
          sceneExhibits_.AddEntriesFrom(input, _repeated_sceneExhibits_codec);
          break;
        }
        case 26:
        case 24: {
          taskExhibits_.AddEntriesFrom(input, _repeated_taskExhibits_codec);
          break;
        }
        case 32: {
          VitConsume = input.ReadInt32();
          break;
        }
        case 40: {
          Seconds = input.ReadInt32();
          break;
        }
        case 50:
        case 48: {
          officerIds_.AddEntriesFrom(input, _repeated_officerIds_codec);
          break;
        }
        case 56: {
          IsDropScene = input.ReadBool();
          break;
        }
        case 66: {
          dropItems_.AddEntriesFrom(input, _repeated_dropItems_codec);
          break;
        }
        case 72: {
          MultiId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*局内结算
/// </summary>
public sealed partial class CSSceneRewardRequest : pb::IMessage<CSSceneRewardRequest> {
  private static readonly pb::MessageParser<CSSceneRewardRequest> _parser = new pb::MessageParser<CSSceneRewardRequest>(() => new CSSceneRewardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneRewardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneRewardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneRewardRequest(CSSceneRewardRequest other) : this() {
    playerId_ = other.playerId_;
    sceneId_ = other.sceneId_;
    result_ = other.result_;
    costTime_ = other.costTime_;
    useClickCount_ = other.useClickCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneRewardRequest Clone() {
    return new CSSceneRewardRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  /// <summary>
  ///客户端判定结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "costTime" field.</summary>
  public const int CostTimeFieldNumber = 4;
  private int costTime_;
  /// <summary>
  ///客户端用时
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CostTime {
    get { return costTime_; }
    set {
      costTime_ = value;
    }
  }

  /// <summary>Field number for the "useClickCount" field.</summary>
  public const int UseClickCountFieldNumber = 5;
  private int useClickCount_;
  /// <summary>
  ///用了多少次点击次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UseClickCount {
    get { return useClickCount_; }
    set {
      useClickCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneRewardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneRewardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (SceneId != other.SceneId) return false;
    if (Result != other.Result) return false;
    if (CostTime != other.CostTime) return false;
    if (UseClickCount != other.UseClickCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (CostTime != 0) hash ^= CostTime.GetHashCode();
    if (UseClickCount != 0) hash ^= UseClickCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SceneId);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (CostTime != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(CostTime);
    }
    if (UseClickCount != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(UseClickCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (CostTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostTime);
    }
    if (UseClickCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UseClickCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneRewardRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.CostTime != 0) {
      CostTime = other.CostTime;
    }
    if (other.UseClickCount != 0) {
      UseClickCount = other.UseClickCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          SceneId = input.ReadInt64();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
        case 32: {
          CostTime = input.ReadInt32();
          break;
        }
        case 40: {
          UseClickCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneRewardResponse : pb::IMessage<SCSceneRewardResponse> {
  private static readonly pb::MessageParser<SCSceneRewardResponse> _parser = new pb::MessageParser<SCSceneRewardResponse>(() => new SCSceneRewardResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneRewardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneRewardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneRewardResponse(SCSceneRewardResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    sceneId_ = other.sceneId_;
    outputCoin_ = other.outputCoin_;
    outputCash_ = other.outputCash_;
    outputVit_ = other.outputVit_;
    outputExp_ = other.outputExp_;
    giftItems_ = other.giftItems_.Clone();
    sceneRewardComprise_ = other.sceneRewardComprise_.Clone();
    difficulty_ = other.difficulty_;
    exp_ = other.exp_;
    upLevelRewards_ = other.upLevelRewards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneRewardResponse Clone() {
    return new SCSceneRewardResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "outputCoin" field.</summary>
  public const int OutputCoinFieldNumber = 3;
  private int outputCoin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputCoin {
    get { return outputCoin_; }
    set {
      outputCoin_ = value;
    }
  }

  /// <summary>Field number for the "outputCash" field.</summary>
  public const int OutputCashFieldNumber = 4;
  private int outputCash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputCash {
    get { return outputCash_; }
    set {
      outputCash_ = value;
    }
  }

  /// <summary>Field number for the "outputVit" field.</summary>
  public const int OutputVitFieldNumber = 5;
  private int outputVit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputVit {
    get { return outputVit_; }
    set {
      outputVit_ = value;
    }
  }

  /// <summary>Field number for the "outputExp" field.</summary>
  public const int OutputExpFieldNumber = 6;
  private int outputExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputExp {
    get { return outputExp_; }
    set {
      outputExp_ = value;
    }
  }

  /// <summary>Field number for the "giftItems" field.</summary>
  public const int GiftItemsFieldNumber = 7;
  private static readonly pb::FieldCodec<global::GiftItem> _repeated_giftItems_codec
      = pb::FieldCodec.ForMessage(58, global::GiftItem.Parser);
  private readonly pbc::RepeatedField<global::GiftItem> giftItems_ = new pbc::RepeatedField<global::GiftItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GiftItem> GiftItems {
    get { return giftItems_; }
  }

  /// <summary>Field number for the "sceneRewardComprise" field.</summary>
  public const int SceneRewardCompriseFieldNumber = 8;
  private static readonly pb::FieldCodec<global::SceneRewardComprise> _repeated_sceneRewardComprise_codec
      = pb::FieldCodec.ForMessage(66, global::SceneRewardComprise.Parser);
  private readonly pbc::RepeatedField<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::RepeatedField<global::SceneRewardComprise>();
  /// <summary>
  ///具体奖励分组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneRewardComprise> SceneRewardComprise {
    get { return sceneRewardComprise_; }
  }

  /// <summary>Field number for the "difficulty" field.</summary>
  public const int DifficultyFieldNumber = 9;
  private int difficulty_;
  /// <summary>
  ///当前大场景难度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Difficulty {
    get { return difficulty_; }
    set {
      difficulty_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 10;
  private int exp_;
  /// <summary>
  ///当前大场景经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "upLevelRewards" field.</summary>
  public const int UpLevelRewardsFieldNumber = 11;
  private static readonly pb::FieldCodec<global::GiftItem> _repeated_upLevelRewards_codec
      = pb::FieldCodec.ForMessage(90, global::GiftItem.Parser);
  private readonly pbc::RepeatedField<global::GiftItem> upLevelRewards_ = new pbc::RepeatedField<global::GiftItem>();
  /// <summary>
  ///难度升级奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GiftItem> UpLevelRewards {
    get { return upLevelRewards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneRewardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneRewardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (SceneId != other.SceneId) return false;
    if (OutputCoin != other.OutputCoin) return false;
    if (OutputCash != other.OutputCash) return false;
    if (OutputVit != other.OutputVit) return false;
    if (OutputExp != other.OutputExp) return false;
    if(!giftItems_.Equals(other.giftItems_)) return false;
    if(!sceneRewardComprise_.Equals(other.sceneRewardComprise_)) return false;
    if (Difficulty != other.Difficulty) return false;
    if (Exp != other.Exp) return false;
    if(!upLevelRewards_.Equals(other.upLevelRewards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (OutputCoin != 0) hash ^= OutputCoin.GetHashCode();
    if (OutputCash != 0) hash ^= OutputCash.GetHashCode();
    if (OutputVit != 0) hash ^= OutputVit.GetHashCode();
    if (OutputExp != 0) hash ^= OutputExp.GetHashCode();
    hash ^= giftItems_.GetHashCode();
    hash ^= sceneRewardComprise_.GetHashCode();
    if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    hash ^= upLevelRewards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (SceneId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SceneId);
    }
    if (OutputCoin != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OutputCoin);
    }
    if (OutputCash != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OutputCash);
    }
    if (OutputVit != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(OutputVit);
    }
    if (OutputExp != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(OutputExp);
    }
    giftItems_.WriteTo(output, _repeated_giftItems_codec);
    sceneRewardComprise_.WriteTo(output, _repeated_sceneRewardComprise_codec);
    if (Difficulty != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(Difficulty);
    }
    if (Exp != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Exp);
    }
    upLevelRewards_.WriteTo(output, _repeated_upLevelRewards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (OutputCoin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCoin);
    }
    if (OutputCash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCash);
    }
    if (OutputVit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputVit);
    }
    if (OutputExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputExp);
    }
    size += giftItems_.CalculateSize(_repeated_giftItems_codec);
    size += sceneRewardComprise_.CalculateSize(_repeated_sceneRewardComprise_codec);
    if (Difficulty != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    size += upLevelRewards_.CalculateSize(_repeated_upLevelRewards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneRewardResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.OutputCoin != 0) {
      OutputCoin = other.OutputCoin;
    }
    if (other.OutputCash != 0) {
      OutputCash = other.OutputCash;
    }
    if (other.OutputVit != 0) {
      OutputVit = other.OutputVit;
    }
    if (other.OutputExp != 0) {
      OutputExp = other.OutputExp;
    }
    giftItems_.Add(other.giftItems_);
    sceneRewardComprise_.Add(other.sceneRewardComprise_);
    if (other.Difficulty != 0) {
      Difficulty = other.Difficulty;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    upLevelRewards_.Add(other.upLevelRewards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 16: {
          SceneId = input.ReadInt64();
          break;
        }
        case 24: {
          OutputCoin = input.ReadInt32();
          break;
        }
        case 32: {
          OutputCash = input.ReadInt32();
          break;
        }
        case 40: {
          OutputVit = input.ReadInt32();
          break;
        }
        case 48: {
          OutputExp = input.ReadInt32();
          break;
        }
        case 58: {
          giftItems_.AddEntriesFrom(input, _repeated_giftItems_codec);
          break;
        }
        case 66: {
          sceneRewardComprise_.AddEntriesFrom(input, _repeated_sceneRewardComprise_codec);
          break;
        }
        case 72: {
          Difficulty = input.ReadInt32();
          break;
        }
        case 80: {
          Exp = input.ReadInt32();
          break;
        }
        case 90: {
          upLevelRewards_.AddEntriesFrom(input, _repeated_upLevelRewards_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*掉落的物品
/// </summary>
public sealed partial class GiftItem : pb::IMessage<GiftItem> {
  private static readonly pb::MessageParser<GiftItem> _parser = new pb::MessageParser<GiftItem>(() => new GiftItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GiftItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GiftItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GiftItem(GiftItem other) : this() {
    itemId_ = other.itemId_;
    num_ = other.num_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GiftItem Clone() {
    return new GiftItem(this);
  }

  /// <summary>Field number for the "itemId" field.</summary>
  public const int ItemIdFieldNumber = 1;
  private long itemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ItemId {
    get { return itemId_; }
    set {
      itemId_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GiftItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GiftItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ItemId != other.ItemId) return false;
    if (Num != other.Num) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ItemId != 0L) hash ^= ItemId.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ItemId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ItemId);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ItemId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ItemId);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GiftItem other) {
    if (other == null) {
      return;
    }
    if (other.ItemId != 0L) {
      ItemId = other.ItemId;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ItemId = input.ReadInt64();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*退出场景
/// </summary>
public sealed partial class CSSceneQuitRequest : pb::IMessage<CSSceneQuitRequest> {
  private static readonly pb::MessageParser<CSSceneQuitRequest> _parser = new pb::MessageParser<CSSceneQuitRequest>(() => new CSSceneQuitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneQuitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneQuitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneQuitRequest(CSSceneQuitRequest other) : this() {
    playerId_ = other.playerId_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneQuitRequest Clone() {
    return new CSSceneQuitRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///是否正常退出
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneQuitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneQuitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneQuitRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneQuitResponse : pb::IMessage<SCSceneQuitResponse> {
  private static readonly pb::MessageParser<SCSceneQuitResponse> _parser = new pb::MessageParser<SCSceneQuitResponse>(() => new SCSceneQuitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneQuitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneQuitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneQuitResponse(SCSceneQuitResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneQuitResponse Clone() {
    return new SCSceneQuitResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneQuitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneQuitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneQuitResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*暂停游戏
/// </summary>
public sealed partial class CSSceneSuspendRequest : pb::IMessage<CSSceneSuspendRequest> {
  private static readonly pb::MessageParser<CSSceneSuspendRequest> _parser = new pb::MessageParser<CSSceneSuspendRequest>(() => new CSSceneSuspendRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneSuspendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneSuspendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneSuspendRequest(CSSceneSuspendRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneSuspendRequest Clone() {
    return new CSSceneSuspendRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneSuspendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneSuspendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneSuspendRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneSuspendResponse : pb::IMessage<SCSceneSuspendResponse> {
  private static readonly pb::MessageParser<SCSceneSuspendResponse> _parser = new pb::MessageParser<SCSceneSuspendResponse>(() => new SCSceneSuspendResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneSuspendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneSuspendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneSuspendResponse(SCSceneSuspendResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneSuspendResponse Clone() {
    return new SCSceneSuspendResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneSuspendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneSuspendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneSuspendResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*恢复游戏
/// </summary>
public sealed partial class CSSceneResumeRequest : pb::IMessage<CSSceneResumeRequest> {
  private static readonly pb::MessageParser<CSSceneResumeRequest> _parser = new pb::MessageParser<CSSceneResumeRequest>(() => new CSSceneResumeRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneResumeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneResumeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneResumeRequest(CSSceneResumeRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneResumeRequest Clone() {
    return new CSSceneResumeRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneResumeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneResumeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneResumeRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneResumeResponse : pb::IMessage<SCSceneResumeResponse> {
  private static readonly pb::MessageParser<SCSceneResumeResponse> _parser = new pb::MessageParser<SCSceneResumeResponse>(() => new SCSceneResumeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneResumeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneResumeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneResumeResponse(SCSceneResumeResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneResumeResponse Clone() {
    return new SCSceneResumeResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneResumeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneResumeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneResumeResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*计时开始
/// </summary>
public sealed partial class CSSceneStartRequest : pb::IMessage<CSSceneStartRequest> {
  private static readonly pb::MessageParser<CSSceneStartRequest> _parser = new pb::MessageParser<CSSceneStartRequest>(() => new CSSceneStartRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneStartRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneStartRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneStartRequest(CSSceneStartRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneStartRequest Clone() {
    return new CSSceneStartRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneStartRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneStartRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneStartRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneStartResponse : pb::IMessage<SCSceneStartResponse> {
  private static readonly pb::MessageParser<SCSceneStartResponse> _parser = new pb::MessageParser<SCSceneStartResponse>(() => new SCSceneStartResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneStartResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneStartResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneStartResponse(SCSceneStartResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneStartResponse Clone() {
    return new SCSceneStartResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneStartResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneStartResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneStartResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSSearchSceneSelectOfficerReq : pb::IMessage<CSSearchSceneSelectOfficerReq> {
  private static readonly pb::MessageParser<CSSearchSceneSelectOfficerReq> _parser = new pb::MessageParser<CSSearchSceneSelectOfficerReq>(() => new CSSearchSceneSelectOfficerReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSearchSceneSelectOfficerReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSearchSceneSelectOfficerReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSearchSceneSelectOfficerReq(CSSearchSceneSelectOfficerReq other) : this() {
    officerIds_ = other.officerIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSearchSceneSelectOfficerReq Clone() {
    return new CSSearchSceneSelectOfficerReq(this);
  }

  /// <summary>Field number for the "officerIds" field.</summary>
  public const int OfficerIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_officerIds_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> officerIds_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///玩家给当前场景选的警员
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> OfficerIds {
    get { return officerIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSearchSceneSelectOfficerReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSearchSceneSelectOfficerReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!officerIds_.Equals(other.officerIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= officerIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    officerIds_.WriteTo(output, _repeated_officerIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += officerIds_.CalculateSize(_repeated_officerIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSearchSceneSelectOfficerReq other) {
    if (other == null) {
      return;
    }
    officerIds_.Add(other.officerIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          officerIds_.AddEntriesFrom(input, _repeated_officerIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SCSearchSceneSelectOfficerResp : pb::IMessage<SCSearchSceneSelectOfficerResp> {
  private static readonly pb::MessageParser<SCSearchSceneSelectOfficerResp> _parser = new pb::MessageParser<SCSearchSceneSelectOfficerResp>(() => new SCSearchSceneSelectOfficerResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSearchSceneSelectOfficerResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSearchSceneSelectOfficerResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSearchSceneSelectOfficerResp(SCSearchSceneSelectOfficerResp other) : this() {
    vitConsume_ = other.vitConsume_;
    costSeconds_ = other.costSeconds_;
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSearchSceneSelectOfficerResp Clone() {
    return new SCSearchSceneSelectOfficerResp(this);
  }

  /// <summary>Field number for the "vitConsume" field.</summary>
  public const int VitConsumeFieldNumber = 1;
  private int vitConsume_;
  /// <summary>
  ///总数，覆盖原值即可
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VitConsume {
    get { return vitConsume_; }
    set {
      vitConsume_ = value;
    }
  }

  /// <summary>Field number for the "costSeconds" field.</summary>
  public const int CostSecondsFieldNumber = 2;
  private int costSeconds_;
  /// <summary>
  ///总数，覆盖原值即可
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CostSeconds {
    get { return costSeconds_; }
    set {
      costSeconds_ = value;
    }
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 3;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSearchSceneSelectOfficerResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSearchSceneSelectOfficerResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (VitConsume != other.VitConsume) return false;
    if (CostSeconds != other.CostSeconds) return false;
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (VitConsume != 0) hash ^= VitConsume.GetHashCode();
    if (CostSeconds != 0) hash ^= CostSeconds.GetHashCode();
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (VitConsume != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(VitConsume);
    }
    if (CostSeconds != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CostSeconds);
    }
    if (responseStatus_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(ResponseStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (VitConsume != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VitConsume);
    }
    if (CostSeconds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostSeconds);
    }
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSearchSceneSelectOfficerResp other) {
    if (other == null) {
      return;
    }
    if (other.VitConsume != 0) {
      VitConsume = other.VitConsume;
    }
    if (other.CostSeconds != 0) {
      CostSeconds = other.CostSeconds;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          VitConsume = input.ReadInt32();
          break;
        }
        case 16: {
          CostSeconds = input.ReadInt32();
          break;
        }
        case 26: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*购买道具
/// </summary>
public sealed partial class CSBuyItemRequest : pb::IMessage<CSBuyItemRequest> {
  private static readonly pb::MessageParser<CSBuyItemRequest> _parser = new pb::MessageParser<CSBuyItemRequest>(() => new CSBuyItemRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSBuyItemRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuyItemRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuyItemRequest(CSBuyItemRequest other) : this() {
    playerId_ = other.playerId_;
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuyItemRequest Clone() {
    return new CSBuyItemRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 2;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 3;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSBuyItemRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSBuyItemRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (PropId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSBuyItemRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          PropId = input.ReadInt64();
          break;
        }
        case 24: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCBuyItemResponse : pb::IMessage<SCBuyItemResponse> {
  private static readonly pb::MessageParser<SCBuyItemResponse> _parser = new pb::MessageParser<SCBuyItemResponse>(() => new SCBuyItemResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCBuyItemResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuyItemResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuyItemResponse(SCBuyItemResponse other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuyItemResponse Clone() {
    return new SCBuyItemResponse(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 3;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCBuyItemResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCBuyItemResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (Result != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCBuyItemResponse other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 24: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerPropMsg : pb::IMessage<PlayerPropMsg> {
  private static readonly pb::MessageParser<PlayerPropMsg> _parser = new pb::MessageParser<PlayerPropMsg>(() => new PlayerPropMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPropMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropMsg(PlayerPropMsg other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    expireTime_ = other.expireTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropMsg Clone() {
    return new PlayerPropMsg(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "expireTime" field.</summary>
  public const int ExpireTimeFieldNumber = 3;
  private long expireTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpireTime {
    get { return expireTime_; }
    set {
      expireTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPropMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPropMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    if (ExpireTime != other.ExpireTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (ExpireTime != 0L) hash ^= ExpireTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (ExpireTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(ExpireTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (ExpireTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPropMsg other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.ExpireTime != 0L) {
      ExpireTime = other.ExpireTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 24: {
          ExpireTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*玩家物品列表
/// </summary>
public sealed partial class CSPlayerPropRequest : pb::IMessage<CSPlayerPropRequest> {
  private static readonly pb::MessageParser<CSPlayerPropRequest> _parser = new pb::MessageParser<CSPlayerPropRequest>(() => new CSPlayerPropRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerPropRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerPropRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerPropRequest(CSPlayerPropRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerPropRequest Clone() {
    return new CSPlayerPropRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerPropRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerPropRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerPropRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCPlayerPropResponse : pb::IMessage<SCPlayerPropResponse> {
  private static readonly pb::MessageParser<SCPlayerPropResponse> _parser = new pb::MessageParser<SCPlayerPropResponse>(() => new SCPlayerPropResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerPropResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerPropResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerPropResponse(SCPlayerPropResponse other) : this() {
    ReponseStatus = other.reponseStatus_ != null ? other.ReponseStatus.Clone() : null;
    playerProps_ = other.playerProps_.Clone();
    recentProps_ = other.recentProps_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerPropResponse Clone() {
    return new SCPlayerPropResponse(this);
  }

  /// <summary>Field number for the "reponseStatus" field.</summary>
  public const int ReponseStatusFieldNumber = 1;
  private global::ReponseStatus reponseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReponseStatus ReponseStatus {
    get { return reponseStatus_; }
    set {
      reponseStatus_ = value;
    }
  }

  /// <summary>Field number for the "playerProps" field.</summary>
  public const int PlayerPropsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerPropMsg> _repeated_playerProps_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerPropMsg.Parser);
  private readonly pbc::RepeatedField<global::PlayerPropMsg> playerProps_ = new pbc::RepeatedField<global::PlayerPropMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerPropMsg> PlayerProps {
    get { return playerProps_; }
  }

  /// <summary>Field number for the "recentProps" field.</summary>
  public const int RecentPropsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PlayerPropMsg> _repeated_recentProps_codec
      = pb::FieldCodec.ForMessage(26, global::PlayerPropMsg.Parser);
  private readonly pbc::RepeatedField<global::PlayerPropMsg> recentProps_ = new pbc::RepeatedField<global::PlayerPropMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerPropMsg> RecentProps {
    get { return recentProps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerPropResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerPropResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReponseStatus, other.ReponseStatus)) return false;
    if(!playerProps_.Equals(other.playerProps_)) return false;
    if(!recentProps_.Equals(other.recentProps_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (reponseStatus_ != null) hash ^= ReponseStatus.GetHashCode();
    hash ^= playerProps_.GetHashCode();
    hash ^= recentProps_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (reponseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReponseStatus);
    }
    playerProps_.WriteTo(output, _repeated_playerProps_codec);
    recentProps_.WriteTo(output, _repeated_recentProps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (reponseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReponseStatus);
    }
    size += playerProps_.CalculateSize(_repeated_playerProps_codec);
    size += recentProps_.CalculateSize(_repeated_recentProps_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerPropResponse other) {
    if (other == null) {
      return;
    }
    if (other.reponseStatus_ != null) {
      if (reponseStatus_ == null) {
        reponseStatus_ = new global::ReponseStatus();
      }
      ReponseStatus.MergeFrom(other.ReponseStatus);
    }
    playerProps_.Add(other.playerProps_);
    recentProps_.Add(other.recentProps_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (reponseStatus_ == null) {
            reponseStatus_ = new global::ReponseStatus();
          }
          input.ReadMessage(reponseStatus_);
          break;
        }
        case 18: {
          playerProps_.AddEntriesFrom(input, _repeated_playerProps_codec);
          break;
        }
        case 26: {
          recentProps_.AddEntriesFrom(input, _repeated_recentProps_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*玩家物品，清空最近获取
/// </summary>
public sealed partial class CSPlayerPropRecentRequest : pb::IMessage<CSPlayerPropRecentRequest> {
  private static readonly pb::MessageParser<CSPlayerPropRecentRequest> _parser = new pb::MessageParser<CSPlayerPropRecentRequest>(() => new CSPlayerPropRecentRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerPropRecentRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerPropRecentRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerPropRecentRequest(CSPlayerPropRecentRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerPropRecentRequest Clone() {
    return new CSPlayerPropRecentRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerPropRecentRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerPropRecentRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerPropRecentRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCPlayerPropRecentResposne : pb::IMessage<SCPlayerPropRecentResposne> {
  private static readonly pb::MessageParser<SCPlayerPropRecentResposne> _parser = new pb::MessageParser<SCPlayerPropRecentResposne>(() => new SCPlayerPropRecentResposne());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerPropRecentResposne> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerPropRecentResposne() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerPropRecentResposne(SCPlayerPropRecentResposne other) : this() {
    ReponseStatus = other.reponseStatus_ != null ? other.ReponseStatus.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerPropRecentResposne Clone() {
    return new SCPlayerPropRecentResposne(this);
  }

  /// <summary>Field number for the "reponseStatus" field.</summary>
  public const int ReponseStatusFieldNumber = 1;
  private global::ReponseStatus reponseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ReponseStatus ReponseStatus {
    get { return reponseStatus_; }
    set {
      reponseStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerPropRecentResposne);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerPropRecentResposne other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReponseStatus, other.ReponseStatus)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (reponseStatus_ != null) hash ^= ReponseStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (reponseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReponseStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (reponseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReponseStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerPropRecentResposne other) {
    if (other == null) {
      return;
    }
    if (other.reponseStatus_ != null) {
      if (reponseStatus_ == null) {
        reponseStatus_ = new global::ReponseStatus();
      }
      ReponseStatus.MergeFrom(other.ReponseStatus);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (reponseStatus_ == null) {
            reponseStatus_ = new global::ReponseStatus();
          }
          input.ReadMessage(reponseStatus_);
          break;
        }
      }
    }
  }

}

public sealed partial class ReponseStatus : pb::IMessage<ReponseStatus> {
  private static readonly pb::MessageParser<ReponseStatus> _parser = new pb::MessageParser<ReponseStatus>(() => new ReponseStatus());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ReponseStatus> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReponseStatus() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReponseStatus(ReponseStatus other) : this() {
    code_ = other.code_;
    msg_ = other.msg_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ReponseStatus Clone() {
    return new ReponseStatus(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private int code_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "msg" field.</summary>
  public const int MsgFieldNumber = 2;
  private string msg_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Msg {
    get { return msg_; }
    set {
      msg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ReponseStatus);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ReponseStatus other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Msg != other.Msg) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Msg.Length != 0) hash ^= Msg.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (Msg.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Msg);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (Msg.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ReponseStatus other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Msg.Length != 0) {
      Msg = other.Msg;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          Msg = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*请求玩家信息
/// </summary>
public sealed partial class CSPlayerInfoRequest : pb::IMessage<CSPlayerInfoRequest> {
  private static readonly pb::MessageParser<CSPlayerInfoRequest> _parser = new pb::MessageParser<CSPlayerInfoRequest>(() => new CSPlayerInfoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerInfoRequest(CSPlayerInfoRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerInfoRequest Clone() {
    return new CSPlayerInfoRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCPlayerInfoResponse : pb::IMessage<SCPlayerInfoResponse> {
  private static readonly pb::MessageParser<SCPlayerInfoResponse> _parser = new pb::MessageParser<SCPlayerInfoResponse>(() => new SCPlayerInfoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerInfoResponse(SCPlayerInfoResponse other) : this() {
    playerId_ = other.playerId_;
    playerName_ = other.playerName_;
    playerIcon_ = other.playerIcon_;
    coin_ = other.coin_;
    cash_ = other.cash_;
    vit_ = other.vit_;
    level_ = other.level_;
    exp_ = other.exp_;
    laborUnion_ = other.laborUnion_;
    upgradeExp_ = other.upgradeExp_;
    expMultiple_ = other.expMultiple_;
    lastAddVitTime_ = other.lastAddVitTime_;
    millisRecoverOneVit_ = other.millisRecoverOneVit_;
    hasRenamed_ = other.hasRenamed_;
    infiniteVitRestTime_ = other.infiniteVitRestTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerInfoResponse Clone() {
    return new SCPlayerInfoResponse(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "playerName" field.</summary>
  public const int PlayerNameFieldNumber = 2;
  private string playerName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerName {
    get { return playerName_; }
    set {
      playerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playerIcon" field.</summary>
  public const int PlayerIconFieldNumber = 3;
  private string playerIcon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerIcon {
    get { return playerIcon_; }
    set {
      playerIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 4;
  private int coin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "cash" field.</summary>
  public const int CashFieldNumber = 5;
  private int cash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cash {
    get { return cash_; }
    set {
      cash_ = value;
    }
  }

  /// <summary>Field number for the "vit" field.</summary>
  public const int VitFieldNumber = 6;
  private int vit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vit {
    get { return vit_; }
    set {
      vit_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 7;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 8;
  private int exp_;
  /// <summary>
  ///当前等级以获得经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "laborUnion" field.</summary>
  public const int LaborUnionFieldNumber = 9;
  private int laborUnion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LaborUnion {
    get { return laborUnion_; }
    set {
      laborUnion_ = value;
    }
  }

  /// <summary>Field number for the "upgradeExp" field.</summary>
  public const int UpgradeExpFieldNumber = 10;
  private int upgradeExp_;
  /// <summary>
  ///升级需要的经验
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int UpgradeExp {
    get { return upgradeExp_; }
    set {
      upgradeExp_ = value;
    }
  }

  /// <summary>Field number for the "expMultiple" field.</summary>
  public const int ExpMultipleFieldNumber = 11;
  private float expMultiple_;
  /// <summary>
  ///经验加成
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float ExpMultiple {
    get { return expMultiple_; }
    set {
      expMultiple_ = value;
    }
  }

  /// <summary>Field number for the "lastAddVitTime" field.</summary>
  public const int LastAddVitTimeFieldNumber = 12;
  private long lastAddVitTime_;
  /// <summary>
  ///上次增加体力值的时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastAddVitTime {
    get { return lastAddVitTime_; }
    set {
      lastAddVitTime_ = value;
    }
  }

  /// <summary>Field number for the "millisRecoverOneVit" field.</summary>
  public const int MillisRecoverOneVitFieldNumber = 13;
  private long millisRecoverOneVit_;
  /// <summary>
  ///恢复一点体力值需要的毫秒数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MillisRecoverOneVit {
    get { return millisRecoverOneVit_; }
    set {
      millisRecoverOneVit_ = value;
    }
  }

  /// <summary>Field number for the "hasRenamed" field.</summary>
  public const int HasRenamedFieldNumber = 14;
  private int hasRenamed_;
  /// <summary>
  ///0表示未修改过，1表示已修改过
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HasRenamed {
    get { return hasRenamed_; }
    set {
      hasRenamed_ = value;
    }
  }

  /// <summary>Field number for the "infiniteVitRestTime" field.</summary>
  public const int InfiniteVitRestTimeFieldNumber = 15;
  private long infiniteVitRestTime_;
  /// <summary>
  ///无限体力剩余毫秒
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long InfiniteVitRestTime {
    get { return infiniteVitRestTime_; }
    set {
      infiniteVitRestTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (PlayerName != other.PlayerName) return false;
    if (PlayerIcon != other.PlayerIcon) return false;
    if (Coin != other.Coin) return false;
    if (Cash != other.Cash) return false;
    if (Vit != other.Vit) return false;
    if (Level != other.Level) return false;
    if (Exp != other.Exp) return false;
    if (LaborUnion != other.LaborUnion) return false;
    if (UpgradeExp != other.UpgradeExp) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ExpMultiple, other.ExpMultiple)) return false;
    if (LastAddVitTime != other.LastAddVitTime) return false;
    if (MillisRecoverOneVit != other.MillisRecoverOneVit) return false;
    if (HasRenamed != other.HasRenamed) return false;
    if (InfiniteVitRestTime != other.InfiniteVitRestTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (PlayerName.Length != 0) hash ^= PlayerName.GetHashCode();
    if (PlayerIcon.Length != 0) hash ^= PlayerIcon.GetHashCode();
    if (Coin != 0) hash ^= Coin.GetHashCode();
    if (Cash != 0) hash ^= Cash.GetHashCode();
    if (Vit != 0) hash ^= Vit.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (LaborUnion != 0) hash ^= LaborUnion.GetHashCode();
    if (UpgradeExp != 0) hash ^= UpgradeExp.GetHashCode();
    if (ExpMultiple != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ExpMultiple);
    if (LastAddVitTime != 0L) hash ^= LastAddVitTime.GetHashCode();
    if (MillisRecoverOneVit != 0L) hash ^= MillisRecoverOneVit.GetHashCode();
    if (HasRenamed != 0) hash ^= HasRenamed.GetHashCode();
    if (InfiniteVitRestTime != 0L) hash ^= InfiniteVitRestTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (PlayerName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(PlayerName);
    }
    if (PlayerIcon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(PlayerIcon);
    }
    if (Coin != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Coin);
    }
    if (Cash != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Cash);
    }
    if (Vit != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Vit);
    }
    if (Level != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Level);
    }
    if (Exp != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Exp);
    }
    if (LaborUnion != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(LaborUnion);
    }
    if (UpgradeExp != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(UpgradeExp);
    }
    if (ExpMultiple != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(ExpMultiple);
    }
    if (LastAddVitTime != 0L) {
      output.WriteRawTag(96);
      output.WriteInt64(LastAddVitTime);
    }
    if (MillisRecoverOneVit != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(MillisRecoverOneVit);
    }
    if (HasRenamed != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(HasRenamed);
    }
    if (InfiniteVitRestTime != 0L) {
      output.WriteRawTag(120);
      output.WriteInt64(InfiniteVitRestTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (PlayerName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerName);
    }
    if (PlayerIcon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerIcon);
    }
    if (Coin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
    }
    if (Cash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
    }
    if (Vit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (LaborUnion != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LaborUnion);
    }
    if (UpgradeExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradeExp);
    }
    if (ExpMultiple != 0F) {
      size += 1 + 4;
    }
    if (LastAddVitTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastAddVitTime);
    }
    if (MillisRecoverOneVit != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MillisRecoverOneVit);
    }
    if (HasRenamed != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasRenamed);
    }
    if (InfiniteVitRestTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(InfiniteVitRestTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.PlayerName.Length != 0) {
      PlayerName = other.PlayerName;
    }
    if (other.PlayerIcon.Length != 0) {
      PlayerIcon = other.PlayerIcon;
    }
    if (other.Coin != 0) {
      Coin = other.Coin;
    }
    if (other.Cash != 0) {
      Cash = other.Cash;
    }
    if (other.Vit != 0) {
      Vit = other.Vit;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.LaborUnion != 0) {
      LaborUnion = other.LaborUnion;
    }
    if (other.UpgradeExp != 0) {
      UpgradeExp = other.UpgradeExp;
    }
    if (other.ExpMultiple != 0F) {
      ExpMultiple = other.ExpMultiple;
    }
    if (other.LastAddVitTime != 0L) {
      LastAddVitTime = other.LastAddVitTime;
    }
    if (other.MillisRecoverOneVit != 0L) {
      MillisRecoverOneVit = other.MillisRecoverOneVit;
    }
    if (other.HasRenamed != 0) {
      HasRenamed = other.HasRenamed;
    }
    if (other.InfiniteVitRestTime != 0L) {
      InfiniteVitRestTime = other.InfiniteVitRestTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          PlayerName = input.ReadString();
          break;
        }
        case 26: {
          PlayerIcon = input.ReadString();
          break;
        }
        case 32: {
          Coin = input.ReadInt32();
          break;
        }
        case 40: {
          Cash = input.ReadInt32();
          break;
        }
        case 48: {
          Vit = input.ReadInt32();
          break;
        }
        case 56: {
          Level = input.ReadInt32();
          break;
        }
        case 64: {
          Exp = input.ReadInt32();
          break;
        }
        case 72: {
          LaborUnion = input.ReadInt32();
          break;
        }
        case 80: {
          UpgradeExp = input.ReadInt32();
          break;
        }
        case 93: {
          ExpMultiple = input.ReadFloat();
          break;
        }
        case 96: {
          LastAddVitTime = input.ReadInt64();
          break;
        }
        case 104: {
          MillisRecoverOneVit = input.ReadInt64();
          break;
        }
        case 112: {
          HasRenamed = input.ReadInt32();
          break;
        }
        case 120: {
          InfiniteVitRestTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*改名
/// </summary>
public sealed partial class CSRenameRequest : pb::IMessage<CSRenameRequest> {
  private static readonly pb::MessageParser<CSRenameRequest> _parser = new pb::MessageParser<CSRenameRequest>(() => new CSRenameRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSRenameRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRenameRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRenameRequest(CSRenameRequest other) : this() {
    playerId_ = other.playerId_;
    newName_ = other.newName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRenameRequest Clone() {
    return new CSRenameRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "newName" field.</summary>
  public const int NewNameFieldNumber = 2;
  private string newName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewName {
    get { return newName_; }
    set {
      newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSRenameRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSRenameRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (NewName != other.NewName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (NewName.Length != 0) hash ^= NewName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (NewName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NewName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (NewName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSRenameRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.NewName.Length != 0) {
      NewName = other.NewName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          NewName = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*
///result 0表示失败（一般是异常了）
///1表示成功 2表示不能为空 3表示超过最大字符长度20(utf-8编码的长度) 4表示名字已存在
/// </summary>
public sealed partial class SCRenameResponse : pb::IMessage<SCRenameResponse> {
  private static readonly pb::MessageParser<SCRenameResponse> _parser = new pb::MessageParser<SCRenameResponse>(() => new SCRenameResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCRenameResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRenameResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRenameResponse(SCRenameResponse other) : this() {
    playerId_ = other.playerId_;
    result_ = other.result_;
    newName_ = other.newName_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRenameResponse Clone() {
    return new SCRenameResponse(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "newName" field.</summary>
  public const int NewNameFieldNumber = 3;
  private string newName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewName {
    get { return newName_; }
    set {
      newName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCRenameResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCRenameResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Result != other.Result) return false;
    if (NewName != other.NewName) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (NewName.Length != 0) hash ^= NewName.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (NewName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NewName);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (NewName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewName);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCRenameResponse other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.NewName.Length != 0) {
      NewName = other.NewName;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 26: {
          NewName = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*查看玩家拥有的警员
/// </summary>
public sealed partial class CSOfficerListRequest : pb::IMessage<CSOfficerListRequest> {
  private static readonly pb::MessageParser<CSOfficerListRequest> _parser = new pb::MessageParser<CSOfficerListRequest>(() => new CSOfficerListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSOfficerListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerListRequest(CSOfficerListRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerListRequest Clone() {
    return new CSOfficerListRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSOfficerListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSOfficerListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSOfficerListRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCOfficerListResponse : pb::IMessage<SCOfficerListResponse> {
  private static readonly pb::MessageParser<SCOfficerListResponse> _parser = new pb::MessageParser<SCOfficerListResponse>(() => new SCOfficerListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCOfficerListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerListResponse(SCOfficerListResponse other) : this() {
    playerId_ = other.playerId_;
    officers_ = other.officers_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerListResponse Clone() {
    return new SCOfficerListResponse(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "officers" field.</summary>
  public const int OfficersFieldNumber = 2;
  private static readonly pb::FieldCodec<global::OfficerInfo> _repeated_officers_codec
      = pb::FieldCodec.ForMessage(18, global::OfficerInfo.Parser);
  private readonly pbc::RepeatedField<global::OfficerInfo> officers_ = new pbc::RepeatedField<global::OfficerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::OfficerInfo> Officers {
    get { return officers_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCOfficerListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCOfficerListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if(!officers_.Equals(other.officers_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    hash ^= officers_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    officers_.WriteTo(output, _repeated_officers_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    size += officers_.CalculateSize(_repeated_officers_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCOfficerListResponse other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    officers_.Add(other.officers_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          officers_.AddEntriesFrom(input, _repeated_officers_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class OfficerInfo : pb::IMessage<OfficerInfo> {
  private static readonly pb::MessageParser<OfficerInfo> _parser = new pb::MessageParser<OfficerInfo>(() => new OfficerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OfficerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfficerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfficerInfo(OfficerInfo other) : this() {
    playerOfficerId_ = other.playerOfficerId_;
    officerId_ = other.officerId_;
    level_ = other.level_;
    outsight_ = other.outsight_;
    willPower_ = other.willPower_;
    attention_ = other.attention_;
    memory_ = other.memory_;
    vitConsume_ = other.vitConsume_;
    secondGain_ = other.secondGain_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OfficerInfo Clone() {
    return new OfficerInfo(this);
  }

  /// <summary>Field number for the "playerOfficerId" field.</summary>
  public const int PlayerOfficerIdFieldNumber = 1;
  private long playerOfficerId_;
  /// <summary>
  ///警员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
    set {
      playerOfficerId_ = value;
    }
  }

  /// <summary>Field number for the "officerId" field.</summary>
  public const int OfficerIdFieldNumber = 2;
  private long officerId_;
  /// <summary>
  ///模板id，通过该id去警员配置表获取其他信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OfficerId {
    get { return officerId_; }
    set {
      officerId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  /// <summary>
  ///等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "outsight" field.</summary>
  public const int OutsightFieldNumber = 4;
  private int outsight_;
  /// <summary>
  ///观察力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Outsight {
    get { return outsight_; }
    set {
      outsight_ = value;
    }
  }

  /// <summary>Field number for the "willPower" field.</summary>
  public const int WillPowerFieldNumber = 5;
  private int willPower_;
  /// <summary>
  ///意志力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int WillPower {
    get { return willPower_; }
    set {
      willPower_ = value;
    }
  }

  /// <summary>Field number for the "attention" field.</summary>
  public const int AttentionFieldNumber = 6;
  private int attention_;
  /// <summary>
  ///注意力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Attention {
    get { return attention_; }
    set {
      attention_ = value;
    }
  }

  /// <summary>Field number for the "memory" field.</summary>
  public const int MemoryFieldNumber = 7;
  private int memory_;
  /// <summary>
  ///记忆力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Memory {
    get { return memory_; }
    set {
      memory_ = value;
    }
  }

  /// <summary>Field number for the "vitConsume" field.</summary>
  public const int VitConsumeFieldNumber = 8;
  private int vitConsume_;
  /// <summary>
  ///派出一局消耗的体力值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VitConsume {
    get { return vitConsume_; }
    set {
      vitConsume_ = value;
    }
  }

  /// <summary>Field number for the "secondGain" field.</summary>
  public const int SecondGainFieldNumber = 9;
  private int secondGain_;
  /// <summary>
  ///派出一局增加的局内时长
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SecondGain {
    get { return secondGain_; }
    set {
      secondGain_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OfficerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OfficerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerOfficerId != other.PlayerOfficerId) return false;
    if (OfficerId != other.OfficerId) return false;
    if (Level != other.Level) return false;
    if (Outsight != other.Outsight) return false;
    if (WillPower != other.WillPower) return false;
    if (Attention != other.Attention) return false;
    if (Memory != other.Memory) return false;
    if (VitConsume != other.VitConsume) return false;
    if (SecondGain != other.SecondGain) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerOfficerId != 0L) hash ^= PlayerOfficerId.GetHashCode();
    if (OfficerId != 0L) hash ^= OfficerId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Outsight != 0) hash ^= Outsight.GetHashCode();
    if (WillPower != 0) hash ^= WillPower.GetHashCode();
    if (Attention != 0) hash ^= Attention.GetHashCode();
    if (Memory != 0) hash ^= Memory.GetHashCode();
    if (VitConsume != 0) hash ^= VitConsume.GetHashCode();
    if (SecondGain != 0) hash ^= SecondGain.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerOfficerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerOfficerId);
    }
    if (OfficerId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(OfficerId);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Outsight != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Outsight);
    }
    if (WillPower != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(WillPower);
    }
    if (Attention != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Attention);
    }
    if (Memory != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Memory);
    }
    if (VitConsume != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(VitConsume);
    }
    if (SecondGain != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(SecondGain);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerOfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerOfficerId);
    }
    if (OfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficerId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Outsight != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Outsight);
    }
    if (WillPower != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(WillPower);
    }
    if (Attention != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attention);
    }
    if (Memory != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Memory);
    }
    if (VitConsume != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VitConsume);
    }
    if (SecondGain != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondGain);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OfficerInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlayerOfficerId != 0L) {
      PlayerOfficerId = other.PlayerOfficerId;
    }
    if (other.OfficerId != 0L) {
      OfficerId = other.OfficerId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Outsight != 0) {
      Outsight = other.Outsight;
    }
    if (other.WillPower != 0) {
      WillPower = other.WillPower;
    }
    if (other.Attention != 0) {
      Attention = other.Attention;
    }
    if (other.Memory != 0) {
      Memory = other.Memory;
    }
    if (other.VitConsume != 0) {
      VitConsume = other.VitConsume;
    }
    if (other.SecondGain != 0) {
      SecondGain = other.SecondGain;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerOfficerId = input.ReadInt64();
          break;
        }
        case 16: {
          OfficerId = input.ReadInt64();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Outsight = input.ReadInt32();
          break;
        }
        case 40: {
          WillPower = input.ReadInt32();
          break;
        }
        case 48: {
          Attention = input.ReadInt32();
          break;
        }
        case 56: {
          Memory = input.ReadInt32();
          break;
        }
        case 64: {
          VitConsume = input.ReadInt32();
          break;
        }
        case 72: {
          SecondGain = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*查看玩家拥有的某个警员的信息
/// </summary>
public sealed partial class CSOfficerInfoRequest : pb::IMessage<CSOfficerInfoRequest> {
  private static readonly pb::MessageParser<CSOfficerInfoRequest> _parser = new pb::MessageParser<CSOfficerInfoRequest>(() => new CSOfficerInfoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSOfficerInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerInfoRequest(CSOfficerInfoRequest other) : this() {
    playerId_ = other.playerId_;
    playerOfficerId_ = other.playerOfficerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerInfoRequest Clone() {
    return new CSOfficerInfoRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "playerOfficerId" field.</summary>
  public const int PlayerOfficerIdFieldNumber = 2;
  private long playerOfficerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
    set {
      playerOfficerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSOfficerInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSOfficerInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (PlayerOfficerId != other.PlayerOfficerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (PlayerOfficerId != 0L) hash ^= PlayerOfficerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (PlayerOfficerId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerOfficerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (PlayerOfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerOfficerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSOfficerInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.PlayerOfficerId != 0L) {
      PlayerOfficerId = other.PlayerOfficerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          PlayerOfficerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCOfficerInfoResponse : pb::IMessage<SCOfficerInfoResponse> {
  private static readonly pb::MessageParser<SCOfficerInfoResponse> _parser = new pb::MessageParser<SCOfficerInfoResponse>(() => new SCOfficerInfoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCOfficerInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerInfoResponse(SCOfficerInfoResponse other) : this() {
    Office = other.office_ != null ? other.Office.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerInfoResponse Clone() {
    return new SCOfficerInfoResponse(this);
  }

  /// <summary>Field number for the "office" field.</summary>
  public const int OfficeFieldNumber = 1;
  private global::OfficerInfo office_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OfficerInfo Office {
    get { return office_; }
    set {
      office_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCOfficerInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCOfficerInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Office, other.Office)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (office_ != null) hash ^= Office.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (office_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Office);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (office_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Office);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCOfficerInfoResponse other) {
    if (other == null) {
      return;
    }
    if (other.office_ != null) {
      if (office_ == null) {
        office_ = new global::OfficerInfo();
      }
      Office.MergeFrom(other.Office);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (office_ == null) {
            office_ = new global::OfficerInfo();
          }
          input.ReadMessage(office_);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 请求 事件
/// </summary>
public sealed partial class CSEventPhaseFeedbackRequest : pb::IMessage<CSEventPhaseFeedbackRequest> {
  private static readonly pb::MessageParser<CSEventPhaseFeedbackRequest> _parser = new pb::MessageParser<CSEventPhaseFeedbackRequest>(() => new CSEventPhaseFeedbackRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEventPhaseFeedbackRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventPhaseFeedbackRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventPhaseFeedbackRequest(CSEventPhaseFeedbackRequest other) : this() {
    eventId_ = other.eventId_;
    playerOfficerId_ = other.playerOfficerId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventPhaseFeedbackRequest Clone() {
    return new CSEventPhaseFeedbackRequest(this);
  }

  /// <summary>Field number for the "eventId" field.</summary>
  public const int EventIdFieldNumber = 1;
  private long eventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  /// <summary>Field number for the "playerOfficerId" field.</summary>
  public const int PlayerOfficerIdFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_playerOfficerId_codec
      = pb::FieldCodec.ForInt64(18);
  private readonly pbc::RepeatedField<long> playerOfficerId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> PlayerOfficerId {
    get { return playerOfficerId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEventPhaseFeedbackRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEventPhaseFeedbackRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventId != other.EventId) return false;
    if(!playerOfficerId_.Equals(other.playerOfficerId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventId != 0L) hash ^= EventId.GetHashCode();
    hash ^= playerOfficerId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(EventId);
    }
    playerOfficerId_.WriteTo(output, _repeated_playerOfficerId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
    }
    size += playerOfficerId_.CalculateSize(_repeated_playerOfficerId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEventPhaseFeedbackRequest other) {
    if (other == null) {
      return;
    }
    if (other.EventId != 0L) {
      EventId = other.EventId;
    }
    playerOfficerId_.Add(other.playerOfficerId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EventId = input.ReadInt64();
          break;
        }
        case 18:
        case 16: {
          playerOfficerId_.AddEntriesFrom(input, _repeated_playerOfficerId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///回复 事件
/// </summary>
public sealed partial class SCEventPhaseFeedbackResponse : pb::IMessage<SCEventPhaseFeedbackResponse> {
  private static readonly pb::MessageParser<SCEventPhaseFeedbackResponse> _parser = new pb::MessageParser<SCEventPhaseFeedbackResponse>(() => new SCEventPhaseFeedbackResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEventPhaseFeedbackResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventPhaseFeedbackResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventPhaseFeedbackResponse(SCEventPhaseFeedbackResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    valuation_ = other.valuation_;
    totalScore_ = other.totalScore_;
    phaseInfos_ = other.phaseInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventPhaseFeedbackResponse Clone() {
    return new SCEventPhaseFeedbackResponse(this);
  }

  /// <summary>Field number for the "ResponseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "valuation" field.</summary>
  public const int ValuationFieldNumber = 2;
  private bool valuation_;
  /// <summary>
  ///false表示普通，true表示完美
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Valuation {
    get { return valuation_; }
    set {
      valuation_ = value;
    }
  }

  /// <summary>Field number for the "totalScore" field.</summary>
  public const int TotalScoreFieldNumber = 3;
  private int totalScore_;
  /// <summary>
  ///总得分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalScore {
    get { return totalScore_; }
    set {
      totalScore_ = value;
    }
  }

  /// <summary>Field number for the "phaseInfos" field.</summary>
  public const int PhaseInfosFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PhaseInfo> _repeated_phaseInfos_codec
      = pb::FieldCodec.ForMessage(34, global::PhaseInfo.Parser);
  private readonly pbc::RepeatedField<global::PhaseInfo> phaseInfos_ = new pbc::RepeatedField<global::PhaseInfo>();
  /// <summary>
  ///各阶段数据
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PhaseInfo> PhaseInfos {
    get { return phaseInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEventPhaseFeedbackResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEventPhaseFeedbackResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (Valuation != other.Valuation) return false;
    if (TotalScore != other.TotalScore) return false;
    if(!phaseInfos_.Equals(other.phaseInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (Valuation != false) hash ^= Valuation.GetHashCode();
    if (TotalScore != 0) hash ^= TotalScore.GetHashCode();
    hash ^= phaseInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (Valuation != false) {
      output.WriteRawTag(16);
      output.WriteBool(Valuation);
    }
    if (TotalScore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TotalScore);
    }
    phaseInfos_.WriteTo(output, _repeated_phaseInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (Valuation != false) {
      size += 1 + 1;
    }
    if (TotalScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalScore);
    }
    size += phaseInfos_.CalculateSize(_repeated_phaseInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEventPhaseFeedbackResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.Valuation != false) {
      Valuation = other.Valuation;
    }
    if (other.TotalScore != 0) {
      TotalScore = other.TotalScore;
    }
    phaseInfos_.Add(other.phaseInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 16: {
          Valuation = input.ReadBool();
          break;
        }
        case 24: {
          TotalScore = input.ReadInt32();
          break;
        }
        case 34: {
          phaseInfos_.AddEntriesFrom(input, _repeated_phaseInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PhaseInfo : pb::IMessage<PhaseInfo> {
  private static readonly pb::MessageParser<PhaseInfo> _parser = new pb::MessageParser<PhaseInfo>(() => new PhaseInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PhaseInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhaseInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhaseInfo(PhaseInfo other) : this() {
    phaseId_ = other.phaseId_;
    officerTemplateId_ = other.officerTemplateId_;
    phaseScore_ = other.phaseScore_;
    officerScore_ = other.officerScore_;
    perfect_ = other.perfect_;
    perfectScore_ = other.perfectScore_;
    phaseTemplateId_ = other.phaseTemplateId_;
    matchWordScoreInfo_ = other.matchWordScoreInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PhaseInfo Clone() {
    return new PhaseInfo(this);
  }

  /// <summary>Field number for the "phaseId" field.</summary>
  public const int PhaseIdFieldNumber = 1;
  private int phaseId_;
  /// <summary>
  ///阶段
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PhaseId {
    get { return phaseId_; }
    set {
      phaseId_ = value;
    }
  }

  /// <summary>Field number for the "officerTemplateId" field.</summary>
  public const int OfficerTemplateIdFieldNumber = 2;
  private long officerTemplateId_;
  /// <summary>
  ///警员模板ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OfficerTemplateId {
    get { return officerTemplateId_; }
    set {
      officerTemplateId_ = value;
    }
  }

  /// <summary>Field number for the "phaseScore" field.</summary>
  public const int PhaseScoreFieldNumber = 3;
  private int phaseScore_;
  /// <summary>
  ///阶段得分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PhaseScore {
    get { return phaseScore_; }
    set {
      phaseScore_ = value;
    }
  }

  /// <summary>Field number for the "officerScore" field.</summary>
  public const int OfficerScoreFieldNumber = 4;
  private int officerScore_;
  /// <summary>
  ///警员自身得分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OfficerScore {
    get { return officerScore_; }
    set {
      officerScore_ = value;
    }
  }

  /// <summary>Field number for the "perfect" field.</summary>
  public const int PerfectFieldNumber = 5;
  private bool perfect_;
  /// <summary>
  ///是否完美
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Perfect {
    get { return perfect_; }
    set {
      perfect_ = value;
    }
  }

  /// <summary>Field number for the "perfectScore" field.</summary>
  public const int PerfectScoreFieldNumber = 6;
  private int perfectScore_;
  /// <summary>
  ///完美加成分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int PerfectScore {
    get { return perfectScore_; }
    set {
      perfectScore_ = value;
    }
  }

  /// <summary>Field number for the "phaseTemplateId" field.</summary>
  public const int PhaseTemplateIdFieldNumber = 7;
  private long phaseTemplateId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PhaseTemplateId {
    get { return phaseTemplateId_; }
    set {
      phaseTemplateId_ = value;
    }
  }

  /// <summary>Field number for the "matchWordScoreInfo" field.</summary>
  public const int MatchWordScoreInfoFieldNumber = 8;
  private static readonly pb::FieldCodec<global::MatchWordScoreInfo> _repeated_matchWordScoreInfo_codec
      = pb::FieldCodec.ForMessage(66, global::MatchWordScoreInfo.Parser);
  private readonly pbc::RepeatedField<global::MatchWordScoreInfo> matchWordScoreInfo_ = new pbc::RepeatedField<global::MatchWordScoreInfo>();
  /// <summary>
  ///匹配到的关键字，和每个关键字的得分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MatchWordScoreInfo> MatchWordScoreInfo {
    get { return matchWordScoreInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PhaseInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PhaseInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PhaseId != other.PhaseId) return false;
    if (OfficerTemplateId != other.OfficerTemplateId) return false;
    if (PhaseScore != other.PhaseScore) return false;
    if (OfficerScore != other.OfficerScore) return false;
    if (Perfect != other.Perfect) return false;
    if (PerfectScore != other.PerfectScore) return false;
    if (PhaseTemplateId != other.PhaseTemplateId) return false;
    if(!matchWordScoreInfo_.Equals(other.matchWordScoreInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PhaseId != 0) hash ^= PhaseId.GetHashCode();
    if (OfficerTemplateId != 0L) hash ^= OfficerTemplateId.GetHashCode();
    if (PhaseScore != 0) hash ^= PhaseScore.GetHashCode();
    if (OfficerScore != 0) hash ^= OfficerScore.GetHashCode();
    if (Perfect != false) hash ^= Perfect.GetHashCode();
    if (PerfectScore != 0) hash ^= PerfectScore.GetHashCode();
    if (PhaseTemplateId != 0L) hash ^= PhaseTemplateId.GetHashCode();
    hash ^= matchWordScoreInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PhaseId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(PhaseId);
    }
    if (OfficerTemplateId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(OfficerTemplateId);
    }
    if (PhaseScore != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(PhaseScore);
    }
    if (OfficerScore != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OfficerScore);
    }
    if (Perfect != false) {
      output.WriteRawTag(40);
      output.WriteBool(Perfect);
    }
    if (PerfectScore != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(PerfectScore);
    }
    if (PhaseTemplateId != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(PhaseTemplateId);
    }
    matchWordScoreInfo_.WriteTo(output, _repeated_matchWordScoreInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PhaseId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhaseId);
    }
    if (OfficerTemplateId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficerTemplateId);
    }
    if (PhaseScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PhaseScore);
    }
    if (OfficerScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OfficerScore);
    }
    if (Perfect != false) {
      size += 1 + 1;
    }
    if (PerfectScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(PerfectScore);
    }
    if (PhaseTemplateId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PhaseTemplateId);
    }
    size += matchWordScoreInfo_.CalculateSize(_repeated_matchWordScoreInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PhaseInfo other) {
    if (other == null) {
      return;
    }
    if (other.PhaseId != 0) {
      PhaseId = other.PhaseId;
    }
    if (other.OfficerTemplateId != 0L) {
      OfficerTemplateId = other.OfficerTemplateId;
    }
    if (other.PhaseScore != 0) {
      PhaseScore = other.PhaseScore;
    }
    if (other.OfficerScore != 0) {
      OfficerScore = other.OfficerScore;
    }
    if (other.Perfect != false) {
      Perfect = other.Perfect;
    }
    if (other.PerfectScore != 0) {
      PerfectScore = other.PerfectScore;
    }
    if (other.PhaseTemplateId != 0L) {
      PhaseTemplateId = other.PhaseTemplateId;
    }
    matchWordScoreInfo_.Add(other.matchWordScoreInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PhaseId = input.ReadInt32();
          break;
        }
        case 16: {
          OfficerTemplateId = input.ReadInt64();
          break;
        }
        case 24: {
          PhaseScore = input.ReadInt32();
          break;
        }
        case 32: {
          OfficerScore = input.ReadInt32();
          break;
        }
        case 40: {
          Perfect = input.ReadBool();
          break;
        }
        case 48: {
          PerfectScore = input.ReadInt32();
          break;
        }
        case 56: {
          PhaseTemplateId = input.ReadInt64();
          break;
        }
        case 66: {
          matchWordScoreInfo_.AddEntriesFrom(input, _repeated_matchWordScoreInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///关键字体
/// </summary>
public sealed partial class MatchWordScoreInfo : pb::IMessage<MatchWordScoreInfo> {
  private static readonly pb::MessageParser<MatchWordScoreInfo> _parser = new pb::MessageParser<MatchWordScoreInfo>(() => new MatchWordScoreInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MatchWordScoreInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchWordScoreInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchWordScoreInfo(MatchWordScoreInfo other) : this() {
    keyWordId_ = other.keyWordId_;
    keyWordMatchScore_ = other.keyWordMatchScore_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchWordScoreInfo Clone() {
    return new MatchWordScoreInfo(this);
  }

  /// <summary>Field number for the "keyWordId" field.</summary>
  public const int KeyWordIdFieldNumber = 1;
  private int keyWordId_;
  /// <summary>
  ///关键字ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KeyWordId {
    get { return keyWordId_; }
    set {
      keyWordId_ = value;
    }
  }

  /// <summary>Field number for the "keyWordMatchScore" field.</summary>
  public const int KeyWordMatchScoreFieldNumber = 2;
  private int keyWordMatchScore_;
  /// <summary>
  ///关键字匹配得到分数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int KeyWordMatchScore {
    get { return keyWordMatchScore_; }
    set {
      keyWordMatchScore_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MatchWordScoreInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MatchWordScoreInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (KeyWordId != other.KeyWordId) return false;
    if (KeyWordMatchScore != other.KeyWordMatchScore) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (KeyWordId != 0) hash ^= KeyWordId.GetHashCode();
    if (KeyWordMatchScore != 0) hash ^= KeyWordMatchScore.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (KeyWordId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(KeyWordId);
    }
    if (KeyWordMatchScore != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(KeyWordMatchScore);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (KeyWordId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyWordId);
    }
    if (KeyWordMatchScore != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeyWordMatchScore);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MatchWordScoreInfo other) {
    if (other == null) {
      return;
    }
    if (other.KeyWordId != 0) {
      KeyWordId = other.KeyWordId;
    }
    if (other.KeyWordMatchScore != 0) {
      KeyWordMatchScore = other.KeyWordMatchScore;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          KeyWordId = input.ReadInt32();
          break;
        }
        case 16: {
          KeyWordMatchScore = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*事件结算请求
/// </summary>
public sealed partial class CSEventRewardRequest : pb::IMessage<CSEventRewardRequest> {
  private static readonly pb::MessageParser<CSEventRewardRequest> _parser = new pb::MessageParser<CSEventRewardRequest>(() => new CSEventRewardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEventRewardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventRewardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventRewardRequest(CSEventRewardRequest other) : this() {
    playerId_ = other.playerId_;
    eventId_ = other.eventId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventRewardRequest Clone() {
    return new CSEventRewardRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "eventId" field.</summary>
  public const int EventIdFieldNumber = 2;
  private long eventId_;
  /// <summary>
  ///事件id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEventRewardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEventRewardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (EventId != other.EventId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (EventId != 0L) hash ^= EventId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (EventId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EventId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (EventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEventRewardRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.EventId != 0L) {
      EventId = other.EventId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          EventId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCEventRewardResponse : pb::IMessage<SCEventRewardResponse> {
  private static readonly pb::MessageParser<SCEventRewardResponse> _parser = new pb::MessageParser<SCEventRewardResponse>(() => new SCEventRewardResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEventRewardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventRewardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventRewardResponse(SCEventRewardResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    score_ = other.score_;
    valuation_ = other.valuation_;
    rewards_ = other.rewards_.Clone();
    exp_ = other.exp_;
    vit_ = other.vit_;
    coin_ = other.coin_;
    cash_ = other.cash_;
    sceneRewardComprise_ = other.sceneRewardComprise_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventRewardResponse Clone() {
    return new SCEventRewardResponse(this);
  }

  /// <summary>Field number for the "ResponseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 2;
  private int score_;
  /// <summary>
  ///得分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Score {
    get { return score_; }
    set {
      score_ = value;
    }
  }

  /// <summary>Field number for the "valuation" field.</summary>
  public const int ValuationFieldNumber = 3;
  private int valuation_;
  /// <summary>
  ///评价0表示过关失败，1表示过关，2表示完美过关	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Valuation {
    get { return valuation_; }
    set {
      valuation_ = value;
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::RewardItem> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(34, global::RewardItem.Parser);
  private readonly pbc::RepeatedField<global::RewardItem> rewards_ = new pbc::RepeatedField<global::RewardItem>();
  /// <summary>
  ///掉落奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RewardItem> Rewards {
    get { return rewards_; }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 5;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "vit" field.</summary>
  public const int VitFieldNumber = 6;
  private int vit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vit {
    get { return vit_; }
    set {
      vit_ = value;
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 7;
  private int coin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "cash" field.</summary>
  public const int CashFieldNumber = 8;
  private int cash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cash {
    get { return cash_; }
    set {
      cash_ = value;
    }
  }

  /// <summary>Field number for the "sceneRewardComprise" field.</summary>
  public const int SceneRewardCompriseFieldNumber = 9;
  private static readonly pb::FieldCodec<global::SceneRewardComprise> _repeated_sceneRewardComprise_codec
      = pb::FieldCodec.ForMessage(74, global::SceneRewardComprise.Parser);
  private readonly pbc::RepeatedField<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::RepeatedField<global::SceneRewardComprise>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneRewardComprise> SceneRewardComprise {
    get { return sceneRewardComprise_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEventRewardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEventRewardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (Score != other.Score) return false;
    if (Valuation != other.Valuation) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    if (Exp != other.Exp) return false;
    if (Vit != other.Vit) return false;
    if (Coin != other.Coin) return false;
    if (Cash != other.Cash) return false;
    if(!sceneRewardComprise_.Equals(other.sceneRewardComprise_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (Score != 0) hash ^= Score.GetHashCode();
    if (Valuation != 0) hash ^= Valuation.GetHashCode();
    hash ^= rewards_.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Vit != 0) hash ^= Vit.GetHashCode();
    if (Coin != 0) hash ^= Coin.GetHashCode();
    if (Cash != 0) hash ^= Cash.GetHashCode();
    hash ^= sceneRewardComprise_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (Score != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Score);
    }
    if (Valuation != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Valuation);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
    if (Exp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Exp);
    }
    if (Vit != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Vit);
    }
    if (Coin != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Coin);
    }
    if (Cash != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Cash);
    }
    sceneRewardComprise_.WriteTo(output, _repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (Score != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
    }
    if (Valuation != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Valuation);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Vit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
    }
    if (Coin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
    }
    if (Cash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
    }
    size += sceneRewardComprise_.CalculateSize(_repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEventRewardResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.Score != 0) {
      Score = other.Score;
    }
    if (other.Valuation != 0) {
      Valuation = other.Valuation;
    }
    rewards_.Add(other.rewards_);
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Vit != 0) {
      Vit = other.Vit;
    }
    if (other.Coin != 0) {
      Coin = other.Coin;
    }
    if (other.Cash != 0) {
      Cash = other.Cash;
    }
    sceneRewardComprise_.Add(other.sceneRewardComprise_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 16: {
          Score = input.ReadInt32();
          break;
        }
        case 24: {
          Valuation = input.ReadInt32();
          break;
        }
        case 34: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
        case 40: {
          Exp = input.ReadInt32();
          break;
        }
        case 48: {
          Vit = input.ReadInt32();
          break;
        }
        case 56: {
          Coin = input.ReadInt32();
          break;
        }
        case 64: {
          Cash = input.ReadInt32();
          break;
        }
        case 74: {
          sceneRewardComprise_.AddEntriesFrom(input, _repeated_sceneRewardComprise_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*阶段奖励
/// </summary>
public sealed partial class RewardItem : pb::IMessage<RewardItem> {
  private static readonly pb::MessageParser<RewardItem> _parser = new pb::MessageParser<RewardItem>(() => new RewardItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RewardItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardItem(RewardItem other) : this() {
    propId_ = other.propId_;
    num_ = other.num_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RewardItem Clone() {
    return new RewardItem(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RewardItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RewardItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Num != other.Num) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RewardItem other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*警员合成
/// </summary>
public sealed partial class CSOfficerCombineRequest : pb::IMessage<CSOfficerCombineRequest> {
  private static readonly pb::MessageParser<CSOfficerCombineRequest> _parser = new pb::MessageParser<CSOfficerCombineRequest>(() => new CSOfficerCombineRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSOfficerCombineRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerCombineRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerCombineRequest(CSOfficerCombineRequest other) : this() {
    playerId_ = other.playerId_;
    officerId_ = other.officerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerCombineRequest Clone() {
    return new CSOfficerCombineRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "officerId" field.</summary>
  public const int OfficerIdFieldNumber = 2;
  private long officerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OfficerId {
    get { return officerId_; }
    set {
      officerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSOfficerCombineRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSOfficerCombineRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (OfficerId != other.OfficerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (OfficerId != 0L) hash ^= OfficerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (OfficerId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(OfficerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (OfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSOfficerCombineRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.OfficerId != 0L) {
      OfficerId = other.OfficerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          OfficerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCOfficerCombineResponse : pb::IMessage<SCOfficerCombineResponse> {
  private static readonly pb::MessageParser<SCOfficerCombineResponse> _parser = new pb::MessageParser<SCOfficerCombineResponse>(() => new SCOfficerCombineResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCOfficerCombineResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerCombineResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerCombineResponse(SCOfficerCombineResponse other) : this() {
    result_ = other.result_;
    officeId_ = other.officeId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerCombineResponse Clone() {
    return new SCOfficerCombineResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///是否合成成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "officeId" field.</summary>
  public const int OfficeIdFieldNumber = 2;
  private long officeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OfficeId {
    get { return officeId_; }
    set {
      officeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCOfficerCombineResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCOfficerCombineResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (OfficeId != other.OfficeId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (OfficeId != 0L) hash ^= OfficeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (OfficeId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(OfficeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (OfficeId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCOfficerCombineResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.OfficeId != 0L) {
      OfficeId = other.OfficeId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          OfficeId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*警员升级请求
/// </summary>
public sealed partial class CSOfficerUpdateRequest : pb::IMessage<CSOfficerUpdateRequest> {
  private static readonly pb::MessageParser<CSOfficerUpdateRequest> _parser = new pb::MessageParser<CSOfficerUpdateRequest>(() => new CSOfficerUpdateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSOfficerUpdateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerUpdateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerUpdateRequest(CSOfficerUpdateRequest other) : this() {
    playerId_ = other.playerId_;
    playerOfficerId_ = other.playerOfficerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSOfficerUpdateRequest Clone() {
    return new CSOfficerUpdateRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "playerOfficerId" field.</summary>
  public const int PlayerOfficerIdFieldNumber = 2;
  private long playerOfficerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
    set {
      playerOfficerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSOfficerUpdateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSOfficerUpdateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (PlayerOfficerId != other.PlayerOfficerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (PlayerOfficerId != 0L) hash ^= PlayerOfficerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (PlayerOfficerId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerOfficerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (PlayerOfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerOfficerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSOfficerUpdateRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.PlayerOfficerId != 0L) {
      PlayerOfficerId = other.PlayerOfficerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          PlayerOfficerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCOfficerUpdateResponse : pb::IMessage<SCOfficerUpdateResponse> {
  private static readonly pb::MessageParser<SCOfficerUpdateResponse> _parser = new pb::MessageParser<SCOfficerUpdateResponse>(() => new SCOfficerUpdateResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCOfficerUpdateResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerUpdateResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerUpdateResponse(SCOfficerUpdateResponse other) : this() {
    result_ = other.result_;
    officeId_ = other.officeId_;
    level_ = other.level_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCOfficerUpdateResponse Clone() {
    return new SCOfficerUpdateResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///是否升级成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "officeId" field.</summary>
  public const int OfficeIdFieldNumber = 2;
  private long officeId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long OfficeId {
    get { return officeId_; }
    set {
      officeId_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCOfficerUpdateResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCOfficerUpdateResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (OfficeId != other.OfficeId) return false;
    if (Level != other.Level) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (OfficeId != 0L) hash ^= OfficeId.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (OfficeId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(OfficeId);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (OfficeId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(OfficeId);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCOfficerUpdateResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.OfficeId != 0L) {
      OfficeId = other.OfficeId;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          OfficeId = input.ReadInt64();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*进入事件请求
/// </summary>
public sealed partial class CSEventEnterRequest : pb::IMessage<CSEventEnterRequest> {
  private static readonly pb::MessageParser<CSEventEnterRequest> _parser = new pb::MessageParser<CSEventEnterRequest>(() => new CSEventEnterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEventEnterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventEnterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventEnterRequest(CSEventEnterRequest other) : this() {
    playerId_ = other.playerId_;
    eventId_ = other.eventId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventEnterRequest Clone() {
    return new CSEventEnterRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "eventId" field.</summary>
  public const int EventIdFieldNumber = 2;
  private long eventId_;
  /// <summary>
  ///事件id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEventEnterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEventEnterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (EventId != other.EventId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (EventId != 0L) hash ^= EventId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (EventId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(EventId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (EventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEventEnterRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.EventId != 0L) {
      EventId = other.EventId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 16: {
          EventId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCEventEnterResponse : pb::IMessage<SCEventEnterResponse> {
  private static readonly pb::MessageParser<SCEventEnterResponse> _parser = new pb::MessageParser<SCEventEnterResponse>(() => new SCEventEnterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEventEnterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[88]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventEnterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventEnterResponse(SCEventEnterResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventEnterResponse Clone() {
    return new SCEventEnterResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///服务器验证结果，0表示失败，1表示成功，2表示体力值不足
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEventEnterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEventEnterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEventEnterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSEventDropInfoRequest : pb::IMessage<CSEventDropInfoRequest> {
  private static readonly pb::MessageParser<CSEventDropInfoRequest> _parser = new pb::MessageParser<CSEventDropInfoRequest>(() => new CSEventDropInfoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEventDropInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[89]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventDropInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventDropInfoRequest(CSEventDropInfoRequest other) : this() {
    eventId_ = other.eventId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEventDropInfoRequest Clone() {
    return new CSEventDropInfoRequest(this);
  }

  /// <summary>Field number for the "eventId" field.</summary>
  public const int EventIdFieldNumber = 1;
  private long eventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEventDropInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEventDropInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventId != other.EventId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventId != 0L) hash ^= EventId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(EventId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEventDropInfoRequest other) {
    if (other == null) {
      return;
    }
    if (other.EventId != 0L) {
      EventId = other.EventId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EventId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCEventDropInfoResponse : pb::IMessage<SCEventDropInfoResponse> {
  private static readonly pb::MessageParser<SCEventDropInfoResponse> _parser = new pb::MessageParser<SCEventDropInfoResponse>(() => new SCEventDropInfoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEventDropInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[90]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventDropInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventDropInfoResponse(SCEventDropInfoResponse other) : this() {
    perfectProps_ = other.perfectProps_.Clone();
    normalProps_ = other.normalProps_.Clone();
    eventId_ = other.eventId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEventDropInfoResponse Clone() {
    return new SCEventDropInfoResponse(this);
  }

  /// <summary>Field number for the "perfectProps" field.</summary>
  public const int PerfectPropsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EventDropInfo> _repeated_perfectProps_codec
      = pb::FieldCodec.ForMessage(10, global::EventDropInfo.Parser);
  private readonly pbc::RepeatedField<global::EventDropInfo> perfectProps_ = new pbc::RepeatedField<global::EventDropInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EventDropInfo> PerfectProps {
    get { return perfectProps_; }
  }

  /// <summary>Field number for the "normalProps" field.</summary>
  public const int NormalPropsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::EventDropInfo> _repeated_normalProps_codec
      = pb::FieldCodec.ForMessage(18, global::EventDropInfo.Parser);
  private readonly pbc::RepeatedField<global::EventDropInfo> normalProps_ = new pbc::RepeatedField<global::EventDropInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EventDropInfo> NormalProps {
    get { return normalProps_; }
  }

  /// <summary>Field number for the "eventId" field.</summary>
  public const int EventIdFieldNumber = 3;
  private long eventId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EventId {
    get { return eventId_; }
    set {
      eventId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEventDropInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEventDropInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!perfectProps_.Equals(other.perfectProps_)) return false;
    if(!normalProps_.Equals(other.normalProps_)) return false;
    if (EventId != other.EventId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= perfectProps_.GetHashCode();
    hash ^= normalProps_.GetHashCode();
    if (EventId != 0L) hash ^= EventId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    perfectProps_.WriteTo(output, _repeated_perfectProps_codec);
    normalProps_.WriteTo(output, _repeated_normalProps_codec);
    if (EventId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(EventId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += perfectProps_.CalculateSize(_repeated_perfectProps_codec);
    size += normalProps_.CalculateSize(_repeated_normalProps_codec);
    if (EventId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EventId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEventDropInfoResponse other) {
    if (other == null) {
      return;
    }
    perfectProps_.Add(other.perfectProps_);
    normalProps_.Add(other.normalProps_);
    if (other.EventId != 0L) {
      EventId = other.EventId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          perfectProps_.AddEntriesFrom(input, _repeated_perfectProps_codec);
          break;
        }
        case 18: {
          normalProps_.AddEntriesFrom(input, _repeated_normalProps_codec);
          break;
        }
        case 24: {
          EventId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class EventDropInfo : pb::IMessage<EventDropInfo> {
  private static readonly pb::MessageParser<EventDropInfo> _parser = new pb::MessageParser<EventDropInfo>(() => new EventDropInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EventDropInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[91]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventDropInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventDropInfo(EventDropInfo other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EventDropInfo Clone() {
    return new EventDropInfo(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EventDropInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EventDropInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EventDropInfo other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*技能触发请求
/// </summary>
public sealed partial class CSSkillEmitRequest : pb::IMessage<CSSkillEmitRequest> {
  private static readonly pb::MessageParser<CSSkillEmitRequest> _parser = new pb::MessageParser<CSSkillEmitRequest>(() => new CSSkillEmitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSkillEmitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[92]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkillEmitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkillEmitRequest(CSSkillEmitRequest other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    inOrOutScene_ = other.inOrOutScene_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkillEmitRequest Clone() {
    return new CSSkillEmitRequest(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  /// <summary>
  ///数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "inOrOutScene" field.</summary>
  public const int InOrOutSceneFieldNumber = 3;
  private global::InOrOutScene inOrOutScene_ = 0;
  /// <summary>
  ///局内还是局外
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::InOrOutScene InOrOutScene {
    get { return inOrOutScene_; }
    set {
      inOrOutScene_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSkillEmitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSkillEmitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    if (InOrOutScene != other.InOrOutScene) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (InOrOutScene != 0) hash ^= InOrOutScene.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (InOrOutScene != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) InOrOutScene);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (InOrOutScene != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InOrOutScene);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSkillEmitRequest other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.InOrOutScene != 0) {
      InOrOutScene = other.InOrOutScene;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 24: {
          inOrOutScene_ = (global::InOrOutScene) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSkillEmitResponse : pb::IMessage<SCSkillEmitResponse> {
  private static readonly pb::MessageParser<SCSkillEmitResponse> _parser = new pb::MessageParser<SCSkillEmitResponse>(() => new SCSkillEmitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSkillEmitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[93]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkillEmitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkillEmitResponse(SCSkillEmitResponse other) : this() {
    result_ = other.result_;
    skillId_ = other.skillId_;
    propId_ = other.propId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkillEmitResponse Clone() {
    return new SCSkillEmitResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///服务器验证结果，0表示触发失败，1表示触发成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "skillId" field.</summary>
  public const int SkillIdFieldNumber = 2;
  private long skillId_;
  /// <summary>
  ///技能id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 3;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSkillEmitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSkillEmitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (SkillId != other.SkillId) return false;
    if (PropId != other.PropId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (SkillId != 0L) hash ^= SkillId.GetHashCode();
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (SkillId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SkillId);
    }
    if (PropId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(PropId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (SkillId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
    }
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSkillEmitResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.SkillId != 0L) {
      SkillId = other.SkillId;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          SkillId = input.ReadInt64();
          break;
        }
        case 24: {
          PropId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CSSkillTimerEmitReq : pb::IMessage<CSSkillTimerEmitReq> {
  private static readonly pb::MessageParser<CSSkillTimerEmitReq> _parser = new pb::MessageParser<CSSkillTimerEmitReq>(() => new CSSkillTimerEmitReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSkillTimerEmitReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[94]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkillTimerEmitReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkillTimerEmitReq(CSSkillTimerEmitReq other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkillTimerEmitReq Clone() {
    return new CSSkillTimerEmitReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSkillTimerEmitReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSkillTimerEmitReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSkillTimerEmitReq other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCSkillTimerEmitResp : pb::IMessage<SCSkillTimerEmitResp> {
  private static readonly pb::MessageParser<SCSkillTimerEmitResp> _parser = new pb::MessageParser<SCSkillTimerEmitResp>(() => new SCSkillTimerEmitResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSkillTimerEmitResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[95]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkillTimerEmitResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkillTimerEmitResp(SCSkillTimerEmitResp other) : this() {
    result_ = other.result_;
    skillId_ = other.skillId_;
    playerOfficerId_ = other.playerOfficerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkillTimerEmitResp Clone() {
    return new SCSkillTimerEmitResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///0表示触发失败，1表示触发成功
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "skillId" field.</summary>
  public const int SkillIdFieldNumber = 2;
  private long skillId_;
  /// <summary>
  ///技能id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SkillId {
    get { return skillId_; }
    set {
      skillId_ = value;
    }
  }

  /// <summary>Field number for the "playerOfficerId" field.</summary>
  public const int PlayerOfficerIdFieldNumber = 3;
  private long playerOfficerId_;
  /// <summary>
  ///警员id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
    set {
      playerOfficerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSkillTimerEmitResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSkillTimerEmitResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (SkillId != other.SkillId) return false;
    if (PlayerOfficerId != other.PlayerOfficerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (SkillId != 0L) hash ^= SkillId.GetHashCode();
    if (PlayerOfficerId != 0L) hash ^= PlayerOfficerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (SkillId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SkillId);
    }
    if (PlayerOfficerId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(PlayerOfficerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (SkillId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkillId);
    }
    if (PlayerOfficerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerOfficerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSkillTimerEmitResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.SkillId != 0L) {
      SkillId = other.SkillId;
    }
    if (other.PlayerOfficerId != 0L) {
      PlayerOfficerId = other.PlayerOfficerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          SkillId = input.ReadInt64();
          break;
        }
        case 24: {
          PlayerOfficerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///技能end
/// </summary>
public sealed partial class CSReasoningRewardReq : pb::IMessage<CSReasoningRewardReq> {
  private static readonly pb::MessageParser<CSReasoningRewardReq> _parser = new pb::MessageParser<CSReasoningRewardReq>(() => new CSReasoningRewardReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSReasoningRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[96]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSReasoningRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSReasoningRewardReq(CSReasoningRewardReq other) : this() {
    reasoningId_ = other.reasoningId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSReasoningRewardReq Clone() {
    return new CSReasoningRewardReq(this);
  }

  /// <summary>Field number for the "reasoningId" field.</summary>
  public const int ReasoningIdFieldNumber = 1;
  private long reasoningId_;
  /// <summary>
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ReasoningId {
    get { return reasoningId_; }
    set {
      reasoningId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSReasoningRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSReasoningRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ReasoningId != other.ReasoningId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ReasoningId != 0L) hash ^= ReasoningId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ReasoningId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ReasoningId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ReasoningId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReasoningId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSReasoningRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.ReasoningId != 0L) {
      ReasoningId = other.ReasoningId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ReasoningId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///尸检 请求
/// </summary>
public sealed partial class CSFindEnterReq : pb::IMessage<CSFindEnterReq> {
  private static readonly pb::MessageParser<CSFindEnterReq> _parser = new pb::MessageParser<CSFindEnterReq>(() => new CSFindEnterReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFindEnterReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[97]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFindEnterReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFindEnterReq(CSFindEnterReq other) : this() {
    findId_ = other.findId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFindEnterReq Clone() {
    return new CSFindEnterReq(this);
  }

  /// <summary>Field number for the "findId" field.</summary>
  public const int FindIdFieldNumber = 1;
  private long findId_;
  /// <summary>
  ///尸检id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FindId {
    get { return findId_; }
    set {
      findId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFindEnterReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFindEnterReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FindId != other.FindId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FindId != 0L) hash ^= FindId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FindId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FindId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FindId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FindId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFindEnterReq other) {
    if (other == null) {
      return;
    }
    if (other.FindId != 0L) {
      FindId = other.FindId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FindId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///尸检 请求 回复
/// </summary>
public sealed partial class SCFindEnterResp : pb::IMessage<SCFindEnterResp> {
  private static readonly pb::MessageParser<SCFindEnterResp> _parser = new pb::MessageParser<SCFindEnterResp>(() => new SCFindEnterResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFindEnterResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[98]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFindEnterResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFindEnterResp(SCFindEnterResp other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFindEnterResp Clone() {
    return new SCFindEnterResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///服务器验证结果，0表示失败，1表示成功，2表示体力值不足
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFindEnterResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFindEnterResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFindEnterResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*尸检结算请求
/// </summary>
public sealed partial class CSFindRewardReq : pb::IMessage<CSFindRewardReq> {
  private static readonly pb::MessageParser<CSFindRewardReq> _parser = new pb::MessageParser<CSFindRewardReq>(() => new CSFindRewardReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFindRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[99]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFindRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFindRewardReq(CSFindRewardReq other) : this() {
    findId_ = other.findId_;
    result_ = other.result_;
    foundNum_ = other.foundNum_;
    totalNum_ = other.totalNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFindRewardReq Clone() {
    return new CSFindRewardReq(this);
  }

  /// <summary>Field number for the "findId" field.</summary>
  public const int FindIdFieldNumber = 1;
  private long findId_;
  /// <summary>
  ///尸检id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FindId {
    get { return findId_; }
    set {
      findId_ = value;
    }
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 2;
  private int result_;
  /// <summary>
  ///1成功 2失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "foundNum" field.</summary>
  public const int FoundNumFieldNumber = 3;
  private int foundNum_;
  /// <summary>
  ///找到的线索num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FoundNum {
    get { return foundNum_; }
    set {
      foundNum_ = value;
    }
  }

  /// <summary>Field number for the "totalNum" field.</summary>
  public const int TotalNumFieldNumber = 4;
  private int totalNum_;
  /// <summary>
  ///总共的线索num
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalNum {
    get { return totalNum_; }
    set {
      totalNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFindRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFindRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FindId != other.FindId) return false;
    if (Result != other.Result) return false;
    if (FoundNum != other.FoundNum) return false;
    if (TotalNum != other.TotalNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FindId != 0L) hash ^= FindId.GetHashCode();
    if (Result != 0) hash ^= Result.GetHashCode();
    if (FoundNum != 0) hash ^= FoundNum.GetHashCode();
    if (TotalNum != 0) hash ^= TotalNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FindId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FindId);
    }
    if (Result != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Result);
    }
    if (FoundNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(FoundNum);
    }
    if (TotalNum != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(TotalNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FindId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FindId);
    }
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (FoundNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FoundNum);
    }
    if (TotalNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFindRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.FindId != 0L) {
      FindId = other.FindId;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.FoundNum != 0) {
      FoundNum = other.FoundNum;
    }
    if (other.TotalNum != 0) {
      TotalNum = other.TotalNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FindId = input.ReadInt64();
          break;
        }
        case 16: {
          Result = input.ReadInt32();
          break;
        }
        case 24: {
          FoundNum = input.ReadInt32();
          break;
        }
        case 32: {
          TotalNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*尸检结算请求回复
/// </summary>
public sealed partial class SCFindRewardResp : pb::IMessage<SCFindRewardResp> {
  private static readonly pb::MessageParser<SCFindRewardResp> _parser = new pb::MessageParser<SCFindRewardResp>(() => new SCFindRewardResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFindRewardResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[100]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFindRewardResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFindRewardResp(SCFindRewardResp other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    vit_ = other.vit_;
    sceneRewardComprise_ = other.sceneRewardComprise_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFindRewardResp Clone() {
    return new SCFindRewardResp(this);
  }

  /// <summary>Field number for the "ResponseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "vit" field.</summary>
  public const int VitFieldNumber = 2;
  private int vit_;
  /// <summary>
  ///获得的体力值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vit {
    get { return vit_; }
    set {
      vit_ = value;
    }
  }

  /// <summary>Field number for the "sceneRewardComprise" field.</summary>
  public const int SceneRewardCompriseFieldNumber = 3;
  private static readonly pb::FieldCodec<global::SceneRewardComprise> _repeated_sceneRewardComprise_codec
      = pb::FieldCodec.ForMessage(26, global::SceneRewardComprise.Parser);
  private readonly pbc::RepeatedField<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::RepeatedField<global::SceneRewardComprise>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneRewardComprise> SceneRewardComprise {
    get { return sceneRewardComprise_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFindRewardResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFindRewardResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (Vit != other.Vit) return false;
    if(!sceneRewardComprise_.Equals(other.sceneRewardComprise_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (Vit != 0) hash ^= Vit.GetHashCode();
    hash ^= sceneRewardComprise_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (Vit != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Vit);
    }
    sceneRewardComprise_.WriteTo(output, _repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (Vit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
    }
    size += sceneRewardComprise_.CalculateSize(_repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFindRewardResp other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.Vit != 0) {
      Vit = other.Vit;
    }
    sceneRewardComprise_.Add(other.sceneRewardComprise_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 16: {
          Vit = input.ReadInt32();
          break;
        }
        case 26: {
          sceneRewardComprise_.AddEntriesFrom(input, _repeated_sceneRewardComprise_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*反驳领取奖励请求
/// </summary>
public sealed partial class CSSkyEyeRewardReq : pb::IMessage<CSSkyEyeRewardReq> {
  private static readonly pb::MessageParser<CSSkyEyeRewardReq> _parser = new pb::MessageParser<CSSkyEyeRewardReq>(() => new CSSkyEyeRewardReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSkyEyeRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[101]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkyEyeRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkyEyeRewardReq(CSSkyEyeRewardReq other) : this() {
    skyEyeId_ = other.skyEyeId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkyEyeRewardReq Clone() {
    return new CSSkyEyeRewardReq(this);
  }

  /// <summary>Field number for the "skyEyeId" field.</summary>
  public const int SkyEyeIdFieldNumber = 1;
  private long skyEyeId_;
  /// <summary>
  ///天眼id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SkyEyeId {
    get { return skyEyeId_; }
    set {
      skyEyeId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSkyEyeRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSkyEyeRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SkyEyeId != other.SkyEyeId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SkyEyeId != 0L) hash ^= SkyEyeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SkyEyeId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SkyEyeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SkyEyeId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkyEyeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSkyEyeRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.SkyEyeId != 0L) {
      SkyEyeId = other.SkyEyeId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SkyEyeId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*反驳领取奖励请求返回
/// </summary>
public sealed partial class SCSkyEyeRewardReq : pb::IMessage<SCSkyEyeRewardReq> {
  private static readonly pb::MessageParser<SCSkyEyeRewardReq> _parser = new pb::MessageParser<SCSkyEyeRewardReq>(() => new SCSkyEyeRewardReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSkyEyeRewardReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[102]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkyEyeRewardReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkyEyeRewardReq(SCSkyEyeRewardReq other) : this() {
    skyEyeId_ = other.skyEyeId_;
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    items_ = other.items_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkyEyeRewardReq Clone() {
    return new SCSkyEyeRewardReq(this);
  }

  /// <summary>Field number for the "skyEyeId" field.</summary>
  public const int SkyEyeIdFieldNumber = 1;
  private long skyEyeId_;
  /// <summary>
  ///天眼id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SkyEyeId {
    get { return skyEyeId_; }
    set {
      skyEyeId_ = value;
    }
  }

  /// <summary>Field number for the "ResponseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 2;
  private global::ResponseStatus responseStatus_;
  /// <summary>
  ///状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RewardItem> _repeated_items_codec
      = pb::FieldCodec.ForMessage(26, global::RewardItem.Parser);
  private readonly pbc::RepeatedField<global::RewardItem> items_ = new pbc::RepeatedField<global::RewardItem>();
  /// <summary>
  ///奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RewardItem> Items {
    get { return items_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSkyEyeRewardReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSkyEyeRewardReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SkyEyeId != other.SkyEyeId) return false;
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if(!items_.Equals(other.items_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SkyEyeId != 0L) hash ^= SkyEyeId.GetHashCode();
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    hash ^= items_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SkyEyeId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SkyEyeId);
    }
    if (responseStatus_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ResponseStatus);
    }
    items_.WriteTo(output, _repeated_items_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SkyEyeId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SkyEyeId);
    }
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    size += items_.CalculateSize(_repeated_items_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSkyEyeRewardReq other) {
    if (other == null) {
      return;
    }
    if (other.SkyEyeId != 0L) {
      SkyEyeId = other.SkyEyeId;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    items_.Add(other.items_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SkyEyeId = input.ReadInt64();
          break;
        }
        case 18: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 26: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*天眼请求
/// </summary>
public sealed partial class CSSkyEyeReq : pb::IMessage<CSSkyEyeReq> {
  private static readonly pb::MessageParser<CSSkyEyeReq> _parser = new pb::MessageParser<CSSkyEyeReq>(() => new CSSkyEyeReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSkyEyeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[103]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkyEyeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkyEyeReq(CSSkyEyeReq other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSkyEyeReq Clone() {
    return new CSSkyEyeReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSkyEyeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSkyEyeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSkyEyeReq other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
///*天眼请求返回
/// </summary>
public sealed partial class SCSkyEyeReq : pb::IMessage<SCSkyEyeReq> {
  private static readonly pb::MessageParser<SCSkyEyeReq> _parser = new pb::MessageParser<SCSkyEyeReq>(() => new SCSkyEyeReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSkyEyeReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[104]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkyEyeReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkyEyeReq(SCSkyEyeReq other) : this() {
    hasRewarded_ = other.hasRewarded_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSkyEyeReq Clone() {
    return new SCSkyEyeReq(this);
  }

  /// <summary>Field number for the "hasRewarded" field.</summary>
  public const int HasRewardedFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_hasRewarded_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> hasRewarded_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///已领取了奖励的列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> HasRewarded {
    get { return hasRewarded_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSkyEyeReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSkyEyeReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!hasRewarded_.Equals(other.hasRewarded_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= hasRewarded_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    hasRewarded_.WriteTo(output, _repeated_hasRewarded_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += hasRewarded_.CalculateSize(_repeated_hasRewarded_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSkyEyeReq other) {
    if (other == null) {
      return;
    }
    hasRewarded_.Add(other.hasRewarded_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          hasRewarded_.AddEntriesFrom(input, _repeated_hasRewarded_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DiscountInfo : pb::IMessage<DiscountInfo> {
  private static readonly pb::MessageParser<DiscountInfo> _parser = new pb::MessageParser<DiscountInfo>(() => new DiscountInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DiscountInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[105]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiscountInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiscountInfo(DiscountInfo other) : this() {
    discountCost_ = other.discountCost_;
    discount_ = other.discount_;
    discountStart_ = other.discountStart_;
    discountEnd_ = other.discountEnd_;
    discountIcon_ = other.discountIcon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DiscountInfo Clone() {
    return new DiscountInfo(this);
  }

  /// <summary>Field number for the "discountCost" field.</summary>
  public const int DiscountCostFieldNumber = 1;
  private int discountCost_;
  /// <summary>
  ///'折扣后额度',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DiscountCost {
    get { return discountCost_; }
    set {
      discountCost_ = value;
    }
  }

  /// <summary>Field number for the "discount" field.</summary>
  public const int DiscountFieldNumber = 2;
  private int discount_;
  /// <summary>
  ///'折扣',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Discount {
    get { return discount_; }
    set {
      discount_ = value;
    }
  }

  /// <summary>Field number for the "discountStart" field.</summary>
  public const int DiscountStartFieldNumber = 3;
  private long discountStart_;
  /// <summary>
  ///'折扣开始时间',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DiscountStart {
    get { return discountStart_; }
    set {
      discountStart_ = value;
    }
  }

  /// <summary>Field number for the "discountEnd" field.</summary>
  public const int DiscountEndFieldNumber = 4;
  private long discountEnd_;
  /// <summary>
  ///'折扣结束',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long DiscountEnd {
    get { return discountEnd_; }
    set {
      discountEnd_ = value;
    }
  }

  /// <summary>Field number for the "discountIcon" field.</summary>
  public const int DiscountIconFieldNumber = 5;
  private string discountIcon_ = "";
  /// <summary>
  ///'折扣标签',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DiscountIcon {
    get { return discountIcon_; }
    set {
      discountIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DiscountInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DiscountInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DiscountCost != other.DiscountCost) return false;
    if (Discount != other.Discount) return false;
    if (DiscountStart != other.DiscountStart) return false;
    if (DiscountEnd != other.DiscountEnd) return false;
    if (DiscountIcon != other.DiscountIcon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DiscountCost != 0) hash ^= DiscountCost.GetHashCode();
    if (Discount != 0) hash ^= Discount.GetHashCode();
    if (DiscountStart != 0L) hash ^= DiscountStart.GetHashCode();
    if (DiscountEnd != 0L) hash ^= DiscountEnd.GetHashCode();
    if (DiscountIcon.Length != 0) hash ^= DiscountIcon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DiscountCost != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(DiscountCost);
    }
    if (Discount != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Discount);
    }
    if (DiscountStart != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(DiscountStart);
    }
    if (DiscountEnd != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(DiscountEnd);
    }
    if (DiscountIcon.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DiscountIcon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DiscountCost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DiscountCost);
    }
    if (Discount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Discount);
    }
    if (DiscountStart != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiscountStart);
    }
    if (DiscountEnd != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(DiscountEnd);
    }
    if (DiscountIcon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscountIcon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DiscountInfo other) {
    if (other == null) {
      return;
    }
    if (other.DiscountCost != 0) {
      DiscountCost = other.DiscountCost;
    }
    if (other.Discount != 0) {
      Discount = other.Discount;
    }
    if (other.DiscountStart != 0L) {
      DiscountStart = other.DiscountStart;
    }
    if (other.DiscountEnd != 0L) {
      DiscountEnd = other.DiscountEnd;
    }
    if (other.DiscountIcon.Length != 0) {
      DiscountIcon = other.DiscountIcon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          DiscountCost = input.ReadInt32();
          break;
        }
        case 16: {
          Discount = input.ReadInt32();
          break;
        }
        case 24: {
          DiscountStart = input.ReadInt64();
          break;
        }
        case 32: {
          DiscountEnd = input.ReadInt64();
          break;
        }
        case 42: {
          DiscountIcon = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MarketItemMsg : pb::IMessage<MarketItemMsg> {
  private static readonly pb::MessageParser<MarketItemMsg> _parser = new pb::MessageParser<MarketItemMsg>(() => new MarketItemMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarketItemMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[106]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketItemMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketItemMsg(MarketItemMsg other) : this() {
    id_ = other.id_;
    sellId_ = other.sellId_;
    sellCount_ = other.sellCount_;
    costType_ = other.costType_;
    cost_ = other.cost_;
    buyLimit_ = other.buyLimit_;
    DiscountInfo = other.discountInfo_ != null ? other.DiscountInfo.Clone() : null;
    maxLimit_ = other.maxLimit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketItemMsg Clone() {
    return new MarketItemMsg(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "sellId" field.</summary>
  public const int SellIdFieldNumber = 2;
  private long sellId_;
  /// <summary>
  ///物品，就是物品ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SellId {
    get { return sellId_; }
    set {
      sellId_ = value;
    }
  }

  /// <summary>Field number for the "sellCount" field.</summary>
  public const int SellCountFieldNumber = 3;
  private int sellCount_;
  /// <summary>
  ///数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SellCount {
    get { return sellCount_; }
    set {
      sellCount_ = value;
    }
  }

  /// <summary>Field number for the "costType" field.</summary>
  public const int CostTypeFieldNumber = 4;
  private global::CostType costType_ = 0;
  /// <summary>
  ///'花费类型',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CostType CostType {
    get { return costType_; }
    set {
      costType_ = value;
    }
  }

  /// <summary>Field number for the "cost" field.</summary>
  public const int CostFieldNumber = 5;
  private int cost_;
  /// <summary>
  ///'花费额度',
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cost {
    get { return cost_; }
    set {
      cost_ = value;
    }
  }

  /// <summary>Field number for the "buyLimit" field.</summary>
  public const int BuyLimitFieldNumber = 6;
  private int buyLimit_;
  /// <summary>
  ///购买次数限制
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BuyLimit {
    get { return buyLimit_; }
    set {
      buyLimit_ = value;
    }
  }

  /// <summary>Field number for the "discountInfo" field.</summary>
  public const int DiscountInfoFieldNumber = 7;
  private global::DiscountInfo discountInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DiscountInfo DiscountInfo {
    get { return discountInfo_; }
    set {
      discountInfo_ = value;
    }
  }

  /// <summary>Field number for the "maxLimit" field.</summary>
  public const int MaxLimitFieldNumber = 8;
  private int maxLimit_;
  /// <summary>
  ///最大次数限制
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxLimit {
    get { return maxLimit_; }
    set {
      maxLimit_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarketItemMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarketItemMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SellId != other.SellId) return false;
    if (SellCount != other.SellCount) return false;
    if (CostType != other.CostType) return false;
    if (Cost != other.Cost) return false;
    if (BuyLimit != other.BuyLimit) return false;
    if (!object.Equals(DiscountInfo, other.DiscountInfo)) return false;
    if (MaxLimit != other.MaxLimit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (SellId != 0L) hash ^= SellId.GetHashCode();
    if (SellCount != 0) hash ^= SellCount.GetHashCode();
    if (CostType != 0) hash ^= CostType.GetHashCode();
    if (Cost != 0) hash ^= Cost.GetHashCode();
    if (BuyLimit != 0) hash ^= BuyLimit.GetHashCode();
    if (discountInfo_ != null) hash ^= DiscountInfo.GetHashCode();
    if (MaxLimit != 0) hash ^= MaxLimit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (SellId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(SellId);
    }
    if (SellCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SellCount);
    }
    if (CostType != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) CostType);
    }
    if (Cost != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Cost);
    }
    if (BuyLimit != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BuyLimit);
    }
    if (discountInfo_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DiscountInfo);
    }
    if (MaxLimit != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(MaxLimit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (SellId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SellId);
    }
    if (SellCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SellCount);
    }
    if (CostType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CostType);
    }
    if (Cost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cost);
    }
    if (BuyLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuyLimit);
    }
    if (discountInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DiscountInfo);
    }
    if (MaxLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLimit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarketItemMsg other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.SellId != 0L) {
      SellId = other.SellId;
    }
    if (other.SellCount != 0) {
      SellCount = other.SellCount;
    }
    if (other.CostType != 0) {
      CostType = other.CostType;
    }
    if (other.Cost != 0) {
      Cost = other.Cost;
    }
    if (other.BuyLimit != 0) {
      BuyLimit = other.BuyLimit;
    }
    if (other.discountInfo_ != null) {
      if (discountInfo_ == null) {
        discountInfo_ = new global::DiscountInfo();
      }
      DiscountInfo.MergeFrom(other.DiscountInfo);
    }
    if (other.MaxLimit != 0) {
      MaxLimit = other.MaxLimit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          SellId = input.ReadInt64();
          break;
        }
        case 24: {
          SellCount = input.ReadInt32();
          break;
        }
        case 32: {
          costType_ = (global::CostType) input.ReadEnum();
          break;
        }
        case 40: {
          Cost = input.ReadInt32();
          break;
        }
        case 48: {
          BuyLimit = input.ReadInt32();
          break;
        }
        case 58: {
          if (discountInfo_ == null) {
            discountInfo_ = new global::DiscountInfo();
          }
          input.ReadMessage(discountInfo_);
          break;
        }
        case 64: {
          MaxLimit = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MarketBlack : pb::IMessage<MarketBlack> {
  private static readonly pb::MessageParser<MarketBlack> _parser = new pb::MessageParser<MarketBlack>(() => new MarketBlack());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarketBlack> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[107]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketBlack() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketBlack(MarketBlack other) : this() {
    id_ = other.id_;
    lastUpdateTime_ = other.lastUpdateTime_;
    nextUpdateTime_ = other.nextUpdateTime_;
    freshCost_ = other.freshCost_;
    freshLimit_ = other.freshLimit_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketBlack Clone() {
    return new MarketBlack(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "lastUpdateTime" field.</summary>
  public const int LastUpdateTimeFieldNumber = 2;
  private long lastUpdateTime_;
  /// <summary>
  ///最近刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LastUpdateTime {
    get { return lastUpdateTime_; }
    set {
      lastUpdateTime_ = value;
    }
  }

  /// <summary>Field number for the "nextUpdateTime" field.</summary>
  public const int NextUpdateTimeFieldNumber = 3;
  private long nextUpdateTime_;
  /// <summary>
  ///下次刷新时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NextUpdateTime {
    get { return nextUpdateTime_; }
    set {
      nextUpdateTime_ = value;
    }
  }

  /// <summary>Field number for the "freshCost" field.</summary>
  public const int FreshCostFieldNumber = 4;
  private int freshCost_;
  /// <summary>
  ///刷新花费
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreshCost {
    get { return freshCost_; }
    set {
      freshCost_ = value;
    }
  }

  /// <summary>Field number for the "freshLimit" field.</summary>
  public const int FreshLimitFieldNumber = 5;
  private int freshLimit_;
  /// <summary>
  ///刷新花费
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FreshLimit {
    get { return freshLimit_; }
    set {
      freshLimit_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarketBlack);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarketBlack other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (LastUpdateTime != other.LastUpdateTime) return false;
    if (NextUpdateTime != other.NextUpdateTime) return false;
    if (FreshCost != other.FreshCost) return false;
    if (FreshLimit != other.FreshLimit) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (LastUpdateTime != 0L) hash ^= LastUpdateTime.GetHashCode();
    if (NextUpdateTime != 0L) hash ^= NextUpdateTime.GetHashCode();
    if (FreshCost != 0) hash ^= FreshCost.GetHashCode();
    if (FreshLimit != 0) hash ^= FreshLimit.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (LastUpdateTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(LastUpdateTime);
    }
    if (NextUpdateTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(NextUpdateTime);
    }
    if (FreshCost != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(FreshCost);
    }
    if (FreshLimit != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(FreshLimit);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (LastUpdateTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdateTime);
    }
    if (NextUpdateTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextUpdateTime);
    }
    if (FreshCost != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreshCost);
    }
    if (FreshLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FreshLimit);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarketBlack other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.LastUpdateTime != 0L) {
      LastUpdateTime = other.LastUpdateTime;
    }
    if (other.NextUpdateTime != 0L) {
      NextUpdateTime = other.NextUpdateTime;
    }
    if (other.FreshCost != 0) {
      FreshCost = other.FreshCost;
    }
    if (other.FreshLimit != 0) {
      FreshLimit = other.FreshLimit;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          LastUpdateTime = input.ReadInt64();
          break;
        }
        case 24: {
          NextUpdateTime = input.ReadInt64();
          break;
        }
        case 32: {
          FreshCost = input.ReadInt32();
          break;
        }
        case 40: {
          FreshLimit = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*商场列表
/// </summary>
public sealed partial class MarketRequest : pb::IMessage<MarketRequest> {
  private static readonly pb::MessageParser<MarketRequest> _parser = new pb::MessageParser<MarketRequest>(() => new MarketRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarketRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[108]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketRequest(MarketRequest other) : this() {
    category_ = other.category_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketRequest Clone() {
    return new MarketRequest(this);
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 1;
  private global::Category category_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Category Category {
    get { return category_; }
    set {
      category_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarketRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarketRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Category != other.Category) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Category != 0) hash ^= Category.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Category != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Category);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Category != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarketRequest other) {
    if (other == null) {
      return;
    }
    if (other.Category != 0) {
      Category = other.Category;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          category_ = (global::Category) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class MarketResponse : pb::IMessage<MarketResponse> {
  private static readonly pb::MessageParser<MarketResponse> _parser = new pb::MessageParser<MarketResponse>(() => new MarketResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarketResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[109]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketResponse(MarketResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    marketItems_ = other.marketItems_.Clone();
    MarketBlack = other.marketBlack_ != null ? other.MarketBlack.Clone() : null;
    category_ = other.category_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarketResponse Clone() {
    return new MarketResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "marketItems" field.</summary>
  public const int MarketItemsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::MarketItemMsg> _repeated_marketItems_codec
      = pb::FieldCodec.ForMessage(18, global::MarketItemMsg.Parser);
  private readonly pbc::RepeatedField<global::MarketItemMsg> marketItems_ = new pbc::RepeatedField<global::MarketItemMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MarketItemMsg> MarketItems {
    get { return marketItems_; }
  }

  /// <summary>Field number for the "marketBlack" field.</summary>
  public const int MarketBlackFieldNumber = 3;
  private global::MarketBlack marketBlack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MarketBlack MarketBlack {
    get { return marketBlack_; }
    set {
      marketBlack_ = value;
    }
  }

  /// <summary>Field number for the "category" field.</summary>
  public const int CategoryFieldNumber = 4;
  private global::Category category_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Category Category {
    get { return category_; }
    set {
      category_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarketResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarketResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if(!marketItems_.Equals(other.marketItems_)) return false;
    if (!object.Equals(MarketBlack, other.MarketBlack)) return false;
    if (Category != other.Category) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    hash ^= marketItems_.GetHashCode();
    if (marketBlack_ != null) hash ^= MarketBlack.GetHashCode();
    if (Category != 0) hash ^= Category.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    marketItems_.WriteTo(output, _repeated_marketItems_codec);
    if (marketBlack_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MarketBlack);
    }
    if (Category != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Category);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    size += marketItems_.CalculateSize(_repeated_marketItems_codec);
    if (marketBlack_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketBlack);
    }
    if (Category != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarketResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    marketItems_.Add(other.marketItems_);
    if (other.marketBlack_ != null) {
      if (marketBlack_ == null) {
        marketBlack_ = new global::MarketBlack();
      }
      MarketBlack.MergeFrom(other.MarketBlack);
    }
    if (other.Category != 0) {
      Category = other.Category;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          marketItems_.AddEntriesFrom(input, _repeated_marketItems_codec);
          break;
        }
        case 26: {
          if (marketBlack_ == null) {
            marketBlack_ = new global::MarketBlack();
          }
          input.ReadMessage(marketBlack_);
          break;
        }
        case 32: {
          category_ = (global::Category) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///*购买*
/// </summary>
public sealed partial class MarkeBuyRequest : pb::IMessage<MarkeBuyRequest> {
  private static readonly pb::MessageParser<MarkeBuyRequest> _parser = new pb::MessageParser<MarkeBuyRequest>(() => new MarkeBuyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarkeBuyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[110]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeBuyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeBuyRequest(MarkeBuyRequest other) : this() {
    marketItemId_ = other.marketItemId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeBuyRequest Clone() {
    return new MarkeBuyRequest(this);
  }

  /// <summary>Field number for the "marketItemId" field.</summary>
  public const int MarketItemIdFieldNumber = 1;
  private long marketItemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long MarketItemId {
    get { return marketItemId_; }
    set {
      marketItemId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarkeBuyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarkeBuyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MarketItemId != other.MarketItemId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MarketItemId != 0L) hash ^= MarketItemId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MarketItemId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(MarketItemId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MarketItemId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(MarketItemId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarkeBuyRequest other) {
    if (other == null) {
      return;
    }
    if (other.MarketItemId != 0L) {
      MarketItemId = other.MarketItemId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MarketItemId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MarkeBuyResponse : pb::IMessage<MarkeBuyResponse> {
  private static readonly pb::MessageParser<MarkeBuyResponse> _parser = new pb::MessageParser<MarkeBuyResponse>(() => new MarkeBuyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarkeBuyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[111]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeBuyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeBuyResponse(MarkeBuyResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    Props = other.props_ != null ? other.Props.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeBuyResponse Clone() {
    return new MarkeBuyResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 2;
  private global::PlayerPropMsg props_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPropMsg Props {
    get { return props_; }
    set {
      props_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarkeBuyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarkeBuyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (!object.Equals(Props, other.Props)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (props_ != null) hash ^= Props.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (props_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Props);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (props_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Props);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarkeBuyResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.props_ != null) {
      if (props_ == null) {
        props_ = new global::PlayerPropMsg();
      }
      Props.MergeFrom(other.Props);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          if (props_ == null) {
            props_ = new global::PlayerPropMsg();
          }
          input.ReadMessage(props_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*商场单个商品信息
/// </summary>
public sealed partial class CSMarketItemRequest : pb::IMessage<CSMarketItemRequest> {
  private static readonly pb::MessageParser<CSMarketItemRequest> _parser = new pb::MessageParser<CSMarketItemRequest>(() => new CSMarketItemRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSMarketItemRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[112]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSMarketItemRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSMarketItemRequest(CSMarketItemRequest other) : this() {
    propId_ = other.propId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSMarketItemRequest Clone() {
    return new CSMarketItemRequest(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSMarketItemRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSMarketItemRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSMarketItemRequest other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCMarketItemResponse : pb::IMessage<SCMarketItemResponse> {
  private static readonly pb::MessageParser<SCMarketItemResponse> _parser = new pb::MessageParser<SCMarketItemResponse>(() => new SCMarketItemResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCMarketItemResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[113]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCMarketItemResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCMarketItemResponse(SCMarketItemResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    MarketItems = other.marketItems_ != null ? other.MarketItems.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCMarketItemResponse Clone() {
    return new SCMarketItemResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "marketItems" field.</summary>
  public const int MarketItemsFieldNumber = 2;
  private global::MarketItemMsg marketItems_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MarketItemMsg MarketItems {
    get { return marketItems_; }
    set {
      marketItems_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCMarketItemResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCMarketItemResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (!object.Equals(MarketItems, other.MarketItems)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (marketItems_ != null) hash ^= MarketItems.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (marketItems_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MarketItems);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (marketItems_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketItems);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCMarketItemResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.marketItems_ != null) {
      if (marketItems_ == null) {
        marketItems_ = new global::MarketItemMsg();
      }
      MarketItems.MergeFrom(other.MarketItems);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          if (marketItems_ == null) {
            marketItems_ = new global::MarketItemMsg();
          }
          input.ReadMessage(marketItems_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*fresh*
/// </summary>
public sealed partial class MarkeFreshRequest : pb::IMessage<MarkeFreshRequest> {
  private static readonly pb::MessageParser<MarkeFreshRequest> _parser = new pb::MessageParser<MarkeFreshRequest>(() => new MarkeFreshRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarkeFreshRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[114]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeFreshRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeFreshRequest(MarkeFreshRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeFreshRequest Clone() {
    return new MarkeFreshRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarkeFreshRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarkeFreshRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarkeFreshRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class MarkeFreshResponse : pb::IMessage<MarkeFreshResponse> {
  private static readonly pb::MessageParser<MarkeFreshResponse> _parser = new pb::MessageParser<MarkeFreshResponse>(() => new MarkeFreshResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MarkeFreshResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[115]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeFreshResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeFreshResponse(MarkeFreshResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    PlayerBaseInfo = other.playerBaseInfo_ != null ? other.PlayerBaseInfo.Clone() : null;
    MarketBlack = other.marketBlack_ != null ? other.MarketBlack.Clone() : null;
    marketItems_ = other.marketItems_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MarkeFreshResponse Clone() {
    return new MarkeFreshResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "playerBaseInfo" field.</summary>
  public const int PlayerBaseInfoFieldNumber = 2;
  private global::PlayerBaseInfo playerBaseInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerBaseInfo PlayerBaseInfo {
    get { return playerBaseInfo_; }
    set {
      playerBaseInfo_ = value;
    }
  }

  /// <summary>Field number for the "MarketBlack" field.</summary>
  public const int MarketBlackFieldNumber = 3;
  private global::MarketBlack marketBlack_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MarketBlack MarketBlack {
    get { return marketBlack_; }
    set {
      marketBlack_ = value;
    }
  }

  /// <summary>Field number for the "marketItems" field.</summary>
  public const int MarketItemsFieldNumber = 4;
  private static readonly pb::FieldCodec<global::MarketItemMsg> _repeated_marketItems_codec
      = pb::FieldCodec.ForMessage(34, global::MarketItemMsg.Parser);
  private readonly pbc::RepeatedField<global::MarketItemMsg> marketItems_ = new pbc::RepeatedField<global::MarketItemMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MarketItemMsg> MarketItems {
    get { return marketItems_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MarkeFreshResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MarkeFreshResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (!object.Equals(PlayerBaseInfo, other.PlayerBaseInfo)) return false;
    if (!object.Equals(MarketBlack, other.MarketBlack)) return false;
    if(!marketItems_.Equals(other.marketItems_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (playerBaseInfo_ != null) hash ^= PlayerBaseInfo.GetHashCode();
    if (marketBlack_ != null) hash ^= MarketBlack.GetHashCode();
    hash ^= marketItems_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (playerBaseInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerBaseInfo);
    }
    if (marketBlack_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MarketBlack);
    }
    marketItems_.WriteTo(output, _repeated_marketItems_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (playerBaseInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerBaseInfo);
    }
    if (marketBlack_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MarketBlack);
    }
    size += marketItems_.CalculateSize(_repeated_marketItems_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MarkeFreshResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.playerBaseInfo_ != null) {
      if (playerBaseInfo_ == null) {
        playerBaseInfo_ = new global::PlayerBaseInfo();
      }
      PlayerBaseInfo.MergeFrom(other.PlayerBaseInfo);
    }
    if (other.marketBlack_ != null) {
      if (marketBlack_ == null) {
        marketBlack_ = new global::MarketBlack();
      }
      MarketBlack.MergeFrom(other.MarketBlack);
    }
    marketItems_.Add(other.marketItems_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          if (playerBaseInfo_ == null) {
            playerBaseInfo_ = new global::PlayerBaseInfo();
          }
          input.ReadMessage(playerBaseInfo_);
          break;
        }
        case 26: {
          if (marketBlack_ == null) {
            marketBlack_ = new global::MarketBlack();
          }
          input.ReadMessage(marketBlack_);
          break;
        }
        case 34: {
          marketItems_.AddEntriesFrom(input, _repeated_marketItems_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerBaseInfo : pb::IMessage<PlayerBaseInfo> {
  private static readonly pb::MessageParser<PlayerBaseInfo> _parser = new pb::MessageParser<PlayerBaseInfo>(() => new PlayerBaseInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerBaseInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[116]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerBaseInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerBaseInfo(PlayerBaseInfo other) : this() {
    coin_ = other.coin_;
    cash_ = other.cash_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerBaseInfo Clone() {
    return new PlayerBaseInfo(this);
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 1;
  private int coin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "cash" field.</summary>
  public const int CashFieldNumber = 2;
  private int cash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cash {
    get { return cash_; }
    set {
      cash_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerBaseInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerBaseInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Coin != other.Coin) return false;
    if (Cash != other.Cash) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Coin != 0) hash ^= Coin.GetHashCode();
    if (Cash != 0) hash ^= Cash.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Coin != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Coin);
    }
    if (Cash != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Cash);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Coin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
    }
    if (Cash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerBaseInfo other) {
    if (other == null) {
      return;
    }
    if (other.Coin != 0) {
      Coin = other.Coin;
    }
    if (other.Cash != 0) {
      Cash = other.Cash;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Coin = input.ReadInt32();
          break;
        }
        case 16: {
          Cash = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*填了id就只按id取，填了type就按type取，两个参数二选一
/// </summary>
public sealed partial class CSNoticeListRequest : pb::IMessage<CSNoticeListRequest> {
  private static readonly pb::MessageParser<CSNoticeListRequest> _parser = new pb::MessageParser<CSNoticeListRequest>(() => new CSNoticeListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSNoticeListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[117]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSNoticeListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSNoticeListRequest(CSNoticeListRequest other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSNoticeListRequest Clone() {
    return new CSNoticeListRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  /// <summary>
  ///公告id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSNoticeListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSNoticeListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSNoticeListRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCNoticeListResponse : pb::IMessage<SCNoticeListResponse> {
  private static readonly pb::MessageParser<SCNoticeListResponse> _parser = new pb::MessageParser<SCNoticeListResponse>(() => new SCNoticeListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCNoticeListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[118]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCNoticeListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCNoticeListResponse(SCNoticeListResponse other) : this() {
    notices_ = other.notices_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCNoticeListResponse Clone() {
    return new SCNoticeListResponse(this);
  }

  /// <summary>Field number for the "notices" field.</summary>
  public const int NoticesFieldNumber = 1;
  private static readonly pb::FieldCodec<global::NoticeInfo> _repeated_notices_codec
      = pb::FieldCodec.ForMessage(10, global::NoticeInfo.Parser);
  private readonly pbc::RepeatedField<global::NoticeInfo> notices_ = new pbc::RepeatedField<global::NoticeInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::NoticeInfo> Notices {
    get { return notices_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCNoticeListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCNoticeListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!notices_.Equals(other.notices_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= notices_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    notices_.WriteTo(output, _repeated_notices_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += notices_.CalculateSize(_repeated_notices_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCNoticeListResponse other) {
    if (other == null) {
      return;
    }
    notices_.Add(other.notices_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          notices_.AddEntriesFrom(input, _repeated_notices_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class NoticeInfo : pb::IMessage<NoticeInfo> {
  private static readonly pb::MessageParser<NoticeInfo> _parser = new pb::MessageParser<NoticeInfo>(() => new NoticeInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<NoticeInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[119]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NoticeInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NoticeInfo(NoticeInfo other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    picture_ = other.picture_;
    title_ = other.title_;
    content_ = other.content_;
    levelLimit_ = other.levelLimit_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    updateTime_ = other.updateTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public NoticeInfo Clone() {
    return new NoticeInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "picture" field.</summary>
  public const int PictureFieldNumber = 3;
  private string picture_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Picture {
    get { return picture_; }
    set {
      picture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 4;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 5;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "levelLimit" field.</summary>
  public const int LevelLimitFieldNumber = 6;
  private int levelLimit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LevelLimit {
    get { return levelLimit_; }
    set {
      levelLimit_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 7;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 8;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "updateTime" field.</summary>
  public const int UpdateTimeFieldNumber = 9;
  private long updateTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UpdateTime {
    get { return updateTime_; }
    set {
      updateTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as NoticeInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(NoticeInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Picture != other.Picture) return false;
    if (Title != other.Title) return false;
    if (Content != other.Content) return false;
    if (LevelLimit != other.LevelLimit) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    if (UpdateTime != other.UpdateTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Picture.Length != 0) hash ^= Picture.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (LevelLimit != 0) hash ^= LevelLimit.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (UpdateTime != 0L) hash ^= UpdateTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Picture.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Picture);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Title);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Content);
    }
    if (LevelLimit != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(LevelLimit);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(StartTime);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(EndTime);
    }
    if (UpdateTime != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(UpdateTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Picture.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Picture);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    if (LevelLimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelLimit);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (UpdateTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdateTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(NoticeInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Picture.Length != 0) {
      Picture = other.Picture;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.LevelLimit != 0) {
      LevelLimit = other.LevelLimit;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    if (other.UpdateTime != 0L) {
      UpdateTime = other.UpdateTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          Picture = input.ReadString();
          break;
        }
        case 34: {
          Title = input.ReadString();
          break;
        }
        case 42: {
          Content = input.ReadString();
          break;
        }
        case 48: {
          LevelLimit = input.ReadInt32();
          break;
        }
        case 56: {
          StartTime = input.ReadInt64();
          break;
        }
        case 64: {
          EndTime = input.ReadInt64();
          break;
        }
        case 72: {
          UpdateTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class CSPingRequest : pb::IMessage<CSPingRequest> {
  private static readonly pb::MessageParser<CSPingRequest> _parser = new pb::MessageParser<CSPingRequest>(() => new CSPingRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPingRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[120]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPingRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPingRequest(CSPingRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPingRequest Clone() {
    return new CSPingRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPingRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPingRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPingRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCPingResponse : pb::IMessage<SCPingResponse> {
  private static readonly pb::MessageParser<SCPingResponse> _parser = new pb::MessageParser<SCPingResponse>(() => new SCPingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[121]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPingResponse(SCPingResponse other) : this() {
    count_ = other.count_;
    content_ = other.content_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPingResponse Clone() {
    return new SCPingResponse(this);
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 1;
  private int count_;
  /// <summary>
  ///需要请求的消息数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PingResponseContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(18, global::PingResponseContent.Parser);
  private readonly pbc::RepeatedField<global::PingResponseContent> content_ = new pbc::RepeatedField<global::PingResponseContent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PingResponseContent> Content {
    get { return content_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Count != other.Count) return false;
    if(!content_.Equals(other.content_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Count != 0) hash ^= Count.GetHashCode();
    hash ^= content_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Count != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Count);
    }
    content_.WriteTo(output, _repeated_content_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    size += content_.CalculateSize(_repeated_content_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPingResponse other) {
    if (other == null) {
      return;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    content_.Add(other.content_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Count = input.ReadInt32();
          break;
        }
        case 18: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PingResponseContent : pb::IMessage<PingResponseContent> {
  private static readonly pb::MessageParser<PingResponseContent> _parser = new pb::MessageParser<PingResponseContent>(() => new PingResponseContent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PingResponseContent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[122]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResponseContent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResponseContent(PingResponseContent other) : this() {
    msgId_ = other.msgId_;
    data_ = other.data_;
    isEmpty_ = other.isEmpty_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PingResponseContent Clone() {
    return new PingResponseContent(this);
  }

  /// <summary>Field number for the "msgId" field.</summary>
  public const int MsgIdFieldNumber = 1;
  private int msgId_;
  /// <summary>
  ///相关内容的msgId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MsgId {
    get { return msgId_; }
    set {
      msgId_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private string data_ = "";
  /// <summary>
  ///相关byte[]，base64编码为string
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isEmpty" field.</summary>
  public const int IsEmptyFieldNumber = 3;
  private bool isEmpty_;
  /// <summary>
  /// byte[] 是否为空
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsEmpty {
    get { return isEmpty_; }
    set {
      isEmpty_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PingResponseContent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PingResponseContent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MsgId != other.MsgId) return false;
    if (Data != other.Data) return false;
    if (IsEmpty != other.IsEmpty) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MsgId != 0) hash ^= MsgId.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (IsEmpty != false) hash ^= IsEmpty.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MsgId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MsgId);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Data);
    }
    if (IsEmpty != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsEmpty);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MsgId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgId);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
    }
    if (IsEmpty != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PingResponseContent other) {
    if (other == null) {
      return;
    }
    if (other.MsgId != 0) {
      MsgId = other.MsgId;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    if (other.IsEmpty != false) {
      IsEmpty = other.IsEmpty;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MsgId = input.ReadInt32();
          break;
        }
        case 18: {
          Data = input.ReadString();
          break;
        }
        case 24: {
          IsEmpty = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CSMessageRequest : pb::IMessage<CSMessageRequest> {
  private static readonly pb::MessageParser<CSMessageRequest> _parser = new pb::MessageParser<CSMessageRequest>(() => new CSMessageRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSMessageRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[123]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSMessageRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSMessageRequest(CSMessageRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSMessageRequest Clone() {
    return new CSMessageRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSMessageRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSMessageRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSMessageRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
///**lotto**
/// </summary>
public sealed partial class LottoItemProto : pb::IMessage<LottoItemProto> {
  private static readonly pb::MessageParser<LottoItemProto> _parser = new pb::MessageParser<LottoItemProto>(() => new LottoItemProto());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LottoItemProto> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[124]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoItemProto() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoItemProto(LottoItemProto other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    special_ = other.special_;
    lucky_ = other.lucky_;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoItemProto Clone() {
    return new LottoItemProto(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "special" field.</summary>
  public const int SpecialFieldNumber = 3;
  private bool special_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Special {
    get { return special_; }
    set {
      special_ = value;
    }
  }

  /// <summary>Field number for the "lucky" field.</summary>
  public const int LuckyFieldNumber = 4;
  private int lucky_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Lucky {
    get { return lucky_; }
    set {
      lucky_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 5;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LottoItemProto);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LottoItemProto other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    if (Special != other.Special) return false;
    if (Lucky != other.Lucky) return false;
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Special != false) hash ^= Special.GetHashCode();
    if (Lucky != 0) hash ^= Lucky.GetHashCode();
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (Special != false) {
      output.WriteRawTag(24);
      output.WriteBool(Special);
    }
    if (Lucky != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Lucky);
    }
    if (Id != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Special != false) {
      size += 1 + 1;
    }
    if (Lucky != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lucky);
    }
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LottoItemProto other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Special != false) {
      Special = other.Special;
    }
    if (other.Lucky != 0) {
      Lucky = other.Lucky;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 24: {
          Special = input.ReadBool();
          break;
        }
        case 32: {
          Lucky = input.ReadInt32();
          break;
        }
        case 40: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class LottoRequest : pb::IMessage<LottoRequest> {
  private static readonly pb::MessageParser<LottoRequest> _parser = new pb::MessageParser<LottoRequest>(() => new LottoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LottoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[125]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoRequest(LottoRequest other) : this() {
    costType_ = other.costType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoRequest Clone() {
    return new LottoRequest(this);
  }

  /// <summary>Field number for the "costType" field.</summary>
  public const int CostTypeFieldNumber = 1;
  private global::CostType costType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CostType CostType {
    get { return costType_; }
    set {
      costType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LottoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LottoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CostType != other.CostType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CostType != 0) hash ^= CostType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CostType != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) CostType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CostType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CostType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LottoRequest other) {
    if (other == null) {
      return;
    }
    if (other.CostType != 0) {
      CostType = other.CostType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          costType_ = (global::CostType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class LottoResponse : pb::IMessage<LottoResponse> {
  private static readonly pb::MessageParser<LottoResponse> _parser = new pb::MessageParser<LottoResponse>(() => new LottoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LottoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[126]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoResponse(LottoResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    costType_ = other.costType_;
    costValue_ = other.costValue_;
    lottoId_ = other.lottoId_;
    items_ = other.items_.Clone();
    lucky_ = other.lucky_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoResponse Clone() {
    return new LottoResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "costType" field.</summary>
  public const int CostTypeFieldNumber = 2;
  private global::CostType costType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CostType CostType {
    get { return costType_; }
    set {
      costType_ = value;
    }
  }

  /// <summary>Field number for the "costValue" field.</summary>
  public const int CostValueFieldNumber = 3;
  private int costValue_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CostValue {
    get { return costValue_; }
    set {
      costValue_ = value;
    }
  }

  /// <summary>Field number for the "lottoId" field.</summary>
  public const int LottoIdFieldNumber = 4;
  private long lottoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LottoId {
    get { return lottoId_; }
    set {
      lottoId_ = value;
    }
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::LottoItemProto> _repeated_items_codec
      = pb::FieldCodec.ForMessage(42, global::LottoItemProto.Parser);
  private readonly pbc::RepeatedField<global::LottoItemProto> items_ = new pbc::RepeatedField<global::LottoItemProto>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LottoItemProto> Items {
    get { return items_; }
  }

  /// <summary>Field number for the "lucky" field.</summary>
  public const int LuckyFieldNumber = 6;
  private int lucky_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Lucky {
    get { return lucky_; }
    set {
      lucky_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LottoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LottoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (CostType != other.CostType) return false;
    if (CostValue != other.CostValue) return false;
    if (LottoId != other.LottoId) return false;
    if(!items_.Equals(other.items_)) return false;
    if (Lucky != other.Lucky) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (CostType != 0) hash ^= CostType.GetHashCode();
    if (CostValue != 0) hash ^= CostValue.GetHashCode();
    if (LottoId != 0L) hash ^= LottoId.GetHashCode();
    hash ^= items_.GetHashCode();
    if (Lucky != 0) hash ^= Lucky.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (CostType != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) CostType);
    }
    if (CostValue != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CostValue);
    }
    if (LottoId != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(LottoId);
    }
    items_.WriteTo(output, _repeated_items_codec);
    if (Lucky != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Lucky);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (CostType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CostType);
    }
    if (CostValue != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CostValue);
    }
    if (LottoId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LottoId);
    }
    size += items_.CalculateSize(_repeated_items_codec);
    if (Lucky != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lucky);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LottoResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.CostType != 0) {
      CostType = other.CostType;
    }
    if (other.CostValue != 0) {
      CostValue = other.CostValue;
    }
    if (other.LottoId != 0L) {
      LottoId = other.LottoId;
    }
    items_.Add(other.items_);
    if (other.Lucky != 0) {
      Lucky = other.Lucky;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 16: {
          costType_ = (global::CostType) input.ReadEnum();
          break;
        }
        case 24: {
          CostValue = input.ReadInt32();
          break;
        }
        case 32: {
          LottoId = input.ReadInt64();
          break;
        }
        case 42: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
        case 48: {
          Lucky = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///**lottoBuy**
/// </summary>
public sealed partial class LottoBuyRequest : pb::IMessage<LottoBuyRequest> {
  private static readonly pb::MessageParser<LottoBuyRequest> _parser = new pb::MessageParser<LottoBuyRequest>(() => new LottoBuyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LottoBuyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[127]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoBuyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoBuyRequest(LottoBuyRequest other) : this() {
    lottoId_ = other.lottoId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoBuyRequest Clone() {
    return new LottoBuyRequest(this);
  }

  /// <summary>Field number for the "lottoId" field.</summary>
  public const int LottoIdFieldNumber = 1;
  private long lottoId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LottoId {
    get { return lottoId_; }
    set {
      lottoId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LottoBuyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LottoBuyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (LottoId != other.LottoId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (LottoId != 0L) hash ^= LottoId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (LottoId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(LottoId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (LottoId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LottoId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LottoBuyRequest other) {
    if (other == null) {
      return;
    }
    if (other.LottoId != 0L) {
      LottoId = other.LottoId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          LottoId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class LottoBuyResponse : pb::IMessage<LottoBuyResponse> {
  private static readonly pb::MessageParser<LottoBuyResponse> _parser = new pb::MessageParser<LottoBuyResponse>(() => new LottoBuyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LottoBuyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[128]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoBuyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoBuyResponse(LottoBuyResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    props_ = other.props_.Clone();
    id_ = other.id_;
    lottoCount_ = other.lottoCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LottoBuyResponse Clone() {
    return new LottoBuyResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "props" field.</summary>
  public const int PropsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerPropMsg> _repeated_props_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerPropMsg.Parser);
  private readonly pbc::RepeatedField<global::PlayerPropMsg> props_ = new pbc::RepeatedField<global::PlayerPropMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerPropMsg> Props {
    get { return props_; }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 3;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "lottoCount" field.</summary>
  public const int LottoCountFieldNumber = 4;
  private int lottoCount_;
  /// <summary>
  ///今日第几次抽奖
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LottoCount {
    get { return lottoCount_; }
    set {
      lottoCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LottoBuyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LottoBuyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if(!props_.Equals(other.props_)) return false;
    if (Id != other.Id) return false;
    if (LottoCount != other.LottoCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    hash ^= props_.GetHashCode();
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (LottoCount != 0) hash ^= LottoCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    props_.WriteTo(output, _repeated_props_codec);
    if (Id != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(Id);
    }
    if (LottoCount != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(LottoCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    size += props_.CalculateSize(_repeated_props_codec);
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (LottoCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LottoCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LottoBuyResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    props_.Add(other.props_);
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.LottoCount != 0) {
      LottoCount = other.LottoCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          props_.AddEntriesFrom(input, _repeated_props_codec);
          break;
        }
        case 24: {
          Id = input.ReadInt64();
          break;
        }
        case 32: {
          LottoCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*google charge
/// </summary>
public sealed partial class CSGooglePayChargeRequest : pb::IMessage<CSGooglePayChargeRequest> {
  private static readonly pb::MessageParser<CSGooglePayChargeRequest> _parser = new pb::MessageParser<CSGooglePayChargeRequest>(() => new CSGooglePayChargeRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSGooglePayChargeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[129]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGooglePayChargeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGooglePayChargeRequest(CSGooglePayChargeRequest other) : this() {
    jsonData_ = other.jsonData_;
    signature_ = other.signature_;
    productId_ = other.productId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGooglePayChargeRequest Clone() {
    return new CSGooglePayChargeRequest(this);
  }

  /// <summary>Field number for the "jsonData" field.</summary>
  public const int JsonDataFieldNumber = 1;
  private string jsonData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string JsonData {
    get { return jsonData_; }
    set {
      jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 2;
  private string signature_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Signature {
    get { return signature_; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "productId" field.</summary>
  public const int ProductIdFieldNumber = 3;
  private string productId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductId {
    get { return productId_; }
    set {
      productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSGooglePayChargeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSGooglePayChargeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (JsonData != other.JsonData) return false;
    if (Signature != other.Signature) return false;
    if (ProductId != other.ProductId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
    if (Signature.Length != 0) hash ^= Signature.GetHashCode();
    if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (JsonData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(JsonData);
    }
    if (Signature.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Signature);
    }
    if (ProductId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(ProductId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (JsonData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
    }
    if (Signature.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
    }
    if (ProductId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSGooglePayChargeRequest other) {
    if (other == null) {
      return;
    }
    if (other.JsonData.Length != 0) {
      JsonData = other.JsonData;
    }
    if (other.Signature.Length != 0) {
      Signature = other.Signature;
    }
    if (other.ProductId.Length != 0) {
      ProductId = other.ProductId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonData = input.ReadString();
          break;
        }
        case 18: {
          Signature = input.ReadString();
          break;
        }
        case 26: {
          ProductId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCGooglePayChargeResponse : pb::IMessage<SCGooglePayChargeResponse> {
  private static readonly pb::MessageParser<SCGooglePayChargeResponse> _parser = new pb::MessageParser<SCGooglePayChargeResponse>(() => new SCGooglePayChargeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCGooglePayChargeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[130]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGooglePayChargeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGooglePayChargeResponse(SCGooglePayChargeResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    productId_ = other.productId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGooglePayChargeResponse Clone() {
    return new SCGooglePayChargeResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "productId" field.</summary>
  public const int ProductIdFieldNumber = 2;
  private string productId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductId {
    get { return productId_; }
    set {
      productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCGooglePayChargeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCGooglePayChargeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (ProductId != other.ProductId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (ProductId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ProductId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (ProductId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCGooglePayChargeResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.ProductId.Length != 0) {
      ProductId = other.ProductId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          ProductId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSIOSPayChargeRequest : pb::IMessage<CSIOSPayChargeRequest> {
  private static readonly pb::MessageParser<CSIOSPayChargeRequest> _parser = new pb::MessageParser<CSIOSPayChargeRequest>(() => new CSIOSPayChargeRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSIOSPayChargeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[131]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSIOSPayChargeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSIOSPayChargeRequest(CSIOSPayChargeRequest other) : this() {
    jsonData_ = other.jsonData_;
    productId_ = other.productId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSIOSPayChargeRequest Clone() {
    return new CSIOSPayChargeRequest(this);
  }

  /// <summary>Field number for the "jsonData" field.</summary>
  public const int JsonDataFieldNumber = 1;
  private string jsonData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string JsonData {
    get { return jsonData_; }
    set {
      jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "productId" field.</summary>
  public const int ProductIdFieldNumber = 2;
  private string productId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductId {
    get { return productId_; }
    set {
      productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSIOSPayChargeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSIOSPayChargeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (JsonData != other.JsonData) return false;
    if (ProductId != other.ProductId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
    if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (JsonData.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(JsonData);
    }
    if (ProductId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ProductId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (JsonData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
    }
    if (ProductId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSIOSPayChargeRequest other) {
    if (other == null) {
      return;
    }
    if (other.JsonData.Length != 0) {
      JsonData = other.JsonData;
    }
    if (other.ProductId.Length != 0) {
      ProductId = other.ProductId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          JsonData = input.ReadString();
          break;
        }
        case 18: {
          ProductId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCIOSPayChargeResponse : pb::IMessage<SCIOSPayChargeResponse> {
  private static readonly pb::MessageParser<SCIOSPayChargeResponse> _parser = new pb::MessageParser<SCIOSPayChargeResponse>(() => new SCIOSPayChargeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCIOSPayChargeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[132]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIOSPayChargeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIOSPayChargeResponse(SCIOSPayChargeResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    productId_ = other.productId_;
    jsonData_ = other.jsonData_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIOSPayChargeResponse Clone() {
    return new SCIOSPayChargeResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "productId" field.</summary>
  public const int ProductIdFieldNumber = 2;
  private string productId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ProductId {
    get { return productId_; }
    set {
      productId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "jsonData" field.</summary>
  public const int JsonDataFieldNumber = 3;
  private string jsonData_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string JsonData {
    get { return jsonData_; }
    set {
      jsonData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCIOSPayChargeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCIOSPayChargeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (ProductId != other.ProductId) return false;
    if (JsonData != other.JsonData) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (ProductId.Length != 0) hash ^= ProductId.GetHashCode();
    if (JsonData.Length != 0) hash ^= JsonData.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (ProductId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(ProductId);
    }
    if (JsonData.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(JsonData);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (ProductId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ProductId);
    }
    if (JsonData.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(JsonData);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCIOSPayChargeResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.ProductId.Length != 0) {
      ProductId = other.ProductId;
    }
    if (other.JsonData.Length != 0) {
      JsonData = other.JsonData;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          ProductId = input.ReadString();
          break;
        }
        case 26: {
          JsonData = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*服务器判断玩家接到新任务后通知客户端
/// </summary>
public sealed partial class SCAcceptTaskNotice : pb::IMessage<SCAcceptTaskNotice> {
  private static readonly pb::MessageParser<SCAcceptTaskNotice> _parser = new pb::MessageParser<SCAcceptTaskNotice>(() => new SCAcceptTaskNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCAcceptTaskNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[133]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAcceptTaskNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAcceptTaskNotice(SCAcceptTaskNotice other) : this() {
    acceptTasks_ = other.acceptTasks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAcceptTaskNotice Clone() {
    return new SCAcceptTaskNotice(this);
  }

  /// <summary>Field number for the "acceptTasks" field.</summary>
  public const int AcceptTasksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::AcceptTaskInfo> _repeated_acceptTasks_codec
      = pb::FieldCodec.ForMessage(10, global::AcceptTaskInfo.Parser);
  private readonly pbc::RepeatedField<global::AcceptTaskInfo> acceptTasks_ = new pbc::RepeatedField<global::AcceptTaskInfo>();
  /// <summary>
  ///接到的新任务列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AcceptTaskInfo> AcceptTasks {
    get { return acceptTasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCAcceptTaskNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCAcceptTaskNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!acceptTasks_.Equals(other.acceptTasks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= acceptTasks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    acceptTasks_.WriteTo(output, _repeated_acceptTasks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += acceptTasks_.CalculateSize(_repeated_acceptTasks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCAcceptTaskNotice other) {
    if (other == null) {
      return;
    }
    acceptTasks_.Add(other.acceptTasks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          acceptTasks_.AddEntriesFrom(input, _repeated_acceptTasks_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class AcceptTaskInfo : pb::IMessage<AcceptTaskInfo> {
  private static readonly pb::MessageParser<AcceptTaskInfo> _parser = new pb::MessageParser<AcceptTaskInfo>(() => new AcceptTaskInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AcceptTaskInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[134]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AcceptTaskInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AcceptTaskInfo(AcceptTaskInfo other) : this() {
    taskId_ = other.taskId_;
    playerTaskId_ = other.playerTaskId_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AcceptTaskInfo Clone() {
    return new AcceptTaskInfo(this);
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private long taskId_;
  /// <summary>
  ///配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "playerTaskId" field.</summary>
  public const int PlayerTaskIdFieldNumber = 2;
  private long playerTaskId_;
  /// <summary>
  ///唯一标识
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerTaskId {
    get { return playerTaskId_; }
    set {
      playerTaskId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///任务进度状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AcceptTaskInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AcceptTaskInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TaskId != other.TaskId) return false;
    if (PlayerTaskId != other.PlayerTaskId) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (PlayerTaskId != 0L) hash ^= PlayerTaskId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TaskId);
    }
    if (PlayerTaskId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerTaskId);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (PlayerTaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerTaskId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AcceptTaskInfo other) {
    if (other == null) {
      return;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    if (other.PlayerTaskId != 0L) {
      PlayerTaskId = other.PlayerTaskId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TaskId = input.ReadInt64();
          break;
        }
        case 16: {
          PlayerTaskId = input.ReadInt64();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSTaskListRequest : pb::IMessage<CSTaskListRequest> {
  private static readonly pb::MessageParser<CSTaskListRequest> _parser = new pb::MessageParser<CSTaskListRequest>(() => new CSTaskListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTaskListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[135]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskListRequest(CSTaskListRequest other) : this() {
    type_ = other.type_;
    taskIds_ = other.taskIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskListRequest Clone() {
    return new CSTaskListRequest(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///0表示所有任务，1表示主线任务。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "taskIds" field.</summary>
  public const int TaskIdsFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_taskIds_codec
      = pb::FieldCodec.ForInt64(18);
  private readonly pbc::RepeatedField<long> taskIds_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///想要请求详细信息的任务的id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> TaskIds {
    get { return taskIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTaskListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTaskListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if(!taskIds_.Equals(other.taskIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    hash ^= taskIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    taskIds_.WriteTo(output, _repeated_taskIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    size += taskIds_.CalculateSize(_repeated_taskIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTaskListRequest other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    taskIds_.Add(other.taskIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 18:
        case 16: {
          taskIds_.AddEntriesFrom(input, _repeated_taskIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SCTaskListResponse : pb::IMessage<SCTaskListResponse> {
  private static readonly pb::MessageParser<SCTaskListResponse> _parser = new pb::MessageParser<SCTaskListResponse>(() => new SCTaskListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTaskListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[136]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskListResponse(SCTaskListResponse other) : this() {
    taskInfos_ = other.taskInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskListResponse Clone() {
    return new SCTaskListResponse(this);
  }

  /// <summary>Field number for the "taskInfos" field.</summary>
  public const int TaskInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TaskInfo> _repeated_taskInfos_codec
      = pb::FieldCodec.ForMessage(10, global::TaskInfo.Parser);
  private readonly pbc::RepeatedField<global::TaskInfo> taskInfos_ = new pbc::RepeatedField<global::TaskInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TaskInfo> TaskInfos {
    get { return taskInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTaskListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTaskListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!taskInfos_.Equals(other.taskInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= taskInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    taskInfos_.WriteTo(output, _repeated_taskInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += taskInfos_.CalculateSize(_repeated_taskInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTaskListResponse other) {
    if (other == null) {
      return;
    }
    taskInfos_.Add(other.taskInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          taskInfos_.AddEntriesFrom(input, _repeated_taskInfos_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*玩家的任务进度
/// </summary>
public sealed partial class TaskInfo : pb::IMessage<TaskInfo> {
  private static readonly pb::MessageParser<TaskInfo> _parser = new pb::MessageParser<TaskInfo>(() => new TaskInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaskInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[137]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskInfo(TaskInfo other) : this() {
    playerTaskId_ = other.playerTaskId_;
    taskId_ = other.taskId_;
    status_ = other.status_;
    level_ = other.level_;
    propProgresss_ = other.propProgresss_.Clone();
    dialogueProgress_ = other.dialogueProgress_;
    eventProgress_ = other.eventProgress_;
    sceneProgress_ = other.sceneProgress_;
    exhibitProgress_ = other.exhibitProgress_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskInfo Clone() {
    return new TaskInfo(this);
  }

  /// <summary>Field number for the "playerTaskId" field.</summary>
  public const int PlayerTaskIdFieldNumber = 1;
  private long playerTaskId_;
  /// <summary>
  ///唯一标识
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerTaskId {
    get { return playerTaskId_; }
    set {
      playerTaskId_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 2;
  private long taskId_;
  /// <summary>
  ///任务的配置Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///任务总进度，1表示进行中，2表示已完成，3表示已领奖
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 4;
  private int level_;
  /// <summary>
  ///等级（当前等级）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "propProgresss" field.</summary>
  public const int PropProgresssFieldNumber = 5;
  private static readonly pb::FieldCodec<global::TaskPropProgress> _repeated_propProgresss_codec
      = pb::FieldCodec.ForMessage(42, global::TaskPropProgress.Parser);
  private readonly pbc::RepeatedField<global::TaskPropProgress> propProgresss_ = new pbc::RepeatedField<global::TaskPropProgress>();
  /// <summary>
  ///物品收集进度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TaskPropProgress> PropProgresss {
    get { return propProgresss_; }
  }

  /// <summary>Field number for the "dialogueProgress" field.</summary>
  public const int DialogueProgressFieldNumber = 6;
  private int dialogueProgress_;
  /// <summary>
  ///对话进度，0表示未完成，大于1表示已完成 dialogueId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int DialogueProgress {
    get { return dialogueProgress_; }
    set {
      dialogueProgress_ = value;
    }
  }

  /// <summary>Field number for the "eventProgress" field.</summary>
  public const int EventProgressFieldNumber = 7;
  private int eventProgress_;
  /// <summary>
  ///事件进度，0表示未完成，大于1表示已完成 eventId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int EventProgress {
    get { return eventProgress_; }
    set {
      eventProgress_ = value;
    }
  }

  /// <summary>Field number for the "sceneProgress" field.</summary>
  public const int SceneProgressFieldNumber = 8;
  private int sceneProgress_;
  /// <summary>
  ///场景进度，0表示未完成，大于1表示已完成 sceneId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SceneProgress {
    get { return sceneProgress_; }
    set {
      sceneProgress_ = value;
    }
  }

  /// <summary>Field number for the "exhibitProgress" field.</summary>
  public const int ExhibitProgressFieldNumber = 9;
  private static readonly pb::FieldCodec<global::TaskExhibitProgress> _repeated_exhibitProgress_codec
      = pb::FieldCodec.ForMessage(74, global::TaskExhibitProgress.Parser);
  private readonly pbc::RepeatedField<global::TaskExhibitProgress> exhibitProgress_ = new pbc::RepeatedField<global::TaskExhibitProgress>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TaskExhibitProgress> ExhibitProgress {
    get { return exhibitProgress_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaskInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaskInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerTaskId != other.PlayerTaskId) return false;
    if (TaskId != other.TaskId) return false;
    if (Status != other.Status) return false;
    if (Level != other.Level) return false;
    if(!propProgresss_.Equals(other.propProgresss_)) return false;
    if (DialogueProgress != other.DialogueProgress) return false;
    if (EventProgress != other.EventProgress) return false;
    if (SceneProgress != other.SceneProgress) return false;
    if(!exhibitProgress_.Equals(other.exhibitProgress_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerTaskId != 0L) hash ^= PlayerTaskId.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    hash ^= propProgresss_.GetHashCode();
    if (DialogueProgress != 0) hash ^= DialogueProgress.GetHashCode();
    if (EventProgress != 0) hash ^= EventProgress.GetHashCode();
    if (SceneProgress != 0) hash ^= SceneProgress.GetHashCode();
    hash ^= exhibitProgress_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerTaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerTaskId);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TaskId);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (Level != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Level);
    }
    propProgresss_.WriteTo(output, _repeated_propProgresss_codec);
    if (DialogueProgress != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(DialogueProgress);
    }
    if (EventProgress != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(EventProgress);
    }
    if (SceneProgress != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(SceneProgress);
    }
    exhibitProgress_.WriteTo(output, _repeated_exhibitProgress_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerTaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerTaskId);
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    size += propProgresss_.CalculateSize(_repeated_propProgresss_codec);
    if (DialogueProgress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DialogueProgress);
    }
    if (EventProgress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EventProgress);
    }
    if (SceneProgress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneProgress);
    }
    size += exhibitProgress_.CalculateSize(_repeated_exhibitProgress_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaskInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlayerTaskId != 0L) {
      PlayerTaskId = other.PlayerTaskId;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    propProgresss_.Add(other.propProgresss_);
    if (other.DialogueProgress != 0) {
      DialogueProgress = other.DialogueProgress;
    }
    if (other.EventProgress != 0) {
      EventProgress = other.EventProgress;
    }
    if (other.SceneProgress != 0) {
      SceneProgress = other.SceneProgress;
    }
    exhibitProgress_.Add(other.exhibitProgress_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerTaskId = input.ReadInt64();
          break;
        }
        case 16: {
          TaskId = input.ReadInt64();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 32: {
          Level = input.ReadInt32();
          break;
        }
        case 42: {
          propProgresss_.AddEntriesFrom(input, _repeated_propProgresss_codec);
          break;
        }
        case 48: {
          DialogueProgress = input.ReadInt32();
          break;
        }
        case 56: {
          EventProgress = input.ReadInt32();
          break;
        }
        case 64: {
          SceneProgress = input.ReadInt32();
          break;
        }
        case 74: {
          exhibitProgress_.AddEntriesFrom(input, _repeated_exhibitProgress_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*任务收集物品的进度
/// </summary>
public sealed partial class TaskPropProgress : pb::IMessage<TaskPropProgress> {
  private static readonly pb::MessageParser<TaskPropProgress> _parser = new pb::MessageParser<TaskPropProgress>(() => new TaskPropProgress());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaskPropProgress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[138]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskPropProgress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskPropProgress(TaskPropProgress other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskPropProgress Clone() {
    return new TaskPropProgress(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  /// <summary>
  ///物品id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  /// <summary>
  ///进度（目前是背包数据）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaskPropProgress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaskPropProgress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaskPropProgress other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*任务收集物品的进度
/// </summary>
public sealed partial class TaskExhibitProgress : pb::IMessage<TaskExhibitProgress> {
  private static readonly pb::MessageParser<TaskExhibitProgress> _parser = new pb::MessageParser<TaskExhibitProgress>(() => new TaskExhibitProgress());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaskExhibitProgress> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[139]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskExhibitProgress() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskExhibitProgress(TaskExhibitProgress other) : this() {
    exhibitId_ = other.exhibitId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskExhibitProgress Clone() {
    return new TaskExhibitProgress(this);
  }

  /// <summary>Field number for the "exhibitId" field.</summary>
  public const int ExhibitIdFieldNumber = 1;
  private long exhibitId_;
  /// <summary>
  ///物品id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExhibitId {
    get { return exhibitId_; }
    set {
      exhibitId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  /// <summary>
  ///进度（目前是背包数据）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaskExhibitProgress);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaskExhibitProgress other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ExhibitId != other.ExhibitId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ExhibitId != 0L) hash ^= ExhibitId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ExhibitId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ExhibitId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ExhibitId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExhibitId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaskExhibitProgress other) {
    if (other == null) {
      return;
    }
    if (other.ExhibitId != 0L) {
      ExhibitId = other.ExhibitId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ExhibitId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSTaskCommitRequest : pb::IMessage<CSTaskCommitRequest> {
  private static readonly pb::MessageParser<CSTaskCommitRequest> _parser = new pb::MessageParser<CSTaskCommitRequest>(() => new CSTaskCommitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTaskCommitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[140]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskCommitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskCommitRequest(CSTaskCommitRequest other) : this() {
    playerTaskId_ = other.playerTaskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskCommitRequest Clone() {
    return new CSTaskCommitRequest(this);
  }

  /// <summary>Field number for the "playerTaskId" field.</summary>
  public const int PlayerTaskIdFieldNumber = 1;
  private long playerTaskId_;
  /// <summary>
  ///唯一标识
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerTaskId {
    get { return playerTaskId_; }
    set {
      playerTaskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTaskCommitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTaskCommitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerTaskId != other.PlayerTaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerTaskId != 0L) hash ^= PlayerTaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerTaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerTaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerTaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerTaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTaskCommitRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerTaskId != 0L) {
      PlayerTaskId = other.PlayerTaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerTaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCTaskCommitResponse : pb::IMessage<SCTaskCommitResponse> {
  private static readonly pb::MessageParser<SCTaskCommitResponse> _parser = new pb::MessageParser<SCTaskCommitResponse>(() => new SCTaskCommitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTaskCommitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[141]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskCommitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskCommitResponse(SCTaskCommitResponse other) : this() {
    result_ = other.result_;
    coin_ = other.coin_;
    cash_ = other.cash_;
    vit_ = other.vit_;
    exp_ = other.exp_;
    titleId_ = other.titleId_;
    propRewards_ = other.propRewards_.Clone();
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskCommitResponse Clone() {
    return new SCTaskCommitResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1表示成功，其他的是错误码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 2;
  private int coin_;
  /// <summary>
  ///金币奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "cash" field.</summary>
  public const int CashFieldNumber = 3;
  private int cash_;
  /// <summary>
  ///现金奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cash {
    get { return cash_; }
    set {
      cash_ = value;
    }
  }

  /// <summary>Field number for the "vit" field.</summary>
  public const int VitFieldNumber = 4;
  private int vit_;
  /// <summary>
  ///体力值奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vit {
    get { return vit_; }
    set {
      vit_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 5;
  private int exp_;
  /// <summary>
  ///经验奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "titleId" field.</summary>
  public const int TitleIdFieldNumber = 6;
  private long titleId_;
  /// <summary>
  ///获得的称号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TitleId {
    get { return titleId_; }
    set {
      titleId_ = value;
    }
  }

  /// <summary>Field number for the "propRewards" field.</summary>
  public const int PropRewardsFieldNumber = 7;
  private static readonly pb::FieldCodec<global::TaskPropReward> _repeated_propRewards_codec
      = pb::FieldCodec.ForMessage(58, global::TaskPropReward.Parser);
  private readonly pbc::RepeatedField<global::TaskPropReward> propRewards_ = new pbc::RepeatedField<global::TaskPropReward>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TaskPropReward> PropRewards {
    get { return propRewards_; }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 8;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTaskCommitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTaskCommitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Coin != other.Coin) return false;
    if (Cash != other.Cash) return false;
    if (Vit != other.Vit) return false;
    if (Exp != other.Exp) return false;
    if (TitleId != other.TitleId) return false;
    if(!propRewards_.Equals(other.propRewards_)) return false;
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Coin != 0) hash ^= Coin.GetHashCode();
    if (Cash != 0) hash ^= Cash.GetHashCode();
    if (Vit != 0) hash ^= Vit.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (TitleId != 0L) hash ^= TitleId.GetHashCode();
    hash ^= propRewards_.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Coin != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Coin);
    }
    if (Cash != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Cash);
    }
    if (Vit != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Vit);
    }
    if (Exp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Exp);
    }
    if (TitleId != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(TitleId);
    }
    propRewards_.WriteTo(output, _repeated_propRewards_codec);
    if (TaskId != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Coin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
    }
    if (Cash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
    }
    if (Vit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (TitleId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TitleId);
    }
    size += propRewards_.CalculateSize(_repeated_propRewards_codec);
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTaskCommitResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Coin != 0) {
      Coin = other.Coin;
    }
    if (other.Cash != 0) {
      Cash = other.Cash;
    }
    if (other.Vit != 0) {
      Vit = other.Vit;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.TitleId != 0L) {
      TitleId = other.TitleId;
    }
    propRewards_.Add(other.propRewards_);
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Coin = input.ReadInt32();
          break;
        }
        case 24: {
          Cash = input.ReadInt32();
          break;
        }
        case 32: {
          Vit = input.ReadInt32();
          break;
        }
        case 40: {
          Exp = input.ReadInt32();
          break;
        }
        case 48: {
          TitleId = input.ReadInt64();
          break;
        }
        case 58: {
          propRewards_.AddEntriesFrom(input, _repeated_propRewards_codec);
          break;
        }
        case 64: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*任务物品奖励
/// </summary>
public sealed partial class TaskPropReward : pb::IMessage<TaskPropReward> {
  private static readonly pb::MessageParser<TaskPropReward> _parser = new pb::MessageParser<TaskPropReward>(() => new TaskPropReward());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaskPropReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[142]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskPropReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskPropReward(TaskPropReward other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskPropReward Clone() {
    return new TaskPropReward(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  /// <summary>
  ///物品id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  /// <summary>
  ///奖励数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaskPropReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaskPropReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaskPropReward other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCTaskStatusChangeNotice : pb::IMessage<SCTaskStatusChangeNotice> {
  private static readonly pb::MessageParser<SCTaskStatusChangeNotice> _parser = new pb::MessageParser<SCTaskStatusChangeNotice>(() => new SCTaskStatusChangeNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTaskStatusChangeNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[143]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskStatusChangeNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskStatusChangeNotice(SCTaskStatusChangeNotice other) : this() {
    playerTaskId_ = other.playerTaskId_;
    taskId_ = other.taskId_;
    status_ = other.status_;
    TaskInfo = other.taskInfo_ != null ? other.TaskInfo.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskStatusChangeNotice Clone() {
    return new SCTaskStatusChangeNotice(this);
  }

  /// <summary>Field number for the "playerTaskId" field.</summary>
  public const int PlayerTaskIdFieldNumber = 1;
  private long playerTaskId_;
  /// <summary>
  ///唯一标识
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerTaskId {
    get { return playerTaskId_; }
    set {
      playerTaskId_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 2;
  private long taskId_;
  /// <summary>
  ///任务的配置Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///任务进度,1表示进行中，2表示已完成，3表示已领奖
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "taskInfo" field.</summary>
  public const int TaskInfoFieldNumber = 4;
  private global::TaskInfo taskInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TaskInfo TaskInfo {
    get { return taskInfo_; }
    set {
      taskInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTaskStatusChangeNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTaskStatusChangeNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerTaskId != other.PlayerTaskId) return false;
    if (TaskId != other.TaskId) return false;
    if (Status != other.Status) return false;
    if (!object.Equals(TaskInfo, other.TaskInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerTaskId != 0L) hash ^= PlayerTaskId.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (taskInfo_ != null) hash ^= TaskInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerTaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerTaskId);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TaskId);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (taskInfo_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(TaskInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerTaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerTaskId);
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (taskInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(TaskInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTaskStatusChangeNotice other) {
    if (other == null) {
      return;
    }
    if (other.PlayerTaskId != 0L) {
      PlayerTaskId = other.PlayerTaskId;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.taskInfo_ != null) {
      if (taskInfo_ == null) {
        taskInfo_ = new global::TaskInfo();
      }
      TaskInfo.MergeFrom(other.TaskInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerTaskId = input.ReadInt64();
          break;
        }
        case 16: {
          TaskId = input.ReadInt64();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 34: {
          if (taskInfo_ == null) {
            taskInfo_ = new global::TaskInfo();
          }
          input.ReadMessage(taskInfo_);
          break;
        }
      }
    }
  }

}

public sealed partial class CSTriggerTaskActiveRequest : pb::IMessage<CSTriggerTaskActiveRequest> {
  private static readonly pb::MessageParser<CSTriggerTaskActiveRequest> _parser = new pb::MessageParser<CSTriggerTaskActiveRequest>(() => new CSTriggerTaskActiveRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTriggerTaskActiveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[144]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTriggerTaskActiveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTriggerTaskActiveRequest(CSTriggerTaskActiveRequest other) : this() {
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTriggerTaskActiveRequest Clone() {
    return new CSTriggerTaskActiveRequest(this);
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private long taskId_;
  /// <summary>
  ///想要触发的任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTriggerTaskActiveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTriggerTaskActiveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTriggerTaskActiveRequest other) {
    if (other == null) {
      return;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCTriggerTaskActiveResponse : pb::IMessage<SCTriggerTaskActiveResponse> {
  private static readonly pb::MessageParser<SCTriggerTaskActiveResponse> _parser = new pb::MessageParser<SCTriggerTaskActiveResponse>(() => new SCTriggerTaskActiveResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTriggerTaskActiveResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[145]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTriggerTaskActiveResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTriggerTaskActiveResponse(SCTriggerTaskActiveResponse other) : this() {
    result_ = other.result_;
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTriggerTaskActiveResponse Clone() {
    return new SCTriggerTaskActiveResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1表示成功，其他的是错误码
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 2;
  private long taskId_;
  /// <summary>
  ///想要触发的任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTriggerTaskActiveResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTriggerTaskActiveResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTriggerTaskActiveResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*客户端主动向服务器请求玩家当前接收的任务列表
/// </summary>
public sealed partial class CSTaskIdListRequest : pb::IMessage<CSTaskIdListRequest> {
  private static readonly pb::MessageParser<CSTaskIdListRequest> _parser = new pb::MessageParser<CSTaskIdListRequest>(() => new CSTaskIdListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTaskIdListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[146]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskIdListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskIdListRequest(CSTaskIdListRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTaskIdListRequest Clone() {
    return new CSTaskIdListRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTaskIdListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTaskIdListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTaskIdListRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCTaskIdListResponse : pb::IMessage<SCTaskIdListResponse> {
  private static readonly pb::MessageParser<SCTaskIdListResponse> _parser = new pb::MessageParser<SCTaskIdListResponse>(() => new SCTaskIdListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTaskIdListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[147]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskIdListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskIdListResponse(SCTaskIdListResponse other) : this() {
    taskIdInfos_ = other.taskIdInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTaskIdListResponse Clone() {
    return new SCTaskIdListResponse(this);
  }

  /// <summary>Field number for the "taskIdInfos" field.</summary>
  public const int TaskIdInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TaskIdInfo> _repeated_taskIdInfos_codec
      = pb::FieldCodec.ForMessage(10, global::TaskIdInfo.Parser);
  private readonly pbc::RepeatedField<global::TaskIdInfo> taskIdInfos_ = new pbc::RepeatedField<global::TaskIdInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TaskIdInfo> TaskIdInfos {
    get { return taskIdInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTaskIdListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTaskIdListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!taskIdInfos_.Equals(other.taskIdInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= taskIdInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    taskIdInfos_.WriteTo(output, _repeated_taskIdInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += taskIdInfos_.CalculateSize(_repeated_taskIdInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTaskIdListResponse other) {
    if (other == null) {
      return;
    }
    taskIdInfos_.Add(other.taskIdInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          taskIdInfos_.AddEntriesFrom(input, _repeated_taskIdInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TaskIdInfo : pb::IMessage<TaskIdInfo> {
  private static readonly pb::MessageParser<TaskIdInfo> _parser = new pb::MessageParser<TaskIdInfo>(() => new TaskIdInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaskIdInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[148]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskIdInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskIdInfo(TaskIdInfo other) : this() {
    playerTaskId_ = other.playerTaskId_;
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskIdInfo Clone() {
    return new TaskIdInfo(this);
  }

  /// <summary>Field number for the "playerTaskId" field.</summary>
  public const int PlayerTaskIdFieldNumber = 1;
  private long playerTaskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerTaskId {
    get { return playerTaskId_; }
    set {
      playerTaskId_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 2;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaskIdInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaskIdInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerTaskId != other.PlayerTaskId) return false;
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerTaskId != 0L) hash ^= PlayerTaskId.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerTaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerTaskId);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerTaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerTaskId);
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaskIdInfo other) {
    if (other == null) {
      return;
    }
    if (other.PlayerTaskId != 0L) {
      PlayerTaskId = other.PlayerTaskId;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerTaskId = input.ReadInt64();
          break;
        }
        case 16: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*成就获取列表*
/// </summary>
public sealed partial class CSAchievementRequest : pb::IMessage<CSAchievementRequest> {
  private static readonly pb::MessageParser<CSAchievementRequest> _parser = new pb::MessageParser<CSAchievementRequest>(() => new CSAchievementRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSAchievementRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[149]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAchievementRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAchievementRequest(CSAchievementRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAchievementRequest Clone() {
    return new CSAchievementRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSAchievementRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSAchievementRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSAchievementRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class AchievementMsg : pb::IMessage<AchievementMsg> {
  private static readonly pb::MessageParser<AchievementMsg> _parser = new pb::MessageParser<AchievementMsg>(() => new AchievementMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AchievementMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[150]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AchievementMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AchievementMsg(AchievementMsg other) : this() {
    id_ = other.id_;
    progress_ = other.progress_;
    submitStatus_ = other.submitStatus_;
    finishTime_ = other.finishTime_;
    finishTime1_ = other.finishTime1_;
    finishTime2_ = other.finishTime2_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AchievementMsg Clone() {
    return new AchievementMsg(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 2;
  private int progress_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "submitStatus" field.</summary>
  public const int SubmitStatusFieldNumber = 3;
  private int submitStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SubmitStatus {
    get { return submitStatus_; }
    set {
      submitStatus_ = value;
    }
  }

  /// <summary>Field number for the "finishTime" field.</summary>
  public const int FinishTimeFieldNumber = 4;
  private long finishTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime {
    get { return finishTime_; }
    set {
      finishTime_ = value;
    }
  }

  /// <summary>Field number for the "finishTime1" field.</summary>
  public const int FinishTime1FieldNumber = 5;
  private long finishTime1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime1 {
    get { return finishTime1_; }
    set {
      finishTime1_ = value;
    }
  }

  /// <summary>Field number for the "finishTime2" field.</summary>
  public const int FinishTime2FieldNumber = 6;
  private long finishTime2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime2 {
    get { return finishTime2_; }
    set {
      finishTime2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AchievementMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AchievementMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Progress != other.Progress) return false;
    if (SubmitStatus != other.SubmitStatus) return false;
    if (FinishTime != other.FinishTime) return false;
    if (FinishTime1 != other.FinishTime1) return false;
    if (FinishTime2 != other.FinishTime2) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    if (SubmitStatus != 0) hash ^= SubmitStatus.GetHashCode();
    if (FinishTime != 0L) hash ^= FinishTime.GetHashCode();
    if (FinishTime1 != 0L) hash ^= FinishTime1.GetHashCode();
    if (FinishTime2 != 0L) hash ^= FinishTime2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Progress != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Progress);
    }
    if (SubmitStatus != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SubmitStatus);
    }
    if (FinishTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(FinishTime);
    }
    if (FinishTime1 != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(FinishTime1);
    }
    if (FinishTime2 != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(FinishTime2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
    }
    if (SubmitStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubmitStatus);
    }
    if (FinishTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime);
    }
    if (FinishTime1 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime1);
    }
    if (FinishTime2 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AchievementMsg other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
    if (other.SubmitStatus != 0) {
      SubmitStatus = other.SubmitStatus;
    }
    if (other.FinishTime != 0L) {
      FinishTime = other.FinishTime;
    }
    if (other.FinishTime1 != 0L) {
      FinishTime1 = other.FinishTime1;
    }
    if (other.FinishTime2 != 0L) {
      FinishTime2 = other.FinishTime2;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Progress = input.ReadInt32();
          break;
        }
        case 24: {
          SubmitStatus = input.ReadInt32();
          break;
        }
        case 32: {
          FinishTime = input.ReadInt64();
          break;
        }
        case 40: {
          FinishTime1 = input.ReadInt64();
          break;
        }
        case 48: {
          FinishTime2 = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCAchievementResponse : pb::IMessage<SCAchievementResponse> {
  private static readonly pb::MessageParser<SCAchievementResponse> _parser = new pb::MessageParser<SCAchievementResponse>(() => new SCAchievementResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCAchievementResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[151]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementResponse(SCAchievementResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    achievements_ = other.achievements_.Clone();
    totalCount_ = other.totalCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementResponse Clone() {
    return new SCAchievementResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "Achievements" field.</summary>
  public const int AchievementsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::AchievementMsg> _repeated_achievements_codec
      = pb::FieldCodec.ForMessage(18, global::AchievementMsg.Parser);
  private readonly pbc::RepeatedField<global::AchievementMsg> achievements_ = new pbc::RepeatedField<global::AchievementMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AchievementMsg> Achievements {
    get { return achievements_; }
  }

  /// <summary>Field number for the "totalCount" field.</summary>
  public const int TotalCountFieldNumber = 3;
  private int totalCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TotalCount {
    get { return totalCount_; }
    set {
      totalCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCAchievementResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCAchievementResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!achievements_.Equals(other.achievements_)) return false;
    if (TotalCount != other.TotalCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= achievements_.GetHashCode();
    if (TotalCount != 0) hash ^= TotalCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    achievements_.WriteTo(output, _repeated_achievements_codec);
    if (TotalCount != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TotalCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += achievements_.CalculateSize(_repeated_achievements_codec);
    if (TotalCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCAchievementResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    achievements_.Add(other.achievements_);
    if (other.TotalCount != 0) {
      TotalCount = other.TotalCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          achievements_.AddEntriesFrom(input, _repeated_achievements_codec);
          break;
        }
        case 24: {
          TotalCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*成就奖励领取*
/// </summary>
public sealed partial class CSAchievementSubmitRequest : pb::IMessage<CSAchievementSubmitRequest> {
  private static readonly pb::MessageParser<CSAchievementSubmitRequest> _parser = new pb::MessageParser<CSAchievementSubmitRequest>(() => new CSAchievementSubmitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSAchievementSubmitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[152]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAchievementSubmitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAchievementSubmitRequest(CSAchievementSubmitRequest other) : this() {
    id_ = other.id_;
    stage_ = other.stage_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSAchievementSubmitRequest Clone() {
    return new CSAchievementSubmitRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 2;
  private int stage_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSAchievementSubmitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSAchievementSubmitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Stage != other.Stage) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Stage != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Stage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSAchievementSubmitRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Stage = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCAchievementSubmitResponse : pb::IMessage<SCAchievementSubmitResponse> {
  private static readonly pb::MessageParser<SCAchievementSubmitResponse> _parser = new pb::MessageParser<SCAchievementSubmitResponse>(() => new SCAchievementSubmitResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCAchievementSubmitResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[153]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementSubmitResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementSubmitResponse(SCAchievementSubmitResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementSubmitResponse Clone() {
    return new SCAchievementSubmitResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCAchievementSubmitResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCAchievementSubmitResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCAchievementSubmitResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

/// <summary>
///活动 start
/// </summary>
public sealed partial class CSActivityBaseListRequest : pb::IMessage<CSActivityBaseListRequest> {
  private static readonly pb::MessageParser<CSActivityBaseListRequest> _parser = new pb::MessageParser<CSActivityBaseListRequest>(() => new CSActivityBaseListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSActivityBaseListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[154]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityBaseListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityBaseListRequest(CSActivityBaseListRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityBaseListRequest Clone() {
    return new CSActivityBaseListRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSActivityBaseListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSActivityBaseListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSActivityBaseListRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCActivityBaseListResponse : pb::IMessage<SCActivityBaseListResponse> {
  private static readonly pb::MessageParser<SCActivityBaseListResponse> _parser = new pb::MessageParser<SCActivityBaseListResponse>(() => new SCActivityBaseListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCActivityBaseListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[155]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityBaseListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityBaseListResponse(SCActivityBaseListResponse other) : this() {
    baseInfos_ = other.baseInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityBaseListResponse Clone() {
    return new SCActivityBaseListResponse(this);
  }

  /// <summary>Field number for the "baseInfos" field.</summary>
  public const int BaseInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ActivityBaseInfo> _repeated_baseInfos_codec
      = pb::FieldCodec.ForMessage(10, global::ActivityBaseInfo.Parser);
  private readonly pbc::RepeatedField<global::ActivityBaseInfo> baseInfos_ = new pbc::RepeatedField<global::ActivityBaseInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ActivityBaseInfo> BaseInfos {
    get { return baseInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCActivityBaseListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCActivityBaseListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!baseInfos_.Equals(other.baseInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= baseInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    baseInfos_.WriteTo(output, _repeated_baseInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += baseInfos_.CalculateSize(_repeated_baseInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCActivityBaseListResponse other) {
    if (other == null) {
      return;
    }
    baseInfos_.Add(other.baseInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          baseInfos_.AddEntriesFrom(input, _repeated_baseInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ActivityBaseInfo : pb::IMessage<ActivityBaseInfo> {
  private static readonly pb::MessageParser<ActivityBaseInfo> _parser = new pb::MessageParser<ActivityBaseInfo>(() => new ActivityBaseInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActivityBaseInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[156]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivityBaseInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivityBaseInfo(ActivityBaseInfo other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    icon_ = other.icon_;
    descs_ = other.descs_;
    targetType_ = other.targetType_;
    targetPrefab_ = other.targetPrefab_;
    warmupTime_ = other.warmupTime_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    stage_ = other.stage_;
    timeType_ = other.timeType_;
    days_ = other.days_;
    personalBeginTime_ = other.personalBeginTime_;
    personalEndTime_ = other.personalEndTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActivityBaseInfo Clone() {
    return new ActivityBaseInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "descs" field.</summary>
  public const int DescsFieldNumber = 4;
  private string descs_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Descs {
    get { return descs_; }
    set {
      descs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "targetType" field.</summary>
  public const int TargetTypeFieldNumber = 5;
  private int targetType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TargetType {
    get { return targetType_; }
    set {
      targetType_ = value;
    }
  }

  /// <summary>Field number for the "targetPrefab" field.</summary>
  public const int TargetPrefabFieldNumber = 6;
  private string targetPrefab_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetPrefab {
    get { return targetPrefab_; }
    set {
      targetPrefab_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "warmupTime" field.</summary>
  public const int WarmupTimeFieldNumber = 7;
  private long warmupTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long WarmupTime {
    get { return warmupTime_; }
    set {
      warmupTime_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 8;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 9;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 10;
  private int stage_;
  /// <summary>
  ///0无 1预热 2开始
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "timeType" field.</summary>
  public const int TimeTypeFieldNumber = 11;
  private int timeType_;
  /// <summary>
  ///时间类型 0全局的 1 个人的（个人的活动开始时间从他第一次接取任务开始）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeType {
    get { return timeType_; }
    set {
      timeType_ = value;
    }
  }

  /// <summary>Field number for the "days" field.</summary>
  public const int DaysFieldNumber = 12;
  private int days_;
  /// <summary>
  ///个人活动，当前是他活动的第几天
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Days {
    get { return days_; }
    set {
      days_ = value;
    }
  }

  /// <summary>Field number for the "personalBeginTime" field.</summary>
  public const int PersonalBeginTimeFieldNumber = 13;
  private long personalBeginTime_;
  /// <summary>
  ///个人活动，开始时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PersonalBeginTime {
    get { return personalBeginTime_; }
    set {
      personalBeginTime_ = value;
    }
  }

  /// <summary>Field number for the "personalEndTime" field.</summary>
  public const int PersonalEndTimeFieldNumber = 14;
  private long personalEndTime_;
  /// <summary>
  ///个人活动，结束时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PersonalEndTime {
    get { return personalEndTime_; }
    set {
      personalEndTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActivityBaseInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActivityBaseInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Icon != other.Icon) return false;
    if (Descs != other.Descs) return false;
    if (TargetType != other.TargetType) return false;
    if (TargetPrefab != other.TargetPrefab) return false;
    if (WarmupTime != other.WarmupTime) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    if (Stage != other.Stage) return false;
    if (TimeType != other.TimeType) return false;
    if (Days != other.Days) return false;
    if (PersonalBeginTime != other.PersonalBeginTime) return false;
    if (PersonalEndTime != other.PersonalEndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Descs.Length != 0) hash ^= Descs.GetHashCode();
    if (TargetType != 0) hash ^= TargetType.GetHashCode();
    if (TargetPrefab.Length != 0) hash ^= TargetPrefab.GetHashCode();
    if (WarmupTime != 0L) hash ^= WarmupTime.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    if (TimeType != 0) hash ^= TimeType.GetHashCode();
    if (Days != 0) hash ^= Days.GetHashCode();
    if (PersonalBeginTime != 0L) hash ^= PersonalBeginTime.GetHashCode();
    if (PersonalEndTime != 0L) hash ^= PersonalEndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (Descs.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Descs);
    }
    if (TargetType != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(TargetType);
    }
    if (TargetPrefab.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(TargetPrefab);
    }
    if (WarmupTime != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(WarmupTime);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(StartTime);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(72);
      output.WriteInt64(EndTime);
    }
    if (Stage != 0) {
      output.WriteRawTag(80);
      output.WriteInt32(Stage);
    }
    if (TimeType != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(TimeType);
    }
    if (Days != 0) {
      output.WriteRawTag(96);
      output.WriteInt32(Days);
    }
    if (PersonalBeginTime != 0L) {
      output.WriteRawTag(104);
      output.WriteInt64(PersonalBeginTime);
    }
    if (PersonalEndTime != 0L) {
      output.WriteRawTag(112);
      output.WriteInt64(PersonalEndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Descs.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Descs);
    }
    if (TargetType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TargetType);
    }
    if (TargetPrefab.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetPrefab);
    }
    if (WarmupTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(WarmupTime);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    if (TimeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeType);
    }
    if (Days != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Days);
    }
    if (PersonalBeginTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PersonalBeginTime);
    }
    if (PersonalEndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PersonalEndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActivityBaseInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Descs.Length != 0) {
      Descs = other.Descs;
    }
    if (other.TargetType != 0) {
      TargetType = other.TargetType;
    }
    if (other.TargetPrefab.Length != 0) {
      TargetPrefab = other.TargetPrefab;
    }
    if (other.WarmupTime != 0L) {
      WarmupTime = other.WarmupTime;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    if (other.TimeType != 0) {
      TimeType = other.TimeType;
    }
    if (other.Days != 0) {
      Days = other.Days;
    }
    if (other.PersonalBeginTime != 0L) {
      PersonalBeginTime = other.PersonalBeginTime;
    }
    if (other.PersonalEndTime != 0L) {
      PersonalEndTime = other.PersonalEndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 34: {
          Descs = input.ReadString();
          break;
        }
        case 40: {
          TargetType = input.ReadInt32();
          break;
        }
        case 50: {
          TargetPrefab = input.ReadString();
          break;
        }
        case 56: {
          WarmupTime = input.ReadInt64();
          break;
        }
        case 64: {
          StartTime = input.ReadInt64();
          break;
        }
        case 72: {
          EndTime = input.ReadInt64();
          break;
        }
        case 80: {
          Stage = input.ReadInt32();
          break;
        }
        case 88: {
          TimeType = input.ReadInt32();
          break;
        }
        case 96: {
          Days = input.ReadInt32();
          break;
        }
        case 104: {
          PersonalBeginTime = input.ReadInt64();
          break;
        }
        case 112: {
          PersonalEndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class PropItem : pb::IMessage<PropItem> {
  private static readonly pb::MessageParser<PropItem> _parser = new pb::MessageParser<PropItem>(() => new PropItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PropItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[157]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PropItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PropItem(PropItem other) : this() {
    id_ = other.id_;
    num_ = other.num_;
    hasNum_ = other.hasNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PropItem Clone() {
    return new PropItem(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "num" field.</summary>
  public const int NumFieldNumber = 2;
  private int num_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Num {
    get { return num_; }
    set {
      num_ = value;
    }
  }

  /// <summary>Field number for the "hasNum" field.</summary>
  public const int HasNumFieldNumber = 3;
  private int hasNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HasNum {
    get { return hasNum_; }
    set {
      hasNum_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PropItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PropItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Num != other.Num) return false;
    if (HasNum != other.HasNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Num != 0) hash ^= Num.GetHashCode();
    if (HasNum != 0) hash ^= HasNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Num != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Num);
    }
    if (HasNum != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(HasNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Num != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
    }
    if (HasNum != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HasNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PropItem other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Num != 0) {
      Num = other.Num;
    }
    if (other.HasNum != 0) {
      HasNum = other.HasNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Num = input.ReadInt32();
          break;
        }
        case 24: {
          HasNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSActivityRequest : pb::IMessage<CSActivityRequest> {
  private static readonly pb::MessageParser<CSActivityRequest> _parser = new pb::MessageParser<CSActivityRequest>(() => new CSActivityRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSActivityRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[158]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityRequest(CSActivityRequest other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityRequest Clone() {
    return new CSActivityRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSActivityRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSActivityRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSActivityRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCActivityDropResponse : pb::IMessage<SCActivityDropResponse> {
  private static readonly pb::MessageParser<SCActivityDropResponse> _parser = new pb::MessageParser<SCActivityDropResponse>(() => new SCActivityDropResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCActivityDropResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[159]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityDropResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityDropResponse(SCActivityDropResponse other) : this() {
    id_ = other.id_;
    description_ = other.description_;
    backgroundSource_ = other.backgroundSource_;
    warmupSource_ = other.warmupSource_;
    rewardid_ = other.rewardid_;
    items_ = other.items_.Clone();
    sceneId_ = other.sceneId_.Clone();
    stage_ = other.stage_;
    hasReward_ = other.hasReward_;
    name_ = other.name_;
    collectDes_ = other.collectDes_;
    sceneDes_ = other.sceneDes_;
    rewardSource_ = other.rewardSource_;
    tips_ = other.tips_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityDropResponse Clone() {
    return new SCActivityDropResponse(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "description" field.</summary>
  public const int DescriptionFieldNumber = 2;
  private string description_ = "";
  /// <summary>
  ///任务总描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Description {
    get { return description_; }
    set {
      description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "backgroundSource" field.</summary>
  public const int BackgroundSourceFieldNumber = 3;
  private string backgroundSource_ = "";
  /// <summary>
  ///背景图
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BackgroundSource {
    get { return backgroundSource_; }
    set {
      backgroundSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "warmupSource" field.</summary>
  public const int WarmupSourceFieldNumber = 4;
  private string warmupSource_ = "";
  /// <summary>
  ///预热图
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WarmupSource {
    get { return warmupSource_; }
    set {
      warmupSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rewardid" field.</summary>
  public const int RewardidFieldNumber = 5;
  private long rewardid_;
  /// <summary>
  ///奖励ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Rewardid {
    get { return rewardid_; }
    set {
      rewardid_ = value;
    }
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::PropItem> _repeated_items_codec
      = pb::FieldCodec.ForMessage(50, global::PropItem.Parser);
  private readonly pbc::RepeatedField<global::PropItem> items_ = new pbc::RepeatedField<global::PropItem>();
  /// <summary>
  ///要掉落的物品，已有的物品数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PropItem> Items {
    get { return items_; }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 7;
  private static readonly pb::FieldCodec<long> _repeated_sceneId_codec
      = pb::FieldCodec.ForInt64(58);
  private readonly pbc::RepeatedField<long> sceneId_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///有物品掉落的场景ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> SceneId {
    get { return sceneId_; }
  }

  /// <summary>Field number for the "stage" field.</summary>
  public const int StageFieldNumber = 8;
  private int stage_;
  /// <summary>
  ///0无 1预热 2开始
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Stage {
    get { return stage_; }
    set {
      stage_ = value;
    }
  }

  /// <summary>Field number for the "hasReward" field.</summary>
  public const int HasRewardFieldNumber = 9;
  private bool hasReward_;
  /// <summary>
  ///是否已经领取过奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReward {
    get { return hasReward_; }
    set {
      hasReward_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 10;
  private string name_ = "";
  /// <summary>
  ///名称
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "collectDes" field.</summary>
  public const int CollectDesFieldNumber = 11;
  private string collectDes_ = "";
  /// <summary>
  ///收集以下物品描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CollectDes {
    get { return collectDes_; }
    set {
      collectDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneDes" field.</summary>
  public const int SceneDesFieldNumber = 12;
  private string sceneDes_ = "";
  /// <summary>
  ///在以下场景可寻找，描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneDes {
    get { return sceneDes_; }
    set {
      sceneDes_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "rewardSource" field.</summary>
  public const int RewardSourceFieldNumber = 13;
  private string rewardSource_ = "";
  /// <summary>
  ///奖励背景图路径
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RewardSource {
    get { return rewardSource_; }
    set {
      rewardSource_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "tips" field.</summary>
  public const int TipsFieldNumber = 14;
  private string tips_ = "";
  /// <summary>
  ///tips描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Tips {
    get { return tips_; }
    set {
      tips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCActivityDropResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCActivityDropResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Description != other.Description) return false;
    if (BackgroundSource != other.BackgroundSource) return false;
    if (WarmupSource != other.WarmupSource) return false;
    if (Rewardid != other.Rewardid) return false;
    if(!items_.Equals(other.items_)) return false;
    if(!sceneId_.Equals(other.sceneId_)) return false;
    if (Stage != other.Stage) return false;
    if (HasReward != other.HasReward) return false;
    if (Name != other.Name) return false;
    if (CollectDes != other.CollectDes) return false;
    if (SceneDes != other.SceneDes) return false;
    if (RewardSource != other.RewardSource) return false;
    if (Tips != other.Tips) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Description.Length != 0) hash ^= Description.GetHashCode();
    if (BackgroundSource.Length != 0) hash ^= BackgroundSource.GetHashCode();
    if (WarmupSource.Length != 0) hash ^= WarmupSource.GetHashCode();
    if (Rewardid != 0L) hash ^= Rewardid.GetHashCode();
    hash ^= items_.GetHashCode();
    hash ^= sceneId_.GetHashCode();
    if (Stage != 0) hash ^= Stage.GetHashCode();
    if (HasReward != false) hash ^= HasReward.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (CollectDes.Length != 0) hash ^= CollectDes.GetHashCode();
    if (SceneDes.Length != 0) hash ^= SceneDes.GetHashCode();
    if (RewardSource.Length != 0) hash ^= RewardSource.GetHashCode();
    if (Tips.Length != 0) hash ^= Tips.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Description.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Description);
    }
    if (BackgroundSource.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(BackgroundSource);
    }
    if (WarmupSource.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(WarmupSource);
    }
    if (Rewardid != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Rewardid);
    }
    items_.WriteTo(output, _repeated_items_codec);
    sceneId_.WriteTo(output, _repeated_sceneId_codec);
    if (Stage != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(Stage);
    }
    if (HasReward != false) {
      output.WriteRawTag(72);
      output.WriteBool(HasReward);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Name);
    }
    if (CollectDes.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(CollectDes);
    }
    if (SceneDes.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(SceneDes);
    }
    if (RewardSource.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(RewardSource);
    }
    if (Tips.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(Tips);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Description.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
    }
    if (BackgroundSource.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundSource);
    }
    if (WarmupSource.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WarmupSource);
    }
    if (Rewardid != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rewardid);
    }
    size += items_.CalculateSize(_repeated_items_codec);
    size += sceneId_.CalculateSize(_repeated_sceneId_codec);
    if (Stage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stage);
    }
    if (HasReward != false) {
      size += 1 + 1;
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (CollectDes.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CollectDes);
    }
    if (SceneDes.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneDes);
    }
    if (RewardSource.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RewardSource);
    }
    if (Tips.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Tips);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCActivityDropResponse other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Description.Length != 0) {
      Description = other.Description;
    }
    if (other.BackgroundSource.Length != 0) {
      BackgroundSource = other.BackgroundSource;
    }
    if (other.WarmupSource.Length != 0) {
      WarmupSource = other.WarmupSource;
    }
    if (other.Rewardid != 0L) {
      Rewardid = other.Rewardid;
    }
    items_.Add(other.items_);
    sceneId_.Add(other.sceneId_);
    if (other.Stage != 0) {
      Stage = other.Stage;
    }
    if (other.HasReward != false) {
      HasReward = other.HasReward;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.CollectDes.Length != 0) {
      CollectDes = other.CollectDes;
    }
    if (other.SceneDes.Length != 0) {
      SceneDes = other.SceneDes;
    }
    if (other.RewardSource.Length != 0) {
      RewardSource = other.RewardSource;
    }
    if (other.Tips.Length != 0) {
      Tips = other.Tips;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Description = input.ReadString();
          break;
        }
        case 26: {
          BackgroundSource = input.ReadString();
          break;
        }
        case 34: {
          WarmupSource = input.ReadString();
          break;
        }
        case 40: {
          Rewardid = input.ReadInt64();
          break;
        }
        case 50: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
        case 58:
        case 56: {
          sceneId_.AddEntriesFrom(input, _repeated_sceneId_codec);
          break;
        }
        case 64: {
          Stage = input.ReadInt32();
          break;
        }
        case 72: {
          HasReward = input.ReadBool();
          break;
        }
        case 82: {
          Name = input.ReadString();
          break;
        }
        case 90: {
          CollectDes = input.ReadString();
          break;
        }
        case 98: {
          SceneDes = input.ReadString();
          break;
        }
        case 106: {
          RewardSource = input.ReadString();
          break;
        }
        case 114: {
          Tips = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSActivityRewardRequest : pb::IMessage<CSActivityRewardRequest> {
  private static readonly pb::MessageParser<CSActivityRewardRequest> _parser = new pb::MessageParser<CSActivityRewardRequest>(() => new CSActivityRewardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSActivityRewardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[160]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityRewardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityRewardRequest(CSActivityRewardRequest other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSActivityRewardRequest Clone() {
    return new CSActivityRewardRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSActivityRewardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSActivityRewardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSActivityRewardRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCActivityRewardResponse : pb::IMessage<SCActivityRewardResponse> {
  private static readonly pb::MessageParser<SCActivityRewardResponse> _parser = new pb::MessageParser<SCActivityRewardResponse>(() => new SCActivityRewardResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCActivityRewardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[161]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityRewardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityRewardResponse(SCActivityRewardResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    items_ = other.items_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityRewardResponse Clone() {
    return new SCActivityRewardResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "items" field.</summary>
  public const int ItemsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::GiftItem> _repeated_items_codec
      = pb::FieldCodec.ForMessage(18, global::GiftItem.Parser);
  private readonly pbc::RepeatedField<global::GiftItem> items_ = new pbc::RepeatedField<global::GiftItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GiftItem> Items {
    get { return items_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCActivityRewardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCActivityRewardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if(!items_.Equals(other.items_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    hash ^= items_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    items_.WriteTo(output, _repeated_items_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    size += items_.CalculateSize(_repeated_items_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCActivityRewardResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    items_.Add(other.items_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 18: {
          items_.AddEntriesFrom(input, _repeated_items_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*进入漫画场景
/// </summary>
public sealed partial class CSCartoonEnterRequest : pb::IMessage<CSCartoonEnterRequest> {
  private static readonly pb::MessageParser<CSCartoonEnterRequest> _parser = new pb::MessageParser<CSCartoonEnterRequest>(() => new CSCartoonEnterRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSCartoonEnterRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[162]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonEnterRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonEnterRequest(CSCartoonEnterRequest other) : this() {
    sceneId_ = other.sceneId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonEnterRequest Clone() {
    return new CSCartoonEnterRequest(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSCartoonEnterRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSCartoonEnterRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SceneId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSCartoonEnterRequest other) {
    if (other == null) {
      return;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCCartoonEnterResponse : pb::IMessage<SCCartoonEnterResponse> {
  private static readonly pb::MessageParser<SCCartoonEnterResponse> _parser = new pb::MessageParser<SCCartoonEnterResponse>(() => new SCCartoonEnterResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCCartoonEnterResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[163]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCartoonEnterResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCartoonEnterResponse(SCCartoonEnterResponse other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCartoonEnterResponse Clone() {
    return new SCCartoonEnterResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///服务器验证结果，1表示成功，其他的是错误码（4表示场景不存在）	
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCCartoonEnterResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCCartoonEnterResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCCartoonEnterResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSCartoonRewardRequest : pb::IMessage<CSCartoonRewardRequest> {
  private static readonly pb::MessageParser<CSCartoonRewardRequest> _parser = new pb::MessageParser<CSCartoonRewardRequest>(() => new CSCartoonRewardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSCartoonRewardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[164]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonRewardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonRewardRequest(CSCartoonRewardRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonRewardRequest Clone() {
    return new CSCartoonRewardRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSCartoonRewardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSCartoonRewardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSCartoonRewardRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCCartoonRewardReqsponse : pb::IMessage<SCCartoonRewardReqsponse> {
  private static readonly pb::MessageParser<SCCartoonRewardReqsponse> _parser = new pb::MessageParser<SCCartoonRewardReqsponse>(() => new SCCartoonRewardReqsponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCCartoonRewardReqsponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[165]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCartoonRewardReqsponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCartoonRewardReqsponse(SCCartoonRewardReqsponse other) : this() {
    cash_ = other.cash_;
    coin_ = other.coin_;
    exp_ = other.exp_;
    vit_ = other.vit_;
    sceneRewardComprise_ = other.sceneRewardComprise_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCartoonRewardReqsponse Clone() {
    return new SCCartoonRewardReqsponse(this);
  }

  /// <summary>Field number for the "cash" field.</summary>
  public const int CashFieldNumber = 1;
  private int cash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Cash {
    get { return cash_; }
    set {
      cash_ = value;
    }
  }

  /// <summary>Field number for the "coin" field.</summary>
  public const int CoinFieldNumber = 2;
  private int coin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Coin {
    get { return coin_; }
    set {
      coin_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 3;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  /// <summary>Field number for the "vit" field.</summary>
  public const int VitFieldNumber = 4;
  private int vit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Vit {
    get { return vit_; }
    set {
      vit_ = value;
    }
  }

  /// <summary>Field number for the "sceneRewardComprise" field.</summary>
  public const int SceneRewardCompriseFieldNumber = 5;
  private static readonly pb::FieldCodec<global::SceneRewardComprise> _repeated_sceneRewardComprise_codec
      = pb::FieldCodec.ForMessage(42, global::SceneRewardComprise.Parser);
  private readonly pbc::RepeatedField<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::RepeatedField<global::SceneRewardComprise>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneRewardComprise> SceneRewardComprise {
    get { return sceneRewardComprise_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCCartoonRewardReqsponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCCartoonRewardReqsponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Cash != other.Cash) return false;
    if (Coin != other.Coin) return false;
    if (Exp != other.Exp) return false;
    if (Vit != other.Vit) return false;
    if(!sceneRewardComprise_.Equals(other.sceneRewardComprise_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Cash != 0) hash ^= Cash.GetHashCode();
    if (Coin != 0) hash ^= Coin.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (Vit != 0) hash ^= Vit.GetHashCode();
    hash ^= sceneRewardComprise_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Cash != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Cash);
    }
    if (Coin != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Coin);
    }
    if (Exp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Exp);
    }
    if (Vit != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Vit);
    }
    sceneRewardComprise_.WriteTo(output, _repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Cash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cash);
    }
    if (Coin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Coin);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (Vit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Vit);
    }
    size += sceneRewardComprise_.CalculateSize(_repeated_sceneRewardComprise_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCCartoonRewardReqsponse other) {
    if (other == null) {
      return;
    }
    if (other.Cash != 0) {
      Cash = other.Cash;
    }
    if (other.Coin != 0) {
      Coin = other.Coin;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    if (other.Vit != 0) {
      Vit = other.Vit;
    }
    sceneRewardComprise_.Add(other.sceneRewardComprise_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Cash = input.ReadInt32();
          break;
        }
        case 16: {
          Coin = input.ReadInt32();
          break;
        }
        case 24: {
          Exp = input.ReadInt32();
          break;
        }
        case 32: {
          Vit = input.ReadInt32();
          break;
        }
        case 42: {
          sceneRewardComprise_.AddEntriesFrom(input, _repeated_sceneRewardComprise_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*退出漫画场景
/// </summary>
public sealed partial class CSCartoonQuitRequest : pb::IMessage<CSCartoonQuitRequest> {
  private static readonly pb::MessageParser<CSCartoonQuitRequest> _parser = new pb::MessageParser<CSCartoonQuitRequest>(() => new CSCartoonQuitRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSCartoonQuitRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[166]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonQuitRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonQuitRequest(CSCartoonQuitRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCartoonQuitRequest Clone() {
    return new CSCartoonQuitRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSCartoonQuitRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSCartoonQuitRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSCartoonQuitRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
///*客户端请求邮件列表
/// </summary>
public sealed partial class CSEmailListRequest : pb::IMessage<CSEmailListRequest> {
  private static readonly pb::MessageParser<CSEmailListRequest> _parser = new pb::MessageParser<CSEmailListRequest>(() => new CSEmailListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEmailListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[167]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailListRequest(CSEmailListRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailListRequest Clone() {
    return new CSEmailListRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEmailListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEmailListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEmailListRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCEmailListResponse : pb::IMessage<SCEmailListResponse> {
  private static readonly pb::MessageParser<SCEmailListResponse> _parser = new pb::MessageParser<SCEmailListResponse>(() => new SCEmailListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEmailListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[168]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailListResponse(SCEmailListResponse other) : this() {
    emails_ = other.emails_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailListResponse Clone() {
    return new SCEmailListResponse(this);
  }

  /// <summary>Field number for the "emails" field.</summary>
  public const int EmailsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::EmailInfo> _repeated_emails_codec
      = pb::FieldCodec.ForMessage(10, global::EmailInfo.Parser);
  private readonly pbc::RepeatedField<global::EmailInfo> emails_ = new pbc::RepeatedField<global::EmailInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EmailInfo> Emails {
    get { return emails_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEmailListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEmailListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!emails_.Equals(other.emails_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= emails_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    emails_.WriteTo(output, _repeated_emails_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += emails_.CalculateSize(_repeated_emails_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEmailListResponse other) {
    if (other == null) {
      return;
    }
    emails_.Add(other.emails_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          emails_.AddEntriesFrom(input, _repeated_emails_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class EmailInfo : pb::IMessage<EmailInfo> {
  private static readonly pb::MessageParser<EmailInfo> _parser = new pb::MessageParser<EmailInfo>(() => new EmailInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EmailInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[169]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EmailInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EmailInfo(EmailInfo other) : this() {
    id_ = other.id_;
    type_ = other.type_;
    status_ = other.status_;
    title_ = other.title_;
    content_ = other.content_;
    receiveTime_ = other.receiveTime_;
    deadline_ = other.deadline_;
    rewards_ = other.rewards_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EmailInfo Clone() {
    return new EmailInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private int type_;
  /// <summary>
  ///1表示好友邮件，2表示系统邮件
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///0表示未读取，1表示已读，2表示已领奖
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 4;
  private string title_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Title {
    get { return title_; }
    set {
      title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 5;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "receiveTime" field.</summary>
  public const int ReceiveTimeFieldNumber = 6;
  private long receiveTime_;
  /// <summary>
  ///收到邮件的时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ReceiveTime {
    get { return receiveTime_; }
    set {
      receiveTime_ = value;
    }
  }

  /// <summary>Field number for the "deadline" field.</summary>
  public const int DeadlineFieldNumber = 7;
  private long deadline_;
  /// <summary>
  ///过期时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Deadline {
    get { return deadline_; }
    set {
      deadline_ = value;
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 8;
  private static readonly pb::FieldCodec<global::EmailReward> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(66, global::EmailReward.Parser);
  private readonly pbc::RepeatedField<global::EmailReward> rewards_ = new pbc::RepeatedField<global::EmailReward>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EmailReward> Rewards {
    get { return rewards_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EmailInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EmailInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Type != other.Type) return false;
    if (Status != other.Status) return false;
    if (Title != other.Title) return false;
    if (Content != other.Content) return false;
    if (ReceiveTime != other.ReceiveTime) return false;
    if (Deadline != other.Deadline) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Title.Length != 0) hash ^= Title.GetHashCode();
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (ReceiveTime != 0L) hash ^= ReceiveTime.GetHashCode();
    if (Deadline != 0L) hash ^= Deadline.GetHashCode();
    hash ^= rewards_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Type != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Type);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (Title.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Title);
    }
    if (Content.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Content);
    }
    if (ReceiveTime != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(ReceiveTime);
    }
    if (Deadline != 0L) {
      output.WriteRawTag(56);
      output.WriteInt64(Deadline);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Title.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
    }
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    if (ReceiveTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiveTime);
    }
    if (Deadline != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Deadline);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EmailInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Title.Length != 0) {
      Title = other.Title;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.ReceiveTime != 0L) {
      ReceiveTime = other.ReceiveTime;
    }
    if (other.Deadline != 0L) {
      Deadline = other.Deadline;
    }
    rewards_.Add(other.rewards_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Type = input.ReadInt32();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 34: {
          Title = input.ReadString();
          break;
        }
        case 42: {
          Content = input.ReadString();
          break;
        }
        case 48: {
          ReceiveTime = input.ReadInt64();
          break;
        }
        case 56: {
          Deadline = input.ReadInt64();
          break;
        }
        case 66: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class EmailReward : pb::IMessage<EmailReward> {
  private static readonly pb::MessageParser<EmailReward> _parser = new pb::MessageParser<EmailReward>(() => new EmailReward());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EmailReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[170]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EmailReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EmailReward(EmailReward other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EmailReward Clone() {
    return new EmailReward(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EmailReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EmailReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EmailReward other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*邮件奖励
/// </summary>
public sealed partial class CSEmailRewardRequest : pb::IMessage<CSEmailRewardRequest> {
  private static readonly pb::MessageParser<CSEmailRewardRequest> _parser = new pb::MessageParser<CSEmailRewardRequest>(() => new CSEmailRewardRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEmailRewardRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[171]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailRewardRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailRewardRequest(CSEmailRewardRequest other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailRewardRequest Clone() {
    return new CSEmailRewardRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEmailRewardRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEmailRewardRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEmailRewardRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCEmailRewardResponse : pb::IMessage<SCEmailRewardResponse> {
  private static readonly pb::MessageParser<SCEmailRewardResponse> _parser = new pb::MessageParser<SCEmailRewardResponse>(() => new SCEmailRewardResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEmailRewardResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[172]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailRewardResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailRewardResponse(SCEmailRewardResponse other) : this() {
    result_ = other.result_;
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailRewardResponse Clone() {
    return new SCEmailRewardResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1表示成功，2表示已领取过了，3表示已过期，4表示邮件不存在，5表示该邮件没有奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEmailRewardResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEmailRewardResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (Id != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEmailRewardResponse other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 16: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*在邮件为未读取的状态下，玩家点开了邮件 客户端通知服务器
/// </summary>
public sealed partial class CSEmailReadRequest : pb::IMessage<CSEmailReadRequest> {
  private static readonly pb::MessageParser<CSEmailReadRequest> _parser = new pb::MessageParser<CSEmailReadRequest>(() => new CSEmailReadRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSEmailReadRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[173]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailReadRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailReadRequest(CSEmailReadRequest other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSEmailReadRequest Clone() {
    return new CSEmailReadRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSEmailReadRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSEmailReadRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSEmailReadRequest other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*服务器通知客户端邮件有更新，客户端收到这个消息后再向服务器请求一遍
/// </summary>
public sealed partial class SCEmailChangeNotice : pb::IMessage<SCEmailChangeNotice> {
  private static readonly pb::MessageParser<SCEmailChangeNotice> _parser = new pb::MessageParser<SCEmailChangeNotice>(() => new SCEmailChangeNotice());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCEmailChangeNotice> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[174]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailChangeNotice() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailChangeNotice(SCEmailChangeNotice other) : this() {
    switchTime_ = other.switchTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCEmailChangeNotice Clone() {
    return new SCEmailChangeNotice(this);
  }

  /// <summary>Field number for the "switchTime" field.</summary>
  public const int SwitchTimeFieldNumber = 1;
  private long switchTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SwitchTime {
    get { return switchTime_; }
    set {
      switchTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCEmailChangeNotice);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCEmailChangeNotice other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwitchTime != other.SwitchTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SwitchTime != 0L) hash ^= SwitchTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SwitchTime != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SwitchTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SwitchTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SwitchTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCEmailChangeNotice other) {
    if (other == null) {
      return;
    }
    if (other.SwitchTime != 0L) {
      SwitchTime = other.SwitchTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SwitchTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///头衔
/// </summary>
public sealed partial class TitleMsg : pb::IMessage<TitleMsg> {
  private static readonly pb::MessageParser<TitleMsg> _parser = new pb::MessageParser<TitleMsg>(() => new TitleMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TitleMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[175]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TitleMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TitleMsg(TitleMsg other) : this() {
    titleId_ = other.titleId_;
    deadline_ = other.deadline_;
    getTime_ = other.getTime_;
    active_ = other.active_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TitleMsg Clone() {
    return new TitleMsg(this);
  }

  /// <summary>Field number for the "titleId" field.</summary>
  public const int TitleIdFieldNumber = 1;
  private long titleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TitleId {
    get { return titleId_; }
    set {
      titleId_ = value;
    }
  }

  /// <summary>Field number for the "deadline" field.</summary>
  public const int DeadlineFieldNumber = 2;
  private long deadline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Deadline {
    get { return deadline_; }
    set {
      deadline_ = value;
    }
  }

  /// <summary>Field number for the "getTime" field.</summary>
  public const int GetTimeFieldNumber = 3;
  private long getTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GetTime {
    get { return getTime_; }
    set {
      getTime_ = value;
    }
  }

  /// <summary>Field number for the "active" field.</summary>
  public const int ActiveFieldNumber = 4;
  private bool active_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Active {
    get { return active_; }
    set {
      active_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TitleMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TitleMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TitleId != other.TitleId) return false;
    if (Deadline != other.Deadline) return false;
    if (GetTime != other.GetTime) return false;
    if (Active != other.Active) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TitleId != 0L) hash ^= TitleId.GetHashCode();
    if (Deadline != 0L) hash ^= Deadline.GetHashCode();
    if (GetTime != 0L) hash ^= GetTime.GetHashCode();
    if (Active != false) hash ^= Active.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TitleId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TitleId);
    }
    if (Deadline != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(Deadline);
    }
    if (GetTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(GetTime);
    }
    if (Active != false) {
      output.WriteRawTag(32);
      output.WriteBool(Active);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TitleId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TitleId);
    }
    if (Deadline != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Deadline);
    }
    if (GetTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GetTime);
    }
    if (Active != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TitleMsg other) {
    if (other == null) {
      return;
    }
    if (other.TitleId != 0L) {
      TitleId = other.TitleId;
    }
    if (other.Deadline != 0L) {
      Deadline = other.Deadline;
    }
    if (other.GetTime != 0L) {
      GetTime = other.GetTime;
    }
    if (other.Active != false) {
      Active = other.Active;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TitleId = input.ReadInt64();
          break;
        }
        case 16: {
          Deadline = input.ReadInt64();
          break;
        }
        case 24: {
          GetTime = input.ReadInt64();
          break;
        }
        case 32: {
          Active = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///头衔列表
/// </summary>
public sealed partial class CSTitleRequest : pb::IMessage<CSTitleRequest> {
  private static readonly pb::MessageParser<CSTitleRequest> _parser = new pb::MessageParser<CSTitleRequest>(() => new CSTitleRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTitleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[176]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleRequest(CSTitleRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleRequest Clone() {
    return new CSTitleRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTitleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTitleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTitleRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCTitleResponse : pb::IMessage<SCTitleResponse> {
  private static readonly pb::MessageParser<SCTitleResponse> _parser = new pb::MessageParser<SCTitleResponse>(() => new SCTitleResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTitleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[177]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleResponse(SCTitleResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    titles_ = other.titles_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleResponse Clone() {
    return new SCTitleResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "titles" field.</summary>
  public const int TitlesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::TitleMsg> _repeated_titles_codec
      = pb::FieldCodec.ForMessage(18, global::TitleMsg.Parser);
  private readonly pbc::RepeatedField<global::TitleMsg> titles_ = new pbc::RepeatedField<global::TitleMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TitleMsg> Titles {
    get { return titles_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTitleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTitleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!titles_.Equals(other.titles_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= titles_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    titles_.WriteTo(output, _repeated_titles_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += titles_.CalculateSize(_repeated_titles_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTitleResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    titles_.Add(other.titles_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          titles_.AddEntriesFrom(input, _repeated_titles_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///头衔使用，或者更改
/// </summary>
public sealed partial class CSTitleActiveRequest : pb::IMessage<CSTitleActiveRequest> {
  private static readonly pb::MessageParser<CSTitleActiveRequest> _parser = new pb::MessageParser<CSTitleActiveRequest>(() => new CSTitleActiveRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTitleActiveRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[178]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleActiveRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleActiveRequest(CSTitleActiveRequest other) : this() {
    titleId_ = other.titleId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleActiveRequest Clone() {
    return new CSTitleActiveRequest(this);
  }

  /// <summary>Field number for the "titleId" field.</summary>
  public const int TitleIdFieldNumber = 1;
  private long titleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TitleId {
    get { return titleId_; }
    set {
      titleId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTitleActiveRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTitleActiveRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TitleId != other.TitleId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TitleId != 0L) hash ^= TitleId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TitleId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TitleId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TitleId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TitleId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTitleActiveRequest other) {
    if (other == null) {
      return;
    }
    if (other.TitleId != 0L) {
      TitleId = other.TitleId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TitleId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCTitleActiveResponse : pb::IMessage<SCTitleActiveResponse> {
  private static readonly pb::MessageParser<SCTitleActiveResponse> _parser = new pb::MessageParser<SCTitleActiveResponse>(() => new SCTitleActiveResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTitleActiveResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[179]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleActiveResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleActiveResponse(SCTitleActiveResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    Title = other.title_ != null ? other.Title.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleActiveResponse Clone() {
    return new SCTitleActiveResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private global::TitleMsg title_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TitleMsg Title {
    get { return title_; }
    set {
      title_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTitleActiveResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTitleActiveResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (!object.Equals(Title, other.Title)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (title_ != null) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (title_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (title_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTitleActiveResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.title_ != null) {
      if (title_ == null) {
        title_ = new global::TitleMsg();
      }
      Title.MergeFrom(other.Title);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          if (title_ == null) {
            title_ = new global::TitleMsg();
          }
          input.ReadMessage(title_);
          break;
        }
      }
    }
  }

}

/// <summary>
///当前头衔
/// </summary>
public sealed partial class CSTitleGetRequest : pb::IMessage<CSTitleGetRequest> {
  private static readonly pb::MessageParser<CSTitleGetRequest> _parser = new pb::MessageParser<CSTitleGetRequest>(() => new CSTitleGetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSTitleGetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[180]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleGetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleGetRequest(CSTitleGetRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSTitleGetRequest Clone() {
    return new CSTitleGetRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSTitleGetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSTitleGetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSTitleGetRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCTitleGetResponse : pb::IMessage<SCTitleGetResponse> {
  private static readonly pb::MessageParser<SCTitleGetResponse> _parser = new pb::MessageParser<SCTitleGetResponse>(() => new SCTitleGetResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCTitleGetResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[181]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleGetResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleGetResponse(SCTitleGetResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    Title = other.title_ != null ? other.Title.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCTitleGetResponse Clone() {
    return new SCTitleGetResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 2;
  private global::TitleMsg title_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TitleMsg Title {
    get { return title_; }
    set {
      title_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCTitleGetResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCTitleGetResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (!object.Equals(Title, other.Title)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (title_ != null) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (title_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (title_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCTitleGetResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.title_ != null) {
      if (title_ == null) {
        title_ = new global::TitleMsg();
      }
      Title.MergeFrom(other.Title);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          if (title_ == null) {
            title_ = new global::TitleMsg();
          }
          input.ReadMessage(title_);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerFriendMsg : pb::IMessage<PlayerFriendMsg> {
  private static readonly pb::MessageParser<PlayerFriendMsg> _parser = new pb::MessageParser<PlayerFriendMsg>(() => new PlayerFriendMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerFriendMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[182]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerFriendMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerFriendMsg(PlayerFriendMsg other) : this() {
    playerId_ = other.playerId_;
    name_ = other.name_;
    level_ = other.level_;
    gender_ = other.gender_;
    icon_ = other.icon_;
    titleId_ = other.titleId_;
    gift_ = other.gift_;
    statusTime_ = other.statusTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerFriendMsg Clone() {
    return new PlayerFriendMsg(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "gender" field.</summary>
  public const int GenderFieldNumber = 4;
  private int gender_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gender {
    get { return gender_; }
    set {
      gender_ = value;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 5;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "titleId" field.</summary>
  public const int TitleIdFieldNumber = 6;
  private long titleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TitleId {
    get { return titleId_; }
    set {
      titleId_ = value;
    }
  }

  /// <summary>Field number for the "gift" field.</summary>
  public const int GiftFieldNumber = 7;
  private bool gift_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Gift {
    get { return gift_; }
    set {
      gift_ = value;
    }
  }

  /// <summary>Field number for the "statusTime" field.</summary>
  public const int StatusTimeFieldNumber = 8;
  private long statusTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StatusTime {
    get { return statusTime_; }
    set {
      statusTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerFriendMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerFriendMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Name != other.Name) return false;
    if (Level != other.Level) return false;
    if (Gender != other.Gender) return false;
    if (Icon != other.Icon) return false;
    if (TitleId != other.TitleId) return false;
    if (Gift != other.Gift) return false;
    if (StatusTime != other.StatusTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Gender != 0) hash ^= Gender.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (TitleId != 0L) hash ^= TitleId.GetHashCode();
    if (Gift != false) hash ^= Gift.GetHashCode();
    if (StatusTime != 0L) hash ^= StatusTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Level != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (Gender != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Gender);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Icon);
    }
    if (TitleId != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(TitleId);
    }
    if (Gift != false) {
      output.WriteRawTag(56);
      output.WriteBool(Gift);
    }
    if (StatusTime != 0L) {
      output.WriteRawTag(64);
      output.WriteInt64(StatusTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Gender != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gender);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (TitleId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TitleId);
    }
    if (Gift != false) {
      size += 1 + 1;
    }
    if (StatusTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StatusTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerFriendMsg other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Gender != 0) {
      Gender = other.Gender;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.TitleId != 0L) {
      TitleId = other.TitleId;
    }
    if (other.Gift != false) {
      Gift = other.Gift;
    }
    if (other.StatusTime != 0L) {
      StatusTime = other.StatusTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Gender = input.ReadInt32();
          break;
        }
        case 42: {
          Icon = input.ReadString();
          break;
        }
        case 48: {
          TitleId = input.ReadInt64();
          break;
        }
        case 56: {
          Gift = input.ReadBool();
          break;
        }
        case 64: {
          StatusTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///好友列表
/// </summary>
public sealed partial class CSFriendRequest : pb::IMessage<CSFriendRequest> {
  private static readonly pb::MessageParser<CSFriendRequest> _parser = new pb::MessageParser<CSFriendRequest>(() => new CSFriendRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[183]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRequest(CSFriendRequest other) : this() {
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRequest Clone() {
    return new CSFriendRequest(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::FriendReqType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FriendReqType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendRequest other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::FriendReqType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendResponse : pb::IMessage<SCFriendResponse> {
  private static readonly pb::MessageParser<SCFriendResponse> _parser = new pb::MessageParser<SCFriendResponse>(() => new SCFriendResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[184]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendResponse(SCFriendResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    friends_ = other.friends_.Clone();
    limit_ = other.limit_;
    total_ = other.total_;
    giftCountLeft_ = other.giftCountLeft_;
    type_ = other.type_;
    lastAgree_ = other.lastAgree_;
    addSwitch_ = other.addSwitch_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendResponse Clone() {
    return new SCFriendResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "friends" field.</summary>
  public const int FriendsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerFriendMsg> _repeated_friends_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerFriendMsg.Parser);
  private readonly pbc::RepeatedField<global::PlayerFriendMsg> friends_ = new pbc::RepeatedField<global::PlayerFriendMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerFriendMsg> Friends {
    get { return friends_; }
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 3;
  private int limit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Limit {
    get { return limit_; }
    set {
      limit_ = value;
    }
  }

  /// <summary>Field number for the "total" field.</summary>
  public const int TotalFieldNumber = 4;
  private int total_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Total {
    get { return total_; }
    set {
      total_ = value;
    }
  }

  /// <summary>Field number for the "giftCountLeft" field.</summary>
  public const int GiftCountLeftFieldNumber = 5;
  private int giftCountLeft_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GiftCountLeft {
    get { return giftCountLeft_; }
    set {
      giftCountLeft_ = value;
    }
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 6;
  private global::FriendReqType type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FriendReqType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "lastAgree" field.</summary>
  public const int LastAgreeFieldNumber = 7;
  private bool lastAgree_;
  /// <summary>
  ///好友同意请求
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LastAgree {
    get { return lastAgree_; }
    set {
      lastAgree_ = value;
    }
  }

  /// <summary>Field number for the "addSwitch" field.</summary>
  public const int AddSwitchFieldNumber = 8;
  private bool addSwitch_;
  /// <summary>
  ///true关闭申请
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AddSwitch {
    get { return addSwitch_; }
    set {
      addSwitch_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!friends_.Equals(other.friends_)) return false;
    if (Limit != other.Limit) return false;
    if (Total != other.Total) return false;
    if (GiftCountLeft != other.GiftCountLeft) return false;
    if (Type != other.Type) return false;
    if (LastAgree != other.LastAgree) return false;
    if (AddSwitch != other.AddSwitch) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= friends_.GetHashCode();
    if (Limit != 0) hash ^= Limit.GetHashCode();
    if (Total != 0) hash ^= Total.GetHashCode();
    if (GiftCountLeft != 0) hash ^= GiftCountLeft.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (LastAgree != false) hash ^= LastAgree.GetHashCode();
    if (AddSwitch != false) hash ^= AddSwitch.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    friends_.WriteTo(output, _repeated_friends_codec);
    if (Limit != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Limit);
    }
    if (Total != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Total);
    }
    if (GiftCountLeft != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(GiftCountLeft);
    }
    if (Type != 0) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Type);
    }
    if (LastAgree != false) {
      output.WriteRawTag(56);
      output.WriteBool(LastAgree);
    }
    if (AddSwitch != false) {
      output.WriteRawTag(64);
      output.WriteBool(AddSwitch);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += friends_.CalculateSize(_repeated_friends_codec);
    if (Limit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
    }
    if (Total != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Total);
    }
    if (GiftCountLeft != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GiftCountLeft);
    }
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (LastAgree != false) {
      size += 1 + 1;
    }
    if (AddSwitch != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    friends_.Add(other.friends_);
    if (other.Limit != 0) {
      Limit = other.Limit;
    }
    if (other.Total != 0) {
      Total = other.Total;
    }
    if (other.GiftCountLeft != 0) {
      GiftCountLeft = other.GiftCountLeft;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.LastAgree != false) {
      LastAgree = other.LastAgree;
    }
    if (other.AddSwitch != false) {
      AddSwitch = other.AddSwitch;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          friends_.AddEntriesFrom(input, _repeated_friends_codec);
          break;
        }
        case 24: {
          Limit = input.ReadInt32();
          break;
        }
        case 32: {
          Total = input.ReadInt32();
          break;
        }
        case 40: {
          GiftCountLeft = input.ReadInt32();
          break;
        }
        case 48: {
          type_ = (global::FriendReqType) input.ReadEnum();
          break;
        }
        case 56: {
          LastAgree = input.ReadBool();
          break;
        }
        case 64: {
          AddSwitch = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///*添加
/// </summary>
public sealed partial class CSFriendAddRequest : pb::IMessage<CSFriendAddRequest> {
  private static readonly pb::MessageParser<CSFriendAddRequest> _parser = new pb::MessageParser<CSFriendAddRequest>(() => new CSFriendAddRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendAddRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[185]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendAddRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendAddRequest(CSFriendAddRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendAddRequest Clone() {
    return new CSFriendAddRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendAddRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendAddRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendAddRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendAddResponse : pb::IMessage<SCFriendAddResponse> {
  private static readonly pb::MessageParser<SCFriendAddResponse> _parser = new pb::MessageParser<SCFriendAddResponse>(() => new SCFriendAddResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendAddResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[186]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendAddResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendAddResponse(SCFriendAddResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendAddResponse Clone() {
    return new SCFriendAddResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendAddResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendAddResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendAddResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*删除
/// </summary>
public sealed partial class CSFriendDelRequest : pb::IMessage<CSFriendDelRequest> {
  private static readonly pb::MessageParser<CSFriendDelRequest> _parser = new pb::MessageParser<CSFriendDelRequest>(() => new CSFriendDelRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendDelRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[187]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendDelRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendDelRequest(CSFriendDelRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendDelRequest Clone() {
    return new CSFriendDelRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendDelRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendDelRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendDelRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendDelResponse : pb::IMessage<SCFriendDelResponse> {
  private static readonly pb::MessageParser<SCFriendDelResponse> _parser = new pb::MessageParser<SCFriendDelResponse>(() => new SCFriendDelResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendDelResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[188]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendDelResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendDelResponse(SCFriendDelResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendDelResponse Clone() {
    return new SCFriendDelResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendDelResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendDelResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendDelResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*同意
/// </summary>
public sealed partial class CSFriendAgreeRequest : pb::IMessage<CSFriendAgreeRequest> {
  private static readonly pb::MessageParser<CSFriendAgreeRequest> _parser = new pb::MessageParser<CSFriendAgreeRequest>(() => new CSFriendAgreeRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendAgreeRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[189]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendAgreeRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendAgreeRequest(CSFriendAgreeRequest other) : this() {
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendAgreeRequest Clone() {
    return new CSFriendAgreeRequest(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendAgreeRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendAgreeRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendAgreeRequest other) {
    if (other == null) {
      return;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendAgreeResponse : pb::IMessage<SCFriendAgreeResponse> {
  private static readonly pb::MessageParser<SCFriendAgreeResponse> _parser = new pb::MessageParser<SCFriendAgreeResponse>(() => new SCFriendAgreeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendAgreeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[190]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendAgreeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendAgreeResponse(SCFriendAgreeResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendAgreeResponse Clone() {
    return new SCFriendAgreeResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendAgreeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendAgreeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendAgreeResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*删除请求
/// </summary>
public sealed partial class CSFriendDelApplyRequest : pb::IMessage<CSFriendDelApplyRequest> {
  private static readonly pb::MessageParser<CSFriendDelApplyRequest> _parser = new pb::MessageParser<CSFriendDelApplyRequest>(() => new CSFriendDelApplyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendDelApplyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[191]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendDelApplyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendDelApplyRequest(CSFriendDelApplyRequest other) : this() {
    friendId_ = other.friendId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendDelApplyRequest Clone() {
    return new CSFriendDelApplyRequest(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private long friendId_;
  /// <summary>
  /// 0表示删除全部
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendDelApplyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendDelApplyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0L) hash ^= FriendId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FriendId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FriendId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendDelApplyRequest other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0L) {
      FriendId = other.FriendId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FriendId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendDelApplyResponse : pb::IMessage<SCFriendDelApplyResponse> {
  private static readonly pb::MessageParser<SCFriendDelApplyResponse> _parser = new pb::MessageParser<SCFriendDelApplyResponse>(() => new SCFriendDelApplyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendDelApplyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[192]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendDelApplyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendDelApplyResponse(SCFriendDelApplyResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendDelApplyResponse Clone() {
    return new SCFriendDelApplyResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendDelApplyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendDelApplyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendDelApplyResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*送礼列表*
/// </summary>
public sealed partial class CSFriendGiftRequest : pb::IMessage<CSFriendGiftRequest> {
  private static readonly pb::MessageParser<CSFriendGiftRequest> _parser = new pb::MessageParser<CSFriendGiftRequest>(() => new CSFriendGiftRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendGiftRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[193]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftRequest(CSFriendGiftRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftRequest Clone() {
    return new CSFriendGiftRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendGiftRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendGiftRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendGiftRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class FriendGift : pb::IMessage<FriendGift> {
  private static readonly pb::MessageParser<FriendGift> _parser = new pb::MessageParser<FriendGift>(() => new FriendGift());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FriendGift> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[194]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendGift() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendGift(FriendGift other) : this() {
    PlayerFriends = other.playerFriends_ != null ? other.PlayerFriends.Clone() : null;
    PlayPropMsg = other.playPropMsg_ != null ? other.PlayPropMsg.Clone() : null;
    giftId_ = other.giftId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendGift Clone() {
    return new FriendGift(this);
  }

  /// <summary>Field number for the "playerFriends" field.</summary>
  public const int PlayerFriendsFieldNumber = 1;
  private global::PlayerFriendMsg playerFriends_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerFriendMsg PlayerFriends {
    get { return playerFriends_; }
    set {
      playerFriends_ = value;
    }
  }

  /// <summary>Field number for the "playPropMsg" field.</summary>
  public const int PlayPropMsgFieldNumber = 2;
  private global::PlayerPropMsg playPropMsg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerPropMsg PlayPropMsg {
    get { return playPropMsg_; }
    set {
      playPropMsg_ = value;
    }
  }

  /// <summary>Field number for the "giftId" field.</summary>
  public const int GiftIdFieldNumber = 3;
  private long giftId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GiftId {
    get { return giftId_; }
    set {
      giftId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FriendGift);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FriendGift other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PlayerFriends, other.PlayerFriends)) return false;
    if (!object.Equals(PlayPropMsg, other.PlayPropMsg)) return false;
    if (GiftId != other.GiftId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (playerFriends_ != null) hash ^= PlayerFriends.GetHashCode();
    if (playPropMsg_ != null) hash ^= PlayPropMsg.GetHashCode();
    if (GiftId != 0L) hash ^= GiftId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (playerFriends_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PlayerFriends);
    }
    if (playPropMsg_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayPropMsg);
    }
    if (GiftId != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(GiftId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (playerFriends_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerFriends);
    }
    if (playPropMsg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayPropMsg);
    }
    if (GiftId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiftId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FriendGift other) {
    if (other == null) {
      return;
    }
    if (other.playerFriends_ != null) {
      if (playerFriends_ == null) {
        playerFriends_ = new global::PlayerFriendMsg();
      }
      PlayerFriends.MergeFrom(other.PlayerFriends);
    }
    if (other.playPropMsg_ != null) {
      if (playPropMsg_ == null) {
        playPropMsg_ = new global::PlayerPropMsg();
      }
      PlayPropMsg.MergeFrom(other.PlayPropMsg);
    }
    if (other.GiftId != 0L) {
      GiftId = other.GiftId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (playerFriends_ == null) {
            playerFriends_ = new global::PlayerFriendMsg();
          }
          input.ReadMessage(playerFriends_);
          break;
        }
        case 18: {
          if (playPropMsg_ == null) {
            playPropMsg_ = new global::PlayerPropMsg();
          }
          input.ReadMessage(playPropMsg_);
          break;
        }
        case 24: {
          GiftId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendGiftResponse : pb::IMessage<SCFriendGiftResponse> {
  private static readonly pb::MessageParser<SCFriendGiftResponse> _parser = new pb::MessageParser<SCFriendGiftResponse>(() => new SCFriendGiftResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendGiftResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[195]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftResponse(SCFriendGiftResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    friendGiftLists_ = other.friendGiftLists_.Clone();
    limit_ = other.limit_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftResponse Clone() {
    return new SCFriendGiftResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "friendGiftLists" field.</summary>
  public const int FriendGiftListsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::FriendGift> _repeated_friendGiftLists_codec
      = pb::FieldCodec.ForMessage(18, global::FriendGift.Parser);
  private readonly pbc::RepeatedField<global::FriendGift> friendGiftLists_ = new pbc::RepeatedField<global::FriendGift>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FriendGift> FriendGiftLists {
    get { return friendGiftLists_; }
  }

  /// <summary>Field number for the "limit" field.</summary>
  public const int LimitFieldNumber = 3;
  private int limit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Limit {
    get { return limit_; }
    set {
      limit_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 4;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendGiftResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendGiftResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!friendGiftLists_.Equals(other.friendGiftLists_)) return false;
    if (Limit != other.Limit) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= friendGiftLists_.GetHashCode();
    if (Limit != 0) hash ^= Limit.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    friendGiftLists_.WriteTo(output, _repeated_friendGiftLists_codec);
    if (Limit != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Limit);
    }
    if (Count != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += friendGiftLists_.CalculateSize(_repeated_friendGiftLists_codec);
    if (Limit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Limit);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendGiftResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    friendGiftLists_.Add(other.friendGiftLists_);
    if (other.Limit != 0) {
      Limit = other.Limit;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          friendGiftLists_.AddEntriesFrom(input, _repeated_friendGiftLists_codec);
          break;
        }
        case 24: {
          Limit = input.ReadInt32();
          break;
        }
        case 32: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*送礼*
/// </summary>
public sealed partial class CSFriendGiftSendRequest : pb::IMessage<CSFriendGiftSendRequest> {
  private static readonly pb::MessageParser<CSFriendGiftSendRequest> _parser = new pb::MessageParser<CSFriendGiftSendRequest>(() => new CSFriendGiftSendRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendGiftSendRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[196]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftSendRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftSendRequest(CSFriendGiftSendRequest other) : this() {
    friendId_ = other.friendId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftSendRequest Clone() {
    return new CSFriendGiftSendRequest(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private long friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendGiftSendRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendGiftSendRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0L) hash ^= FriendId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FriendId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FriendId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendGiftSendRequest other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0L) {
      FriendId = other.FriendId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FriendId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendGiftSendResponse : pb::IMessage<SCFriendGiftSendResponse> {
  private static readonly pb::MessageParser<SCFriendGiftSendResponse> _parser = new pb::MessageParser<SCFriendGiftSendResponse>(() => new SCFriendGiftSendResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendGiftSendResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[197]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftSendResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftSendResponse(SCFriendGiftSendResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftSendResponse Clone() {
    return new SCFriendGiftSendResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendGiftSendResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendGiftSendResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendGiftSendResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

/// <summary>
///*送礼领取*
/// </summary>
public sealed partial class CSFriendGiftDrawRequest : pb::IMessage<CSFriendGiftDrawRequest> {
  private static readonly pb::MessageParser<CSFriendGiftDrawRequest> _parser = new pb::MessageParser<CSFriendGiftDrawRequest>(() => new CSFriendGiftDrawRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendGiftDrawRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[198]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftDrawRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftDrawRequest(CSFriendGiftDrawRequest other) : this() {
    giftId_ = other.giftId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendGiftDrawRequest Clone() {
    return new CSFriendGiftDrawRequest(this);
  }

  /// <summary>Field number for the "giftId" field.</summary>
  public const int GiftIdFieldNumber = 1;
  private long giftId_;
  /// <summary>
  /// 0表示全部领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long GiftId {
    get { return giftId_; }
    set {
      giftId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendGiftDrawRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendGiftDrawRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (GiftId != other.GiftId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (GiftId != 0L) hash ^= GiftId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (GiftId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(GiftId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (GiftId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(GiftId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendGiftDrawRequest other) {
    if (other == null) {
      return;
    }
    if (other.GiftId != 0L) {
      GiftId = other.GiftId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          GiftId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendGiftDrawResponse : pb::IMessage<SCFriendGiftDrawResponse> {
  private static readonly pb::MessageParser<SCFriendGiftDrawResponse> _parser = new pb::MessageParser<SCFriendGiftDrawResponse>(() => new SCFriendGiftDrawResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendGiftDrawResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[199]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftDrawResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftDrawResponse(SCFriendGiftDrawResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    playerPropMsg_ = other.playerPropMsg_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendGiftDrawResponse Clone() {
    return new SCFriendGiftDrawResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "playerPropMsg" field.</summary>
  public const int PlayerPropMsgFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PlayerPropMsg> _repeated_playerPropMsg_codec
      = pb::FieldCodec.ForMessage(18, global::PlayerPropMsg.Parser);
  private readonly pbc::RepeatedField<global::PlayerPropMsg> playerPropMsg_ = new pbc::RepeatedField<global::PlayerPropMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerPropMsg> PlayerPropMsg {
    get { return playerPropMsg_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendGiftDrawResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendGiftDrawResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!playerPropMsg_.Equals(other.playerPropMsg_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= playerPropMsg_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    playerPropMsg_.WriteTo(output, _repeated_playerPropMsg_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += playerPropMsg_.CalculateSize(_repeated_playerPropMsg_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendGiftDrawResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    playerPropMsg_.Add(other.playerPropMsg_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          playerPropMsg_.AddEntriesFrom(input, _repeated_playerPropMsg_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*好友界面*
/// </summary>
public sealed partial class CSFriendViewRequest : pb::IMessage<CSFriendViewRequest> {
  private static readonly pb::MessageParser<CSFriendViewRequest> _parser = new pb::MessageParser<CSFriendViewRequest>(() => new CSFriendViewRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendViewRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[200]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendViewRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendViewRequest(CSFriendViewRequest other) : this() {
    friendId_ = other.friendId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendViewRequest Clone() {
    return new CSFriendViewRequest(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private long friendId_;
  /// <summary>
  /// 0表示全部领取
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendViewRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendViewRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0L) hash ^= FriendId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FriendId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FriendId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendViewRequest other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0L) {
      FriendId = other.FriendId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FriendId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class AchievementFriendMsg : pb::IMessage<AchievementFriendMsg> {
  private static readonly pb::MessageParser<AchievementFriendMsg> _parser = new pb::MessageParser<AchievementFriendMsg>(() => new AchievementFriendMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AchievementFriendMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[201]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AchievementFriendMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AchievementFriendMsg(AchievementFriendMsg other) : this() {
    id_ = other.id_;
    progress_ = other.progress_;
    submitStatus_ = other.submitStatus_;
    finishTime_ = other.finishTime_;
    finishTime1_ = other.finishTime1_;
    finishTime2_ = other.finishTime2_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AchievementFriendMsg Clone() {
    return new AchievementFriendMsg(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  /// <summary>
  ///achievement ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "progress" field.</summary>
  public const int ProgressFieldNumber = 2;
  private int progress_;
  /// <summary>
  ///进度
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Progress {
    get { return progress_; }
    set {
      progress_ = value;
    }
  }

  /// <summary>Field number for the "submitStatus" field.</summary>
  public const int SubmitStatusFieldNumber = 3;
  private int submitStatus_;
  /// <summary>
  /// 提交状态 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SubmitStatus {
    get { return submitStatus_; }
    set {
      submitStatus_ = value;
    }
  }

  /// <summary>Field number for the "finishTime" field.</summary>
  public const int FinishTimeFieldNumber = 4;
  private long finishTime_;
  /// <summary>
  ///完成总时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime {
    get { return finishTime_; }
    set {
      finishTime_ = value;
    }
  }

  /// <summary>Field number for the "finishTime1" field.</summary>
  public const int FinishTime1FieldNumber = 5;
  private long finishTime1_;
  /// <summary>
  /// 一阶段时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime1 {
    get { return finishTime1_; }
    set {
      finishTime1_ = value;
    }
  }

  /// <summary>Field number for the "finishTime2" field.</summary>
  public const int FinishTime2FieldNumber = 6;
  private long finishTime2_;
  /// <summary>
  /// 二阶段时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FinishTime2 {
    get { return finishTime2_; }
    set {
      finishTime2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AchievementFriendMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AchievementFriendMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Progress != other.Progress) return false;
    if (SubmitStatus != other.SubmitStatus) return false;
    if (FinishTime != other.FinishTime) return false;
    if (FinishTime1 != other.FinishTime1) return false;
    if (FinishTime2 != other.FinishTime2) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Progress != 0) hash ^= Progress.GetHashCode();
    if (SubmitStatus != 0) hash ^= SubmitStatus.GetHashCode();
    if (FinishTime != 0L) hash ^= FinishTime.GetHashCode();
    if (FinishTime1 != 0L) hash ^= FinishTime1.GetHashCode();
    if (FinishTime2 != 0L) hash ^= FinishTime2.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Progress != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Progress);
    }
    if (SubmitStatus != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SubmitStatus);
    }
    if (FinishTime != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(FinishTime);
    }
    if (FinishTime1 != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(FinishTime1);
    }
    if (FinishTime2 != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(FinishTime2);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Progress != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Progress);
    }
    if (SubmitStatus != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubmitStatus);
    }
    if (FinishTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime);
    }
    if (FinishTime1 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime1);
    }
    if (FinishTime2 != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FinishTime2);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AchievementFriendMsg other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Progress != 0) {
      Progress = other.Progress;
    }
    if (other.SubmitStatus != 0) {
      SubmitStatus = other.SubmitStatus;
    }
    if (other.FinishTime != 0L) {
      FinishTime = other.FinishTime;
    }
    if (other.FinishTime1 != 0L) {
      FinishTime1 = other.FinishTime1;
    }
    if (other.FinishTime2 != 0L) {
      FinishTime2 = other.FinishTime2;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Progress = input.ReadInt32();
          break;
        }
        case 24: {
          SubmitStatus = input.ReadInt32();
          break;
        }
        case 32: {
          FinishTime = input.ReadInt64();
          break;
        }
        case 40: {
          FinishTime1 = input.ReadInt64();
          break;
        }
        case 48: {
          FinishTime2 = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendViewResponse : pb::IMessage<SCFriendViewResponse> {
  private static readonly pb::MessageParser<SCFriendViewResponse> _parser = new pb::MessageParser<SCFriendViewResponse>(() => new SCFriendViewResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendViewResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[202]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendViewResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendViewResponse(SCFriendViewResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    PlayerFriendMsg = other.playerFriendMsg_ != null ? other.PlayerFriendMsg.Clone() : null;
    achievementMsgs_ = other.achievementMsgs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendViewResponse Clone() {
    return new SCFriendViewResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "playerFriendMsg" field.</summary>
  public const int PlayerFriendMsgFieldNumber = 2;
  private global::PlayerFriendMsg playerFriendMsg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerFriendMsg PlayerFriendMsg {
    get { return playerFriendMsg_; }
    set {
      playerFriendMsg_ = value;
    }
  }

  /// <summary>Field number for the "achievementMsgs" field.</summary>
  public const int AchievementMsgsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::AchievementFriendMsg> _repeated_achievementMsgs_codec
      = pb::FieldCodec.ForMessage(26, global::AchievementFriendMsg.Parser);
  private readonly pbc::RepeatedField<global::AchievementFriendMsg> achievementMsgs_ = new pbc::RepeatedField<global::AchievementFriendMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AchievementFriendMsg> AchievementMsgs {
    get { return achievementMsgs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendViewResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendViewResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (!object.Equals(PlayerFriendMsg, other.PlayerFriendMsg)) return false;
    if(!achievementMsgs_.Equals(other.achievementMsgs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (playerFriendMsg_ != null) hash ^= PlayerFriendMsg.GetHashCode();
    hash ^= achievementMsgs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (playerFriendMsg_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerFriendMsg);
    }
    achievementMsgs_.WriteTo(output, _repeated_achievementMsgs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (playerFriendMsg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerFriendMsg);
    }
    size += achievementMsgs_.CalculateSize(_repeated_achievementMsgs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendViewResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.playerFriendMsg_ != null) {
      if (playerFriendMsg_ == null) {
        playerFriendMsg_ = new global::PlayerFriendMsg();
      }
      PlayerFriendMsg.MergeFrom(other.PlayerFriendMsg);
    }
    achievementMsgs_.Add(other.achievementMsgs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          if (playerFriendMsg_ == null) {
            playerFriendMsg_ = new global::PlayerFriendMsg();
          }
          input.ReadMessage(playerFriendMsg_);
          break;
        }
        case 26: {
          achievementMsgs_.AddEntriesFrom(input, _repeated_achievementMsgs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///添加好友开关
/// </summary>
public sealed partial class CSFriendSwitchRequest : pb::IMessage<CSFriendSwitchRequest> {
  private static readonly pb::MessageParser<CSFriendSwitchRequest> _parser = new pb::MessageParser<CSFriendSwitchRequest>(() => new CSFriendSwitchRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendSwitchRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[203]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendSwitchRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendSwitchRequest(CSFriendSwitchRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendSwitchRequest Clone() {
    return new CSFriendSwitchRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendSwitchRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendSwitchRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendSwitchRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCFriendSwitchResponse : pb::IMessage<SCFriendSwitchResponse> {
  private static readonly pb::MessageParser<SCFriendSwitchResponse> _parser = new pb::MessageParser<SCFriendSwitchResponse>(() => new SCFriendSwitchResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendSwitchResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[204]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendSwitchResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendSwitchResponse(SCFriendSwitchResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendSwitchResponse Clone() {
    return new SCFriendSwitchResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendSwitchResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendSwitchResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendSwitchResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendApplyResponse : pb::IMessage<SCFriendApplyResponse> {
  private static readonly pb::MessageParser<SCFriendApplyResponse> _parser = new pb::MessageParser<SCFriendApplyResponse>(() => new SCFriendApplyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendApplyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[205]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendApplyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendApplyResponse(SCFriendApplyResponse other) : this() {
    friendId_ = other.friendId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendApplyResponse Clone() {
    return new SCFriendApplyResponse(this);
  }

  /// <summary>Field number for the "friendId" field.</summary>
  public const int FriendIdFieldNumber = 1;
  private long friendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FriendId {
    get { return friendId_; }
    set {
      friendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendApplyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendApplyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FriendId != other.FriendId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (FriendId != 0L) hash ^= FriendId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (FriendId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(FriendId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (FriendId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FriendId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendApplyResponse other) {
    if (other == null) {
      return;
    }
    if (other.FriendId != 0L) {
      FriendId = other.FriendId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FriendId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendNoticeResponse : pb::IMessage<SCFriendNoticeResponse> {
  private static readonly pb::MessageParser<SCFriendNoticeResponse> _parser = new pb::MessageParser<SCFriendNoticeResponse>(() => new SCFriendNoticeResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendNoticeResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[206]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendNoticeResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendNoticeResponse(SCFriendNoticeResponse other) : this() {
    point_ = other.point_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendNoticeResponse Clone() {
    return new SCFriendNoticeResponse(this);
  }

  /// <summary>Field number for the "point" field.</summary>
  public const int PointFieldNumber = 1;
  private int point_;
  /// <summary>
  ///1：有新增好友，2：有好友请求 3：有好友礼物
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Point {
    get { return point_; }
    set {
      point_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendNoticeResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendNoticeResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Point != other.Point) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Point != 0) hash ^= Point.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Point != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Point);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Point != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Point);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendNoticeResponse other) {
    if (other == null) {
      return;
    }
    if (other.Point != 0) {
      Point = other.Point;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Point = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class FriendRecommendMsg : pb::IMessage<FriendRecommendMsg> {
  private static readonly pb::MessageParser<FriendRecommendMsg> _parser = new pb::MessageParser<FriendRecommendMsg>(() => new FriendRecommendMsg());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FriendRecommendMsg> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[207]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendRecommendMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendRecommendMsg(FriendRecommendMsg other) : this() {
    name_ = other.name_;
    bind_ = other.bind_;
    status_ = other.status_;
    level_ = other.level_;
    icon_ = other.icon_;
    recommendId_ = other.recommendId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FriendRecommendMsg Clone() {
    return new FriendRecommendMsg(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bind" field.</summary>
  public const int BindFieldNumber = 2;
  private int bind_;
  /// <summary>
  ///fb绑定 ,0:未绑定，1fb 绑定
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Bind {
    get { return bind_; }
    set {
      bind_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///好友推荐状态，1：推荐，2：加好友
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 4;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 5;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "recommendId" field.</summary>
  public const int RecommendIdFieldNumber = 6;
  private long recommendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RecommendId {
    get { return recommendId_; }
    set {
      recommendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FriendRecommendMsg);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FriendRecommendMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Bind != other.Bind) return false;
    if (Status != other.Status) return false;
    if (Level != other.Level) return false;
    if (Icon != other.Icon) return false;
    if (RecommendId != other.RecommendId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Bind != 0) hash ^= Bind.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (RecommendId != 0L) hash ^= RecommendId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Bind != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Bind);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (Level != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Level);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Icon);
    }
    if (RecommendId != 0L) {
      output.WriteRawTag(48);
      output.WriteInt64(RecommendId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Bind != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Bind);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (RecommendId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecommendId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FriendRecommendMsg other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Bind != 0) {
      Bind = other.Bind;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.RecommendId != 0L) {
      RecommendId = other.RecommendId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Bind = input.ReadInt32();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 32: {
          Level = input.ReadInt32();
          break;
        }
        case 42: {
          Icon = input.ReadString();
          break;
        }
        case 48: {
          RecommendId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///好友推荐列表
/// </summary>
public sealed partial class CSFriendRecommendListRequest : pb::IMessage<CSFriendRecommendListRequest> {
  private static readonly pb::MessageParser<CSFriendRecommendListRequest> _parser = new pb::MessageParser<CSFriendRecommendListRequest>(() => new CSFriendRecommendListRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendRecommendListRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[208]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendListRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendListRequest(CSFriendRecommendListRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendListRequest Clone() {
    return new CSFriendRecommendListRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendRecommendListRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendRecommendListRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendRecommendListRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCFriendRecommendListResponse : pb::IMessage<SCFriendRecommendListResponse> {
  private static readonly pb::MessageParser<SCFriendRecommendListResponse> _parser = new pb::MessageParser<SCFriendRecommendListResponse>(() => new SCFriendRecommendListResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendRecommendListResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[209]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendListResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendListResponse(SCFriendRecommendListResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    recommend_ = other.recommend_.Clone();
    timeDown_ = other.timeDown_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendListResponse Clone() {
    return new SCFriendRecommendListResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "recommend" field.</summary>
  public const int RecommendFieldNumber = 2;
  private static readonly pb::FieldCodec<global::FriendRecommendMsg> _repeated_recommend_codec
      = pb::FieldCodec.ForMessage(18, global::FriendRecommendMsg.Parser);
  private readonly pbc::RepeatedField<global::FriendRecommendMsg> recommend_ = new pbc::RepeatedField<global::FriendRecommendMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::FriendRecommendMsg> Recommend {
    get { return recommend_; }
  }

  /// <summary>Field number for the "timeDown" field.</summary>
  public const int TimeDownFieldNumber = 3;
  private int timeDown_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeDown {
    get { return timeDown_; }
    set {
      timeDown_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendRecommendListResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendRecommendListResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!recommend_.Equals(other.recommend_)) return false;
    if (TimeDown != other.TimeDown) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= recommend_.GetHashCode();
    if (TimeDown != 0) hash ^= TimeDown.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    recommend_.WriteTo(output, _repeated_recommend_codec);
    if (TimeDown != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeDown);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += recommend_.CalculateSize(_repeated_recommend_codec);
    if (TimeDown != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeDown);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendRecommendListResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    recommend_.Add(other.recommend_);
    if (other.TimeDown != 0) {
      TimeDown = other.TimeDown;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          recommend_.AddEntriesFrom(input, _repeated_recommend_codec);
          break;
        }
        case 24: {
          TimeDown = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///推荐查看
/// </summary>
public sealed partial class CSFriendRecommendGetRequest : pb::IMessage<CSFriendRecommendGetRequest> {
  private static readonly pb::MessageParser<CSFriendRecommendGetRequest> _parser = new pb::MessageParser<CSFriendRecommendGetRequest>(() => new CSFriendRecommendGetRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendRecommendGetRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[210]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendGetRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendGetRequest(CSFriendRecommendGetRequest other) : this() {
    recommendId_ = other.recommendId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendGetRequest Clone() {
    return new CSFriendRecommendGetRequest(this);
  }

  /// <summary>Field number for the "recommendId" field.</summary>
  public const int RecommendIdFieldNumber = 1;
  private long recommendId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RecommendId {
    get { return recommendId_; }
    set {
      recommendId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendRecommendGetRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendRecommendGetRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RecommendId != other.RecommendId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RecommendId != 0L) hash ^= RecommendId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RecommendId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(RecommendId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RecommendId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecommendId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendRecommendGetRequest other) {
    if (other == null) {
      return;
    }
    if (other.RecommendId != 0L) {
      RecommendId = other.RecommendId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RecommendId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendRecommendGetResponse : pb::IMessage<SCFriendRecommendGetResponse> {
  private static readonly pb::MessageParser<SCFriendRecommendGetResponse> _parser = new pb::MessageParser<SCFriendRecommendGetResponse>(() => new SCFriendRecommendGetResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendRecommendGetResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[211]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendGetResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendGetResponse(SCFriendRecommendGetResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    PlayerFriendMsg = other.playerFriendMsg_ != null ? other.PlayerFriendMsg.Clone() : null;
    achievementMsgs_ = other.achievementMsgs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendGetResponse Clone() {
    return new SCFriendRecommendGetResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "playerFriendMsg" field.</summary>
  public const int PlayerFriendMsgFieldNumber = 2;
  private global::PlayerFriendMsg playerFriendMsg_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerFriendMsg PlayerFriendMsg {
    get { return playerFriendMsg_; }
    set {
      playerFriendMsg_ = value;
    }
  }

  /// <summary>Field number for the "achievementMsgs" field.</summary>
  public const int AchievementMsgsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::AchievementFriendMsg> _repeated_achievementMsgs_codec
      = pb::FieldCodec.ForMessage(26, global::AchievementFriendMsg.Parser);
  private readonly pbc::RepeatedField<global::AchievementFriendMsg> achievementMsgs_ = new pbc::RepeatedField<global::AchievementFriendMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::AchievementFriendMsg> AchievementMsgs {
    get { return achievementMsgs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendRecommendGetResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendRecommendGetResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (!object.Equals(PlayerFriendMsg, other.PlayerFriendMsg)) return false;
    if(!achievementMsgs_.Equals(other.achievementMsgs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (playerFriendMsg_ != null) hash ^= PlayerFriendMsg.GetHashCode();
    hash ^= achievementMsgs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (playerFriendMsg_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerFriendMsg);
    }
    achievementMsgs_.WriteTo(output, _repeated_achievementMsgs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (playerFriendMsg_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerFriendMsg);
    }
    size += achievementMsgs_.CalculateSize(_repeated_achievementMsgs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendRecommendGetResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.playerFriendMsg_ != null) {
      if (playerFriendMsg_ == null) {
        playerFriendMsg_ = new global::PlayerFriendMsg();
      }
      PlayerFriendMsg.MergeFrom(other.PlayerFriendMsg);
    }
    achievementMsgs_.Add(other.achievementMsgs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          if (playerFriendMsg_ == null) {
            playerFriendMsg_ = new global::PlayerFriendMsg();
          }
          input.ReadMessage(playerFriendMsg_);
          break;
        }
        case 26: {
          achievementMsgs_.AddEntriesFrom(input, _repeated_achievementMsgs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///推荐申请
/// </summary>
public sealed partial class CSFriendRecommendApplyRequest : pb::IMessage<CSFriendRecommendApplyRequest> {
  private static readonly pb::MessageParser<CSFriendRecommendApplyRequest> _parser = new pb::MessageParser<CSFriendRecommendApplyRequest>(() => new CSFriendRecommendApplyRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFriendRecommendApplyRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[212]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendApplyRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendApplyRequest(CSFriendRecommendApplyRequest other) : this() {
    recommendId_ = other.recommendId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFriendRecommendApplyRequest Clone() {
    return new CSFriendRecommendApplyRequest(this);
  }

  /// <summary>Field number for the "recommendId" field.</summary>
  public const int RecommendIdFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_recommendId_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> recommendId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> RecommendId {
    get { return recommendId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFriendRecommendApplyRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFriendRecommendApplyRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!recommendId_.Equals(other.recommendId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= recommendId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    recommendId_.WriteTo(output, _repeated_recommendId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += recommendId_.CalculateSize(_repeated_recommendId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFriendRecommendApplyRequest other) {
    if (other == null) {
      return;
    }
    recommendId_.Add(other.recommendId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          recommendId_.AddEntriesFrom(input, _repeated_recommendId_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SCFriendRecommendApplyResponse : pb::IMessage<SCFriendRecommendApplyResponse> {
  private static readonly pb::MessageParser<SCFriendRecommendApplyResponse> _parser = new pb::MessageParser<SCFriendRecommendApplyResponse>(() => new SCFriendRecommendApplyResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFriendRecommendApplyResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[213]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendApplyResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendApplyResponse(SCFriendRecommendApplyResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    recommendId_ = other.recommendId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFriendRecommendApplyResponse Clone() {
    return new SCFriendRecommendApplyResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "recommendId" field.</summary>
  public const int RecommendIdFieldNumber = 2;
  private static readonly pb::FieldCodec<long> _repeated_recommendId_codec
      = pb::FieldCodec.ForInt64(18);
  private readonly pbc::RepeatedField<long> recommendId_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///成功发出申请
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> RecommendId {
    get { return recommendId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFriendRecommendApplyResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFriendRecommendApplyResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if(!recommendId_.Equals(other.recommendId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    hash ^= recommendId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    recommendId_.WriteTo(output, _repeated_recommendId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    size += recommendId_.CalculateSize(_repeated_recommendId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFriendRecommendApplyResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    recommendId_.Add(other.recommendId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18:
        case 16: {
          recommendId_.AddEntriesFrom(input, _repeated_recommendId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*客户端请求玩家的建筑列表
/// </summary>
public sealed partial class CSBuildingListReq : pb::IMessage<CSBuildingListReq> {
  private static readonly pb::MessageParser<CSBuildingListReq> _parser = new pb::MessageParser<CSBuildingListReq>(() => new CSBuildingListReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSBuildingListReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[214]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuildingListReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuildingListReq(CSBuildingListReq other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuildingListReq Clone() {
    return new CSBuildingListReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSBuildingListReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSBuildingListReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSBuildingListReq other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCBuildingListResp : pb::IMessage<SCBuildingListResp> {
  private static readonly pb::MessageParser<SCBuildingListResp> _parser = new pb::MessageParser<SCBuildingListResp>(() => new SCBuildingListResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCBuildingListResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[215]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuildingListResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuildingListResp(SCBuildingListResp other) : this() {
    infos_ = other.infos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuildingListResp Clone() {
    return new SCBuildingListResp(this);
  }

  /// <summary>Field number for the "infos" field.</summary>
  public const int InfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::BuildingInfo> _repeated_infos_codec
      = pb::FieldCodec.ForMessage(10, global::BuildingInfo.Parser);
  private readonly pbc::RepeatedField<global::BuildingInfo> infos_ = new pbc::RepeatedField<global::BuildingInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BuildingInfo> Infos {
    get { return infos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCBuildingListResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCBuildingListResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!infos_.Equals(other.infos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= infos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    infos_.WriteTo(output, _repeated_infos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += infos_.CalculateSize(_repeated_infos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCBuildingListResp other) {
    if (other == null) {
      return;
    }
    infos_.Add(other.infos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          infos_.AddEntriesFrom(input, _repeated_infos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class BuildingInfo : pb::IMessage<BuildingInfo> {
  private static readonly pb::MessageParser<BuildingInfo> _parser = new pb::MessageParser<BuildingInfo>(() => new BuildingInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BuildingInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[216]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildingInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildingInfo(BuildingInfo other) : this() {
    buildingId_ = other.buildingId_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BuildingInfo Clone() {
    return new BuildingInfo(this);
  }

  /// <summary>Field number for the "buildingId" field.</summary>
  public const int BuildingIdFieldNumber = 1;
  private long buildingId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BuildingId {
    get { return buildingId_; }
    set {
      buildingId_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private int status_;
  /// <summary>
  ///1表示已解锁2可解锁的
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BuildingInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BuildingInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuildingId != other.BuildingId) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuildingId != 0L) hash ^= BuildingId.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuildingId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(BuildingId);
    }
    if (Status != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuildingId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuildingId);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BuildingInfo other) {
    if (other == null) {
      return;
    }
    if (other.BuildingId != 0L) {
      BuildingId = other.BuildingId;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BuildingId = input.ReadInt64();
          break;
        }
        case 16: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*客户端请求解锁某建筑
/// </summary>
public sealed partial class CSBuildingUnlockReq : pb::IMessage<CSBuildingUnlockReq> {
  private static readonly pb::MessageParser<CSBuildingUnlockReq> _parser = new pb::MessageParser<CSBuildingUnlockReq>(() => new CSBuildingUnlockReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSBuildingUnlockReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[217]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuildingUnlockReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuildingUnlockReq(CSBuildingUnlockReq other) : this() {
    buildingId_ = other.buildingId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuildingUnlockReq Clone() {
    return new CSBuildingUnlockReq(this);
  }

  /// <summary>Field number for the "buildingId" field.</summary>
  public const int BuildingIdFieldNumber = 1;
  private long buildingId_;
  /// <summary>
  ///配置id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BuildingId {
    get { return buildingId_; }
    set {
      buildingId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSBuildingUnlockReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSBuildingUnlockReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BuildingId != other.BuildingId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BuildingId != 0L) hash ^= BuildingId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BuildingId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(BuildingId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BuildingId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuildingId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSBuildingUnlockReq other) {
    if (other == null) {
      return;
    }
    if (other.BuildingId != 0L) {
      BuildingId = other.BuildingId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BuildingId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCBuildingUnlockResp : pb::IMessage<SCBuildingUnlockResp> {
  private static readonly pb::MessageParser<SCBuildingUnlockResp> _parser = new pb::MessageParser<SCBuildingUnlockResp>(() => new SCBuildingUnlockResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCBuildingUnlockResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[218]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuildingUnlockResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuildingUnlockResp(SCBuildingUnlockResp other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    buildingId_ = other.buildingId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuildingUnlockResp Clone() {
    return new SCBuildingUnlockResp(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  /// <summary>Field number for the "buildingId" field.</summary>
  public const int BuildingIdFieldNumber = 2;
  private long buildingId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BuildingId {
    get { return buildingId_; }
    set {
      buildingId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCBuildingUnlockResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCBuildingUnlockResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    if (BuildingId != other.BuildingId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (BuildingId != 0L) hash ^= BuildingId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (BuildingId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(BuildingId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (BuildingId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BuildingId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCBuildingUnlockResp other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    if (other.BuildingId != 0L) {
      BuildingId = other.BuildingId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
        case 16: {
          BuildingId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*任务能不能做
/// </summary>
public sealed partial class CSCanTaskRequest : pb::IMessage<CSCanTaskRequest> {
  private static readonly pb::MessageParser<CSCanTaskRequest> _parser = new pb::MessageParser<CSCanTaskRequest>(() => new CSCanTaskRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSCanTaskRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[219]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCanTaskRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCanTaskRequest(CSCanTaskRequest other) : this() {
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCanTaskRequest Clone() {
    return new CSCanTaskRequest(this);
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSCanTaskRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSCanTaskRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSCanTaskRequest other) {
    if (other == null) {
      return;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*任务能不能做
/// </summary>
public sealed partial class SCCanTaskResponse : pb::IMessage<SCCanTaskResponse> {
  private static readonly pb::MessageParser<SCCanTaskResponse> _parser = new pb::MessageParser<SCCanTaskResponse>(() => new SCCanTaskResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCCanTaskResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[220]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCanTaskResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCanTaskResponse(SCCanTaskResponse other) : this() {
    canTask_ = other.canTask_;
    taskId_ = other.taskId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCanTaskResponse Clone() {
    return new SCCanTaskResponse(this);
  }

  /// <summary>Field number for the "canTask" field.</summary>
  public const int CanTaskFieldNumber = 1;
  private bool canTask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool CanTask {
    get { return canTask_; }
    set {
      canTask_ = value;
    }
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 2;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCCanTaskResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCCanTaskResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CanTask != other.CanTask) return false;
    if (TaskId != other.TaskId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CanTask != false) hash ^= CanTask.GetHashCode();
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CanTask != false) {
      output.WriteRawTag(8);
      output.WriteBool(CanTask);
    }
    if (TaskId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(TaskId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CanTask != false) {
      size += 1 + 1;
    }
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCCanTaskResponse other) {
    if (other == null) {
      return;
    }
    if (other.CanTask != false) {
      CanTask = other.CanTask;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CanTask = input.ReadBool();
          break;
        }
        case 16: {
          TaskId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///*获得新称号
/// </summary>
public sealed partial class SCreceiveNewTitle : pb::IMessage<SCreceiveNewTitle> {
  private static readonly pb::MessageParser<SCreceiveNewTitle> _parser = new pb::MessageParser<SCreceiveNewTitle>(() => new SCreceiveNewTitle());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCreceiveNewTitle> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[221]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCreceiveNewTitle() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCreceiveNewTitle(SCreceiveNewTitle other) : this() {
    title_ = other.title_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCreceiveNewTitle Clone() {
    return new SCreceiveNewTitle(this);
  }

  /// <summary>Field number for the "title" field.</summary>
  public const int TitleFieldNumber = 1;
  private long title_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Title {
    get { return title_; }
    set {
      title_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCreceiveNewTitle);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCreceiveNewTitle other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Title != other.Title) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Title != 0L) hash ^= Title.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Title != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Title);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Title != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Title);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCreceiveNewTitle other) {
    if (other == null) {
      return;
    }
    if (other.Title != 0L) {
      Title = other.Title;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Title = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///游客登录
/// </summary>
public sealed partial class CSRegGuestRequest : pb::IMessage<CSRegGuestRequest> {
  private static readonly pb::MessageParser<CSRegGuestRequest> _parser = new pb::MessageParser<CSRegGuestRequest>(() => new CSRegGuestRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSRegGuestRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[222]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRegGuestRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRegGuestRequest(CSRegGuestRequest other) : this() {
    deviceId_ = other.deviceId_;
    osType_ = other.osType_;
    ad_ = other.ad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSRegGuestRequest Clone() {
    return new CSRegGuestRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osType" field.</summary>
  public const int OsTypeFieldNumber = 2;
  private string osType_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string OsType {
    get { return osType_; }
    set {
      osType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ad" field.</summary>
  public const int AdFieldNumber = 3;
  private string ad_ = "";
  /// <summary>
  ///广告投放
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ad {
    get { return ad_; }
    set {
      ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSRegGuestRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSRegGuestRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (OsType != other.OsType) return false;
    if (Ad != other.Ad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (OsType.Length != 0) hash ^= OsType.GetHashCode();
    if (Ad.Length != 0) hash ^= Ad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (OsType.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(OsType);
    }
    if (Ad.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Ad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (OsType.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OsType);
    }
    if (Ad.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSRegGuestRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.OsType.Length != 0) {
      OsType = other.OsType;
    }
    if (other.Ad.Length != 0) {
      Ad = other.Ad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          OsType = input.ReadString();
          break;
        }
        case 26: {
          Ad = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCRegGuestResponse : pb::IMessage<SCRegGuestResponse> {
  private static readonly pb::MessageParser<SCRegGuestResponse> _parser = new pb::MessageParser<SCRegGuestResponse>(() => new SCRegGuestResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCRegGuestResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[223]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRegGuestResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRegGuestResponse(SCRegGuestResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    guestIdentify_ = other.guestIdentify_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCRegGuestResponse Clone() {
    return new SCRegGuestResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "guest_identify" field.</summary>
  public const int GuestIdentifyFieldNumber = 2;
  private string guestIdentify_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GuestIdentify {
    get { return guestIdentify_; }
    set {
      guestIdentify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCRegGuestResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCRegGuestResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (GuestIdentify != other.GuestIdentify) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (GuestIdentify.Length != 0) hash ^= GuestIdentify.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (GuestIdentify.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(GuestIdentify);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (GuestIdentify.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(GuestIdentify);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCRegGuestResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.GuestIdentify.Length != 0) {
      GuestIdentify = other.GuestIdentify;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          GuestIdentify = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///认证
/// </summary>
public sealed partial class CSIdentifyCheckRequest : pb::IMessage<CSIdentifyCheckRequest> {
  private static readonly pb::MessageParser<CSIdentifyCheckRequest> _parser = new pb::MessageParser<CSIdentifyCheckRequest>(() => new CSIdentifyCheckRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSIdentifyCheckRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[224]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSIdentifyCheckRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSIdentifyCheckRequest(CSIdentifyCheckRequest other) : this() {
    identify_ = other.identify_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSIdentifyCheckRequest Clone() {
    return new CSIdentifyCheckRequest(this);
  }

  /// <summary>Field number for the "identify" field.</summary>
  public const int IdentifyFieldNumber = 1;
  private string identify_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identify {
    get { return identify_; }
    set {
      identify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSIdentifyCheckRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSIdentifyCheckRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Identify != other.Identify) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Identify.Length != 0) hash ^= Identify.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Identify.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Identify);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Identify.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identify);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSIdentifyCheckRequest other) {
    if (other == null) {
      return;
    }
    if (other.Identify.Length != 0) {
      Identify = other.Identify;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Identify = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCIdentifyCheckRepsonse : pb::IMessage<SCIdentifyCheckRepsonse> {
  private static readonly pb::MessageParser<SCIdentifyCheckRepsonse> _parser = new pb::MessageParser<SCIdentifyCheckRepsonse>(() => new SCIdentifyCheckRepsonse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCIdentifyCheckRepsonse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[225]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIdentifyCheckRepsonse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIdentifyCheckRepsonse(SCIdentifyCheckRepsonse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    accessToken_ = other.accessToken_;
    startTime_ = other.startTime_;
    deadline_ = other.deadline_;
    thirdBind_ = other.thirdBind_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIdentifyCheckRepsonse Clone() {
    return new SCIdentifyCheckRepsonse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private string accessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 3;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "deadline" field.</summary>
  public const int DeadlineFieldNumber = 4;
  private long deadline_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Deadline {
    get { return deadline_; }
    set {
      deadline_ = value;
    }
  }

  /// <summary>Field number for the "thirdBind" field.</summary>
  public const int ThirdBindFieldNumber = 5;
  private int thirdBind_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ThirdBind {
    get { return thirdBind_; }
    set {
      thirdBind_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCIdentifyCheckRepsonse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCIdentifyCheckRepsonse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (AccessToken != other.AccessToken) return false;
    if (StartTime != other.StartTime) return false;
    if (Deadline != other.Deadline) return false;
    if (ThirdBind != other.ThirdBind) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (Deadline != 0L) hash ^= Deadline.GetHashCode();
    if (ThirdBind != 0) hash ^= ThirdBind.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (AccessToken.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(StartTime);
    }
    if (Deadline != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(Deadline);
    }
    if (ThirdBind != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(ThirdBind);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (AccessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (Deadline != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Deadline);
    }
    if (ThirdBind != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThirdBind);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCIdentifyCheckRepsonse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.AccessToken.Length != 0) {
      AccessToken = other.AccessToken;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.Deadline != 0L) {
      Deadline = other.Deadline;
    }
    if (other.ThirdBind != 0) {
      ThirdBind = other.ThirdBind;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
        case 24: {
          StartTime = input.ReadInt64();
          break;
        }
        case 32: {
          Deadline = input.ReadInt64();
          break;
        }
        case 40: {
          ThirdBind = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///facebook login
/// </summary>
public sealed partial class CSFBLoginRequest : pb::IMessage<CSFBLoginRequest> {
  private static readonly pb::MessageParser<CSFBLoginRequest> _parser = new pb::MessageParser<CSFBLoginRequest>(() => new CSFBLoginRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFBLoginRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[226]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFBLoginRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFBLoginRequest(CSFBLoginRequest other) : this() {
    accessToken_ = other.accessToken_;
    fbId_ = other.fbId_;
    expiresIn_ = other.expiresIn_;
    deviceId_ = other.deviceId_;
    osType_ = other.osType_;
    ad_ = other.ad_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFBLoginRequest Clone() {
    return new CSFBLoginRequest(this);
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 1;
  private string accessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fbId" field.</summary>
  public const int FbIdFieldNumber = 2;
  private string fbId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FbId {
    get { return fbId_; }
    set {
      fbId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "expiresIn" field.</summary>
  public const int ExpiresInFieldNumber = 3;
  private long expiresIn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpiresIn {
    get { return expiresIn_; }
    set {
      expiresIn_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 4;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "osType" field.</summary>
  public const int OsTypeFieldNumber = 5;
  private global::OsType osType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OsType OsType {
    get { return osType_; }
    set {
      osType_ = value;
    }
  }

  /// <summary>Field number for the "ad" field.</summary>
  public const int AdFieldNumber = 6;
  private string ad_ = "";
  /// <summary>
  ///广告投放
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ad {
    get { return ad_; }
    set {
      ad_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFBLoginRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFBLoginRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AccessToken != other.AccessToken) return false;
    if (FbId != other.FbId) return false;
    if (ExpiresIn != other.ExpiresIn) return false;
    if (DeviceId != other.DeviceId) return false;
    if (OsType != other.OsType) return false;
    if (Ad != other.Ad) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
    if (FbId.Length != 0) hash ^= FbId.GetHashCode();
    if (ExpiresIn != 0L) hash ^= ExpiresIn.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (OsType != 0) hash ^= OsType.GetHashCode();
    if (Ad.Length != 0) hash ^= Ad.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (AccessToken.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(AccessToken);
    }
    if (FbId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(FbId);
    }
    if (ExpiresIn != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(ExpiresIn);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DeviceId);
    }
    if (OsType != 0) {
      output.WriteRawTag(40);
      output.WriteEnum((int) OsType);
    }
    if (Ad.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Ad);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (AccessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (FbId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FbId);
    }
    if (ExpiresIn != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresIn);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (OsType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OsType);
    }
    if (Ad.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ad);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFBLoginRequest other) {
    if (other == null) {
      return;
    }
    if (other.AccessToken.Length != 0) {
      AccessToken = other.AccessToken;
    }
    if (other.FbId.Length != 0) {
      FbId = other.FbId;
    }
    if (other.ExpiresIn != 0L) {
      ExpiresIn = other.ExpiresIn;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.OsType != 0) {
      OsType = other.OsType;
    }
    if (other.Ad.Length != 0) {
      Ad = other.Ad;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AccessToken = input.ReadString();
          break;
        }
        case 18: {
          FbId = input.ReadString();
          break;
        }
        case 24: {
          ExpiresIn = input.ReadInt64();
          break;
        }
        case 34: {
          DeviceId = input.ReadString();
          break;
        }
        case 40: {
          osType_ = (global::OsType) input.ReadEnum();
          break;
        }
        case 50: {
          Ad = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFBLoginResponse : pb::IMessage<SCFBLoginResponse> {
  private static readonly pb::MessageParser<SCFBLoginResponse> _parser = new pb::MessageParser<SCFBLoginResponse>(() => new SCFBLoginResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFBLoginResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[227]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFBLoginResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFBLoginResponse(SCFBLoginResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    identify_ = other.identify_;
    longLifeAcessToken_ = other.longLifeAcessToken_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFBLoginResponse Clone() {
    return new SCFBLoginResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "identify" field.</summary>
  public const int IdentifyFieldNumber = 2;
  private string identify_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identify {
    get { return identify_; }
    set {
      identify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "longLifeAcessToken" field.</summary>
  public const int LongLifeAcessTokenFieldNumber = 3;
  private string longLifeAcessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LongLifeAcessToken {
    get { return longLifeAcessToken_; }
    set {
      longLifeAcessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFBLoginResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFBLoginResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (Identify != other.Identify) return false;
    if (LongLifeAcessToken != other.LongLifeAcessToken) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (Identify.Length != 0) hash ^= Identify.GetHashCode();
    if (LongLifeAcessToken.Length != 0) hash ^= LongLifeAcessToken.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (Identify.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Identify);
    }
    if (LongLifeAcessToken.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(LongLifeAcessToken);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (Identify.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identify);
    }
    if (LongLifeAcessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LongLifeAcessToken);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFBLoginResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.Identify.Length != 0) {
      Identify = other.Identify;
    }
    if (other.LongLifeAcessToken.Length != 0) {
      LongLifeAcessToken = other.LongLifeAcessToken;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          Identify = input.ReadString();
          break;
        }
        case 26: {
          LongLifeAcessToken = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///facebook 绑定
/// </summary>
public sealed partial class CSFBBindRequest : pb::IMessage<CSFBBindRequest> {
  private static readonly pb::MessageParser<CSFBBindRequest> _parser = new pb::MessageParser<CSFBBindRequest>(() => new CSFBBindRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSFBBindRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[228]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFBBindRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFBBindRequest(CSFBBindRequest other) : this() {
    identify_ = other.identify_;
    accessToken_ = other.accessToken_;
    fbId_ = other.fbId_;
    expiresIn_ = other.expiresIn_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSFBBindRequest Clone() {
    return new CSFBBindRequest(this);
  }

  /// <summary>Field number for the "identify" field.</summary>
  public const int IdentifyFieldNumber = 1;
  private string identify_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identify {
    get { return identify_; }
    set {
      identify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "accessToken" field.</summary>
  public const int AccessTokenFieldNumber = 2;
  private string accessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessToken {
    get { return accessToken_; }
    set {
      accessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fbId" field.</summary>
  public const int FbIdFieldNumber = 3;
  private string fbId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FbId {
    get { return fbId_; }
    set {
      fbId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "expiresIn" field.</summary>
  public const int ExpiresInFieldNumber = 4;
  private long expiresIn_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ExpiresIn {
    get { return expiresIn_; }
    set {
      expiresIn_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSFBBindRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSFBBindRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Identify != other.Identify) return false;
    if (AccessToken != other.AccessToken) return false;
    if (FbId != other.FbId) return false;
    if (ExpiresIn != other.ExpiresIn) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Identify.Length != 0) hash ^= Identify.GetHashCode();
    if (AccessToken.Length != 0) hash ^= AccessToken.GetHashCode();
    if (FbId.Length != 0) hash ^= FbId.GetHashCode();
    if (ExpiresIn != 0L) hash ^= ExpiresIn.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Identify.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Identify);
    }
    if (AccessToken.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(AccessToken);
    }
    if (FbId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(FbId);
    }
    if (ExpiresIn != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(ExpiresIn);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Identify.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identify);
    }
    if (AccessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessToken);
    }
    if (FbId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FbId);
    }
    if (ExpiresIn != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpiresIn);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSFBBindRequest other) {
    if (other == null) {
      return;
    }
    if (other.Identify.Length != 0) {
      Identify = other.Identify;
    }
    if (other.AccessToken.Length != 0) {
      AccessToken = other.AccessToken;
    }
    if (other.FbId.Length != 0) {
      FbId = other.FbId;
    }
    if (other.ExpiresIn != 0L) {
      ExpiresIn = other.ExpiresIn;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Identify = input.ReadString();
          break;
        }
        case 18: {
          AccessToken = input.ReadString();
          break;
        }
        case 26: {
          FbId = input.ReadString();
          break;
        }
        case 32: {
          ExpiresIn = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCFBBindResponse : pb::IMessage<SCFBBindResponse> {
  private static readonly pb::MessageParser<SCFBBindResponse> _parser = new pb::MessageParser<SCFBBindResponse>(() => new SCFBBindResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCFBBindResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[229]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFBBindResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFBBindResponse(SCFBBindResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    identify_ = other.identify_;
    longLifeAcessToken_ = other.longLifeAcessToken_;
    hasBeenBinded_ = other.hasBeenBinded_;
    id_ = other.id_;
    name_ = other.name_;
    level_ = other.level_;
    cashCount_ = other.cashCount_;
    icon_ = other.icon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCFBBindResponse Clone() {
    return new SCFBBindResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "identify" field.</summary>
  public const int IdentifyFieldNumber = 2;
  private string identify_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Identify {
    get { return identify_; }
    set {
      identify_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "longLifeAcessToken" field.</summary>
  public const int LongLifeAcessTokenFieldNumber = 3;
  private string longLifeAcessToken_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string LongLifeAcessToken {
    get { return longLifeAcessToken_; }
    set {
      longLifeAcessToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hasBeenBinded" field.</summary>
  public const int HasBeenBindedFieldNumber = 4;
  private bool hasBeenBinded_;
  /// <summary>
  ///是否以前绑定过 如果绑定过，上面的identify是以前号的
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBeenBinded {
    get { return hasBeenBinded_; }
    set {
      hasBeenBinded_ = value;
    }
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 5;
  private long id_;
  /// <summary>
  ///以下三项，曾经绑定过才有，推的是老号信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 7;
  private int level_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { return level_; }
    set {
      level_ = value;
    }
  }

  /// <summary>Field number for the "cashCount" field.</summary>
  public const int CashCountFieldNumber = 8;
  private int cashCount_;
  /// <summary>
  ///奖励钞票个数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CashCount {
    get { return cashCount_; }
    set {
      cashCount_ = value;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 9;
  private string icon_ = "";
  /// <summary>
  ///头像
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCFBBindResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCFBBindResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (Identify != other.Identify) return false;
    if (LongLifeAcessToken != other.LongLifeAcessToken) return false;
    if (HasBeenBinded != other.HasBeenBinded) return false;
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Level != other.Level) return false;
    if (CashCount != other.CashCount) return false;
    if (Icon != other.Icon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (Identify.Length != 0) hash ^= Identify.GetHashCode();
    if (LongLifeAcessToken.Length != 0) hash ^= LongLifeAcessToken.GetHashCode();
    if (HasBeenBinded != false) hash ^= HasBeenBinded.GetHashCode();
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Level != 0) hash ^= Level.GetHashCode();
    if (CashCount != 0) hash ^= CashCount.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (Identify.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Identify);
    }
    if (LongLifeAcessToken.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(LongLifeAcessToken);
    }
    if (HasBeenBinded != false) {
      output.WriteRawTag(32);
      output.WriteBool(HasBeenBinded);
    }
    if (Id != 0L) {
      output.WriteRawTag(40);
      output.WriteInt64(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (Level != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(Level);
    }
    if (CashCount != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CashCount);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Icon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (Identify.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Identify);
    }
    if (LongLifeAcessToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(LongLifeAcessToken);
    }
    if (HasBeenBinded != false) {
      size += 1 + 1;
    }
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Level != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (CashCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CashCount);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCFBBindResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.Identify.Length != 0) {
      Identify = other.Identify;
    }
    if (other.LongLifeAcessToken.Length != 0) {
      LongLifeAcessToken = other.LongLifeAcessToken;
    }
    if (other.HasBeenBinded != false) {
      HasBeenBinded = other.HasBeenBinded;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Level != 0) {
      Level = other.Level;
    }
    if (other.CashCount != 0) {
      CashCount = other.CashCount;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 18: {
          Identify = input.ReadString();
          break;
        }
        case 26: {
          LongLifeAcessToken = input.ReadString();
          break;
        }
        case 32: {
          HasBeenBinded = input.ReadBool();
          break;
        }
        case 40: {
          Id = input.ReadInt64();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 56: {
          Level = input.ReadInt32();
          break;
        }
        case 64: {
          CashCount = input.ReadInt32();
          break;
        }
        case 74: {
          Icon = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCIdentifyCheckMuiltyMessage : pb::IMessage<SCIdentifyCheckMuiltyMessage> {
  private static readonly pb::MessageParser<SCIdentifyCheckMuiltyMessage> _parser = new pb::MessageParser<SCIdentifyCheckMuiltyMessage>(() => new SCIdentifyCheckMuiltyMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCIdentifyCheckMuiltyMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[230]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIdentifyCheckMuiltyMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIdentifyCheckMuiltyMessage(SCIdentifyCheckMuiltyMessage other) : this() {
    contents_ = other.contents_.Clone();
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCIdentifyCheckMuiltyMessage Clone() {
    return new SCIdentifyCheckMuiltyMessage(this);
  }

  /// <summary>Field number for the "contents" field.</summary>
  public const int ContentsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::IdentifyCheckResponseContent> _repeated_contents_codec
      = pb::FieldCodec.ForMessage(10, global::IdentifyCheckResponseContent.Parser);
  private readonly pbc::RepeatedField<global::IdentifyCheckResponseContent> contents_ = new pbc::RepeatedField<global::IdentifyCheckResponseContent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::IdentifyCheckResponseContent> Contents {
    get { return contents_; }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 2;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCIdentifyCheckMuiltyMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCIdentifyCheckMuiltyMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!contents_.Equals(other.contents_)) return false;
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= contents_.GetHashCode();
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    contents_.WriteTo(output, _repeated_contents_codec);
    if (status_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += contents_.CalculateSize(_repeated_contents_codec);
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCIdentifyCheckMuiltyMessage other) {
    if (other == null) {
      return;
    }
    contents_.Add(other.contents_);
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          contents_.AddEntriesFrom(input, _repeated_contents_codec);
          break;
        }
        case 18: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

public sealed partial class IdentifyCheckResponseContent : pb::IMessage<IdentifyCheckResponseContent> {
  private static readonly pb::MessageParser<IdentifyCheckResponseContent> _parser = new pb::MessageParser<IdentifyCheckResponseContent>(() => new IdentifyCheckResponseContent());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<IdentifyCheckResponseContent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[231]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyCheckResponseContent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyCheckResponseContent(IdentifyCheckResponseContent other) : this() {
    msgId_ = other.msgId_;
    data_ = other.data_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public IdentifyCheckResponseContent Clone() {
    return new IdentifyCheckResponseContent(this);
  }

  /// <summary>Field number for the "msgId" field.</summary>
  public const int MsgIdFieldNumber = 1;
  private int msgId_;
  /// <summary>
  ///相关内容的msgId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MsgId {
    get { return msgId_; }
    set {
      msgId_ = value;
    }
  }

  /// <summary>Field number for the "data" field.</summary>
  public const int DataFieldNumber = 2;
  private string data_ = "";
  /// <summary>
  ///相关byte[]，base64编码为string
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Data {
    get { return data_; }
    set {
      data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as IdentifyCheckResponseContent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(IdentifyCheckResponseContent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MsgId != other.MsgId) return false;
    if (Data != other.Data) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (MsgId != 0) hash ^= MsgId.GetHashCode();
    if (Data.Length != 0) hash ^= Data.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (MsgId != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MsgId);
    }
    if (Data.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Data);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (MsgId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgId);
    }
    if (Data.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(IdentifyCheckResponseContent other) {
    if (other == null) {
      return;
    }
    if (other.MsgId != 0) {
      MsgId = other.MsgId;
    }
    if (other.Data.Length != 0) {
      Data = other.Data;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MsgId = input.ReadInt32();
          break;
        }
        case 18: {
          Data = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*卖物品
/// </summary>
public sealed partial class PlayerPropSellRequest : pb::IMessage<PlayerPropSellRequest> {
  private static readonly pb::MessageParser<PlayerPropSellRequest> _parser = new pb::MessageParser<PlayerPropSellRequest>(() => new PlayerPropSellRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPropSellRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[232]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropSellRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropSellRequest(PlayerPropSellRequest other) : this() {
    playerProps_ = other.playerProps_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropSellRequest Clone() {
    return new PlayerPropSellRequest(this);
  }

  /// <summary>Field number for the "playerProps" field.</summary>
  public const int PlayerPropsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerPropMsg> _repeated_playerProps_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerPropMsg.Parser);
  private readonly pbc::RepeatedField<global::PlayerPropMsg> playerProps_ = new pbc::RepeatedField<global::PlayerPropMsg>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerPropMsg> PlayerProps {
    get { return playerProps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPropSellRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPropSellRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!playerProps_.Equals(other.playerProps_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= playerProps_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    playerProps_.WriteTo(output, _repeated_playerProps_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += playerProps_.CalculateSize(_repeated_playerProps_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPropSellRequest other) {
    if (other == null) {
      return;
    }
    playerProps_.Add(other.playerProps_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          playerProps_.AddEntriesFrom(input, _repeated_playerProps_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerPropSellResposne : pb::IMessage<PlayerPropSellResposne> {
  private static readonly pb::MessageParser<PlayerPropSellResposne> _parser = new pb::MessageParser<PlayerPropSellResposne>(() => new PlayerPropSellResposne());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerPropSellResposne> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[233]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropSellResposne() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropSellResposne(PlayerPropSellResposne other) : this() {
    ReponseStatus = other.reponseStatus_ != null ? other.ReponseStatus.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerPropSellResposne Clone() {
    return new PlayerPropSellResposne(this);
  }

  /// <summary>Field number for the "reponseStatus" field.</summary>
  public const int ReponseStatusFieldNumber = 1;
  private global::ResponseStatus reponseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ReponseStatus {
    get { return reponseStatus_; }
    set {
      reponseStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerPropSellResposne);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerPropSellResposne other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ReponseStatus, other.ReponseStatus)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (reponseStatus_ != null) hash ^= ReponseStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (reponseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ReponseStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (reponseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReponseStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerPropSellResposne other) {
    if (other == null) {
      return;
    }
    if (other.reponseStatus_ != null) {
      if (reponseStatus_ == null) {
        reponseStatus_ = new global::ResponseStatus();
      }
      ReponseStatus.MergeFrom(other.ReponseStatus);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (reponseStatus_ == null) {
            reponseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(reponseStatus_);
          break;
        }
      }
    }
  }

}

public sealed partial class CSDropReq : pb::IMessage<CSDropReq> {
  private static readonly pb::MessageParser<CSDropReq> _parser = new pb::MessageParser<CSDropReq>(() => new CSDropReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSDropReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[234]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSDropReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSDropReq(CSDropReq other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSDropReq Clone() {
    return new CSDropReq(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSDropReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSDropReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSDropReq other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SCDropResp : pb::IMessage<SCDropResp> {
  private static readonly pb::MessageParser<SCDropResp> _parser = new pb::MessageParser<SCDropResp>(() => new SCDropResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCDropResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[235]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCDropResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCDropResp(SCDropResp other) : this() {
    dropInfos_ = other.dropInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCDropResp Clone() {
    return new SCDropResp(this);
  }

  /// <summary>Field number for the "dropInfos" field.</summary>
  public const int DropInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DropInfo> _repeated_dropInfos_codec
      = pb::FieldCodec.ForMessage(10, global::DropInfo.Parser);
  private readonly pbc::RepeatedField<global::DropInfo> dropInfos_ = new pbc::RepeatedField<global::DropInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DropInfo> DropInfos {
    get { return dropInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCDropResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCDropResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dropInfos_.Equals(other.dropInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dropInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dropInfos_.WriteTo(output, _repeated_dropInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dropInfos_.CalculateSize(_repeated_dropInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCDropResp other) {
    if (other == null) {
      return;
    }
    dropInfos_.Add(other.dropInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          dropInfos_.AddEntriesFrom(input, _repeated_dropInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SCAutoOpenGiftDropResp : pb::IMessage<SCAutoOpenGiftDropResp> {
  private static readonly pb::MessageParser<SCAutoOpenGiftDropResp> _parser = new pb::MessageParser<SCAutoOpenGiftDropResp>(() => new SCAutoOpenGiftDropResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCAutoOpenGiftDropResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[236]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAutoOpenGiftDropResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAutoOpenGiftDropResp(SCAutoOpenGiftDropResp other) : this() {
    dropInfos_ = other.dropInfos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAutoOpenGiftDropResp Clone() {
    return new SCAutoOpenGiftDropResp(this);
  }

  /// <summary>Field number for the "dropInfos" field.</summary>
  public const int DropInfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::DropInfo> _repeated_dropInfos_codec
      = pb::FieldCodec.ForMessage(10, global::DropInfo.Parser);
  private readonly pbc::RepeatedField<global::DropInfo> dropInfos_ = new pbc::RepeatedField<global::DropInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DropInfo> DropInfos {
    get { return dropInfos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCAutoOpenGiftDropResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCAutoOpenGiftDropResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!dropInfos_.Equals(other.dropInfos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= dropInfos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    dropInfos_.WriteTo(output, _repeated_dropInfos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += dropInfos_.CalculateSize(_repeated_dropInfos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCAutoOpenGiftDropResp other) {
    if (other == null) {
      return;
    }
    dropInfos_.Add(other.dropInfos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          dropInfos_.AddEntriesFrom(input, _repeated_dropInfos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class DropInfo : pb::IMessage<DropInfo> {
  private static readonly pb::MessageParser<DropInfo> _parser = new pb::MessageParser<DropInfo>(() => new DropInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DropInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[237]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DropInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DropInfo(DropInfo other) : this() {
    propId_ = other.propId_;
    count_ = other.count_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DropInfo Clone() {
    return new DropInfo(this);
  }

  /// <summary>Field number for the "propId" field.</summary>
  public const int PropIdFieldNumber = 1;
  private long propId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PropId {
    get { return propId_; }
    set {
      propId_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private int count_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DropInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DropInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PropId != other.PropId) return false;
    if (Count != other.Count) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PropId != 0L) hash ^= PropId.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PropId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PropId);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PropId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PropId);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DropInfo other) {
    if (other == null) {
      return;
    }
    if (other.PropId != 0L) {
      PropId = other.PropId;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PropId = input.ReadInt64();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*对话完成*
/// </summary>
public sealed partial class CSChatFinishRequest : pb::IMessage<CSChatFinishRequest> {
  private static readonly pb::MessageParser<CSChatFinishRequest> _parser = new pb::MessageParser<CSChatFinishRequest>(() => new CSChatFinishRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSChatFinishRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[238]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChatFinishRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChatFinishRequest(CSChatFinishRequest other) : this() {
    chatId_ = other.chatId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSChatFinishRequest Clone() {
    return new CSChatFinishRequest(this);
  }

  /// <summary>Field number for the "chatId" field.</summary>
  public const int ChatIdFieldNumber = 1;
  private long chatId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChatId {
    get { return chatId_; }
    set {
      chatId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSChatFinishRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSChatFinishRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ChatId != other.ChatId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ChatId != 0L) hash ^= ChatId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ChatId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(ChatId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ChatId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChatId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSChatFinishRequest other) {
    if (other == null) {
      return;
    }
    if (other.ChatId != 0L) {
      ChatId = other.ChatId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ChatId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCChatFinishResponse : pb::IMessage<SCChatFinishResponse> {
  private static readonly pb::MessageParser<SCChatFinishResponse> _parser = new pb::MessageParser<SCChatFinishResponse>(() => new SCChatFinishResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCChatFinishResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[239]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChatFinishResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChatFinishResponse(SCChatFinishResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCChatFinishResponse Clone() {
    return new SCChatFinishResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCChatFinishResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCChatFinishResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCChatFinishResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
      }
    }
  }

}

public sealed partial class CSGetAllRewardedTasksRequest : pb::IMessage<CSGetAllRewardedTasksRequest> {
  private static readonly pb::MessageParser<CSGetAllRewardedTasksRequest> _parser = new pb::MessageParser<CSGetAllRewardedTasksRequest>(() => new CSGetAllRewardedTasksRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSGetAllRewardedTasksRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[240]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetAllRewardedTasksRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetAllRewardedTasksRequest(CSGetAllRewardedTasksRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetAllRewardedTasksRequest Clone() {
    return new CSGetAllRewardedTasksRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSGetAllRewardedTasksRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSGetAllRewardedTasksRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSGetAllRewardedTasksRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCGetAllRewardedTasksResponse : pb::IMessage<SCGetAllRewardedTasksResponse> {
  private static readonly pb::MessageParser<SCGetAllRewardedTasksResponse> _parser = new pb::MessageParser<SCGetAllRewardedTasksResponse>(() => new SCGetAllRewardedTasksResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCGetAllRewardedTasksResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[241]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetAllRewardedTasksResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetAllRewardedTasksResponse(SCGetAllRewardedTasksResponse other) : this() {
    tasks_ = other.tasks_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetAllRewardedTasksResponse Clone() {
    return new SCGetAllRewardedTasksResponse(this);
  }

  /// <summary>Field number for the "tasks" field.</summary>
  public const int TasksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::TaskIdTypeInfo> _repeated_tasks_codec
      = pb::FieldCodec.ForMessage(10, global::TaskIdTypeInfo.Parser);
  private readonly pbc::RepeatedField<global::TaskIdTypeInfo> tasks_ = new pbc::RepeatedField<global::TaskIdTypeInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::TaskIdTypeInfo> Tasks {
    get { return tasks_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCGetAllRewardedTasksResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCGetAllRewardedTasksResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!tasks_.Equals(other.tasks_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= tasks_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    tasks_.WriteTo(output, _repeated_tasks_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += tasks_.CalculateSize(_repeated_tasks_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCGetAllRewardedTasksResponse other) {
    if (other == null) {
      return;
    }
    tasks_.Add(other.tasks_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          tasks_.AddEntriesFrom(input, _repeated_tasks_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TaskIdTypeInfo : pb::IMessage<TaskIdTypeInfo> {
  private static readonly pb::MessageParser<TaskIdTypeInfo> _parser = new pb::MessageParser<TaskIdTypeInfo>(() => new TaskIdTypeInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TaskIdTypeInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[242]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskIdTypeInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskIdTypeInfo(TaskIdTypeInfo other) : this() {
    taskId_ = other.taskId_;
    chapterId_ = other.chapterId_;
    taskType_ = other.taskType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TaskIdTypeInfo Clone() {
    return new TaskIdTypeInfo(this);
  }

  /// <summary>Field number for the "taskId" field.</summary>
  public const int TaskIdFieldNumber = 1;
  private long taskId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long TaskId {
    get { return taskId_; }
    set {
      taskId_ = value;
    }
  }

  /// <summary>Field number for the "chapterId" field.</summary>
  public const int ChapterIdFieldNumber = 2;
  private long chapterId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ChapterId {
    get { return chapterId_; }
    set {
      chapterId_ = value;
    }
  }

  /// <summary>Field number for the "taskType" field.</summary>
  public const int TaskTypeFieldNumber = 3;
  private int taskType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TaskType {
    get { return taskType_; }
    set {
      taskType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TaskIdTypeInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TaskIdTypeInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TaskId != other.TaskId) return false;
    if (ChapterId != other.ChapterId) return false;
    if (TaskType != other.TaskType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TaskId != 0L) hash ^= TaskId.GetHashCode();
    if (ChapterId != 0L) hash ^= ChapterId.GetHashCode();
    if (TaskType != 0) hash ^= TaskType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TaskId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(TaskId);
    }
    if (ChapterId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(ChapterId);
    }
    if (TaskType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TaskType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TaskId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(TaskId);
    }
    if (ChapterId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChapterId);
    }
    if (TaskType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TaskType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TaskIdTypeInfo other) {
    if (other == null) {
      return;
    }
    if (other.TaskId != 0L) {
      TaskId = other.TaskId;
    }
    if (other.ChapterId != 0L) {
      ChapterId = other.ChapterId;
    }
    if (other.TaskType != 0) {
      TaskType = other.TaskType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TaskId = input.ReadInt64();
          break;
        }
        case 16: {
          ChapterId = input.ReadInt64();
          break;
        }
        case 24: {
          TaskType = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSPlayerCheckInInfoReq : pb::IMessage<CSPlayerCheckInInfoReq> {
  private static readonly pb::MessageParser<CSPlayerCheckInInfoReq> _parser = new pb::MessageParser<CSPlayerCheckInInfoReq>(() => new CSPlayerCheckInInfoReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerCheckInInfoReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[243]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerCheckInInfoReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerCheckInInfoReq(CSPlayerCheckInInfoReq other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerCheckInInfoReq Clone() {
    return new CSPlayerCheckInInfoReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerCheckInInfoReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerCheckInInfoReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerCheckInInfoReq other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCPlayerCheckInInfoResp : pb::IMessage<SCPlayerCheckInInfoResp> {
  private static readonly pb::MessageParser<SCPlayerCheckInInfoResp> _parser = new pb::MessageParser<SCPlayerCheckInInfoResp>(() => new SCPlayerCheckInInfoResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerCheckInInfoResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[244]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerCheckInInfoResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerCheckInInfoResp(SCPlayerCheckInInfoResp other) : this() {
    id_ = other.id_;
    day_ = other.day_;
    status_ = other.status_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerCheckInInfoResp Clone() {
    return new SCPlayerCheckInInfoResp(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 2;
  private int day_;
  /// <summary>
  ///当前签到的周期数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Day {
    get { return day_; }
    set {
      day_ = value;
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///当天是否已签到
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerCheckInInfoResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerCheckInInfoResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Day != other.Day) return false;
    if (Status != other.Status) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Day != 0) hash ^= Day.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Day != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Day);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Day != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Day);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerCheckInInfoResp other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Day != 0) {
      Day = other.Day;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 16: {
          Day = input.ReadInt32();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class CSPlayerCheckInReq : pb::IMessage<CSPlayerCheckInReq> {
  private static readonly pb::MessageParser<CSPlayerCheckInReq> _parser = new pb::MessageParser<CSPlayerCheckInReq>(() => new CSPlayerCheckInReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerCheckInReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[245]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerCheckInReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerCheckInReq(CSPlayerCheckInReq other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerCheckInReq Clone() {
    return new CSPlayerCheckInReq(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerCheckInReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerCheckInReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerCheckInReq other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCPlayerCheckInResp : pb::IMessage<SCPlayerCheckInResp> {
  private static readonly pb::MessageParser<SCPlayerCheckInResp> _parser = new pb::MessageParser<SCPlayerCheckInResp>(() => new SCPlayerCheckInResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerCheckInResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[246]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerCheckInResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerCheckInResp(SCPlayerCheckInResp other) : this() {
    result_ = other.result_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerCheckInResp Clone() {
    return new SCPlayerCheckInResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  /// <summary>
  ///1成功，2表示已签到，3表示失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerCheckInResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerCheckInResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerCheckInResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*更换头像请求
/// </summary>
public sealed partial class CSPlayerRenewIconReq : pb::IMessage<CSPlayerRenewIconReq> {
  private static readonly pb::MessageParser<CSPlayerRenewIconReq> _parser = new pb::MessageParser<CSPlayerRenewIconReq>(() => new CSPlayerRenewIconReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerRenewIconReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[247]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerRenewIconReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerRenewIconReq(CSPlayerRenewIconReq other) : this() {
    newIcon_ = other.newIcon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerRenewIconReq Clone() {
    return new CSPlayerRenewIconReq(this);
  }

  /// <summary>Field number for the "newIcon" field.</summary>
  public const int NewIconFieldNumber = 1;
  private string newIcon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewIcon {
    get { return newIcon_; }
    set {
      newIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerRenewIconReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerRenewIconReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NewIcon != other.NewIcon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (NewIcon.Length != 0) hash ^= NewIcon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (NewIcon.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(NewIcon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (NewIcon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewIcon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerRenewIconReq other) {
    if (other == null) {
      return;
    }
    if (other.NewIcon.Length != 0) {
      NewIcon = other.NewIcon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          NewIcon = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///*更换头像结果 0是失败，1是成功
/// </summary>
public sealed partial class SCPlayerRenewIconResp : pb::IMessage<SCPlayerRenewIconResp> {
  private static readonly pb::MessageParser<SCPlayerRenewIconResp> _parser = new pb::MessageParser<SCPlayerRenewIconResp>(() => new SCPlayerRenewIconResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerRenewIconResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[248]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerRenewIconResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerRenewIconResp(SCPlayerRenewIconResp other) : this() {
    result_ = other.result_;
    newIcon_ = other.newIcon_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerRenewIconResp Clone() {
    return new SCPlayerRenewIconResp(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private int result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "newIcon" field.</summary>
  public const int NewIconFieldNumber = 2;
  private string newIcon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NewIcon {
    get { return newIcon_; }
    set {
      newIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerRenewIconResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerRenewIconResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Result != other.Result) return false;
    if (NewIcon != other.NewIcon) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Result != 0) hash ^= Result.GetHashCode();
    if (NewIcon.Length != 0) hash ^= NewIcon.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Result != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Result);
    }
    if (NewIcon.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(NewIcon);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Result != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
    }
    if (NewIcon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NewIcon);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerRenewIconResp other) {
    if (other == null) {
      return;
    }
    if (other.Result != 0) {
      Result = other.Result;
    }
    if (other.NewIcon.Length != 0) {
      NewIcon = other.NewIcon;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Result = input.ReadInt32();
          break;
        }
        case 18: {
          NewIcon = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCPlayerUpLevel : pb::IMessage<SCPlayerUpLevel> {
  private static readonly pb::MessageParser<SCPlayerUpLevel> _parser = new pb::MessageParser<SCPlayerUpLevel>(() => new SCPlayerUpLevel());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerUpLevel> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[249]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerUpLevel() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerUpLevel(SCPlayerUpLevel other) : this() {
    oldLevel_ = other.oldLevel_;
    newLevel_ = other.newLevel_;
    rewards_ = other.rewards_.Clone();
    unLockBuildId_ = other.unLockBuildId_;
    PushInfo = other.pushInfo_ != null ? other.PushInfo.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerUpLevel Clone() {
    return new SCPlayerUpLevel(this);
  }

  /// <summary>Field number for the "oldLevel" field.</summary>
  public const int OldLevelFieldNumber = 1;
  private int oldLevel_;
  /// <summary>
  ///原等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OldLevel {
    get { return oldLevel_; }
    set {
      oldLevel_ = value;
    }
  }

  /// <summary>Field number for the "newLevel" field.</summary>
  public const int NewLevelFieldNumber = 2;
  private int newLevel_;
  /// <summary>
  ///现等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int NewLevel {
    get { return newLevel_; }
    set {
      newLevel_ = value;
    }
  }

  /// <summary>Field number for the "rewards" field.</summary>
  public const int RewardsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::RewardItem> _repeated_rewards_codec
      = pb::FieldCodec.ForMessage(26, global::RewardItem.Parser);
  private readonly pbc::RepeatedField<global::RewardItem> rewards_ = new pbc::RepeatedField<global::RewardItem>();
  /// <summary>
  ///奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RewardItem> Rewards {
    get { return rewards_; }
  }

  /// <summary>Field number for the "unLockBuildId" field.</summary>
  public const int UnLockBuildIdFieldNumber = 4;
  private long unLockBuildId_;
  /// <summary>
  ///解锁建筑
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UnLockBuildId {
    get { return unLockBuildId_; }
    set {
      unLockBuildId_ = value;
    }
  }

  /// <summary>Field number for the "pushInfo" field.</summary>
  public const int PushInfoFieldNumber = 5;
  private global::Push_Info pushInfo_;
  /// <summary>
  ///礼包推送 自动类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Push_Info PushInfo {
    get { return pushInfo_; }
    set {
      pushInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerUpLevel);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerUpLevel other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (OldLevel != other.OldLevel) return false;
    if (NewLevel != other.NewLevel) return false;
    if(!rewards_.Equals(other.rewards_)) return false;
    if (UnLockBuildId != other.UnLockBuildId) return false;
    if (!object.Equals(PushInfo, other.PushInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (OldLevel != 0) hash ^= OldLevel.GetHashCode();
    if (NewLevel != 0) hash ^= NewLevel.GetHashCode();
    hash ^= rewards_.GetHashCode();
    if (UnLockBuildId != 0L) hash ^= UnLockBuildId.GetHashCode();
    if (pushInfo_ != null) hash ^= PushInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (OldLevel != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(OldLevel);
    }
    if (NewLevel != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(NewLevel);
    }
    rewards_.WriteTo(output, _repeated_rewards_codec);
    if (UnLockBuildId != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(UnLockBuildId);
    }
    if (pushInfo_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(PushInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (OldLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OldLevel);
    }
    if (NewLevel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NewLevel);
    }
    size += rewards_.CalculateSize(_repeated_rewards_codec);
    if (UnLockBuildId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UnLockBuildId);
    }
    if (pushInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PushInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerUpLevel other) {
    if (other == null) {
      return;
    }
    if (other.OldLevel != 0) {
      OldLevel = other.OldLevel;
    }
    if (other.NewLevel != 0) {
      NewLevel = other.NewLevel;
    }
    rewards_.Add(other.rewards_);
    if (other.UnLockBuildId != 0L) {
      UnLockBuildId = other.UnLockBuildId;
    }
    if (other.pushInfo_ != null) {
      if (pushInfo_ == null) {
        pushInfo_ = new global::Push_Info();
      }
      PushInfo.MergeFrom(other.PushInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          OldLevel = input.ReadInt32();
          break;
        }
        case 16: {
          NewLevel = input.ReadInt32();
          break;
        }
        case 26: {
          rewards_.AddEntriesFrom(input, _repeated_rewards_codec);
          break;
        }
        case 32: {
          UnLockBuildId = input.ReadInt64();
          break;
        }
        case 42: {
          if (pushInfo_ == null) {
            pushInfo_ = new global::Push_Info();
          }
          input.ReadMessage(pushInfo_);
          break;
        }
      }
    }
  }

}

public sealed partial class CSPlayerGuildRequest : pb::IMessage<CSPlayerGuildRequest> {
  private static readonly pb::MessageParser<CSPlayerGuildRequest> _parser = new pb::MessageParser<CSPlayerGuildRequest>(() => new CSPlayerGuildRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerGuildRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[250]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerGuildRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerGuildRequest(CSPlayerGuildRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerGuildRequest Clone() {
    return new CSPlayerGuildRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerGuildRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerGuildRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerGuildRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCPlayerGuildResponse : pb::IMessage<SCPlayerGuildResponse> {
  private static readonly pb::MessageParser<SCPlayerGuildResponse> _parser = new pb::MessageParser<SCPlayerGuildResponse>(() => new SCPlayerGuildResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerGuildResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[251]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerGuildResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerGuildResponse(SCPlayerGuildResponse other) : this() {
    guild_ = other.guild_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerGuildResponse Clone() {
    return new SCPlayerGuildResponse(this);
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 1;
  private string guild_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guild {
    get { return guild_; }
    set {
      guild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerGuildResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerGuildResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Guild != other.Guild) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Guild.Length != 0) hash ^= Guild.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Guild.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Guild);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Guild.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guild);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerGuildResponse other) {
    if (other == null) {
      return;
    }
    if (other.Guild.Length != 0) {
      Guild = other.Guild;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Guild = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSPlayerGuildUpdateRequest : pb::IMessage<CSPlayerGuildUpdateRequest> {
  private static readonly pb::MessageParser<CSPlayerGuildUpdateRequest> _parser = new pb::MessageParser<CSPlayerGuildUpdateRequest>(() => new CSPlayerGuildUpdateRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerGuildUpdateRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[252]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerGuildUpdateRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerGuildUpdateRequest(CSPlayerGuildUpdateRequest other) : this() {
    guild_ = other.guild_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerGuildUpdateRequest Clone() {
    return new CSPlayerGuildUpdateRequest(this);
  }

  /// <summary>Field number for the "guild" field.</summary>
  public const int GuildFieldNumber = 1;
  private string guild_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guild {
    get { return guild_; }
    set {
      guild_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerGuildUpdateRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerGuildUpdateRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Guild != other.Guild) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Guild.Length != 0) hash ^= Guild.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Guild.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Guild);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Guild.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guild);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerGuildUpdateRequest other) {
    if (other == null) {
      return;
    }
    if (other.Guild.Length != 0) {
      Guild = other.Guild;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Guild = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSPlayerFeedbackRequest : pb::IMessage<CSPlayerFeedbackRequest> {
  private static readonly pb::MessageParser<CSPlayerFeedbackRequest> _parser = new pb::MessageParser<CSPlayerFeedbackRequest>(() => new CSPlayerFeedbackRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSPlayerFeedbackRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[253]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerFeedbackRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerFeedbackRequest(CSPlayerFeedbackRequest other) : this() {
    content_ = other.content_;
    platform_ = other.platform_;
    release_ = other.release_;
    feedbackType_ = other.feedbackType_;
    email_ = other.email_;
    information_ = other.information_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSPlayerFeedbackRequest Clone() {
    return new CSPlayerFeedbackRequest(this);
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 1;
  private string content_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Content {
    get { return content_; }
    set {
      content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 2;
  private string platform_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Platform {
    get { return platform_; }
    set {
      platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "release" field.</summary>
  public const int ReleaseFieldNumber = 3;
  private string release_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Release {
    get { return release_; }
    set {
      release_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "feedbackType" field.</summary>
  public const int FeedbackTypeFieldNumber = 4;
  private global::FeedbackType feedbackType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FeedbackType FeedbackType {
    get { return feedbackType_; }
    set {
      feedbackType_ = value;
    }
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 5;
  private string email_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Email {
    get { return email_; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "information" field.</summary>
  public const int InformationFieldNumber = 6;
  private string information_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Information {
    get { return information_; }
    set {
      information_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSPlayerFeedbackRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSPlayerFeedbackRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Content != other.Content) return false;
    if (Platform != other.Platform) return false;
    if (Release != other.Release) return false;
    if (FeedbackType != other.FeedbackType) return false;
    if (Email != other.Email) return false;
    if (Information != other.Information) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Content.Length != 0) hash ^= Content.GetHashCode();
    if (Platform.Length != 0) hash ^= Platform.GetHashCode();
    if (Release.Length != 0) hash ^= Release.GetHashCode();
    if (FeedbackType != 0) hash ^= FeedbackType.GetHashCode();
    if (Email.Length != 0) hash ^= Email.GetHashCode();
    if (Information.Length != 0) hash ^= Information.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Content.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Content);
    }
    if (Platform.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Platform);
    }
    if (Release.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Release);
    }
    if (FeedbackType != 0) {
      output.WriteRawTag(32);
      output.WriteEnum((int) FeedbackType);
    }
    if (Email.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Email);
    }
    if (Information.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Information);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Content.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
    }
    if (Platform.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
    }
    if (Release.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Release);
    }
    if (FeedbackType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FeedbackType);
    }
    if (Email.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (Information.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Information);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSPlayerFeedbackRequest other) {
    if (other == null) {
      return;
    }
    if (other.Content.Length != 0) {
      Content = other.Content;
    }
    if (other.Platform.Length != 0) {
      Platform = other.Platform;
    }
    if (other.Release.Length != 0) {
      Release = other.Release;
    }
    if (other.FeedbackType != 0) {
      FeedbackType = other.FeedbackType;
    }
    if (other.Email.Length != 0) {
      Email = other.Email;
    }
    if (other.Information.Length != 0) {
      Information = other.Information;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Content = input.ReadString();
          break;
        }
        case 18: {
          Platform = input.ReadString();
          break;
        }
        case 26: {
          Release = input.ReadString();
          break;
        }
        case 32: {
          feedbackType_ = (global::FeedbackType) input.ReadEnum();
          break;
        }
        case 42: {
          Email = input.ReadString();
          break;
        }
        case 50: {
          Information = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCPlayerFeedbackResponse : pb::IMessage<SCPlayerFeedbackResponse> {
  private static readonly pb::MessageParser<SCPlayerFeedbackResponse> _parser = new pb::MessageParser<SCPlayerFeedbackResponse>(() => new SCPlayerFeedbackResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCPlayerFeedbackResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[254]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerFeedbackResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerFeedbackResponse(SCPlayerFeedbackResponse other) : this() {
    Status = other.status_ != null ? other.Status.Clone() : null;
    nextAvailableTime_ = other.nextAvailableTime_;
    timeLeft_ = other.timeLeft_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCPlayerFeedbackResponse Clone() {
    return new SCPlayerFeedbackResponse(this);
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 1;
  private global::ResponseStatus status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "nextAvailableTime" field.</summary>
  public const int NextAvailableTimeFieldNumber = 2;
  private long nextAvailableTime_;
  /// <summary>
  ///成功后，下次可提交时间。
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NextAvailableTime {
    get { return nextAvailableTime_; }
    set {
      nextAvailableTime_ = value;
    }
  }

  /// <summary>Field number for the "timeLeft" field.</summary>
  public const int TimeLeftFieldNumber = 3;
  private int timeLeft_;
  /// <summary>
  ///失败后，可以提交次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimeLeft {
    get { return timeLeft_; }
    set {
      timeLeft_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCPlayerFeedbackResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCPlayerFeedbackResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Status, other.Status)) return false;
    if (NextAvailableTime != other.NextAvailableTime) return false;
    if (TimeLeft != other.TimeLeft) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (status_ != null) hash ^= Status.GetHashCode();
    if (NextAvailableTime != 0L) hash ^= NextAvailableTime.GetHashCode();
    if (TimeLeft != 0) hash ^= TimeLeft.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (status_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Status);
    }
    if (NextAvailableTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(NextAvailableTime);
    }
    if (TimeLeft != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(TimeLeft);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (status_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Status);
    }
    if (NextAvailableTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextAvailableTime);
    }
    if (TimeLeft != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeLeft);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCPlayerFeedbackResponse other) {
    if (other == null) {
      return;
    }
    if (other.status_ != null) {
      if (status_ == null) {
        status_ = new global::ResponseStatus();
      }
      Status.MergeFrom(other.Status);
    }
    if (other.NextAvailableTime != 0L) {
      NextAvailableTime = other.NextAvailableTime;
    }
    if (other.TimeLeft != 0) {
      TimeLeft = other.TimeLeft;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (status_ == null) {
            status_ = new global::ResponseStatus();
          }
          input.ReadMessage(status_);
          break;
        }
        case 16: {
          NextAvailableTime = input.ReadInt64();
          break;
        }
        case 24: {
          TimeLeft = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*新解锁成就*
/// </summary>
public sealed partial class SCAchievementUnlockResponse : pb::IMessage<SCAchievementUnlockResponse> {
  private static readonly pb::MessageParser<SCAchievementUnlockResponse> _parser = new pb::MessageParser<SCAchievementUnlockResponse>(() => new SCAchievementUnlockResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCAchievementUnlockResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[255]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementUnlockResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementUnlockResponse(SCAchievementUnlockResponse other) : this() {
    id_ = other.id_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCAchievementUnlockResponse Clone() {
    return new SCAchievementUnlockResponse(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCAchievementUnlockResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCAchievementUnlockResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCAchievementUnlockResponse other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCActivityNewResponse : pb::IMessage<SCActivityNewResponse> {
  private static readonly pb::MessageParser<SCActivityNewResponse> _parser = new pb::MessageParser<SCActivityNewResponse>(() => new SCActivityNewResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCActivityNewResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[256]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityNewResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityNewResponse(SCActivityNewResponse other) : this() {
    haveNew_ = other.haveNew_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCActivityNewResponse Clone() {
    return new SCActivityNewResponse(this);
  }

  /// <summary>Field number for the "haveNew" field.</summary>
  public const int HaveNewFieldNumber = 1;
  private int haveNew_;
  /// <summary>
  ///>1 表示有新活动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int HaveNew {
    get { return haveNew_; }
    set {
      haveNew_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCActivityNewResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCActivityNewResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HaveNew != other.HaveNew) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HaveNew != 0) hash ^= HaveNew.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HaveNew != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(HaveNew);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HaveNew != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HaveNew);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCActivityNewResponse other) {
    if (other == null) {
      return;
    }
    if (other.HaveNew != 0) {
      HaveNew = other.HaveNew;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          HaveNew = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///*掉线重连
/// </summary>
public sealed partial class CSSceneReconnectRequest : pb::IMessage<CSSceneReconnectRequest> {
  private static readonly pb::MessageParser<CSSceneReconnectRequest> _parser = new pb::MessageParser<CSSceneReconnectRequest>(() => new CSSceneReconnectRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneReconnectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[257]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneReconnectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneReconnectRequest(CSSceneReconnectRequest other) : this() {
    sceneId_ = other.sceneId_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneReconnectRequest Clone() {
    return new CSSceneReconnectRequest(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 2;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneReconnectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneReconnectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SceneId);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(StartTime);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneReconnectRequest other) {
    if (other == null) {
      return;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneId = input.ReadInt64();
          break;
        }
        case 16: {
          StartTime = input.ReadInt64();
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCSceneReconnectResponse : pb::IMessage<SCSceneReconnectResponse> {
  private static readonly pb::MessageParser<SCSceneReconnectResponse> _parser = new pb::MessageParser<SCSceneReconnectResponse>(() => new SCSceneReconnectResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneReconnectResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[258]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneReconnectResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneReconnectResponse(SCSceneReconnectResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneReconnectResponse Clone() {
    return new SCSceneReconnectResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneReconnectResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneReconnectResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneReconnectResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
      }
    }
  }

}

/// <summary>
///同步难度
/// </summary>
public sealed partial class CSSceneDifficultyReq : pb::IMessage<CSSceneDifficultyReq> {
  private static readonly pb::MessageParser<CSSceneDifficultyReq> _parser = new pb::MessageParser<CSSceneDifficultyReq>(() => new CSSceneDifficultyReq());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSSceneDifficultyReq> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[259]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneDifficultyReq() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneDifficultyReq(CSSceneDifficultyReq other) : this() {
    bigIds_ = other.bigIds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSSceneDifficultyReq Clone() {
    return new CSSceneDifficultyReq(this);
  }

  /// <summary>Field number for the "bigIds" field.</summary>
  public const int BigIdsFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_bigIds_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> bigIds_ = new pbc::RepeatedField<long>();
  /// <summary>
  ///场景大ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> BigIds {
    get { return bigIds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSSceneDifficultyReq);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSSceneDifficultyReq other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!bigIds_.Equals(other.bigIds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= bigIds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    bigIds_.WriteTo(output, _repeated_bigIds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += bigIds_.CalculateSize(_repeated_bigIds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSSceneDifficultyReq other) {
    if (other == null) {
      return;
    }
    bigIds_.Add(other.bigIds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          bigIds_.AddEntriesFrom(input, _repeated_bigIds_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class SceneDifficultyInfo : pb::IMessage<SceneDifficultyInfo> {
  private static readonly pb::MessageParser<SceneDifficultyInfo> _parser = new pb::MessageParser<SceneDifficultyInfo>(() => new SceneDifficultyInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneDifficultyInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[260]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneDifficultyInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneDifficultyInfo(SceneDifficultyInfo other) : this() {
    bigId_ = other.bigId_;
    difficulty_ = other.difficulty_;
    exp_ = other.exp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneDifficultyInfo Clone() {
    return new SceneDifficultyInfo(this);
  }

  /// <summary>Field number for the "bigId" field.</summary>
  public const int BigIdFieldNumber = 1;
  private long bigId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BigId {
    get { return bigId_; }
    set {
      bigId_ = value;
    }
  }

  /// <summary>Field number for the "difficulty" field.</summary>
  public const int DifficultyFieldNumber = 2;
  private int difficulty_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Difficulty {
    get { return difficulty_; }
    set {
      difficulty_ = value;
    }
  }

  /// <summary>Field number for the "exp" field.</summary>
  public const int ExpFieldNumber = 3;
  private int exp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Exp {
    get { return exp_; }
    set {
      exp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneDifficultyInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneDifficultyInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BigId != other.BigId) return false;
    if (Difficulty != other.Difficulty) return false;
    if (Exp != other.Exp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (BigId != 0L) hash ^= BigId.GetHashCode();
    if (Difficulty != 0) hash ^= Difficulty.GetHashCode();
    if (Exp != 0) hash ^= Exp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (BigId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(BigId);
    }
    if (Difficulty != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Difficulty);
    }
    if (Exp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Exp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (BigId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BigId);
    }
    if (Difficulty != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficulty);
    }
    if (Exp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Exp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneDifficultyInfo other) {
    if (other == null) {
      return;
    }
    if (other.BigId != 0L) {
      BigId = other.BigId;
    }
    if (other.Difficulty != 0) {
      Difficulty = other.Difficulty;
    }
    if (other.Exp != 0) {
      Exp = other.Exp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BigId = input.ReadInt64();
          break;
        }
        case 16: {
          Difficulty = input.ReadInt32();
          break;
        }
        case 24: {
          Exp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///同步难度返回
/// </summary>
public sealed partial class SCSceneDifficultyResp : pb::IMessage<SCSceneDifficultyResp> {
  private static readonly pb::MessageParser<SCSceneDifficultyResp> _parser = new pb::MessageParser<SCSceneDifficultyResp>(() => new SCSceneDifficultyResp());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCSceneDifficultyResp> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[261]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneDifficultyResp() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneDifficultyResp(SCSceneDifficultyResp other) : this() {
    infos_ = other.infos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCSceneDifficultyResp Clone() {
    return new SCSceneDifficultyResp(this);
  }

  /// <summary>Field number for the "infos" field.</summary>
  public const int InfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SceneDifficultyInfo> _repeated_infos_codec
      = pb::FieldCodec.ForMessage(10, global::SceneDifficultyInfo.Parser);
  private readonly pbc::RepeatedField<global::SceneDifficultyInfo> infos_ = new pbc::RepeatedField<global::SceneDifficultyInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneDifficultyInfo> Infos {
    get { return infos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCSceneDifficultyResp);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCSceneDifficultyResp other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!infos_.Equals(other.infos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= infos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    infos_.WriteTo(output, _repeated_infos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += infos_.CalculateSize(_repeated_infos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCSceneDifficultyResp other) {
    if (other == null) {
      return;
    }
    infos_.Add(other.infos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          infos_.AddEntriesFrom(input, _repeated_infos_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///*掉线重连
/// </summary>
public sealed partial class CSJigsawReconnectRequest : pb::IMessage<CSJigsawReconnectRequest> {
  private static readonly pb::MessageParser<CSJigsawReconnectRequest> _parser = new pb::MessageParser<CSJigsawReconnectRequest>(() => new CSJigsawReconnectRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSJigsawReconnectRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[262]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSJigsawReconnectRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSJigsawReconnectRequest(CSJigsawReconnectRequest other) : this() {
    sceneId_ = other.sceneId_;
    startTime_ = other.startTime_;
    endTime_ = other.endTime_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSJigsawReconnectRequest Clone() {
    return new CSJigsawReconnectRequest(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private long sceneId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = value;
    }
  }

  /// <summary>Field number for the "startTime" field.</summary>
  public const int StartTimeFieldNumber = 2;
  private long startTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long StartTime {
    get { return startTime_; }
    set {
      startTime_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private long endTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSJigsawReconnectRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSJigsawReconnectRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (StartTime != other.StartTime) return false;
    if (EndTime != other.EndTime) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId != 0L) hash ^= SceneId.GetHashCode();
    if (StartTime != 0L) hash ^= StartTime.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(SceneId);
    }
    if (StartTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(StartTime);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(SceneId);
    }
    if (StartTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSJigsawReconnectRequest other) {
    if (other == null) {
      return;
    }
    if (other.SceneId != 0L) {
      SceneId = other.SceneId;
    }
    if (other.StartTime != 0L) {
      StartTime = other.StartTime;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          SceneId = input.ReadInt64();
          break;
        }
        case 16: {
          StartTime = input.ReadInt64();
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCJigsawReconnectResponse : pb::IMessage<SCJigsawReconnectResponse> {
  private static readonly pb::MessageParser<SCJigsawReconnectResponse> _parser = new pb::MessageParser<SCJigsawReconnectResponse>(() => new SCJigsawReconnectResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCJigsawReconnectResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[263]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCJigsawReconnectResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCJigsawReconnectResponse(SCJigsawReconnectResponse other) : this() {
    ResponseStatus = other.responseStatus_ != null ? other.ResponseStatus.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCJigsawReconnectResponse Clone() {
    return new SCJigsawReconnectResponse(this);
  }

  /// <summary>Field number for the "responseStatus" field.</summary>
  public const int ResponseStatusFieldNumber = 1;
  private global::ResponseStatus responseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_; }
    set {
      responseStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCJigsawReconnectResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCJigsawReconnectResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ResponseStatus, other.ResponseStatus)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (responseStatus_ != null) hash ^= ResponseStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (responseStatus_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ResponseStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (responseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResponseStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCJigsawReconnectResponse other) {
    if (other == null) {
      return;
    }
    if (other.responseStatus_ != null) {
      if (responseStatus_ == null) {
        responseStatus_ = new global::ResponseStatus();
      }
      ResponseStatus.MergeFrom(other.ResponseStatus);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (responseStatus_ == null) {
            responseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(responseStatus_);
          break;
        }
      }
    }
  }

}

public sealed partial class ServiceConfigInfo : pb::IMessage<ServiceConfigInfo> {
  private static readonly pb::MessageParser<ServiceConfigInfo> _parser = new pb::MessageParser<ServiceConfigInfo>(() => new ServiceConfigInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServiceConfigInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[264]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceConfigInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceConfigInfo(ServiceConfigInfo other) : this() {
    key_ = other.key_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServiceConfigInfo Clone() {
    return new ServiceConfigInfo(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private string key_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Key {
    get { return key_; }
    set {
      key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServiceConfigInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServiceConfigInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Key.Length != 0) hash ^= Key.GetHashCode();
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Key.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Key);
    }
    if (Value.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Key.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
    }
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServiceConfigInfo other) {
    if (other == null) {
      return;
    }
    if (other.Key.Length != 0) {
      Key = other.Key;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Key = input.ReadString();
          break;
        }
        case 18: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSGetServiceConfigRequest : pb::IMessage<CSGetServiceConfigRequest> {
  private static readonly pb::MessageParser<CSGetServiceConfigRequest> _parser = new pb::MessageParser<CSGetServiceConfigRequest>(() => new CSGetServiceConfigRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSGetServiceConfigRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[265]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetServiceConfigRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetServiceConfigRequest(CSGetServiceConfigRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetServiceConfigRequest Clone() {
    return new CSGetServiceConfigRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSGetServiceConfigRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSGetServiceConfigRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSGetServiceConfigRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCGetServiceConfigResponse : pb::IMessage<SCGetServiceConfigResponse> {
  private static readonly pb::MessageParser<SCGetServiceConfigResponse> _parser = new pb::MessageParser<SCGetServiceConfigResponse>(() => new SCGetServiceConfigResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCGetServiceConfigResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[266]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetServiceConfigResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetServiceConfigResponse(SCGetServiceConfigResponse other) : this() {
    info_ = other.info_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetServiceConfigResponse Clone() {
    return new SCGetServiceConfigResponse(this);
  }

  /// <summary>Field number for the "info" field.</summary>
  public const int InfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ServiceConfigInfo> _repeated_info_codec
      = pb::FieldCodec.ForMessage(10, global::ServiceConfigInfo.Parser);
  private readonly pbc::RepeatedField<global::ServiceConfigInfo> info_ = new pbc::RepeatedField<global::ServiceConfigInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServiceConfigInfo> Info {
    get { return info_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCGetServiceConfigResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCGetServiceConfigResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!info_.Equals(other.info_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= info_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    info_.WriteTo(output, _repeated_info_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += info_.CalculateSize(_repeated_info_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCGetServiceConfigResponse other) {
    if (other == null) {
      return;
    }
    info_.Add(other.info_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          info_.AddEntriesFrom(input, _repeated_info_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CSGetServiceConfigSingleRequest : pb::IMessage<CSGetServiceConfigSingleRequest> {
  private static readonly pb::MessageParser<CSGetServiceConfigSingleRequest> _parser = new pb::MessageParser<CSGetServiceConfigSingleRequest>(() => new CSGetServiceConfigSingleRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSGetServiceConfigSingleRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[267]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetServiceConfigSingleRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetServiceConfigSingleRequest(CSGetServiceConfigSingleRequest other) : this() {
    key_ = other.key_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetServiceConfigSingleRequest Clone() {
    return new CSGetServiceConfigSingleRequest(this);
  }

  /// <summary>Field number for the "key" field.</summary>
  public const int KeyFieldNumber = 1;
  private string key_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Key {
    get { return key_; }
    set {
      key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSGetServiceConfigSingleRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSGetServiceConfigSingleRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Key != other.Key) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Key.Length != 0) hash ^= Key.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Key.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Key);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Key.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSGetServiceConfigSingleRequest other) {
    if (other == null) {
      return;
    }
    if (other.Key.Length != 0) {
      Key = other.Key;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Key = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCGetServiceConfigSingleResponse : pb::IMessage<SCGetServiceConfigSingleResponse> {
  private static readonly pb::MessageParser<SCGetServiceConfigSingleResponse> _parser = new pb::MessageParser<SCGetServiceConfigSingleResponse>(() => new SCGetServiceConfigSingleResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCGetServiceConfigSingleResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[268]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetServiceConfigSingleResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetServiceConfigSingleResponse(SCGetServiceConfigSingleResponse other) : this() {
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetServiceConfigSingleResponse Clone() {
    return new SCGetServiceConfigSingleResponse(this);
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 1;
  private string value_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Value {
    get { return value_; }
    set {
      value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCGetServiceConfigSingleResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCGetServiceConfigSingleResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Value != other.Value) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Value.Length != 0) hash ^= Value.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Value.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Value.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCGetServiceConfigSingleResponse other) {
    if (other == null) {
      return;
    }
    if (other.Value.Length != 0) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Value = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class GetPathInfo : pb::IMessage<GetPathInfo> {
  private static readonly pb::MessageParser<GetPathInfo> _parser = new pb::MessageParser<GetPathInfo>(() => new GetPathInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetPathInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[269]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPathInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPathInfo(GetPathInfo other) : this() {
    id_ = other.id_;
    path_ = other.path_;
    status_ = other.status_;
    version_ = other.version_;
    plat_ = other.plat_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetPathInfo Clone() {
    return new GetPathInfo(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private long id_;
  /// <summary>
  ///id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "path" field.</summary>
  public const int PathFieldNumber = 2;
  private string path_ = "";
  /// <summary>
  ///地址
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Path {
    get { return path_; }
    set {
      path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private int status_;
  /// <summary>
  ///状态
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Status {
    get { return status_; }
    set {
      status_ = value;
    }
  }

  /// <summary>Field number for the "version" field.</summary>
  public const int VersionFieldNumber = 4;
  private string version_ = "";
  /// <summary>
  ///版本号
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Version {
    get { return version_; }
    set {
      version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "plat" field.</summary>
  public const int PlatFieldNumber = 5;
  private string plat_ = "";
  /// <summary>
  ///平台
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Plat {
    get { return plat_; }
    set {
      plat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetPathInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetPathInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Path != other.Path) return false;
    if (Status != other.Status) return false;
    if (Version != other.Version) return false;
    if (Plat != other.Plat) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0L) hash ^= Id.GetHashCode();
    if (Path.Length != 0) hash ^= Path.GetHashCode();
    if (Status != 0) hash ^= Status.GetHashCode();
    if (Version.Length != 0) hash ^= Version.GetHashCode();
    if (Plat.Length != 0) hash ^= Plat.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Id);
    }
    if (Path.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Path);
    }
    if (Status != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Status);
    }
    if (Version.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Version);
    }
    if (Plat.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Plat);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
    }
    if (Path.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
    }
    if (Status != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
    }
    if (Version.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
    }
    if (Plat.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Plat);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetPathInfo other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0L) {
      Id = other.Id;
    }
    if (other.Path.Length != 0) {
      Path = other.Path;
    }
    if (other.Status != 0) {
      Status = other.Status;
    }
    if (other.Version.Length != 0) {
      Version = other.Version;
    }
    if (other.Plat.Length != 0) {
      Plat = other.Plat;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt64();
          break;
        }
        case 18: {
          Path = input.ReadString();
          break;
        }
        case 24: {
          Status = input.ReadInt32();
          break;
        }
        case 34: {
          Version = input.ReadString();
          break;
        }
        case 42: {
          Plat = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CSGetPathConfigRequest : pb::IMessage<CSGetPathConfigRequest> {
  private static readonly pb::MessageParser<CSGetPathConfigRequest> _parser = new pb::MessageParser<CSGetPathConfigRequest>(() => new CSGetPathConfigRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSGetPathConfigRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[270]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetPathConfigRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetPathConfigRequest(CSGetPathConfigRequest other) : this() {
    plat_ = other.plat_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetPathConfigRequest Clone() {
    return new CSGetPathConfigRequest(this);
  }

  /// <summary>Field number for the "plat" field.</summary>
  public const int PlatFieldNumber = 1;
  private string plat_ = "";
  /// <summary>
  ///平台
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Plat {
    get { return plat_; }
    set {
      plat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSGetPathConfigRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSGetPathConfigRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Plat != other.Plat) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Plat.Length != 0) hash ^= Plat.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Plat.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Plat);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Plat.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Plat);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSGetPathConfigRequest other) {
    if (other == null) {
      return;
    }
    if (other.Plat.Length != 0) {
      Plat = other.Plat;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Plat = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SCGetPathConfigResponse : pb::IMessage<SCGetPathConfigResponse> {
  private static readonly pb::MessageParser<SCGetPathConfigResponse> _parser = new pb::MessageParser<SCGetPathConfigResponse>(() => new SCGetPathConfigResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCGetPathConfigResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[271]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetPathConfigResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetPathConfigResponse(SCGetPathConfigResponse other) : this() {
    Infos = other.infos_ != null ? other.Infos.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetPathConfigResponse Clone() {
    return new SCGetPathConfigResponse(this);
  }

  /// <summary>Field number for the "infos" field.</summary>
  public const int InfosFieldNumber = 1;
  private global::GetPathInfo infos_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetPathInfo Infos {
    get { return infos_; }
    set {
      infos_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCGetPathConfigResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCGetPathConfigResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Infos, other.Infos)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (infos_ != null) hash ^= Infos.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (infos_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Infos);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (infos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Infos);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCGetPathConfigResponse other) {
    if (other == null) {
      return;
    }
    if (other.infos_ != null) {
      if (infos_ == null) {
        infos_ = new global::GetPathInfo();
      }
      Infos.MergeFrom(other.Infos);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (infos_ == null) {
            infos_ = new global::GetPathInfo();
          }
          input.ReadMessage(infos_);
          break;
        }
      }
    }
  }

}

public sealed partial class CSClientLogRequest : pb::IMessage<CSClientLogRequest> {
  private static readonly pb::MessageParser<CSClientLogRequest> _parser = new pb::MessageParser<CSClientLogRequest>(() => new CSClientLogRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSClientLogRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[272]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSClientLogRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSClientLogRequest(CSClientLogRequest other) : this() {
    eventName_ = other.eventName_;
    value4Sum_ = other.value4Sum_;
    params_ = other.params_;
    playerId_ = other.playerId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSClientLogRequest Clone() {
    return new CSClientLogRequest(this);
  }

  /// <summary>Field number for the "event_name" field.</summary>
  public const int EventNameFieldNumber = 1;
  private string eventName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string EventName {
    get { return eventName_; }
    set {
      eventName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "value4sum" field.</summary>
  public const int Value4SumFieldNumber = 2;
  private float value4Sum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Value4Sum {
    get { return value4Sum_; }
    set {
      value4Sum_ = value;
    }
  }

  /// <summary>Field number for the "params" field.</summary>
  public const int ParamsFieldNumber = 3;
  private string params_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Params {
    get { return params_; }
    set {
      params_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 4;
  private long playerId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { return playerId_; }
    set {
      playerId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSClientLogRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSClientLogRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EventName != other.EventName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value4Sum, other.Value4Sum)) return false;
    if (Params != other.Params) return false;
    if (PlayerId != other.PlayerId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EventName.Length != 0) hash ^= EventName.GetHashCode();
    if (Value4Sum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value4Sum);
    if (Params.Length != 0) hash ^= Params.GetHashCode();
    if (PlayerId != 0L) hash ^= PlayerId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EventName.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(EventName);
    }
    if (Value4Sum != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Value4Sum);
    }
    if (Params.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Params);
    }
    if (PlayerId != 0L) {
      output.WriteRawTag(32);
      output.WriteInt64(PlayerId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EventName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(EventName);
    }
    if (Value4Sum != 0F) {
      size += 1 + 4;
    }
    if (Params.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Params);
    }
    if (PlayerId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSClientLogRequest other) {
    if (other == null) {
      return;
    }
    if (other.EventName.Length != 0) {
      EventName = other.EventName;
    }
    if (other.Value4Sum != 0F) {
      Value4Sum = other.Value4Sum;
    }
    if (other.Params.Length != 0) {
      Params = other.Params;
    }
    if (other.PlayerId != 0L) {
      PlayerId = other.PlayerId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          EventName = input.ReadString();
          break;
        }
        case 21: {
          Value4Sum = input.ReadFloat();
          break;
        }
        case 26: {
          Params = input.ReadString();
          break;
        }
        case 32: {
          PlayerId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SceneRewardComprise : pb::IMessage<SceneRewardComprise> {
  private static readonly pb::MessageParser<SceneRewardComprise> _parser = new pb::MessageParser<SceneRewardComprise>(() => new SceneRewardComprise());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneRewardComprise> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[273]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneRewardComprise() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneRewardComprise(SceneRewardComprise other) : this() {
    type_ = other.type_;
    outputCoin_ = other.outputCoin_;
    outputCash_ = other.outputCash_;
    outputVit_ = other.outputVit_;
    outputExp_ = other.outputExp_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneRewardComprise Clone() {
    return new SceneRewardComprise(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///1 基础  2;//警员技能3;//头衔BUFF4;//寻物时间奖励 5点击次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "outputCoin" field.</summary>
  public const int OutputCoinFieldNumber = 2;
  private int outputCoin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputCoin {
    get { return outputCoin_; }
    set {
      outputCoin_ = value;
    }
  }

  /// <summary>Field number for the "outputCash" field.</summary>
  public const int OutputCashFieldNumber = 3;
  private int outputCash_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputCash {
    get { return outputCash_; }
    set {
      outputCash_ = value;
    }
  }

  /// <summary>Field number for the "outputVit" field.</summary>
  public const int OutputVitFieldNumber = 4;
  private int outputVit_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputVit {
    get { return outputVit_; }
    set {
      outputVit_ = value;
    }
  }

  /// <summary>Field number for the "outputExp" field.</summary>
  public const int OutputExpFieldNumber = 5;
  private int outputExp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int OutputExp {
    get { return outputExp_; }
    set {
      outputExp_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneRewardComprise);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneRewardComprise other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (OutputCoin != other.OutputCoin) return false;
    if (OutputCash != other.OutputCash) return false;
    if (OutputVit != other.OutputVit) return false;
    if (OutputExp != other.OutputExp) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (OutputCoin != 0) hash ^= OutputCoin.GetHashCode();
    if (OutputCash != 0) hash ^= OutputCash.GetHashCode();
    if (OutputVit != 0) hash ^= OutputVit.GetHashCode();
    if (OutputExp != 0) hash ^= OutputExp.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (OutputCoin != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(OutputCoin);
    }
    if (OutputCash != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(OutputCash);
    }
    if (OutputVit != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(OutputVit);
    }
    if (OutputExp != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(OutputExp);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (OutputCoin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCoin);
    }
    if (OutputCash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputCash);
    }
    if (OutputVit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputVit);
    }
    if (OutputExp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputExp);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneRewardComprise other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.OutputCoin != 0) {
      OutputCoin = other.OutputCoin;
    }
    if (other.OutputCash != 0) {
      OutputCash = other.OutputCash;
    }
    if (other.OutputVit != 0) {
      OutputVit = other.OutputVit;
    }
    if (other.OutputExp != 0) {
      OutputExp = other.OutputExp;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          OutputCoin = input.ReadInt32();
          break;
        }
        case 24: {
          OutputCash = input.ReadInt32();
          break;
        }
        case 32: {
          OutputVit = input.ReadInt32();
          break;
        }
        case 40: {
          OutputExp = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Push_Info : pb::IMessage<Push_Info> {
  private static readonly pb::MessageParser<Push_Info> _parser = new pb::MessageParser<Push_Info>(() => new Push_Info());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Push_Info> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[274]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Push_Info() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Push_Info(Push_Info other) : this() {
    type_ = other.type_;
    pushId_ = other.pushId_;
    endTime_ = other.endTime_;
    buyed_ = other.buyed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Push_Info Clone() {
    return new Push_Info(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private int type_;
  /// <summary>
  ///类型 1为手动 2为自动
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "pushId" field.</summary>
  public const int PushIdFieldNumber = 2;
  private long pushId_;
  /// <summary>
  ///推送ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PushId {
    get { return pushId_; }
    set {
      pushId_ = value;
    }
  }

  /// <summary>Field number for the "endTime" field.</summary>
  public const int EndTimeFieldNumber = 3;
  private long endTime_;
  /// <summary>
  ///结束时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long EndTime {
    get { return endTime_; }
    set {
      endTime_ = value;
    }
  }

  /// <summary>Field number for the "buyed" field.</summary>
  public const int BuyedFieldNumber = 4;
  private bool buyed_;
  /// <summary>
  ///是否已购买
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Buyed {
    get { return buyed_; }
    set {
      buyed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Push_Info);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Push_Info other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (PushId != other.PushId) return false;
    if (EndTime != other.EndTime) return false;
    if (Buyed != other.Buyed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (PushId != 0L) hash ^= PushId.GetHashCode();
    if (EndTime != 0L) hash ^= EndTime.GetHashCode();
    if (Buyed != false) hash ^= Buyed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Type);
    }
    if (PushId != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(PushId);
    }
    if (EndTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(EndTime);
    }
    if (Buyed != false) {
      output.WriteRawTag(32);
      output.WriteBool(Buyed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
    }
    if (PushId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushId);
    }
    if (EndTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
    }
    if (Buyed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Push_Info other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.PushId != 0L) {
      PushId = other.PushId;
    }
    if (other.EndTime != 0L) {
      EndTime = other.EndTime;
    }
    if (other.Buyed != false) {
      Buyed = other.Buyed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = input.ReadInt32();
          break;
        }
        case 16: {
          PushId = input.ReadInt64();
          break;
        }
        case 24: {
          EndTime = input.ReadInt64();
          break;
        }
        case 32: {
          Buyed = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class CSGetPushRequest : pb::IMessage<CSGetPushRequest> {
  private static readonly pb::MessageParser<CSGetPushRequest> _parser = new pb::MessageParser<CSGetPushRequest>(() => new CSGetPushRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSGetPushRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[275]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetPushRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetPushRequest(CSGetPushRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSGetPushRequest Clone() {
    return new CSGetPushRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSGetPushRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSGetPushRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSGetPushRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCGetPushResponse : pb::IMessage<SCGetPushResponse> {
  private static readonly pb::MessageParser<SCGetPushResponse> _parser = new pb::MessageParser<SCGetPushResponse>(() => new SCGetPushResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCGetPushResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[276]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetPushResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetPushResponse(SCGetPushResponse other) : this() {
    infos_ = other.infos_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCGetPushResponse Clone() {
    return new SCGetPushResponse(this);
  }

  /// <summary>Field number for the "infos" field.</summary>
  public const int InfosFieldNumber = 1;
  private static readonly pb::FieldCodec<global::Push_Info> _repeated_infos_codec
      = pb::FieldCodec.ForMessage(10, global::Push_Info.Parser);
  private readonly pbc::RepeatedField<global::Push_Info> infos_ = new pbc::RepeatedField<global::Push_Info>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Push_Info> Infos {
    get { return infos_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCGetPushResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCGetPushResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!infos_.Equals(other.infos_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= infos_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    infos_.WriteTo(output, _repeated_infos_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += infos_.CalculateSize(_repeated_infos_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCGetPushResponse other) {
    if (other == null) {
      return;
    }
    infos_.Add(other.infos_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          infos_.AddEntriesFrom(input, _repeated_infos_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CSBuyPushRequest : pb::IMessage<CSBuyPushRequest> {
  private static readonly pb::MessageParser<CSBuyPushRequest> _parser = new pb::MessageParser<CSBuyPushRequest>(() => new CSBuyPushRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSBuyPushRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[277]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuyPushRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuyPushRequest(CSBuyPushRequest other) : this() {
    pushId_ = other.pushId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSBuyPushRequest Clone() {
    return new CSBuyPushRequest(this);
  }

  /// <summary>Field number for the "pushId" field.</summary>
  public const int PushIdFieldNumber = 1;
  private long pushId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PushId {
    get { return pushId_; }
    set {
      pushId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSBuyPushRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSBuyPushRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PushId != other.PushId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PushId != 0L) hash ^= PushId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PushId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PushId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PushId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSBuyPushRequest other) {
    if (other == null) {
      return;
    }
    if (other.PushId != 0L) {
      PushId = other.PushId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PushId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCBuyPushResponse : pb::IMessage<SCBuyPushResponse> {
  private static readonly pb::MessageParser<SCBuyPushResponse> _parser = new pb::MessageParser<SCBuyPushResponse>(() => new SCBuyPushResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCBuyPushResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[278]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuyPushResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuyPushResponse(SCBuyPushResponse other) : this() {
    pushId_ = other.pushId_;
    ReponseStatus = other.reponseStatus_ != null ? other.ReponseStatus.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCBuyPushResponse Clone() {
    return new SCBuyPushResponse(this);
  }

  /// <summary>Field number for the "pushId" field.</summary>
  public const int PushIdFieldNumber = 1;
  private long pushId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PushId {
    get { return pushId_; }
    set {
      pushId_ = value;
    }
  }

  /// <summary>Field number for the "reponseStatus" field.</summary>
  public const int ReponseStatusFieldNumber = 2;
  private global::ResponseStatus reponseStatus_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus ReponseStatus {
    get { return reponseStatus_; }
    set {
      reponseStatus_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCBuyPushResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCBuyPushResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PushId != other.PushId) return false;
    if (!object.Equals(ReponseStatus, other.ReponseStatus)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PushId != 0L) hash ^= PushId.GetHashCode();
    if (reponseStatus_ != null) hash ^= ReponseStatus.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PushId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(PushId);
    }
    if (reponseStatus_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ReponseStatus);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PushId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PushId);
    }
    if (reponseStatus_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReponseStatus);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCBuyPushResponse other) {
    if (other == null) {
      return;
    }
    if (other.PushId != 0L) {
      PushId = other.PushId;
    }
    if (other.reponseStatus_ != null) {
      if (reponseStatus_ == null) {
        reponseStatus_ = new global::ResponseStatus();
      }
      ReponseStatus.MergeFrom(other.ReponseStatus);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PushId = input.ReadInt64();
          break;
        }
        case 18: {
          if (reponseStatus_ == null) {
            reponseStatus_ = new global::ResponseStatus();
          }
          input.ReadMessage(reponseStatus_);
          break;
        }
      }
    }
  }

}

/// <summary>
///合成
/// </summary>
public sealed partial class CSCombineInfoRequest : pb::IMessage<CSCombineInfoRequest> {
  private static readonly pb::MessageParser<CSCombineInfoRequest> _parser = new pb::MessageParser<CSCombineInfoRequest>(() => new CSCombineInfoRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSCombineInfoRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[279]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCombineInfoRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCombineInfoRequest(CSCombineInfoRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCombineInfoRequest Clone() {
    return new CSCombineInfoRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSCombineInfoRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSCombineInfoRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSCombineInfoRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

public sealed partial class SCCombineInfoResponse : pb::IMessage<SCCombineInfoResponse> {
  private static readonly pb::MessageParser<SCCombineInfoResponse> _parser = new pb::MessageParser<SCCombineInfoResponse>(() => new SCCombineInfoResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCCombineInfoResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[280]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCombineInfoResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCombineInfoResponse(SCCombineInfoResponse other) : this() {
    combineId_ = other.combineId_.Clone();
    count_ = other.count_.Clone();
    countLimit_ = other.countLimit_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCombineInfoResponse Clone() {
    return new SCCombineInfoResponse(this);
  }

  /// <summary>Field number for the "combineId" field.</summary>
  public const int CombineIdFieldNumber = 1;
  private static readonly pb::FieldCodec<long> _repeated_combineId_codec
      = pb::FieldCodec.ForInt64(10);
  private readonly pbc::RepeatedField<long> combineId_ = new pbc::RepeatedField<long>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<long> CombineId {
    get { return combineId_; }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_count_codec
      = pb::FieldCodec.ForInt32(18);
  private readonly pbc::RepeatedField<int> count_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Count {
    get { return count_; }
  }

  /// <summary>Field number for the "countLimit" field.</summary>
  public const int CountLimitFieldNumber = 3;
  private static readonly pb::FieldCodec<int> _repeated_countLimit_codec
      = pb::FieldCodec.ForInt32(26);
  private readonly pbc::RepeatedField<int> countLimit_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> CountLimit {
    get { return countLimit_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCCombineInfoResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCCombineInfoResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!combineId_.Equals(other.combineId_)) return false;
    if(!count_.Equals(other.count_)) return false;
    if(!countLimit_.Equals(other.countLimit_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= combineId_.GetHashCode();
    hash ^= count_.GetHashCode();
    hash ^= countLimit_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    combineId_.WriteTo(output, _repeated_combineId_codec);
    count_.WriteTo(output, _repeated_count_codec);
    countLimit_.WriteTo(output, _repeated_countLimit_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += combineId_.CalculateSize(_repeated_combineId_codec);
    size += count_.CalculateSize(_repeated_count_codec);
    size += countLimit_.CalculateSize(_repeated_countLimit_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCCombineInfoResponse other) {
    if (other == null) {
      return;
    }
    combineId_.Add(other.combineId_);
    count_.Add(other.count_);
    countLimit_.Add(other.countLimit_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          combineId_.AddEntriesFrom(input, _repeated_combineId_codec);
          break;
        }
        case 18:
        case 16: {
          count_.AddEntriesFrom(input, _repeated_count_codec);
          break;
        }
        case 26:
        case 24: {
          countLimit_.AddEntriesFrom(input, _repeated_countLimit_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class CSCombineRequest : pb::IMessage<CSCombineRequest> {
  private static readonly pb::MessageParser<CSCombineRequest> _parser = new pb::MessageParser<CSCombineRequest>(() => new CSCombineRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CSCombineRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[281]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCombineRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCombineRequest(CSCombineRequest other) : this() {
    combineId_ = other.combineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CSCombineRequest Clone() {
    return new CSCombineRequest(this);
  }

  /// <summary>Field number for the "combineId" field.</summary>
  public const int CombineIdFieldNumber = 1;
  private long combineId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CombineId {
    get { return combineId_; }
    set {
      combineId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CSCombineRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CSCombineRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CombineId != other.CombineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CombineId != 0L) hash ^= CombineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CombineId != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(CombineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CombineId != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CombineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CSCombineRequest other) {
    if (other == null) {
      return;
    }
    if (other.CombineId != 0L) {
      CombineId = other.CombineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          CombineId = input.ReadInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SCCombineResponse : pb::IMessage<SCCombineResponse> {
  private static readonly pb::MessageParser<SCCombineResponse> _parser = new pb::MessageParser<SCCombineResponse>(() => new SCCombineResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SCCombineResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MsgReflection.Descriptor.MessageTypes[282]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCombineResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCombineResponse(SCCombineResponse other) : this() {
    Result = other.result_ != null ? other.Result.Clone() : null;
    success_ = other.success_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SCCombineResponse Clone() {
    return new SCCombineResponse(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::ResponseStatus result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ResponseStatus Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "success" field.</summary>
  public const int SuccessFieldNumber = 2;
  private bool success_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Success {
    get { return success_; }
    set {
      success_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SCCombineResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SCCombineResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (Success != other.Success) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (Success != false) hash ^= Success.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (Success != false) {
      output.WriteRawTag(16);
      output.WriteBool(Success);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (Success != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SCCombineResponse other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        result_ = new global::ResponseStatus();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.Success != false) {
      Success = other.Success;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            result_ = new global::ResponseStatus();
          }
          input.ReadMessage(result_);
          break;
        }
        case 16: {
          Success = input.ReadBool();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
