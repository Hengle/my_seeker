// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Msg {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_ExceptionResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ExceptionResponse, global::ExceptionResponse.Builder> internal__static_ExceptionResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ExceptionRemoteLoginResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ExceptionRemoteLoginResponse, global::ExceptionRemoteLoginResponse.Builder> internal__static_ExceptionRemoteLoginResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ResponseStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ResponseStatus, global::ResponseStatus.Builder> internal__static_ResponseStatus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GmAddAttr__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GmAddAttr, global::GmAddAttr.Builder> internal__static_GmAddAttr__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GmAddProp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GmAddProp, global::GmAddProp.Builder> internal__static_GmAddProp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GmFinishTask__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GmFinishTask, global::GmFinishTask.Builder> internal__static_GmFinishTask__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GmOfficer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GmOfficer, global::GmOfficer.Builder> internal__static_GmOfficer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GMGetPlayerMessageRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GMGetPlayerMessageRequest, global::GMGetPlayerMessageRequest.Builder> internal__static_GMGetPlayerMessageRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GMGetPlayerMessageResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GMGetPlayerMessageResponse, global::GMGetPlayerMessageResponse.Builder> internal__static_GMGetPlayerMessageResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEnterRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEnterRequest, global::CSEnterRequest.Builder> internal__static_CSEnterRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEnterResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEnterResponse, global::SCEnterResponse.Builder> internal__static_SCEnterResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSQuitRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSQuitRequest, global::CSQuitRequest.Builder> internal__static_CSQuitRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCQuitResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCQuitResponse, global::SCQuitResponse.Builder> internal__static_SCQuitResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSuspendRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSuspendRequest, global::CSSuspendRequest.Builder> internal__static_CSSuspendRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSuspendResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSuspendResponse, global::SCSuspendResponse.Builder> internal__static_SCSuspendResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSResumeRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSResumeRequest, global::CSResumeRequest.Builder> internal__static_CSResumeRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCResumeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCResumeResponse, global::SCResumeResponse.Builder> internal__static_SCResumeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSStartRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSStartRequest, global::CSStartRequest.Builder> internal__static_CSStartRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCStartResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCStartResponse, global::SCStartResponse.Builder> internal__static_SCStartResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFinishRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFinishRequest, global::CSFinishRequest.Builder> internal__static_CSFinishRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFinishResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFinishResponse, global::SCFinishResponse.Builder> internal__static_SCFinishResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Reward__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Reward, global::Reward.Builder> internal__static_Reward__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRegRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRegRequest, global::CSRegRequest.Builder> internal__static_CSRegRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRegResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRegResponse, global::SCRegResponse.Builder> internal__static_SCRegResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAuthRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAuthRequest, global::CSAuthRequest.Builder> internal__static_CSAuthRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAuthResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAuthResponse, global::SCAuthResponse.Builder> internal__static_SCAuthResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSloginRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSloginRequest, global::CSloginRequest.Builder> internal__static_CSloginRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCloginResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCloginResponse, global::SCloginResponse.Builder> internal__static_SCloginResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSChapterListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSChapterListRequest, global::CSChapterListRequest.Builder> internal__static_CSChapterListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCChapterListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCChapterListResponse, global::SCChapterListResponse.Builder> internal__static_SCChapterListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerChapterInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerChapterInfo, global::PlayerChapterInfo.Builder> internal__static_PlayerChapterInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSChapterDetailRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSChapterDetailRequest, global::CSChapterDetailRequest.Builder> internal__static_CSChapterDetailRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCChapterDetailResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCChapterDetailResponse, global::SCChapterDetailResponse.Builder> internal__static_SCChapterDetailResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ChapterNpcInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ChapterNpcInfo, global::ChapterNpcInfo.Builder> internal__static_ChapterNpcInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ChapterClueInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ChapterClueInfo, global::ChapterClueInfo.Builder> internal__static_ChapterClueInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ChapterSceneInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ChapterSceneInfo, global::ChapterSceneInfo.Builder> internal__static_ChapterSceneInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ChapterTaskInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ChapterTaskInfo, global::ChapterTaskInfo.Builder> internal__static_ChapterTaskInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCClueUnlockNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCClueUnlockNotice, global::SCClueUnlockNotice.Builder> internal__static_SCClueUnlockNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCNpcUnLockNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCNpcUnLockNotice, global::SCNpcUnLockNotice.Builder> internal__static_SCNpcUnLockNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneUnLockNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneUnLockNotice, global::SCSceneUnLockNotice.Builder> internal__static_SCSceneUnLockNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCChapterTaskStatusChangeNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCChapterTaskStatusChangeNotice, global::SCChapterTaskStatusChangeNotice.Builder> internal__static_SCChapterTaskStatusChangeNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCChapterStatusChangeNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCChapterStatusChangeNotice, global::SCChapterStatusChangeNotice.Builder> internal__static_SCChapterStatusChangeNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCChapterRedNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCChapterRedNotice, global::SCChapterRedNotice.Builder> internal__static_SCChapterRedNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClearChapterRedRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClearChapterRedRequest, global::CSClearChapterRedRequest.Builder> internal__static_CSClearChapterRedRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneEnterRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneEnterRequest, global::CSSceneEnterRequest.Builder> internal__static_CSSceneEnterRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneEnterResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneEnterResponse, global::SCSceneEnterResponse.Builder> internal__static_SCSceneEnterResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneRewardRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneRewardRequest, global::CSSceneRewardRequest.Builder> internal__static_CSSceneRewardRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneRewardResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneRewardResponse, global::SCSceneRewardResponse.Builder> internal__static_SCSceneRewardResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GiftItem__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GiftItem, global::GiftItem.Builder> internal__static_GiftItem__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneQuitRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneQuitRequest, global::CSSceneQuitRequest.Builder> internal__static_CSSceneQuitRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneQuitResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneQuitResponse, global::SCSceneQuitResponse.Builder> internal__static_SCSceneQuitResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneSuspendRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneSuspendRequest, global::CSSceneSuspendRequest.Builder> internal__static_CSSceneSuspendRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneSuspendResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneSuspendResponse, global::SCSceneSuspendResponse.Builder> internal__static_SCSceneSuspendResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneResumeRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneResumeRequest, global::CSSceneResumeRequest.Builder> internal__static_CSSceneResumeRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneResumeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneResumeResponse, global::SCSceneResumeResponse.Builder> internal__static_SCSceneResumeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneStartRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneStartRequest, global::CSSceneStartRequest.Builder> internal__static_CSSceneStartRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneStartResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneStartResponse, global::SCSceneStartResponse.Builder> internal__static_SCSceneStartResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSearchSceneSelectOfficerReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSearchSceneSelectOfficerReq, global::CSSearchSceneSelectOfficerReq.Builder> internal__static_CSSearchSceneSelectOfficerReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSearchSceneSelectOfficerResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSearchSceneSelectOfficerResp, global::SCSearchSceneSelectOfficerResp.Builder> internal__static_SCSearchSceneSelectOfficerResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBuyItemRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBuyItemRequest, global::CSBuyItemRequest.Builder> internal__static_CSBuyItemRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBuyItemResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBuyItemResponse, global::SCBuyItemResponse.Builder> internal__static_SCBuyItemResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerPropMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerPropMsg, global::PlayerPropMsg.Builder> internal__static_PlayerPropMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerPropRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerPropRequest, global::CSPlayerPropRequest.Builder> internal__static_CSPlayerPropRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerPropResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerPropResponse, global::SCPlayerPropResponse.Builder> internal__static_SCPlayerPropResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerPropRecentRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerPropRecentRequest, global::CSPlayerPropRecentRequest.Builder> internal__static_CSPlayerPropRecentRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerPropRecentResposne__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerPropRecentResposne, global::SCPlayerPropRecentResposne.Builder> internal__static_SCPlayerPropRecentResposne__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ReponseStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ReponseStatus, global::ReponseStatus.Builder> internal__static_ReponseStatus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerInfoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerInfoRequest, global::CSPlayerInfoRequest.Builder> internal__static_CSPlayerInfoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerInfoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerInfoResponse, global::SCPlayerInfoResponse.Builder> internal__static_SCPlayerInfoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRenameRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRenameRequest, global::CSRenameRequest.Builder> internal__static_CSRenameRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRenameResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRenameResponse, global::SCRenameResponse.Builder> internal__static_SCRenameResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOfficerListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOfficerListRequest, global::CSOfficerListRequest.Builder> internal__static_CSOfficerListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOfficerListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOfficerListResponse, global::SCOfficerListResponse.Builder> internal__static_SCOfficerListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_OfficerInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::OfficerInfo, global::OfficerInfo.Builder> internal__static_OfficerInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOfficerInfoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOfficerInfoRequest, global::CSOfficerInfoRequest.Builder> internal__static_CSOfficerInfoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOfficerInfoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOfficerInfoResponse, global::SCOfficerInfoResponse.Builder> internal__static_SCOfficerInfoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEventPhaseFeedbackRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEventPhaseFeedbackRequest, global::CSEventPhaseFeedbackRequest.Builder> internal__static_CSEventPhaseFeedbackRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEventPhaseFeedbackResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEventPhaseFeedbackResponse, global::SCEventPhaseFeedbackResponse.Builder> internal__static_SCEventPhaseFeedbackResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PhaseInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PhaseInfo, global::PhaseInfo.Builder> internal__static_PhaseInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MatchWordScoreInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MatchWordScoreInfo, global::MatchWordScoreInfo.Builder> internal__static_MatchWordScoreInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEventRewardRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEventRewardRequest, global::CSEventRewardRequest.Builder> internal__static_CSEventRewardRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEventRewardResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEventRewardResponse, global::SCEventRewardResponse.Builder> internal__static_SCEventRewardResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RewardItem__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RewardItem, global::RewardItem.Builder> internal__static_RewardItem__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOfficerCombineRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOfficerCombineRequest, global::CSOfficerCombineRequest.Builder> internal__static_CSOfficerCombineRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOfficerCombineResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOfficerCombineResponse, global::SCOfficerCombineResponse.Builder> internal__static_SCOfficerCombineResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSOfficerUpdateRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSOfficerUpdateRequest, global::CSOfficerUpdateRequest.Builder> internal__static_CSOfficerUpdateRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCOfficerUpdateResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCOfficerUpdateResponse, global::SCOfficerUpdateResponse.Builder> internal__static_SCOfficerUpdateResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEventEnterRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEventEnterRequest, global::CSEventEnterRequest.Builder> internal__static_CSEventEnterRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEventEnterResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEventEnterResponse, global::SCEventEnterResponse.Builder> internal__static_SCEventEnterResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEventDropInfoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEventDropInfoRequest, global::CSEventDropInfoRequest.Builder> internal__static_CSEventDropInfoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEventDropInfoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEventDropInfoResponse, global::SCEventDropInfoResponse.Builder> internal__static_SCEventDropInfoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_EventDropInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::EventDropInfo, global::EventDropInfo.Builder> internal__static_EventDropInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSkillEmitRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSkillEmitRequest, global::CSSkillEmitRequest.Builder> internal__static_CSSkillEmitRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSkillEmitResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSkillEmitResponse, global::SCSkillEmitResponse.Builder> internal__static_SCSkillEmitResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSkillTimerEmitReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSkillTimerEmitReq, global::CSSkillTimerEmitReq.Builder> internal__static_CSSkillTimerEmitReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSkillTimerEmitResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSkillTimerEmitResp, global::SCSkillTimerEmitResp.Builder> internal__static_SCSkillTimerEmitResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSReasoningRewardReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSReasoningRewardReq, global::CSReasoningRewardReq.Builder> internal__static_CSReasoningRewardReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFindEnterReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFindEnterReq, global::CSFindEnterReq.Builder> internal__static_CSFindEnterReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFindEnterResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFindEnterResp, global::SCFindEnterResp.Builder> internal__static_SCFindEnterResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFindRewardReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFindRewardReq, global::CSFindRewardReq.Builder> internal__static_CSFindRewardReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFindRewardResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFindRewardResp, global::SCFindRewardResp.Builder> internal__static_SCFindRewardResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSkyEyeRewardReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSkyEyeRewardReq, global::CSSkyEyeRewardReq.Builder> internal__static_CSSkyEyeRewardReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSkyEyeRewardReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSkyEyeRewardReq, global::SCSkyEyeRewardReq.Builder> internal__static_SCSkyEyeRewardReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSkyEyeReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSkyEyeReq, global::CSSkyEyeReq.Builder> internal__static_CSSkyEyeReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSkyEyeReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSkyEyeReq, global::SCSkyEyeReq.Builder> internal__static_SCSkyEyeReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DiscountInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DiscountInfo, global::DiscountInfo.Builder> internal__static_DiscountInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarketItemMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarketItemMsg, global::MarketItemMsg.Builder> internal__static_MarketItemMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarketBlack__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarketBlack, global::MarketBlack.Builder> internal__static_MarketBlack__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarketRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarketRequest, global::MarketRequest.Builder> internal__static_MarketRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarketResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarketResponse, global::MarketResponse.Builder> internal__static_MarketResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarkeBuyRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarkeBuyRequest, global::MarkeBuyRequest.Builder> internal__static_MarkeBuyRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarkeBuyResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarkeBuyResponse, global::MarkeBuyResponse.Builder> internal__static_MarkeBuyResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMarketItemRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMarketItemRequest, global::CSMarketItemRequest.Builder> internal__static_CSMarketItemRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCMarketItemResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCMarketItemResponse, global::SCMarketItemResponse.Builder> internal__static_SCMarketItemResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarkeFreshRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarkeFreshRequest, global::MarkeFreshRequest.Builder> internal__static_MarkeFreshRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MarkeFreshResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MarkeFreshResponse, global::MarkeFreshResponse.Builder> internal__static_MarkeFreshResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerBaseInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerBaseInfo, global::PlayerBaseInfo.Builder> internal__static_PlayerBaseInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSNoticeListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSNoticeListRequest, global::CSNoticeListRequest.Builder> internal__static_CSNoticeListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCNoticeListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCNoticeListResponse, global::SCNoticeListResponse.Builder> internal__static_SCNoticeListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_NoticeInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::NoticeInfo, global::NoticeInfo.Builder> internal__static_NoticeInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPingRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPingRequest, global::CSPingRequest.Builder> internal__static_CSPingRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPingResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPingResponse, global::SCPingResponse.Builder> internal__static_SCPingResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PingResponseContent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PingResponseContent, global::PingResponseContent.Builder> internal__static_PingResponseContent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSMessageRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSMessageRequest, global::CSMessageRequest.Builder> internal__static_CSMessageRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LottoItemProto__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LottoItemProto, global::LottoItemProto.Builder> internal__static_LottoItemProto__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LottoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LottoRequest, global::LottoRequest.Builder> internal__static_LottoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LottoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LottoResponse, global::LottoResponse.Builder> internal__static_LottoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LottoBuyRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LottoBuyRequest, global::LottoBuyRequest.Builder> internal__static_LottoBuyRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_LottoBuyResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::LottoBuyResponse, global::LottoBuyResponse.Builder> internal__static_LottoBuyResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGooglePayChargeRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGooglePayChargeRequest, global::CSGooglePayChargeRequest.Builder> internal__static_CSGooglePayChargeRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGooglePayChargeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGooglePayChargeResponse, global::SCGooglePayChargeResponse.Builder> internal__static_SCGooglePayChargeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSIOSPayChargeRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSIOSPayChargeRequest, global::CSIOSPayChargeRequest.Builder> internal__static_CSIOSPayChargeRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCIOSPayChargeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCIOSPayChargeResponse, global::SCIOSPayChargeResponse.Builder> internal__static_SCIOSPayChargeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAcceptTaskNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAcceptTaskNotice, global::SCAcceptTaskNotice.Builder> internal__static_SCAcceptTaskNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AcceptTaskInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AcceptTaskInfo, global::AcceptTaskInfo.Builder> internal__static_AcceptTaskInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTaskListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTaskListRequest, global::CSTaskListRequest.Builder> internal__static_CSTaskListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTaskListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTaskListResponse, global::SCTaskListResponse.Builder> internal__static_SCTaskListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TaskInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TaskInfo, global::TaskInfo.Builder> internal__static_TaskInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TaskPropProgress__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TaskPropProgress, global::TaskPropProgress.Builder> internal__static_TaskPropProgress__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TaskExhibitProgress__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TaskExhibitProgress, global::TaskExhibitProgress.Builder> internal__static_TaskExhibitProgress__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTaskCommitRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTaskCommitRequest, global::CSTaskCommitRequest.Builder> internal__static_CSTaskCommitRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTaskCommitResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTaskCommitResponse, global::SCTaskCommitResponse.Builder> internal__static_SCTaskCommitResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TaskPropReward__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TaskPropReward, global::TaskPropReward.Builder> internal__static_TaskPropReward__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTaskStatusChangeNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTaskStatusChangeNotice, global::SCTaskStatusChangeNotice.Builder> internal__static_SCTaskStatusChangeNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTriggerTaskActiveRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTriggerTaskActiveRequest, global::CSTriggerTaskActiveRequest.Builder> internal__static_CSTriggerTaskActiveRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTriggerTaskActiveResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTriggerTaskActiveResponse, global::SCTriggerTaskActiveResponse.Builder> internal__static_SCTriggerTaskActiveResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTaskIdListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTaskIdListRequest, global::CSTaskIdListRequest.Builder> internal__static_CSTaskIdListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTaskIdListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTaskIdListResponse, global::SCTaskIdListResponse.Builder> internal__static_SCTaskIdListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TaskIdInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TaskIdInfo, global::TaskIdInfo.Builder> internal__static_TaskIdInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAchievementRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAchievementRequest, global::CSAchievementRequest.Builder> internal__static_CSAchievementRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AchievementMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AchievementMsg, global::AchievementMsg.Builder> internal__static_AchievementMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAchievementResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAchievementResponse, global::SCAchievementResponse.Builder> internal__static_SCAchievementResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSAchievementSubmitRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSAchievementSubmitRequest, global::CSAchievementSubmitRequest.Builder> internal__static_CSAchievementSubmitRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAchievementSubmitResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAchievementSubmitResponse, global::SCAchievementSubmitResponse.Builder> internal__static_SCAchievementSubmitResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSActivityBaseListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSActivityBaseListRequest, global::CSActivityBaseListRequest.Builder> internal__static_CSActivityBaseListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCActivityBaseListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCActivityBaseListResponse, global::SCActivityBaseListResponse.Builder> internal__static_SCActivityBaseListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ActivityBaseInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ActivityBaseInfo, global::ActivityBaseInfo.Builder> internal__static_ActivityBaseInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PropItem__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PropItem, global::PropItem.Builder> internal__static_PropItem__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSActivityRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSActivityRequest, global::CSActivityRequest.Builder> internal__static_CSActivityRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCActivityDropResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCActivityDropResponse, global::SCActivityDropResponse.Builder> internal__static_SCActivityDropResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSActivityRewardRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSActivityRewardRequest, global::CSActivityRewardRequest.Builder> internal__static_CSActivityRewardRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCActivityRewardResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCActivityRewardResponse, global::SCActivityRewardResponse.Builder> internal__static_SCActivityRewardResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartoonEnterRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartoonEnterRequest, global::CSCartoonEnterRequest.Builder> internal__static_CSCartoonEnterRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCartoonEnterResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCartoonEnterResponse, global::SCCartoonEnterResponse.Builder> internal__static_SCCartoonEnterResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartoonRewardRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartoonRewardRequest, global::CSCartoonRewardRequest.Builder> internal__static_CSCartoonRewardRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCartoonRewardReqsponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCartoonRewardReqsponse, global::SCCartoonRewardReqsponse.Builder> internal__static_SCCartoonRewardReqsponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCartoonQuitRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCartoonQuitRequest, global::CSCartoonQuitRequest.Builder> internal__static_CSCartoonQuitRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmailListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmailListRequest, global::CSEmailListRequest.Builder> internal__static_CSEmailListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmailListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmailListResponse, global::SCEmailListResponse.Builder> internal__static_SCEmailListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_EmailInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::EmailInfo, global::EmailInfo.Builder> internal__static_EmailInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_EmailReward__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::EmailReward, global::EmailReward.Builder> internal__static_EmailReward__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmailRewardRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmailRewardRequest, global::CSEmailRewardRequest.Builder> internal__static_CSEmailRewardRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmailRewardResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmailRewardResponse, global::SCEmailRewardResponse.Builder> internal__static_SCEmailRewardResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSEmailReadRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSEmailReadRequest, global::CSEmailReadRequest.Builder> internal__static_CSEmailReadRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCEmailChangeNotice__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCEmailChangeNotice, global::SCEmailChangeNotice.Builder> internal__static_SCEmailChangeNotice__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TitleMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TitleMsg, global::TitleMsg.Builder> internal__static_TitleMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTitleRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTitleRequest, global::CSTitleRequest.Builder> internal__static_CSTitleRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTitleResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTitleResponse, global::SCTitleResponse.Builder> internal__static_SCTitleResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTitleActiveRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTitleActiveRequest, global::CSTitleActiveRequest.Builder> internal__static_CSTitleActiveRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTitleActiveResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTitleActiveResponse, global::SCTitleActiveResponse.Builder> internal__static_SCTitleActiveResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSTitleGetRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSTitleGetRequest, global::CSTitleGetRequest.Builder> internal__static_CSTitleGetRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCTitleGetResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCTitleGetResponse, global::SCTitleGetResponse.Builder> internal__static_SCTitleGetResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerFriendMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerFriendMsg, global::PlayerFriendMsg.Builder> internal__static_PlayerFriendMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendRequest, global::CSFriendRequest.Builder> internal__static_CSFriendRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendResponse, global::SCFriendResponse.Builder> internal__static_SCFriendResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendAddRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendAddRequest, global::CSFriendAddRequest.Builder> internal__static_CSFriendAddRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendAddResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendAddResponse, global::SCFriendAddResponse.Builder> internal__static_SCFriendAddResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendDelRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendDelRequest, global::CSFriendDelRequest.Builder> internal__static_CSFriendDelRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendDelResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendDelResponse, global::SCFriendDelResponse.Builder> internal__static_SCFriendDelResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendAgreeRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendAgreeRequest, global::CSFriendAgreeRequest.Builder> internal__static_CSFriendAgreeRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendAgreeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendAgreeResponse, global::SCFriendAgreeResponse.Builder> internal__static_SCFriendAgreeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendDelApplyRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendDelApplyRequest, global::CSFriendDelApplyRequest.Builder> internal__static_CSFriendDelApplyRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendDelApplyResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendDelApplyResponse, global::SCFriendDelApplyResponse.Builder> internal__static_SCFriendDelApplyResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendGiftRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendGiftRequest, global::CSFriendGiftRequest.Builder> internal__static_CSFriendGiftRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_FriendGift__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::FriendGift, global::FriendGift.Builder> internal__static_FriendGift__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendGiftResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendGiftResponse, global::SCFriendGiftResponse.Builder> internal__static_SCFriendGiftResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendGiftSendRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendGiftSendRequest, global::CSFriendGiftSendRequest.Builder> internal__static_CSFriendGiftSendRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendGiftSendResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendGiftSendResponse, global::SCFriendGiftSendResponse.Builder> internal__static_SCFriendGiftSendResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendGiftDrawRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendGiftDrawRequest, global::CSFriendGiftDrawRequest.Builder> internal__static_CSFriendGiftDrawRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendGiftDrawResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendGiftDrawResponse, global::SCFriendGiftDrawResponse.Builder> internal__static_SCFriendGiftDrawResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendViewRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendViewRequest, global::CSFriendViewRequest.Builder> internal__static_CSFriendViewRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AchievementFriendMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AchievementFriendMsg, global::AchievementFriendMsg.Builder> internal__static_AchievementFriendMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendViewResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendViewResponse, global::SCFriendViewResponse.Builder> internal__static_SCFriendViewResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendSwitchRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendSwitchRequest, global::CSFriendSwitchRequest.Builder> internal__static_CSFriendSwitchRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendSwitchResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendSwitchResponse, global::SCFriendSwitchResponse.Builder> internal__static_SCFriendSwitchResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendApplyResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendApplyResponse, global::SCFriendApplyResponse.Builder> internal__static_SCFriendApplyResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendNoticeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendNoticeResponse, global::SCFriendNoticeResponse.Builder> internal__static_SCFriendNoticeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_FriendRecommendMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::FriendRecommendMsg, global::FriendRecommendMsg.Builder> internal__static_FriendRecommendMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendRecommendListRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendRecommendListRequest, global::CSFriendRecommendListRequest.Builder> internal__static_CSFriendRecommendListRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendRecommendListResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendRecommendListResponse, global::SCFriendRecommendListResponse.Builder> internal__static_SCFriendRecommendListResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendRecommendGetRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendRecommendGetRequest, global::CSFriendRecommendGetRequest.Builder> internal__static_CSFriendRecommendGetRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendRecommendGetResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendRecommendGetResponse, global::SCFriendRecommendGetResponse.Builder> internal__static_SCFriendRecommendGetResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFriendRecommendApplyRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFriendRecommendApplyRequest, global::CSFriendRecommendApplyRequest.Builder> internal__static_CSFriendRecommendApplyRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFriendRecommendApplyResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFriendRecommendApplyResponse, global::SCFriendRecommendApplyResponse.Builder> internal__static_SCFriendRecommendApplyResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBuildingListReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBuildingListReq, global::CSBuildingListReq.Builder> internal__static_CSBuildingListReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBuildingListResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBuildingListResp, global::SCBuildingListResp.Builder> internal__static_SCBuildingListResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_BuildingInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::BuildingInfo, global::BuildingInfo.Builder> internal__static_BuildingInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBuildingUnlockReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBuildingUnlockReq, global::CSBuildingUnlockReq.Builder> internal__static_CSBuildingUnlockReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBuildingUnlockResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBuildingUnlockResp, global::SCBuildingUnlockResp.Builder> internal__static_SCBuildingUnlockResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCanTaskRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCanTaskRequest, global::CSCanTaskRequest.Builder> internal__static_CSCanTaskRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCanTaskResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCanTaskResponse, global::SCCanTaskResponse.Builder> internal__static_SCCanTaskResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCreceiveNewTitle__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCreceiveNewTitle, global::SCreceiveNewTitle.Builder> internal__static_SCreceiveNewTitle__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSRegGuestRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSRegGuestRequest, global::CSRegGuestRequest.Builder> internal__static_CSRegGuestRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCRegGuestResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCRegGuestResponse, global::SCRegGuestResponse.Builder> internal__static_SCRegGuestResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSIdentifyCheckRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSIdentifyCheckRequest, global::CSIdentifyCheckRequest.Builder> internal__static_CSIdentifyCheckRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCIdentifyCheckRepsonse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCIdentifyCheckRepsonse, global::SCIdentifyCheckRepsonse.Builder> internal__static_SCIdentifyCheckRepsonse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFBLoginRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFBLoginRequest, global::CSFBLoginRequest.Builder> internal__static_CSFBLoginRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFBLoginResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFBLoginResponse, global::SCFBLoginResponse.Builder> internal__static_SCFBLoginResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSFBBindRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSFBBindRequest, global::CSFBBindRequest.Builder> internal__static_CSFBBindRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCFBBindResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCFBBindResponse, global::SCFBBindResponse.Builder> internal__static_SCFBBindResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCIdentifyCheckMuiltyMessage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCIdentifyCheckMuiltyMessage, global::SCIdentifyCheckMuiltyMessage.Builder> internal__static_SCIdentifyCheckMuiltyMessage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_IdentifyCheckResponseContent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::IdentifyCheckResponseContent, global::IdentifyCheckResponseContent.Builder> internal__static_IdentifyCheckResponseContent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerPropSellRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerPropSellRequest, global::PlayerPropSellRequest.Builder> internal__static_PlayerPropSellRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerPropSellResposne__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerPropSellResposne, global::PlayerPropSellResposne.Builder> internal__static_PlayerPropSellResposne__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSDropReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSDropReq, global::CSDropReq.Builder> internal__static_CSDropReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCDropResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCDropResp, global::SCDropResp.Builder> internal__static_SCDropResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAutoOpenGiftDropResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAutoOpenGiftDropResp, global::SCAutoOpenGiftDropResp.Builder> internal__static_SCAutoOpenGiftDropResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DropInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DropInfo, global::DropInfo.Builder> internal__static_DropInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSChatFinishRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSChatFinishRequest, global::CSChatFinishRequest.Builder> internal__static_CSChatFinishRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCChatFinishResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCChatFinishResponse, global::SCChatFinishResponse.Builder> internal__static_SCChatFinishResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGetAllRewardedTasksRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGetAllRewardedTasksRequest, global::CSGetAllRewardedTasksRequest.Builder> internal__static_CSGetAllRewardedTasksRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGetAllRewardedTasksResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGetAllRewardedTasksResponse, global::SCGetAllRewardedTasksResponse.Builder> internal__static_SCGetAllRewardedTasksResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TaskIdTypeInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TaskIdTypeInfo, global::TaskIdTypeInfo.Builder> internal__static_TaskIdTypeInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerCheckInInfoReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerCheckInInfoReq, global::CSPlayerCheckInInfoReq.Builder> internal__static_CSPlayerCheckInInfoReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerCheckInInfoResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerCheckInInfoResp, global::SCPlayerCheckInInfoResp.Builder> internal__static_SCPlayerCheckInInfoResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerCheckInReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerCheckInReq, global::CSPlayerCheckInReq.Builder> internal__static_CSPlayerCheckInReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerCheckInResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerCheckInResp, global::SCPlayerCheckInResp.Builder> internal__static_SCPlayerCheckInResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerRenewIconReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerRenewIconReq, global::CSPlayerRenewIconReq.Builder> internal__static_CSPlayerRenewIconReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerRenewIconResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerRenewIconResp, global::SCPlayerRenewIconResp.Builder> internal__static_SCPlayerRenewIconResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerUpLevel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerUpLevel, global::SCPlayerUpLevel.Builder> internal__static_SCPlayerUpLevel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerGuildRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerGuildRequest, global::CSPlayerGuildRequest.Builder> internal__static_CSPlayerGuildRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerGuildResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerGuildResponse, global::SCPlayerGuildResponse.Builder> internal__static_SCPlayerGuildResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerGuildUpdateRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerGuildUpdateRequest, global::CSPlayerGuildUpdateRequest.Builder> internal__static_CSPlayerGuildUpdateRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSPlayerFeedbackRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSPlayerFeedbackRequest, global::CSPlayerFeedbackRequest.Builder> internal__static_CSPlayerFeedbackRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCPlayerFeedbackResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCPlayerFeedbackResponse, global::SCPlayerFeedbackResponse.Builder> internal__static_SCPlayerFeedbackResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCAchievementUnlockResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCAchievementUnlockResponse, global::SCAchievementUnlockResponse.Builder> internal__static_SCAchievementUnlockResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCActivityNewResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCActivityNewResponse, global::SCActivityNewResponse.Builder> internal__static_SCActivityNewResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneReconnectRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneReconnectRequest, global::CSSceneReconnectRequest.Builder> internal__static_CSSceneReconnectRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneReconnectResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneReconnectResponse, global::SCSceneReconnectResponse.Builder> internal__static_SCSceneReconnectResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSSceneDifficultyReq__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSSceneDifficultyReq, global::CSSceneDifficultyReq.Builder> internal__static_CSSceneDifficultyReq__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SceneDifficultyInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SceneDifficultyInfo, global::SceneDifficultyInfo.Builder> internal__static_SceneDifficultyInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCSceneDifficultyResp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCSceneDifficultyResp, global::SCSceneDifficultyResp.Builder> internal__static_SCSceneDifficultyResp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSJigsawReconnectRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSJigsawReconnectRequest, global::CSJigsawReconnectRequest.Builder> internal__static_CSJigsawReconnectRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCJigsawReconnectResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCJigsawReconnectResponse, global::SCJigsawReconnectResponse.Builder> internal__static_SCJigsawReconnectResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ServiceConfigInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ServiceConfigInfo, global::ServiceConfigInfo.Builder> internal__static_ServiceConfigInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGetServiceConfigRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGetServiceConfigRequest, global::CSGetServiceConfigRequest.Builder> internal__static_CSGetServiceConfigRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGetServiceConfigResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGetServiceConfigResponse, global::SCGetServiceConfigResponse.Builder> internal__static_SCGetServiceConfigResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGetServiceConfigSingleRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGetServiceConfigSingleRequest, global::CSGetServiceConfigSingleRequest.Builder> internal__static_CSGetServiceConfigSingleRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGetServiceConfigSingleResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGetServiceConfigSingleResponse, global::SCGetServiceConfigSingleResponse.Builder> internal__static_SCGetServiceConfigSingleResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GetPathInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GetPathInfo, global::GetPathInfo.Builder> internal__static_GetPathInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGetPathConfigRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGetPathConfigRequest, global::CSGetPathConfigRequest.Builder> internal__static_CSGetPathConfigRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGetPathConfigResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGetPathConfigResponse, global::SCGetPathConfigResponse.Builder> internal__static_SCGetPathConfigResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSClientLogRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSClientLogRequest, global::CSClientLogRequest.Builder> internal__static_CSClientLogRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SceneRewardComprise__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SceneRewardComprise, global::SceneRewardComprise.Builder> internal__static_SceneRewardComprise__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Push_Info__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Push_Info, global::Push_Info.Builder> internal__static_Push_Info__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSGetPushRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSGetPushRequest, global::CSGetPushRequest.Builder> internal__static_CSGetPushRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCGetPushResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCGetPushResponse, global::SCGetPushResponse.Builder> internal__static_SCGetPushResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSBuyPushRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSBuyPushRequest, global::CSBuyPushRequest.Builder> internal__static_CSBuyPushRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCBuyPushResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCBuyPushResponse, global::SCBuyPushResponse.Builder> internal__static_SCBuyPushResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCombineInfoRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCombineInfoRequest, global::CSCombineInfoRequest.Builder> internal__static_CSCombineInfoRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCombineInfoResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCombineInfoResponse, global::SCCombineInfoResponse.Builder> internal__static_SCCombineInfoResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CSCombineRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CSCombineRequest, global::CSCombineRequest.Builder> internal__static_CSCombineRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SCCombineResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SCCombineResponse, global::SCCombineResponse.Builder> internal__static_SCCombineResponse__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Msg() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cgltc2cucHJvdG8aDW9wdGlvbnMucHJvdG8iQwoRRXhjZXB0aW9uUmVzcG9u", 
          "c2USJwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXNSBnN0YXR1czoF", 
          "mIIZkAMiTQocRXhjZXB0aW9uUmVtb3RlTG9naW5SZXNwb25zZRInCgZzdGF0", 
          "dXMYASABKAsyDy5SZXNwb25zZVN0YXR1c1IGc3RhdHVzOgSYghkBIjYKDlJl", 
          "c3BvbnNlU3RhdHVzEhIKBGNvZGUYASABKAVSBGNvZGUSEAoDbXNnGAIgASgJ", 
          "UgNtc2ciZQoJR21BZGRBdHRyEhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJ", 
          "ZBIUCgVjb3VudBgCIAEoBVIFY291bnQSEgoEdHlwZRgDIAEoBVIEdHlwZToS", 
          "koIZCmdtL2FkZGF0dHKYghlkImkKCUdtQWRkUHJvcBIaCghwbGF5ZXJJZBgB", 
          "IAEoA1IIcGxheWVySWQSFgoGcHJvcElkGAIgASgDUgZwcm9wSWQSFAoFY291", 
          "bnQYAyABKAVSBWNvdW50OhKSghkKZ20vYWRkcHJvcJiCGWUidwoMR21GaW5p", 
          "c2hUYXNrEhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJZBIcCgljaGFwdGVy", 
          "SWQYAiABKANSCWNoYXB0ZXJJZBIWCgZ0YXNrSWQYAyABKANSBnRhc2tJZDoV", 
          "koIZDWdtL2ZpbmlzaHRhc2uYghlmIm0KCUdtT2ZmaWNlchIaCghwbGF5ZXJJ", 
          "ZBgBIAEoA1IIcGxheWVySWQSHAoJb2ZmaWNlcklkGAIgASgDUglvZmZpY2Vy", 
          "SWQSEgoEdHlwZRgDIAEoBVIEdHlwZToSkoIZCmdtL29mZmljZXKYghlnIlAK", 
          "GUdNR2V0UGxheWVyTWVzc2FnZVJlcXVlc3QSGgoIcGxheWVySWQYASABKANS", 
          "CHBsYXllcklkOheSghkPZ20vZ21QbGF5ZXJJbmZvmIIZaiI8ChpHTUdldFBs", 
          "YXllck1lc3NhZ2VSZXNwb25zZRIYCgdtZXNzYWdlGAEgASgJUgdtZXNzYWdl", 
          "OgSYghlrIn0KDkNTRW50ZXJSZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghw", 
          "bGF5ZXJJZBIYCgdzY2VuZUlkGAIgASgDUgdzY2VuZUlkEh4KCm9mZmljZXJJ", 
          "ZHMYAyADKANSCm9mZmljZXJJZHM6FZKCGQxqaWdzYXcvZW50ZXKYghmVCiKo", 
          "AQoPU0NFbnRlclJlc3BvbnNlEhYKBnJlc3VsdBgBIAEoBVIGcmVzdWx0Eh4K", 
          "CnZpdENvbnN1bWUYAiABKAVSCnZpdENvbnN1bWUSGAoHc2Vjb25kcxgDIAEo", 
          "BVIHc2Vjb25kcxIcCglmcmFnbWVudHMYBCADKANSCWZyYWdtZW50cxIeCgpv", 
          "ZmZpY2VySWRzGAUgAygDUgpvZmZpY2VySWRzOgWYghmWCiJbCg1DU1F1aXRS", 
          "ZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJZBIYCgdzY2VuZUlk", 
          "GAIgASgDUgdzY2VuZUlkOhSSghkLamlnc2F3L3F1aXSYghmZCiIvCg5TQ1F1", 
          "aXRSZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJlc3VsdDoFmIIZmgoiRwoQ", 
          "Q1NTdXNwZW5kUmVxdWVzdBIaCghwbGF5ZXJJZBgBIAEoA1IIcGxheWVySWQ6", 
          "F5KCGQ5qaWdzYXcvc3VzcGVuZJiCGZsKIjIKEVNDU3VzcGVuZFJlc3BvbnNl", 
          "EhYKBnJlc3VsdBgBIAEoBVIGcmVzdWx0OgWYghmcCiJFCg9DU1Jlc3VtZVJl", 
          "cXVlc3QSGgoIcGxheWVySWQYASABKANSCHBsYXllcklkOhaSghkNamlnc2F3", 
          "L3Jlc3VtZZiCGZ0KIjEKEFNDUmVzdW1lUmVzcG9uc2USFgoGcmVzdWx0GAEg", 
          "ASgFUgZyZXN1bHQ6BZiCGZ4KIkMKDkNTU3RhcnRSZXF1ZXN0EhoKCHBsYXll", 
          "cklkGAEgASgDUghwbGF5ZXJJZDoVkoIZDGppZ3Nhdy9zdGFydJiCGZ8KIjAK", 
          "D1NDU3RhcnRSZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJlc3VsdDoFmIIZ", 
          "oAoikQEKD0NTRmluaXNoUmVxdWVzdBIYCgdzY2VuZUlkGAEgASgDUgdzY2Vu", 
          "ZUlkEhYKBnJlc3VsdBgCIAEoBVIGcmVzdWx0EhoKCHJlc3RUaW1lGAMgASgF", 
          "UghyZXN0VGltZRIYCgdhbGxUaW1lGAQgASgFUgdhbGxUaW1lOhaSghkNamln", 
          "c2F3L2ZpbmlzaJiCGaEKIvABChBTQ0ZpbmlzaFJlc3BvbnNlEhYKBnJlc3Vs", 
          "dBgBIAEoBVIGcmVzdWx0EhgKB3NjZW5lSWQYAiABKANSB3NjZW5lSWQSFgoG", 
          "cHJvcElkGAMgASgDUgZwcm9wSWQSIQoHcmV3YXJkcxgEIAMoCzIHLlJld2Fy", 
          "ZFIHcmV3YXJkcxIgCgtqaWdzYXdTdGF0ZRgFIAEoBVILamlnc2F3U3RhdGUS", 
          "RgoTc2NlbmVSZXdhcmRDb21wcmlzZRgGIAMoCzIULlNjZW5lUmV3YXJkQ29t", 
          "cHJpc2VSE3NjZW5lUmV3YXJkQ29tcHJpc2U6BZiCGaIKIkgKBlJld2FyZBIY", 
          "CgdwZXJjZW50GAEgASgFUgdwZXJjZW50EhIKBHR5cGUYAiABKAVSBHR5cGUS", 
          "EAoDbnVtGAMgASgFUgNudW0iTwoMQ1NSZWdSZXF1ZXN0EhoKCHVzZXJuYW1l", 
          "GAEgASgJUgh1c2VybmFtZRIQCgNwd2QYAiABKAlSA3B3ZDoRkoIZCGF1dGgv", 
          "cmVnmIIZ6QciLgoNU0NSZWdSZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJl", 
          "c3VsdDoFmIIZ6gciUQoNQ1NBdXRoUmVxdWVzdBIaCgh1c2VybmFtZRgBIAEo", 
          "CVIIdXNlcm5hbWUSEAoDcHdkGAIgASgJUgNwd2Q6EpKCGQlhdXRoL2F1dGiY", 
          "ghnrByJtCg5TQ0F1dGhSZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJlc3Vs", 
          "dBIgCgthY2Nlc3NUb2tlbhgCIAEoCVILYWNjZXNzVG9rZW4SGgoIdXNlcm5h", 
          "bWUYAyABKAlSCHVzZXJuYW1lOgWYghnsByKMAQoOQ1Nsb2dpblJlcXVlc3QS", 
          "GgoIdXNlcm5hbWUYASABKAlSCHVzZXJuYW1lEhAKA3B3ZBgCIAEoCVIDcHdk", 
          "EhoKCHBsYXRmb3JtGAMgASgFUghwbGF0Zm9ybRIaCghuaWNrbmFtZRgEIAEo", 
          "CVIIbmlja25hbWU6FJKCGQtsb2dpbi9sb2dpbpiCGe8HIqQECg9TQ2xvZ2lu", 
          "UmVzcG9uc2USFgoGcmVzdWx0GAEgASgFUgZyZXN1bHQSGgoIcGxheWVySWQY", 
          "AiABKANSCHBsYXllcklkEh4KCnBsYXllck5hbWUYAyABKAlSCnBsYXllck5h", 
          "bWUSHgoKcGxheWVySWNvbhgEIAEoCVIKcGxheWVySWNvbhISCgRjb2luGAUg", 
          "ASgFUgRjb2luEhIKBGNhc2gYBiABKAVSBGNhc2gSEAoDdml0GAcgASgFUgN2", 
          "aXQSFAoFbGV2ZWwYCCABKAVSBWxldmVsEhAKA2V4cBgJIAEoBVIDZXhwEh4K", 
          "CmxhYm9yVW5pb24YCiABKAVSCmxhYm9yVW5pb24SHgoKdXBncmFkZUV4cBgL", 
          "IAEoBVIKdXBncmFkZUV4cBIgCgtleHBNdWx0aXBsZRgMIAEoAlILZXhwTXVs", 
          "dGlwbGUSGgoIcGxhdGZvcm0YDSABKAVSCHBsYXRmb3JtEhoKCG5pY2tuYW1l", 
          "GA4gASgJUghuaWNrbmFtZRIgCgthY2Nlc3NUb2tlbhgPIAEoCVILYWNjZXNz", 
          "VG9rZW4SJgoObGFzdEFkZFZpdFRpbWUYECABKANSDmxhc3RBZGRWaXRUaW1l", 
          "EjAKE21pbGxpc1JlY292ZXJPbmVWaXQYEiABKANSE21pbGxpc1JlY292ZXJP", 
          "bmVWaXQSHgoKaGFzUmVuYW1lZBgTIAEoBVIKaGFzUmVuYW1lZDoFmIIZ8Aci", 
          "LQoUQ1NDaGFwdGVyTGlzdFJlcXVlc3Q6FZKCGQxjaGFwdGVyL2xpc3SYghnz", 
          "ByJOChVTQ0NoYXB0ZXJMaXN0UmVzcG9uc2USLgoIY2hhcHRlcnMYASADKAsy", 
          "Ei5QbGF5ZXJDaGFwdGVySW5mb1IIY2hhcHRlcnM6BZiCGfQHInMKEVBsYXll", 
          "ckNoYXB0ZXJJbmZvEigKD3BsYXllckNoYXB0ZXJJZBgBIAEoA1IPcGxheWVy", 
          "Q2hhcHRlcklkEhwKCWNoYXB0ZXJJZBgCIAEoA1IJY2hhcHRlcklkEhYKBnN0", 
          "YXR1cxgDIAEoBVIGc3RhdHVzIlsKFkNTQ2hhcHRlckRldGFpbFJlcXVlc3QS", 
          "KAoPcGxheWVyQ2hhcHRlcklkGAEgASgDUg9wbGF5ZXJDaGFwdGVySWQ6F5KC", 
          "GQ5jaGFwdGVyL2RldGFpbJiCGfUHIqACChdTQ0NoYXB0ZXJEZXRhaWxSZXNw", 
          "b25zZRIoCg9wbGF5ZXJDaGFwdGVySWQYASABKANSD3BsYXllckNoYXB0ZXJJ", 
          "ZBIcCgljaGFwdGVySWQYAiABKANSCWNoYXB0ZXJJZBIWCgZzdGF0dXMYAyAB", 
          "KAVSBnN0YXR1cxIjCgRucGNzGAQgAygLMg8uQ2hhcHRlck5wY0luZm9SBG5w", 
          "Y3MSJgoFY2x1ZXMYBSADKAsyEC5DaGFwdGVyQ2x1ZUluZm9SBWNsdWVzEikK", 
          "BnNjZW5lcxgGIAMoCzIRLkNoYXB0ZXJTY2VuZUluZm9SBnNjZW5lcxImCgV0", 
          "YXNrcxgHIAMoCzIQLkNoYXB0ZXJUYXNrSW5mb1IFdGFza3M6BZiCGfYHIl4K", 
          "DkNoYXB0ZXJOcGNJbmZvEhQKBW5wY0lkGAEgASgDUgVucGNJZBIWCgZzdGF0", 
          "dXMYAiABKAVSBnN0YXR1cxIeCgpkaWFsb2d1ZUlkGAMgASgDUgpkaWFsb2d1", 
          "ZUlkIkEKD0NoYXB0ZXJDbHVlSW5mbxIWCgZjbHVlSWQYASABKAlSBmNsdWVJ", 
          "ZBIWCgZzdGF0dXMYAiABKAVSBnN0YXR1cyJEChBDaGFwdGVyU2NlbmVJbmZv", 
          "EhgKB3NjZW5lSWQYASABKANSB3NjZW5lSWQSFgoGc3RhdHVzGAIgASgFUgZz", 
          "dGF0dXMiQQoPQ2hhcHRlclRhc2tJbmZvEhYKBnRhc2tJZBgBIAEoA1IGdGFz", 
          "a0lkEhYKBnN0YXR1cxgCIAEoBVIGc3RhdHVzInsKElNDQ2x1ZVVubG9ja05v", 
          "dGljZRIoCg9wbGF5ZXJDaGFwdGVySWQYASABKANSD3BsYXllckNoYXB0ZXJJ", 
          "ZBIcCgljaGFwdGVySWQYAiABKANSCWNoYXB0ZXJJZBIWCgZjbHVlSWQYAyAB", 
          "KAlSBmNsdWVJZDoFmIIZ+wcieAoRU0NOcGNVbkxvY2tOb3RpY2USKAoPcGxh", 
          "eWVyQ2hhcHRlcklkGAEgASgDUg9wbGF5ZXJDaGFwdGVySWQSHAoJY2hhcHRl", 
          "cklkGAIgASgDUgljaGFwdGVySWQSFAoFbnBjSWQYAyABKANSBW5wY0lkOgWY", 
          "ghn8ByJ+ChNTQ1NjZW5lVW5Mb2NrTm90aWNlEigKD3BsYXllckNoYXB0ZXJJ", 
          "ZBgBIAEoA1IPcGxheWVyQ2hhcHRlcklkEhwKCWNoYXB0ZXJJZBgCIAEoA1IJ", 
          "Y2hhcHRlcklkEhgKB3NjZW5lSWQYAyABKANSB3NjZW5lSWQ6BZiCGf0HIqYB", 
          "Ch9TQ0NoYXB0ZXJUYXNrU3RhdHVzQ2hhbmdlTm90aWNlEigKD3BsYXllckNo", 
          "YXB0ZXJJZBgBIAEoA1IPcGxheWVyQ2hhcHRlcklkEhwKCWNoYXB0ZXJJZBgC", 
          "IAEoA1IJY2hhcHRlcklkEhYKBnRhc2tJZBgDIAEoA1IGdGFza0lkEhwKCW5l", 
          "d1N0YXR1cxgEIAEoBVIJbmV3U3RhdHVzOgWYghn+ByKKAQobU0NDaGFwdGVy", 
          "U3RhdHVzQ2hhbmdlTm90aWNlEigKD3BsYXllckNoYXB0ZXJJZBgBIAEoA1IP", 
          "cGxheWVyQ2hhcHRlcklkEhwKCWNoYXB0ZXJJZBgCIAEoA1IJY2hhcHRlcklk", 
          "EhwKCW5ld1N0YXR1cxgDIAEoBVIJbmV3U3RhdHVzOgWYghn/ByIvChJTQ0No", 
          "YXB0ZXJSZWROb3RpY2USEgoEcmVkcxgBIAMoBVIEcmVkczoFmIIZgAgiUwoY", 
          "Q1NDbGVhckNoYXB0ZXJSZWRSZXF1ZXN0EhwKCWNsZWFyVHlwZRgBIAEoBVIJ", 
          "Y2xlYXJUeXBlOhmSghkQY2hhcHRlci9jbGVhclJlZJiCGYEIIoEBChNDU1Nj", 
          "ZW5lRW50ZXJSZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJZBIY", 
          "CgdzY2VuZUlkGAIgASgDUgdzY2VuZUlkEh4KCm9mZmljZXJJZHMYAyADKANS", 
          "Cm9mZmljZXJJZHM6FJKCGQtzY2VuZS9lbnRlcpiCGc0IIt8CChRTQ1NjZW5l", 
          "RW50ZXJSZXNwb25zZRI3Cg5yZXNwb25zZVN0YXR1cxgBIAEoCzIPLlJlc3Bv", 
          "bnNlU3RhdHVzUg5yZXNwb25zZVN0YXR1cxIkCg1zY2VuZUV4aGliaXRzGAIg", 
          "AygDUg1zY2VuZUV4aGliaXRzEiIKDHRhc2tFeGhpYml0cxgDIAMoA1IMdGFz", 
          "a0V4aGliaXRzEh4KCnZpdENvbnN1bWUYBCABKAVSCnZpdENvbnN1bWUSGAoH", 
          "c2Vjb25kcxgFIAEoBVIHc2Vjb25kcxIeCgpvZmZpY2VySWRzGAYgAygDUgpv", 
          "ZmZpY2VySWRzEiAKC2lzRHJvcFNjZW5lGAcgASgIUgtpc0Ryb3BTY2VuZRIn", 
          "Cglkcm9wSXRlbXMYCCADKAsyCS5HaWZ0SXRlbVIJZHJvcEl0ZW1zEhgKB211", 
          "bHRpSWQYCSABKANSB211bHRpSWQ6BZiCGc4IIr0BChRDU1NjZW5lUmV3YXJk", 
          "UmVxdWVzdBIaCghwbGF5ZXJJZBgBIAEoA1IIcGxheWVySWQSGAoHc2NlbmVJ", 
          "ZBgCIAEoA1IHc2NlbmVJZBIWCgZyZXN1bHQYAyABKAVSBnJlc3VsdBIaCghj", 
          "b3N0VGltZRgEIAEoBVIIY29zdFRpbWUSJAoNdXNlQ2xpY2tDb3VudBgFIAEo", 
          "BVINdXNlQ2xpY2tDb3VudDoVkoIZDHNjZW5lL3Jld2FyZJiCGc8IIsMDChVT", 
          "Q1NjZW5lUmV3YXJkUmVzcG9uc2USNwoOcmVzcG9uc2VTdGF0dXMYASABKAsy", 
          "Dy5SZXNwb25zZVN0YXR1c1IOcmVzcG9uc2VTdGF0dXMSGAoHc2NlbmVJZBgC", 
          "IAEoA1IHc2NlbmVJZBIeCgpvdXRwdXRDb2luGAMgASgFUgpvdXRwdXRDb2lu", 
          "Eh4KCm91dHB1dENhc2gYBCABKAVSCm91dHB1dENhc2gSHAoJb3V0cHV0Vml0", 
          "GAUgASgFUglvdXRwdXRWaXQSHAoJb3V0cHV0RXhwGAYgASgFUglvdXRwdXRF", 
          "eHASJwoJZ2lmdEl0ZW1zGAcgAygLMgkuR2lmdEl0ZW1SCWdpZnRJdGVtcxJG", 
          "ChNzY2VuZVJld2FyZENvbXByaXNlGAggAygLMhQuU2NlbmVSZXdhcmRDb21w", 
          "cmlzZVITc2NlbmVSZXdhcmRDb21wcmlzZRIeCgpkaWZmaWN1bHR5GAkgASgF", 
          "UgpkaWZmaWN1bHR5EhAKA2V4cBgKIAEoBVIDZXhwEjEKDnVwTGV2ZWxSZXdh", 
          "cmRzGAsgAygLMgkuR2lmdEl0ZW1SDnVwTGV2ZWxSZXdhcmRzOgWYghnQCCI0", 
          "CghHaWZ0SXRlbRIWCgZpdGVtSWQYASABKANSBml0ZW1JZBIQCgNudW0YAiAB", 
          "KAVSA251bSJZChJDU1NjZW5lUXVpdFJlcXVlc3QSGgoIcGxheWVySWQYASAB", 
          "KANSCHBsYXllcklkEhIKBHR5cGUYAiABKAVSBHR5cGU6E5KCGQpzY2VuZS9x", 
          "dWl0mIIZ0QgiNAoTU0NTY2VuZVF1aXRSZXNwb25zZRIWCgZyZXN1bHQYASAB", 
          "KAVSBnJlc3VsdDoFmIIZ0ggiSwoVQ1NTY2VuZVN1c3BlbmRSZXF1ZXN0EhoK", 
          "CHBsYXllcklkGAEgASgDUghwbGF5ZXJJZDoWkoIZDXNjZW5lL3N1c3BlbmSY", 
          "ghnTCCI3ChZTQ1NjZW5lU3VzcGVuZFJlc3BvbnNlEhYKBnJlc3VsdBgBIAEo", 
          "BVIGcmVzdWx0OgWYghnUCCJJChRDU1NjZW5lUmVzdW1lUmVxdWVzdBIaCghw", 
          "bGF5ZXJJZBgBIAEoA1IIcGxheWVySWQ6FZKCGQxzY2VuZS9yZXN1bWWYghnV", 
          "CCI2ChVTQ1NjZW5lUmVzdW1lUmVzcG9uc2USFgoGcmVzdWx0GAEgASgFUgZy", 
          "ZXN1bHQ6BZiCGdYIIkcKE0NTU2NlbmVTdGFydFJlcXVlc3QSGgoIcGxheWVy", 
          "SWQYASABKANSCHBsYXllcklkOhSSghkLc2NlbmUvc3RhcnSYghnXCCI1ChRT", 
          "Q1NjZW5lU3RhcnRSZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJlc3VsdDoF", 
          "mIIZ2AgiXQodQ1NTZWFyY2hTY2VuZVNlbGVjdE9mZmljZXJSZXESHgoKb2Zm", 
          "aWNlcklkcxgBIAMoA1IKb2ZmaWNlcklkczockoIZE3NjZW5lL3NlbGVjdG9m", 
          "ZmljZXKYghnZCCKiAQoeU0NTZWFyY2hTY2VuZVNlbGVjdE9mZmljZXJSZXNw", 
          "Eh4KCnZpdENvbnN1bWUYASABKAVSCnZpdENvbnN1bWUSIAoLY29zdFNlY29u", 
          "ZHMYAiABKAVSC2Nvc3RTZWNvbmRzEjcKDnJlc3BvbnNlU3RhdHVzGAMgASgL", 
          "Mg8uUmVzcG9uc2VTdGF0dXNSDnJlc3BvbnNlU3RhdHVzOgWYghnaCCJvChBD", 
          "U0J1eUl0ZW1SZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJZBIW", 
          "CgZwcm9wSWQYAiABKANSBnByb3BJZBIUCgVjb3VudBgDIAEoBVIFY291bnQ6", 
          "EZKCGQhpdGVtL2J1eZiCGeEIImAKEVNDQnV5SXRlbVJlc3BvbnNlEhYKBnBy", 
          "b3BJZBgBIAEoA1IGcHJvcElkEhQKBWNvdW50GAIgASgFUgVjb3VudBIWCgZy", 
          "ZXN1bHQYAyABKAVSBnJlc3VsdDoFmIIZ4ggiXQoNUGxheWVyUHJvcE1zZxIW", 
          "CgZwcm9wSWQYASABKANSBnByb3BJZBIUCgVjb3VudBgCIAEoBVIFY291bnQS", 
          "HgoKZXhwaXJlVGltZRgDIAEoA1IKZXhwaXJlVGltZSIwChNDU1BsYXllclBy", 
          "b3BSZXF1ZXN0OhmSghkQcGxheWVyL3Byb3AvbGlzdJiCGbEJIrcBChRTQ1Bs", 
          "YXllclByb3BSZXNwb25zZRI0Cg1yZXBvbnNlU3RhdHVzGAEgASgLMg4uUmVw", 
          "b25zZVN0YXR1c1INcmVwb25zZVN0YXR1cxIwCgtwbGF5ZXJQcm9wcxgCIAMo", 
          "CzIOLlBsYXllclByb3BNc2dSC3BsYXllclByb3BzEjAKC3JlY2VudFByb3Bz", 
          "GAMgAygLMg4uUGxheWVyUHJvcE1zZ1ILcmVjZW50UHJvcHM6BZiCGbIJIj4K", 
          "GUNTUGxheWVyUHJvcFJlY2VudFJlcXVlc3Q6IZKCGRhwbGF5ZXIvcHJvcC9y", 
          "ZWNlbnQvZW1wdHmYghmzCSJZChpTQ1BsYXllclByb3BSZWNlbnRSZXNwb3Nu", 
          "ZRI0Cg1yZXBvbnNlU3RhdHVzGAEgASgLMg4uUmVwb25zZVN0YXR1c1INcmVw", 
          "b25zZVN0YXR1czoFmIIZtAkiNQoNUmVwb25zZVN0YXR1cxISCgRjb2RlGAEg", 
          "ASgFUgRjb2RlEhAKA21zZxgCIAEoCVIDbXNnIkwKE0NTUGxheWVySW5mb1Jl", 
          "cXVlc3QSGgoIcGxheWVySWQYASABKANSCHBsYXllcklkOhmSghkQcGxheWVy", 
          "L2luZm8vaW5mb5iCGfkKIukDChRTQ1BsYXllckluZm9SZXNwb25zZRIaCghw", 
          "bGF5ZXJJZBgBIAEoA1IIcGxheWVySWQSHgoKcGxheWVyTmFtZRgCIAEoCVIK", 
          "cGxheWVyTmFtZRIeCgpwbGF5ZXJJY29uGAMgASgJUgpwbGF5ZXJJY29uEhIK", 
          "BGNvaW4YBCABKAVSBGNvaW4SEgoEY2FzaBgFIAEoBVIEY2FzaBIQCgN2aXQY", 
          "BiABKAVSA3ZpdBIUCgVsZXZlbBgHIAEoBVIFbGV2ZWwSEAoDZXhwGAggASgF", 
          "UgNleHASHgoKbGFib3JVbmlvbhgJIAEoBVIKbGFib3JVbmlvbhIeCgp1cGdy", 
          "YWRlRXhwGAogASgFUgp1cGdyYWRlRXhwEiAKC2V4cE11bHRpcGxlGAsgASgC", 
          "UgtleHBNdWx0aXBsZRImCg5sYXN0QWRkVml0VGltZRgMIAEoA1IObGFzdEFk", 
          "ZFZpdFRpbWUSMAoTbWlsbGlzUmVjb3Zlck9uZVZpdBgNIAEoA1ITbWlsbGlz", 
          "UmVjb3Zlck9uZVZpdBIeCgpoYXNSZW5hbWVkGA4gASgFUgpoYXNSZW5hbWVk", 
          "EjAKE2luZmluaXRlVml0UmVzdFRpbWUYDyABKANSE2luZmluaXRlVml0UmVz", 
          "dFRpbWU6BZiCGfoKImQKD0NTUmVuYW1lUmVxdWVzdBIaCghwbGF5ZXJJZBgB", 
          "IAEoA1IIcGxheWVySWQSGAoHbmV3TmFtZRgCIAEoCVIHbmV3TmFtZTobkoIZ", 
          "EnBsYXllci9pbmZvL3JlbmFtZZiCGfsKImcKEFNDUmVuYW1lUmVzcG9uc2US", 
          "GgoIcGxheWVySWQYASABKANSCHBsYXllcklkEhYKBnJlc3VsdBgCIAEoBVIG", 
          "cmVzdWx0EhgKB25ld05hbWUYAyABKAlSB25ld05hbWU6BZiCGfwKIkkKFENT", 
          "T2ZmaWNlckxpc3RSZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJ", 
          "ZDoVkoIZDG9mZmljZXIvbGlzdJiCGd0LImQKFVNDT2ZmaWNlckxpc3RSZXNw", 
          "b25zZRIaCghwbGF5ZXJJZBgBIAEoA1IIcGxheWVySWQSKAoIb2ZmaWNlcnMY", 
          "AiADKAsyDC5PZmZpY2VySW5mb1IIb2ZmaWNlcnM6BZiCGd4LIpsCCgtPZmZp", 
          "Y2VySW5mbxIoCg9wbGF5ZXJPZmZpY2VySWQYASABKANSD3BsYXllck9mZmlj", 
          "ZXJJZBIcCglvZmZpY2VySWQYAiABKANSCW9mZmljZXJJZBIUCgVsZXZlbBgD", 
          "IAEoBVIFbGV2ZWwSGgoIb3V0c2lnaHQYBCABKAVSCG91dHNpZ2h0EhwKCXdp", 
          "bGxQb3dlchgFIAEoBVIJd2lsbFBvd2VyEhwKCWF0dGVudGlvbhgGIAEoBVIJ", 
          "YXR0ZW50aW9uEhYKBm1lbW9yeRgHIAEoBVIGbWVtb3J5Eh4KCnZpdENvbnN1", 
          "bWUYCCABKAVSCnZpdENvbnN1bWUSHgoKc2Vjb25kR2FpbhgJIAEoBVIKc2Vj", 
          "b25kR2FpbiJzChRDU09mZmljZXJJbmZvUmVxdWVzdBIaCghwbGF5ZXJJZBgB", 
          "IAEoA1IIcGxheWVySWQSKAoPcGxheWVyT2ZmaWNlcklkGAIgASgDUg9wbGF5", 
          "ZXJPZmZpY2VySWQ6FZKCGQxvZmZpY2VyL2luZm+YghnfCyJEChVTQ09mZmlj", 
          "ZXJJbmZvUmVzcG9uc2USJAoGb2ZmaWNlGAEgASgLMgwuT2ZmaWNlckluZm9S", 
          "Bm9mZmljZToFmIIZ4AsiiAEKG0NTRXZlbnRQaGFzZUZlZWRiYWNrUmVxdWVz", 
          "dBIYCgdldmVudElkGAEgASgDUgdldmVudElkEigKD3BsYXllck9mZmljZXJJ", 
          "ZBgCIAMoA1IPcGxheWVyT2ZmaWNlcklkOiWSghkcb2ZmaWNlci9ldmVudC9w", 
          "aGFzZS9mZWVkYmFja5iCGeMLIsgBChxTQ0V2ZW50UGhhc2VGZWVkYmFja1Jl", 
          "c3BvbnNlEjcKDlJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0", 
          "dXNSDlJlc3BvbnNlU3RhdHVzEhwKCXZhbHVhdGlvbhgCIAEoCFIJdmFsdWF0", 
          "aW9uEh4KCnRvdGFsU2NvcmUYAyABKAVSCnRvdGFsU2NvcmUSKgoKcGhhc2VJ", 
          "bmZvcxgEIAMoCzIKLlBoYXNlSW5mb1IKcGhhc2VJbmZvczoFmIIZ5AsixAIK", 
          "CVBoYXNlSW5mbxIYCgdwaGFzZUlkGAEgASgFUgdwaGFzZUlkEiwKEW9mZmlj", 
          "ZXJUZW1wbGF0ZUlkGAIgASgDUhFvZmZpY2VyVGVtcGxhdGVJZBIeCgpwaGFz", 
          "ZVNjb3JlGAMgASgFUgpwaGFzZVNjb3JlEiIKDG9mZmljZXJTY29yZRgEIAEo", 
          "BVIMb2ZmaWNlclNjb3JlEhgKB3BlcmZlY3QYBSABKAhSB3BlcmZlY3QSIgoM", 
          "cGVyZmVjdFNjb3JlGAYgASgFUgxwZXJmZWN0U2NvcmUSKAoPcGhhc2VUZW1w", 
          "bGF0ZUlkGAcgASgDUg9waGFzZVRlbXBsYXRlSWQSQwoSbWF0Y2hXb3JkU2Nv", 
          "cmVJbmZvGAggAygLMhMuTWF0Y2hXb3JkU2NvcmVJbmZvUhJtYXRjaFdvcmRT", 
          "Y29yZUluZm8iYAoSTWF0Y2hXb3JkU2NvcmVJbmZvEhwKCWtleVdvcmRJZBgB", 
          "IAEoBVIJa2V5V29yZElkEiwKEWtleVdvcmRNYXRjaFNjb3JlGAIgASgFUhFr", 
          "ZXlXb3JkTWF0Y2hTY29yZSJrChRDU0V2ZW50UmV3YXJkUmVxdWVzdBIaCghw", 
          "bGF5ZXJJZBgBIAEoA1IIcGxheWVySWQSGAoHZXZlbnRJZBgCIAEoA1IHZXZl", 
          "bnRJZDodkoIZFG9mZmljZXIvZXZlbnQvcmV3YXJkmIIZ5QsixgIKFVNDRXZl", 
          "bnRSZXdhcmRSZXNwb25zZRI3Cg5SZXNwb25zZVN0YXR1cxgBIAEoCzIPLlJl", 
          "c3BvbnNlU3RhdHVzUg5SZXNwb25zZVN0YXR1cxIUCgVzY29yZRgCIAEoBVIF", 
          "c2NvcmUSHAoJdmFsdWF0aW9uGAMgASgFUgl2YWx1YXRpb24SJQoHcmV3YXJk", 
          "cxgEIAMoCzILLlJld2FyZEl0ZW1SB3Jld2FyZHMSEAoDZXhwGAUgASgFUgNl", 
          "eHASEAoDdml0GAYgASgFUgN2aXQSEgoEY29pbhgHIAEoBVIEY29pbhISCgRj", 
          "YXNoGAggASgFUgRjYXNoEkYKE3NjZW5lUmV3YXJkQ29tcHJpc2UYCSADKAsy", 
          "FC5TY2VuZVJld2FyZENvbXByaXNlUhNzY2VuZVJld2FyZENvbXByaXNlOgWY", 
          "ghnmCyI2CgpSZXdhcmRJdGVtEhYKBnByb3BJZBgBIAEoA1IGcHJvcElkEhAK", 
          "A251bRgCIAEoBVIDbnVtIm0KF0NTT2ZmaWNlckNvbWJpbmVSZXF1ZXN0EhoK", 
          "CHBsYXllcklkGAEgASgDUghwbGF5ZXJJZBIcCglvZmZpY2VySWQYAiABKANS", 
          "CW9mZmljZXJJZDoYkoIZD29mZmljZXIvY29tYmluZZiCGeELIlUKGFNDT2Zm", 
          "aWNlckNvbWJpbmVSZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJlc3VsdBIa", 
          "CghvZmZpY2VJZBgCIAEoA1IIb2ZmaWNlSWQ6BZiCGeILIncKFkNTT2ZmaWNl", 
          "clVwZGF0ZVJlcXVlc3QSGgoIcGxheWVySWQYASABKANSCHBsYXllcklkEigK", 
          "D3BsYXllck9mZmljZXJJZBgCIAEoA1IPcGxheWVyT2ZmaWNlcklkOheSghkO", 
          "b2ZmaWNlci91cGRhdGWYghnnCyJqChdTQ09mZmljZXJVcGRhdGVSZXNwb25z", 
          "ZRIWCgZyZXN1bHQYASABKAVSBnJlc3VsdBIaCghvZmZpY2VJZBgCIAEoA1II", 
          "b2ZmaWNlSWQSFAoFbGV2ZWwYAyABKAVSBWxldmVsOgWYghnoCyJpChNDU0V2", 
          "ZW50RW50ZXJSZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJZBIY", 
          "CgdldmVudElkGAIgASgDUgdldmVudElkOhySghkTb2ZmaWNlci9ldmVudC9l", 
          "bnRlcpiCGekLIjUKFFNDRXZlbnRFbnRlclJlc3BvbnNlEhYKBnJlc3VsdBgB", 
          "IAEoBVIGcmVzdWx0OgWYghnqCyJTChZDU0V2ZW50RHJvcEluZm9SZXF1ZXN0", 
          "EhgKB2V2ZW50SWQYASABKANSB2V2ZW50SWQ6H5KCGRZvZmZpY2VyL2V2ZW50", 
          "L2Ryb3BJbmZvmIIZ6wsioAEKF1NDRXZlbnREcm9wSW5mb1Jlc3BvbnNlEjIK", 
          "DHBlcmZlY3RQcm9wcxgBIAMoCzIOLkV2ZW50RHJvcEluZm9SDHBlcmZlY3RQ", 
          "cm9wcxIwCgtub3JtYWxQcm9wcxgCIAMoCzIOLkV2ZW50RHJvcEluZm9SC25v", 
          "cm1hbFByb3BzEhgKB2V2ZW50SWQYAyABKANSB2V2ZW50SWQ6BZiCGewLIj0K", 
          "DUV2ZW50RHJvcEluZm8SFgoGcHJvcElkGAEgASgDUgZwcm9wSWQSFAoFY291", 
          "bnQYAiABKAVSBWNvdW50IooBChJDU1NraWxsRW1pdFJlcXVlc3QSFgoGcHJv", 
          "cElkGAEgASgDUgZwcm9wSWQSFAoFY291bnQYAiABKAVSBWNvdW50EjEKDGlu", 
          "T3JPdXRTY2VuZRgDIAEoDjINLkluT3JPdXRTY2VuZVIMaW5Pck91dFNjZW5l", 
          "OhOSghkKc2tpbGwvZW1pdJiCGcEMImYKE1NDU2tpbGxFbWl0UmVzcG9uc2US", 
          "FgoGcmVzdWx0GAEgASgFUgZyZXN1bHQSGAoHc2tpbGxJZBgCIAEoA1IHc2tp", 
          "bGxJZBIWCgZwcm9wSWQYAyABKANSBnByb3BJZDoFmIIZwgwiMAoTQ1NTa2ls", 
          "bFRpbWVyRW1pdFJlcToZkoIZEHNraWxsL2VtaXQvdGltZXKYghnDDCJ5ChRT", 
          "Q1NraWxsVGltZXJFbWl0UmVzcBIWCgZyZXN1bHQYASABKAVSBnJlc3VsdBIY", 
          "Cgdza2lsbElkGAIgASgDUgdza2lsbElkEigKD3BsYXllck9mZmljZXJJZBgD", 
          "IAEoA1IPcGxheWVyT2ZmaWNlcklkOgWYghnEDCJbChRDU1JlYXNvbmluZ1Jl", 
          "d2FyZFJlcRIgCgtyZWFzb25pbmdJZBgBIAEoA1ILcmVhc29uaW5nSWQ6IZKC", 
          "GRhvZmZpY2VyL3JlYXNvbmluZy9yZXdhcmSYghnFDCJFCg5DU0ZpbmRFbnRl", 
          "clJlcRIWCgZmaW5kSWQYASABKANSBmZpbmRJZDobkoIZEm9mZmljZXIvZmlu", 
          "ZC9lbnRlcpiCGcYMIjAKD1NDRmluZEVudGVyUmVzcBIWCgZyZXN1bHQYASAB", 
          "KAVSBnJlc3VsdDoFmIIZxwwilwEKD0NTRmluZFJld2FyZFJlcRIWCgZmaW5k", 
          "SWQYASABKANSBmZpbmRJZBIWCgZyZXN1bHQYAiABKAVSBnJlc3VsdBIaCghm", 
          "b3VuZE51bRgDIAEoBVIIZm91bmROdW0SGgoIdG90YWxOdW0YBCABKAVSCHRv", 
          "dGFsTnVtOhySghkTb2ZmaWNlci9maW5kL3Jld2FyZJiCGcgMIqwBChBTQ0Zp", 
          "bmRSZXdhcmRSZXNwEjcKDlJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9u", 
          "c2VTdGF0dXNSDlJlc3BvbnNlU3RhdHVzEhAKA3ZpdBgCIAEoBVIDdml0EkYK", 
          "E3NjZW5lUmV3YXJkQ29tcHJpc2UYAyADKAsyFC5TY2VuZVJld2FyZENvbXBy", 
          "aXNlUhNzY2VuZVJld2FyZENvbXByaXNlOgWYghnJDCJPChFDU1NreUV5ZVJl", 
          "d2FyZFJlcRIaCghza3lFeWVJZBgBIAEoA1IIc2t5RXllSWQ6HpKCGRVvZmZp", 
          "Y2VyL3NreUV5ZS9yZXdhcmSYghnKDCKSAQoRU0NTa3lFeWVSZXdhcmRSZXES", 
          "GgoIc2t5RXllSWQYASABKANSCHNreUV5ZUlkEjcKDlJlc3BvbnNlU3RhdHVz", 
          "GAIgASgLMg8uUmVzcG9uc2VTdGF0dXNSDlJlc3BvbnNlU3RhdHVzEiEKBWl0", 
          "ZW1zGAMgAygLMgsuUmV3YXJkSXRlbVIFaXRlbXM6BZiCGcsMIisKC0NTU2t5", 
          "RXllUmVxOhySghkTb2ZmaWNlci9za3lFeWUvbGlzdJiCGcwMIjYKC1NDU2t5", 
          "RXllUmVxEiAKC2hhc1Jld2FyZGVkGAEgAygDUgtoYXNSZXdhcmRlZDoFmIIZ", 
          "zQwiugEKDERpc2NvdW50SW5mbxIiCgxkaXNjb3VudENvc3QYASABKAVSDGRp", 
          "c2NvdW50Q29zdBIaCghkaXNjb3VudBgCIAEoBVIIZGlzY291bnQSJAoNZGlz", 
          "Y291bnRTdGFydBgDIAEoA1INZGlzY291bnRTdGFydBIgCgtkaXNjb3VudEVu", 
          "ZBgEIAEoA1ILZGlzY291bnRFbmQSIgoMZGlzY291bnRJY29uGAUgASgJUgxk", 
          "aXNjb3VudEljb24i+wEKDU1hcmtldEl0ZW1Nc2cSDgoCaWQYASABKANSAmlk", 
          "EhYKBnNlbGxJZBgCIAEoA1IGc2VsbElkEhwKCXNlbGxDb3VudBgDIAEoBVIJ", 
          "c2VsbENvdW50EiUKCGNvc3RUeXBlGAQgASgOMgkuQ29zdFR5cGVSCGNvc3RU", 
          "eXBlEhIKBGNvc3QYBSABKAVSBGNvc3QSGgoIYnV5TGltaXQYBiABKAVSCGJ1", 
          "eUxpbWl0EjEKDGRpc2NvdW50SW5mbxgHIAEoCzINLkRpc2NvdW50SW5mb1IM", 
          "ZGlzY291bnRJbmZvEhoKCG1heExpbWl0GAggASgFUghtYXhMaW1pdCKrAQoL", 
          "TWFya2V0QmxhY2sSDgoCaWQYASABKANSAmlkEiYKDmxhc3RVcGRhdGVUaW1l", 
          "GAIgASgDUg5sYXN0VXBkYXRlVGltZRImCg5uZXh0VXBkYXRlVGltZRgDIAEo", 
          "A1IObmV4dFVwZGF0ZVRpbWUSHAoJZnJlc2hDb3N0GAQgASgFUglmcmVzaENv", 
          "c3QSHgoKZnJlc2hMaW1pdBgFIAEoBVIKZnJlc2hMaW1pdCJTCg1NYXJrZXRS", 
          "ZXF1ZXN0EiUKCGNhdGVnb3J5GAEgASgOMgkuQ2F0ZWdvcnlSCGNhdGVnb3J5", 
          "OhuSghkScGxheWVyL21hcmtldC9saXN0mIIZpQ0i2QEKDk1hcmtldFJlc3Bv", 
          "bnNlEjcKDnJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXNS", 
          "DnJlc3BvbnNlU3RhdHVzEjAKC21hcmtldEl0ZW1zGAIgAygLMg4uTWFya2V0", 
          "SXRlbU1zZ1ILbWFya2V0SXRlbXMSLgoLbWFya2V0QmxhY2sYAyABKAsyDC5N", 
          "YXJrZXRCbGFja1ILbWFya2V0QmxhY2sSJQoIY2F0ZWdvcnkYBCABKA4yCS5D", 
          "YXRlZ29yeVIIY2F0ZWdvcnk6BZiCGaYNImcKD01hcmtlQnV5UmVxdWVzdBIi", 
          "CgxtYXJrZXRJdGVtSWQYASABKANSDG1hcmtldEl0ZW1JZBIUCgVjb3VudBgC", 
          "IAEoBVIFY291bnQ6GpKCGRFwbGF5ZXIvbWFya2V0L2J1eZiCGacNIngKEE1h", 
          "cmtlQnV5UmVzcG9uc2USNwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNw", 
          "b25zZVN0YXR1c1IOcmVzcG9uc2VTdGF0dXMSJAoFcHJvcHMYAiABKAsyDi5Q", 
          "bGF5ZXJQcm9wTXNnUgVwcm9wczoFmIIZqA0iSgoTQ1NNYXJrZXRJdGVtUmVx", 
          "dWVzdBIWCgZwcm9wSWQYASABKANSBnByb3BJZDobkoIZEnBsYXllci9tYXJr", 
          "ZXQvaXRlbZiCGa8NIogBChRTQ01hcmtldEl0ZW1SZXNwb25zZRI3Cg5yZXNw", 
          "b25zZVN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUg5yZXNwb25zZVN0", 
          "YXR1cxIwCgttYXJrZXRJdGVtcxgCIAEoCzIOLk1hcmtldEl0ZW1Nc2dSC21h", 
          "cmtldEl0ZW1zOgWYghmwDSI3ChFNYXJrZUZyZXNoUmVxdWVzdDoikoIZGXBs", 
          "YXllci9tYXJrZXQvYmxhY2svZnJlc2iYghmpDSLvAQoSTWFya2VGcmVzaFJl", 
          "c3BvbnNlEjcKDnJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0", 
          "dXNSDnJlc3BvbnNlU3RhdHVzEjcKDnBsYXllckJhc2VJbmZvGAIgASgLMg8u", 
          "UGxheWVyQmFzZUluZm9SDnBsYXllckJhc2VJbmZvEi4KC01hcmtldEJsYWNr", 
          "GAMgASgLMgwuTWFya2V0QmxhY2tSC01hcmtldEJsYWNrEjAKC21hcmtldEl0", 
          "ZW1zGAQgAygLMg4uTWFya2V0SXRlbU1zZ1ILbWFya2V0SXRlbXM6BZiCGaoN", 
          "IjgKDlBsYXllckJhc2VJbmZvEhIKBGNvaW4YASABKAVSBGNvaW4SEgoEY2Fz", 
          "aBgCIAEoBVIEY2FzaCJPChNDU05vdGljZUxpc3RSZXF1ZXN0Eg4KAmlkGAEg", 
          "ASgDUgJpZBISCgR0eXBlGAIgASgFUgR0eXBlOhSSghkLbm90aWNlL2xpc3SY", 
          "ghmJDiJEChRTQ05vdGljZUxpc3RSZXNwb25zZRIlCgdub3RpY2VzGAEgAygL", 
          "MgsuTm90aWNlSW5mb1IHbm90aWNlczoFmIIZig4i8gEKCk5vdGljZUluZm8S", 
          "DgoCaWQYASABKANSAmlkEhIKBHR5cGUYAiABKAVSBHR5cGUSGAoHcGljdHVy", 
          "ZRgDIAEoCVIHcGljdHVyZRIUCgV0aXRsZRgEIAEoCVIFdGl0bGUSGAoHY29u", 
          "dGVudBgFIAEoCVIHY29udGVudBIeCgpsZXZlbExpbWl0GAYgASgFUgpsZXZl", 
          "bExpbWl0EhwKCXN0YXJ0VGltZRgHIAEoA1IJc3RhcnRUaW1lEhgKB2VuZFRp", 
          "bWUYCCABKANSB2VuZFRpbWUSHgoKdXBkYXRlVGltZRgJIAEoA1IKdXBkYXRl", 
          "VGltZSIjCg1DU1BpbmdSZXF1ZXN0OhKSghkJcGluZy9waW5nmIIZ7Q4iXQoO", 
          "U0NQaW5nUmVzcG9uc2USFAoFY291bnQYASABKAVSBWNvdW50Ei4KB2NvbnRl", 
          "bnQYAiADKAsyFC5QaW5nUmVzcG9uc2VDb250ZW50Ugdjb250ZW50OgWYghnu", 
          "DiJZChNQaW5nUmVzcG9uc2VDb250ZW50EhQKBW1zZ0lkGAEgASgFUgVtc2dJ", 
          "ZBISCgRkYXRhGAIgASgJUgRkYXRhEhgKB2lzRW1wdHkYAyABKAhSB2lzRW1w", 
          "dHkiKQoQQ1NNZXNzYWdlUmVxdWVzdDoVkoIZDHBpbmcvbWVzc2FnZZiCGe8O", 
          "In4KDkxvdHRvSXRlbVByb3RvEhYKBnByb3BJZBgBIAEoA1IGcHJvcElkEhQK", 
          "BWNvdW50GAIgASgFUgVjb3VudBIYCgdzcGVjaWFsGAMgASgIUgdzcGVjaWFs", 
          "EhQKBWx1Y2t5GAQgASgFUgVsdWNreRIOCgJpZBgFIAEoA1ICaWQiUAoMTG90", 
          "dG9SZXF1ZXN0EiUKCGNvc3RUeXBlGAEgASgOMgkuQ29zdFR5cGVSCGNvc3RU", 
          "eXBlOhmSghkQcGxheWVyL2xvdHRvL2dldJiCGasNIusBCg1Mb3R0b1Jlc3Bv", 
          "bnNlEjcKDnJlc3BvbnNlU3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXNS", 
          "DnJlc3BvbnNlU3RhdHVzEiUKCGNvc3RUeXBlGAIgASgOMgkuQ29zdFR5cGVS", 
          "CGNvc3RUeXBlEhwKCWNvc3RWYWx1ZRgDIAEoBVIJY29zdFZhbHVlEhgKB2xv", 
          "dHRvSWQYBCABKANSB2xvdHRvSWQSJQoFaXRlbXMYBSADKAsyDy5Mb3R0b0l0", 
          "ZW1Qcm90b1IFaXRlbXMSFAoFbHVja3kYBiABKAVSBWx1Y2t5OgWYghmsDSJG", 
          "Cg9Mb3R0b0J1eVJlcXVlc3QSGAoHbG90dG9JZBgBIAEoA1IHbG90dG9JZDoZ", 
          "koIZEHBsYXllci9sb3R0by9idXmYghmtDSKoAQoQTG90dG9CdXlSZXNwb25z", 
          "ZRI3Cg5yZXNwb25zZVN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUg5y", 
          "ZXNwb25zZVN0YXR1cxIkCgVwcm9wcxgCIAMoCzIOLlBsYXllclByb3BNc2dS", 
          "BXByb3BzEg4KAmlkGAMgASgDUgJpZBIeCgpsb3R0b0NvdW50GAQgASgFUgps", 
          "b3R0b0NvdW50OgWYghmuDSKRAQoYQ1NHb29nbGVQYXlDaGFyZ2VSZXF1ZXN0", 
          "EhoKCGpzb25EYXRhGAEgASgJUghqc29uRGF0YRIcCglzaWduYXR1cmUYAiAB", 
          "KAlSCXNpZ25hdHVyZRIcCglwcm9kdWN0SWQYAyABKAlSCXByb2R1Y3RJZDod", 
          "koIZFHBsYXllci9jaGFyZ2UvZ29vZ2xlmIIZsQ0ieQoZU0NHb29nbGVQYXlD", 
          "aGFyZ2VSZXNwb25zZRI3Cg5yZXNwb25zZVN0YXR1cxgBIAEoCzIPLlJlc3Bv", 
          "bnNlU3RhdHVzUg5yZXNwb25zZVN0YXR1cxIcCglwcm9kdWN0SWQYAiABKAlS", 
          "CXByb2R1Y3RJZDoFmIIZsg0ibQoVQ1NJT1NQYXlDaGFyZ2VSZXF1ZXN0EhoK", 
          "CGpzb25EYXRhGAEgASgJUghqc29uRGF0YRIcCglwcm9kdWN0SWQYAiABKAlS", 
          "CXByb2R1Y3RJZDoakoIZEXBsYXllci9jaGFyZ2UvaW9zmIIZsw0ikgEKFlND", 
          "SU9TUGF5Q2hhcmdlUmVzcG9uc2USNwoOcmVzcG9uc2VTdGF0dXMYASABKAsy", 
          "Dy5SZXNwb25zZVN0YXR1c1IOcmVzcG9uc2VTdGF0dXMSHAoJcHJvZHVjdElk", 
          "GAIgASgJUglwcm9kdWN0SWQSGgoIanNvbkRhdGEYAyABKAlSCGpzb25EYXRh", 
          "OgWYghm0DSJOChJTQ0FjY2VwdFRhc2tOb3RpY2USMQoLYWNjZXB0VGFza3MY", 
          "ASADKAsyDy5BY2NlcHRUYXNrSW5mb1ILYWNjZXB0VGFza3M6BZiCGZwOImQK", 
          "DkFjY2VwdFRhc2tJbmZvEhYKBnRhc2tJZBgBIAEoA1IGdGFza0lkEiIKDHBs", 
          "YXllclRhc2tJZBgCIAEoA1IMcGxheWVyVGFza0lkEhYKBnN0YXR1cxgDIAEo", 
          "BVIGc3RhdHVzIlUKEUNTVGFza0xpc3RSZXF1ZXN0EhIKBHR5cGUYASABKAVS", 
          "BHR5cGUSGAoHdGFza0lkcxgCIAMoA1IHdGFza0lkczoSkoIZCXRhc2svbGlz", 
          "dJiCGZ0OIkQKElNDVGFza0xpc3RSZXNwb25zZRInCgl0YXNrSW5mb3MYASAD", 
          "KAsyCS5UYXNrSW5mb1IJdGFza0luZm9zOgWYghmeDiLlAgoIVGFza0luZm8S", 
          "IgoMcGxheWVyVGFza0lkGAEgASgDUgxwbGF5ZXJUYXNrSWQSFgoGdGFza0lk", 
          "GAIgASgDUgZ0YXNrSWQSFgoGc3RhdHVzGAMgASgFUgZzdGF0dXMSFAoFbGV2", 
          "ZWwYBCABKAVSBWxldmVsEjcKDXByb3BQcm9ncmVzc3MYBSADKAsyES5UYXNr", 
          "UHJvcFByb2dyZXNzUg1wcm9wUHJvZ3Jlc3NzEioKEGRpYWxvZ3VlUHJvZ3Jl", 
          "c3MYBiABKAVSEGRpYWxvZ3VlUHJvZ3Jlc3MSJAoNZXZlbnRQcm9ncmVzcxgH", 
          "IAEoBVINZXZlbnRQcm9ncmVzcxIkCg1zY2VuZVByb2dyZXNzGAggASgFUg1z", 
          "Y2VuZVByb2dyZXNzEj4KD2V4aGliaXRQcm9ncmVzcxgJIAMoCzIULlRhc2tF", 
          "eGhpYml0UHJvZ3Jlc3NSD2V4aGliaXRQcm9ncmVzcyJAChBUYXNrUHJvcFBy", 
          "b2dyZXNzEhYKBnByb3BJZBgBIAEoA1IGcHJvcElkEhQKBWNvdW50GAIgASgF", 
          "UgVjb3VudCJJChNUYXNrRXhoaWJpdFByb2dyZXNzEhwKCWV4aGliaXRJZBgB", 
          "IAEoA1IJZXhoaWJpdElkEhQKBWNvdW50GAIgASgFUgVjb3VudCJPChNDU1Rh", 
          "c2tDb21taXRSZXF1ZXN0EiIKDHBsYXllclRhc2tJZBgBIAEoA1IMcGxheWVy", 
          "VGFza0lkOhSSghkLdGFzay9jb21taXSYghmfDiLmAQoUU0NUYXNrQ29tbWl0", 
          "UmVzcG9uc2USFgoGcmVzdWx0GAEgASgFUgZyZXN1bHQSEgoEY29pbhgCIAEo", 
          "BVIEY29pbhISCgRjYXNoGAMgASgFUgRjYXNoEhAKA3ZpdBgEIAEoBVIDdml0", 
          "EhAKA2V4cBgFIAEoBVIDZXhwEhgKB3RpdGxlSWQYBiABKANSB3RpdGxlSWQS", 
          "MQoLcHJvcFJld2FyZHMYByADKAsyDy5UYXNrUHJvcFJld2FyZFILcHJvcFJl", 
          "d2FyZHMSFgoGdGFza0lkGAggASgDUgZ0YXNrSWQ6BZiCGaAOIj4KDlRhc2tQ", 
          "cm9wUmV3YXJkEhYKBnByb3BJZBgBIAEoA1IGcHJvcElkEhQKBWNvdW50GAIg", 
          "ASgFUgVjb3VudCKcAQoYU0NUYXNrU3RhdHVzQ2hhbmdlTm90aWNlEiIKDHBs", 
          "YXllclRhc2tJZBgBIAEoA1IMcGxheWVyVGFza0lkEhYKBnRhc2tJZBgCIAEo", 
          "A1IGdGFza0lkEhYKBnN0YXR1cxgDIAEoBVIGc3RhdHVzEiUKCHRhc2tJbmZv", 
          "GAQgASgLMgkuVGFza0luZm9SCHRhc2tJbmZvOgWYghmhDiJLChpDU1RyaWdn", 
          "ZXJUYXNrQWN0aXZlUmVxdWVzdBIWCgZ0YXNrSWQYASABKANSBnRhc2tJZDoV", 
          "koIZDHRhc2svdHJpZ2dlcpiCGaMOIlQKG1NDVHJpZ2dlclRhc2tBY3RpdmVS", 
          "ZXNwb25zZRIWCgZyZXN1bHQYASABKAVSBnJlc3VsdBIWCgZ0YXNrSWQYAiAB", 
          "KANSBnRhc2tJZDoFmIIZpA4iKwoTQ1NUYXNrSWRMaXN0UmVxdWVzdDoUkoIZ", 
          "C3Rhc2svaWRMaXN0mIIZsQ4iTAoUU0NUYXNrSWRMaXN0UmVzcG9uc2USLQoL", 
          "dGFza0lkSW5mb3MYASADKAsyCy5UYXNrSWRJbmZvUgt0YXNrSWRJbmZvczoF", 
          "mIIZsg4iSAoKVGFza0lkSW5mbxIiCgxwbGF5ZXJUYXNrSWQYASABKANSDHBs", 
          "YXllclRhc2tJZBIWCgZ0YXNrSWQYAiABKANSBnRhc2tJZCI5ChRDU0FjaGll", 
          "dmVtZW50UmVxdWVzdDohkoIZGC9wbGF5ZXIvYWNoaWV2ZW1lbnQvbGlzdJiC", 
          "GaUOIsQBCg5BY2hpZXZlbWVudE1zZxIOCgJpZBgBIAEoA1ICaWQSGgoIcHJv", 
          "Z3Jlc3MYAiABKAVSCHByb2dyZXNzEiIKDHN1Ym1pdFN0YXR1cxgDIAEoBVIM", 
          "c3VibWl0U3RhdHVzEh4KCmZpbmlzaFRpbWUYBCABKANSCmZpbmlzaFRpbWUS", 
          "IAoLZmluaXNoVGltZTEYBSABKANSC2ZpbmlzaFRpbWUxEiAKC2ZpbmlzaFRp", 
          "bWUyGAYgASgDUgtmaW5pc2hUaW1lMiKcAQoVU0NBY2hpZXZlbWVudFJlc3Bv", 
          "bnNlEicKBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0dXMS", 
          "MwoMQWNoaWV2ZW1lbnRzGAIgAygLMg8uQWNoaWV2ZW1lbnRNc2dSDEFjaGll", 
          "dmVtZW50cxIeCgp0b3RhbENvdW50GAMgASgFUgp0b3RhbENvdW50OgWYghmm", 
          "DiJnChpDU0FjaGlldmVtZW50U3VibWl0UmVxdWVzdBIOCgJpZBgBIAEoA1IC", 
          "aWQSFAoFc3RhZ2UYAiABKAVSBXN0YWdlOiOSghkaL3BsYXllci9hY2hpZXZl", 
          "bWVudC9zdWJtaXSYghmnDiJNChtTQ0FjaGlldmVtZW50U3VibWl0UmVzcG9u", 
          "c2USJwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXNSBnN0YXR1czoF", 
          "mIIZqA4iOAoZQ1NBY3Rpdml0eUJhc2VMaXN0UmVxdWVzdDobkoIZEmFjdGl2", 
          "aXR5L2Jhc2UvbGlzdJiCGeUPIlQKGlNDQWN0aXZpdHlCYXNlTGlzdFJlc3Bv", 
          "bnNlEi8KCWJhc2VJbmZvcxgBIAMoCzIRLkFjdGl2aXR5QmFzZUluZm9SCWJh", 
          "c2VJbmZvczoFmIIZ5g8imgMKEEFjdGl2aXR5QmFzZUluZm8SDgoCaWQYASAB", 
          "KANSAmlkEhIKBHR5cGUYAiABKAVSBHR5cGUSEgoEaWNvbhgDIAEoCVIEaWNv", 
          "bhIUCgVkZXNjcxgEIAEoCVIFZGVzY3MSHgoKdGFyZ2V0VHlwZRgFIAEoBVIK", 
          "dGFyZ2V0VHlwZRIiCgx0YXJnZXRQcmVmYWIYBiABKAlSDHRhcmdldFByZWZh", 
          "YhIeCgp3YXJtdXBUaW1lGAcgASgDUgp3YXJtdXBUaW1lEhwKCXN0YXJ0VGlt", 
          "ZRgIIAEoA1IJc3RhcnRUaW1lEhgKB2VuZFRpbWUYCSABKANSB2VuZFRpbWUS", 
          "FAoFc3RhZ2UYCiABKAVSBXN0YWdlEhoKCHRpbWVUeXBlGAsgASgFUgh0aW1l", 
          "VHlwZRISCgRkYXlzGAwgASgFUgRkYXlzEiwKEXBlcnNvbmFsQmVnaW5UaW1l", 
          "GA0gASgDUhFwZXJzb25hbEJlZ2luVGltZRIoCg9wZXJzb25hbEVuZFRpbWUY", 
          "DiABKANSD3BlcnNvbmFsRW5kVGltZSJECghQcm9wSXRlbRIOCgJpZBgBIAEo", 
          "A1ICaWQSEAoDbnVtGAIgASgFUgNudW0SFgoGaGFzTnVtGAMgASgFUgZoYXNO", 
          "dW0iQQoRQ1NBY3Rpdml0eVJlcXVlc3QSDgoCaWQYASABKANSAmlkOhySghkT", 
          "YWN0aXZpdHkvYmFzZS9xdWVzdJiCGegPIrQDChZTQ0FjdGl2aXR5RHJvcFJl", 
          "c3BvbnNlEg4KAmlkGAEgASgDUgJpZBIgCgtkZXNjcmlwdGlvbhgCIAEoCVIL", 
          "ZGVzY3JpcHRpb24SKgoQYmFja2dyb3VuZFNvdXJjZRgDIAEoCVIQYmFja2dy", 
          "b3VuZFNvdXJjZRIiCgx3YXJtdXBTb3VyY2UYBCABKAlSDHdhcm11cFNvdXJj", 
          "ZRIaCghyZXdhcmRpZBgFIAEoA1IIcmV3YXJkaWQSHwoFaXRlbXMYBiADKAsy", 
          "CS5Qcm9wSXRlbVIFaXRlbXMSGAoHc2NlbmVJZBgHIAMoA1IHc2NlbmVJZBIU", 
          "CgVzdGFnZRgIIAEoBVIFc3RhZ2USHAoJaGFzUmV3YXJkGAkgASgIUgloYXNS", 
          "ZXdhcmQSEgoEbmFtZRgKIAEoCVIEbmFtZRIeCgpjb2xsZWN0RGVzGAsgASgJ", 
          "Ugpjb2xsZWN0RGVzEhoKCHNjZW5lRGVzGAwgASgJUghzY2VuZURlcxIiCgxy", 
          "ZXdhcmRTb3VyY2UYDSABKAlSDHJld2FyZFNvdXJjZRISCgR0aXBzGA4gASgJ", 
          "UgR0aXBzOgWYghnpDyJDChdDU0FjdGl2aXR5UmV3YXJkUmVxdWVzdBIOCgJp", 
          "ZBgBIAEoA1ICaWQ6GJKCGQ9hY3Rpdml0eS9yZXdhcmSYghnqDyJ7ChhTQ0Fj", 
          "dGl2aXR5UmV3YXJkUmVzcG9uc2USNwoOcmVzcG9uc2VTdGF0dXMYASABKAsy", 
          "Dy5SZXNwb25zZVN0YXR1c1IOcmVzcG9uc2VTdGF0dXMSHwoFaXRlbXMYAiAD", 
          "KAsyCS5HaWZ0SXRlbVIFaXRlbXM6BZiCGesPIkkKFUNTQ2FydG9vbkVudGVy", 
          "UmVxdWVzdBIYCgdzY2VuZUlkGAEgASgDUgdzY2VuZUlkOhaSghkNY2FydG9v", 
          "bi9lbnRlcpiCGbUQIjcKFlNDQ2FydG9vbkVudGVyUmVzcG9uc2USFgoGcmVz", 
          "dWx0GAEgASgFUgZyZXN1bHQ6BZiCGbYQIjEKFkNTQ2FydG9vblJld2FyZFJl", 
          "cXVlc3Q6F5KCGQ5jYXJ0b29uL3Jld2FyZJiCGbcQIrUBChhTQ0NhcnRvb25S", 
          "ZXdhcmRSZXFzcG9uc2USEgoEY2FzaBgBIAEoBVIEY2FzaBISCgRjb2luGAIg", 
          "ASgFUgRjb2luEhAKA2V4cBgDIAEoBVIDZXhwEhAKA3ZpdBgEIAEoBVIDdml0", 
          "EkYKE3NjZW5lUmV3YXJkQ29tcHJpc2UYBSADKAsyFC5TY2VuZVJld2FyZENv", 
          "bXByaXNlUhNzY2VuZVJld2FyZENvbXByaXNlOgWYghm4ECItChRDU0NhcnRv", 
          "b25RdWl0UmVxdWVzdDoVkoIZDGNhcnRvb24vcXVpdJiCGbkQIikKEkNTRW1h", 
          "aWxMaXN0UmVxdWVzdDoTkoIZCmVtYWlsL2xpc3SYghmZESJAChNTQ0VtYWls", 
          "TGlzdFJlc3BvbnNlEiIKBmVtYWlscxgBIAMoCzIKLkVtYWlsSW5mb1IGZW1h", 
          "aWxzOgWYghmaESLdAQoJRW1haWxJbmZvEg4KAmlkGAEgASgDUgJpZBISCgR0", 
          "eXBlGAIgASgFUgR0eXBlEhYKBnN0YXR1cxgDIAEoBVIGc3RhdHVzEhQKBXRp", 
          "dGxlGAQgASgJUgV0aXRsZRIYCgdjb250ZW50GAUgASgJUgdjb250ZW50EiAK", 
          "C3JlY2VpdmVUaW1lGAYgASgDUgtyZWNlaXZlVGltZRIaCghkZWFkbGluZRgH", 
          "IAEoA1IIZGVhZGxpbmUSJgoHcmV3YXJkcxgIIAMoCzIMLkVtYWlsUmV3YXJk", 
          "UgdyZXdhcmRzIjsKC0VtYWlsUmV3YXJkEhYKBnByb3BJZBgBIAEoA1IGcHJv", 
          "cElkEhQKBWNvdW50GAIgASgFUgVjb3VudCI9ChRDU0VtYWlsUmV3YXJkUmVx", 
          "dWVzdBIOCgJpZBgBIAEoA1ICaWQ6FZKCGQxlbWFpbC9yZXdhcmSYghmbESJG", 
          "ChVTQ0VtYWlsUmV3YXJkUmVzcG9uc2USFgoGcmVzdWx0GAEgASgFUgZyZXN1", 
          "bHQSDgoCaWQYAiABKANSAmlkOgWYghmcESI5ChJDU0VtYWlsUmVhZFJlcXVl", 
          "c3QSDgoCaWQYASABKANSAmlkOhOSghkKZW1haWwvcmVhZJiCGZ0RIjwKE1ND", 
          "RW1haWxDaGFuZ2VOb3RpY2USHgoKc3dpdGNoVGltZRgBIAEoA1IKc3dpdGNo", 
          "VGltZToFmIIZnxEicgoIVGl0bGVNc2cSGAoHdGl0bGVJZBgBIAEoA1IHdGl0", 
          "bGVJZBIaCghkZWFkbGluZRgCIAEoA1IIZGVhZGxpbmUSGAoHZ2V0VGltZRgD", 
          "IAEoA1IHZ2V0VGltZRIWCgZhY3RpdmUYBCABKAhSBmFjdGl2ZSItCg5DU1Rp", 
          "dGxlUmVxdWVzdDobkoIZEi9wbGF5ZXIvdGl0bGUvbGlzdJiCGakOImQKD1ND", 
          "VGl0bGVSZXNwb25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1", 
          "c1IGc3RhdHVzEiEKBnRpdGxlcxgCIAMoCzIJLlRpdGxlTXNnUgZ0aXRsZXM6", 
          "BZiCGaoOIk8KFENTVGl0bGVBY3RpdmVSZXF1ZXN0EhgKB3RpdGxlSWQYASAB", 
          "KANSB3RpdGxlSWQ6HZKCGRQvcGxheWVyL3RpdGxlL2FjdGl2ZZiCGasOImgK", 
          "FVNDVGl0bGVBY3RpdmVSZXNwb25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNw", 
          "b25zZVN0YXR1c1IGc3RhdHVzEh8KBXRpdGxlGAIgASgLMgkuVGl0bGVNc2dS", 
          "BXRpdGxlOgWYghmsDiIvChFDU1RpdGxlR2V0UmVxdWVzdDoakoIZES9wbGF5", 
          "ZXIvdGl0bGUvZ2V0mIIZrQ4iZQoSU0NUaXRsZUdldFJlc3BvbnNlEicKBnN0", 
          "YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0dXMSHwoFdGl0bGUY", 
          "AiABKAsyCS5UaXRsZU1zZ1IFdGl0bGU6BZiCGa4OItEBCg9QbGF5ZXJGcmll", 
          "bmRNc2cSGgoIcGxheWVySWQYASABKANSCHBsYXllcklkEhIKBG5hbWUYAiAB", 
          "KAlSBG5hbWUSFAoFbGV2ZWwYAyABKAVSBWxldmVsEhYKBmdlbmRlchgEIAEo", 
          "BVIGZ2VuZGVyEhIKBGljb24YBSABKAlSBGljb24SGAoHdGl0bGVJZBgGIAEo", 
          "A1IHdGl0bGVJZBISCgRnaWZ0GAcgASgIUgRnaWZ0Eh4KCnN0YXR1c1RpbWUY", 
          "CCABKANSCnN0YXR1c1RpbWUiUgoPQ1NGcmllbmRSZXF1ZXN0EiIKBHR5cGUY", 
          "ASABKA4yDi5GcmllbmRSZXFUeXBlUgR0eXBlOhuSghkScGxheWVyL2ZyaWVu", 
          "ZC9saXN0mIIZ/REioAIKEFNDRnJpZW5kUmVzcG9uc2USJwoGc3RhdHVzGAEg", 
          "ASgLMg8uUmVzcG9uc2VTdGF0dXNSBnN0YXR1cxIqCgdmcmllbmRzGAIgAygL", 
          "MhAuUGxheWVyRnJpZW5kTXNnUgdmcmllbmRzEhQKBWxpbWl0GAMgASgFUgVs", 
          "aW1pdBIUCgV0b3RhbBgEIAEoBVIFdG90YWwSJAoNZ2lmdENvdW50TGVmdBgF", 
          "IAEoBVINZ2lmdENvdW50TGVmdBIiCgRUeXBlGAYgASgOMg4uRnJpZW5kUmVx", 
          "VHlwZVIEVHlwZRIcCglsYXN0QWdyZWUYByABKAhSCWxhc3RBZ3JlZRIcCglh", 
          "ZGRTd2l0Y2gYCCABKAhSCWFkZFN3aXRjaDoFmIIZ/hEiTAoSQ1NGcmllbmRB", 
          "ZGRSZXF1ZXN0EhoKCHBsYXllcklkGAEgASgDUghwbGF5ZXJJZDoakoIZEXBs", 
          "YXllci9mcmllbmQvYWRkmIIZ/xEiRQoTU0NGcmllbmRBZGRSZXNwb25zZRIn", 
          "CgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1c1IGc3RhdHVzOgWYghmA", 
          "EiJMChJDU0ZyaWVuZERlbFJlcXVlc3QSGgoIcGxheWVySWQYASABKANSCHBs", 
          "YXllcklkOhqSghkRcGxheWVyL2ZyaWVuZC9kZWyYghmBEiJFChNTQ0ZyaWVu", 
          "ZERlbFJlc3BvbnNlEicKBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVz", 
          "UgZzdGF0dXM6BZiCGYISIlAKFENTRnJpZW5kQWdyZWVSZXF1ZXN0EhoKCHBs", 
          "YXllcklkGAEgASgDUghwbGF5ZXJJZDockoIZE3BsYXllci9mcmllbmQvYWdy", 
          "ZWWYghmDEiJHChVTQ0ZyaWVuZEFncmVlUmVzcG9uc2USJwoGc3RhdHVzGAEg", 
          "ASgLMg8uUmVzcG9uc2VTdGF0dXNSBnN0YXR1czoFmIIZhBIiVgoXQ1NGcmll", 
          "bmREZWxBcHBseVJlcXVlc3QSGgoIZnJpZW5kSWQYASABKANSCGZyaWVuZElk", 
          "Oh+SghkWcGxheWVyL2ZyaWVuZC9kZWxBcHBseZiCGYUSIkoKGFNDRnJpZW5k", 
          "RGVsQXBwbHlSZXNwb25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0", 
          "YXR1c1IGc3RhdHVzOgWYghmGEiI3ChNDU0ZyaWVuZEdpZnRSZXF1ZXN0OiCS", 
          "ghkXcGxheWVyL2ZyaWVuZC9naWZ0L2xpc3SYghmHEiKOAQoKRnJpZW5kR2lm", 
          "dBI2Cg1wbGF5ZXJGcmllbmRzGAEgASgLMhAuUGxheWVyRnJpZW5kTXNnUg1w", 
          "bGF5ZXJGcmllbmRzEjAKC3BsYXlQcm9wTXNnGAIgASgLMg4uUGxheWVyUHJv", 
          "cE1zZ1ILcGxheVByb3BNc2cSFgoGZ2lmdElkGAMgASgDUgZnaWZ0SWQiqQEK", 
          "FFNDRnJpZW5kR2lmdFJlc3BvbnNlEicKBnN0YXR1cxgBIAEoCzIPLlJlc3Bv", 
          "bnNlU3RhdHVzUgZzdGF0dXMSNQoPZnJpZW5kR2lmdExpc3RzGAIgAygLMgsu", 
          "RnJpZW5kR2lmdFIPZnJpZW5kR2lmdExpc3RzEhQKBWxpbWl0GAMgASgFUgVs", 
          "aW1pdBIUCgVjb3VudBgEIAEoBVIFY291bnQ6BZiCGYgSIlcKF0NTRnJpZW5k", 
          "R2lmdFNlbmRSZXF1ZXN0EhoKCGZyaWVuZElkGAEgASgDUghmcmllbmRJZDog", 
          "koIZF3BsYXllci9mcmllbmQvZ2lmdC9zZW5kmIIZiRIiSgoYU0NGcmllbmRH", 
          "aWZ0U2VuZFJlc3BvbnNlEicKBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3Rh", 
          "dHVzUgZzdGF0dXM6BZiCGYoSIlMKF0NTRnJpZW5kR2lmdERyYXdSZXF1ZXN0", 
          "EhYKBmdpZnRJZBgBIAEoA1IGZ2lmdElkOiCSghkXcGxheWVyL2ZyaWVuZC9n", 
          "aWZ0L2RyYXeYghmMEiKAAQoYU0NGcmllbmRHaWZ0RHJhd1Jlc3BvbnNlEicK", 
          "BnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0dXMSNAoNcGxh", 
          "eWVyUHJvcE1zZxgCIAMoCzIOLlBsYXllclByb3BNc2dSDXBsYXllclByb3BN", 
          "c2c6BZiCGY0SIk4KE0NTRnJpZW5kVmlld1JlcXVlc3QSGgoIZnJpZW5kSWQY", 
          "ASABKANSCGZyaWVuZElkOhuSghkScGxheWVyL2ZyaWVuZC92aWV3mIIZjhIi", 
          "ygEKFEFjaGlldmVtZW50RnJpZW5kTXNnEg4KAmlkGAEgASgDUgJpZBIaCghw", 
          "cm9ncmVzcxgCIAEoBVIIcHJvZ3Jlc3MSIgoMc3VibWl0U3RhdHVzGAMgASgF", 
          "UgxzdWJtaXRTdGF0dXMSHgoKZmluaXNoVGltZRgEIAEoA1IKZmluaXNoVGlt", 
          "ZRIgCgtmaW5pc2hUaW1lMRgFIAEoA1ILZmluaXNoVGltZTESIAoLZmluaXNo", 
          "VGltZTIYBiABKANSC2ZpbmlzaFRpbWUyIsMBChRTQ0ZyaWVuZFZpZXdSZXNw", 
          "b25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1c1IGc3RhdHVz", 
          "EjoKD3BsYXllckZyaWVuZE1zZxgCIAEoCzIQLlBsYXllckZyaWVuZE1zZ1IP", 
          "cGxheWVyRnJpZW5kTXNnEj8KD2FjaGlldmVtZW50TXNncxgDIAMoCzIVLkFj", 
          "aGlldmVtZW50RnJpZW5kTXNnUg9hY2hpZXZlbWVudE1zZ3M6BZiCGY8SIjYK", 
          "FUNTRnJpZW5kU3dpdGNoUmVxdWVzdDodkoIZFHBsYXllci9mcmllbmQvc3dp", 
          "dGNomIIZkBIiSAoWU0NGcmllbmRTd2l0Y2hSZXNwb25zZRInCgZzdGF0dXMY", 
          "ASABKAsyDy5SZXNwb25zZVN0YXR1c1IGc3RhdHVzOgWYghmREiI6ChVTQ0Zy", 
          "aWVuZEFwcGx5UmVzcG9uc2USGgoIZnJpZW5kSWQYASABKANSCGZyaWVuZElk", 
          "OgWYghmTEiI1ChZTQ0ZyaWVuZE5vdGljZVJlc3BvbnNlEhQKBXBvaW50GAEg", 
          "ASgFUgVwb2ludDoFmIIZlBIioAEKEkZyaWVuZFJlY29tbWVuZE1zZxISCgRu", 
          "YW1lGAEgASgJUgRuYW1lEhIKBGJpbmQYAiABKAVSBGJpbmQSFgoGc3RhdHVz", 
          "GAMgASgFUgZzdGF0dXMSFAoFbGV2ZWwYBCABKAVSBWxldmVsEhIKBGljb24Y", 
          "BSABKAlSBGljb24SIAoLcmVjb21tZW5kSWQYBiABKANSC3JlY29tbWVuZElk", 
          "IkUKHENTRnJpZW5kUmVjb21tZW5kTGlzdFJlcXVlc3Q6JZKCGRxwbGF5ZXIv", 
          "ZnJpZW5kL3JlY29tbWVuZC9saXN0mIIZlRIingEKHVNDRnJpZW5kUmVjb21t", 
          "ZW5kTGlzdFJlc3BvbnNlEicKBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3Rh", 
          "dHVzUgZzdGF0dXMSMQoJcmVjb21tZW5kGAIgAygLMhMuRnJpZW5kUmVjb21t", 
          "ZW5kTXNnUglyZWNvbW1lbmQSGgoIdGltZURvd24YAyABKAVSCHRpbWVEb3du", 
          "OgWYghmWEiJlChtDU0ZyaWVuZFJlY29tbWVuZEdldFJlcXVlc3QSIAoLcmVj", 
          "b21tZW5kSWQYASABKANSC3JlY29tbWVuZElkOiSSghkbcGxheWVyL2ZyaWVu", 
          "ZC9yZWNvbW1lbmQvZ2V0mIIZlxIiywEKHFNDRnJpZW5kUmVjb21tZW5kR2V0", 
          "UmVzcG9uc2USJwoGc3RhdHVzGAEgASgLMg8uUmVzcG9uc2VTdGF0dXNSBnN0", 
          "YXR1cxI6Cg9wbGF5ZXJGcmllbmRNc2cYAiABKAsyEC5QbGF5ZXJGcmllbmRN", 
          "c2dSD3BsYXllckZyaWVuZE1zZxI/Cg9hY2hpZXZlbWVudE1zZ3MYAyADKAsy", 
          "FS5BY2hpZXZlbWVudEZyaWVuZE1zZ1IPYWNoaWV2ZW1lbnRNc2dzOgWYghmY", 
          "EiJpCh1DU0ZyaWVuZFJlY29tbWVuZEFwcGx5UmVxdWVzdBIgCgtyZWNvbW1l", 
          "bmRJZBgBIAMoA1ILcmVjb21tZW5kSWQ6JpKCGR1wbGF5ZXIvZnJpZW5kL3Jl", 
          "Y29tbWVuZC9hcHBseZiCGZkSInIKHlNDRnJpZW5kUmVjb21tZW5kQXBwbHlS", 
          "ZXNwb25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1c1IGc3Rh", 
          "dHVzEiAKC3JlY29tbWVuZElkGAIgAygDUgtyZWNvbW1lbmRJZDoFmIIZmhIi", 
          "KwoRQ1NCdWlsZGluZ0xpc3RSZXE6FpKCGQ1idWlsZGluZy9saXN0mIIZ4RIi", 
          "QAoSU0NCdWlsZGluZ0xpc3RSZXNwEiMKBWluZm9zGAEgAygLMg0uQnVpbGRp", 
          "bmdJbmZvUgVpbmZvczoFmIIZ4hIiRgoMQnVpbGRpbmdJbmZvEh4KCmJ1aWxk", 
          "aW5nSWQYASABKANSCmJ1aWxkaW5nSWQSFgoGc3RhdHVzGAIgASgFUgZzdGF0", 
          "dXMiTwoTQ1NCdWlsZGluZ1VubG9ja1JlcRIeCgpidWlsZGluZ0lkGAEgASgD", 
          "UgpidWlsZGluZ0lkOhiSghkPYnVpbGRpbmcvdW5sb2NrmIIZ4xIidgoUU0NC", 
          "dWlsZGluZ1VubG9ja1Jlc3ASNwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5S", 
          "ZXNwb25zZVN0YXR1c1IOcmVzcG9uc2VTdGF0dXMSHgoKYnVpbGRpbmdJZBgC", 
          "IAEoA1IKYnVpbGRpbmdJZDoFmIIZ5BIiQQoQQ1NDYW5UYXNrUmVxdWVzdBIW", 
          "CgZ0YXNrSWQYASABKANSBnRhc2tJZDoVkoIZDHRhc2svY2FuVGFza5iCGbgO", 
          "IkwKEVNDQ2FuVGFza1Jlc3BvbnNlEhgKB2NhblRhc2sYASABKAhSB2NhblRh", 
          "c2sSFgoGdGFza0lkGAIgASgDUgZ0YXNrSWQ6BZiCGbkOIjAKEVNDcmVjZWl2", 
          "ZU5ld1RpdGxlEhQKBXRpdGxlGAEgASgDUgV0aXRsZToFmIIZug4icAoRQ1NS", 
          "ZWdHdWVzdFJlcXVlc3QSGgoIZGV2aWNlSWQYASABKAlSCGRldmljZUlkEhYK", 
          "Bm9zVHlwZRgCIAEoCVIGb3NUeXBlEg4KAmFkGAMgASgJUgJhZDoXkoIZDmF1", 
          "dGgvZ3Vlc3QvcmVnmIIZkAgiawoSU0NSZWdHdWVzdFJlc3BvbnNlEicKBnN0", 
          "YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0dXMSJQoOZ3Vlc3Rf", 
          "aWRlbnRpZnkYAiABKAlSDWd1ZXN0SWRlbnRpZnk6BZiCGZEIIlIKFkNTSWRl", 
          "bnRpZnlDaGVja1JlcXVlc3QSGgoIaWRlbnRpZnkYASABKAlSCGlkZW50aWZ5", 
          "OhySghkTYXV0aC9pZGVudGlmeS9jaGVja5iCGZQIIsMBChdTQ0lkZW50aWZ5", 
          "Q2hlY2tSZXBzb25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1", 
          "c1IGc3RhdHVzEiAKC2FjY2Vzc1Rva2VuGAIgASgJUgthY2Nlc3NUb2tlbhIc", 
          "CglzdGFydFRpbWUYAyABKANSCXN0YXJ0VGltZRIaCghkZWFkbGluZRgEIAEo", 
          "A1IIZGVhZGxpbmUSHAoJdGhpcmRCaW5kGAUgASgFUgl0aGlyZEJpbmQ6BZiC", 
          "GZUIIssBChBDU0ZCTG9naW5SZXF1ZXN0EiAKC2FjY2Vzc1Rva2VuGAEgASgJ", 
          "UgthY2Nlc3NUb2tlbhISCgRmYklkGAIgASgJUgRmYklkEhwKCWV4cGlyZXNJ", 
          "bhgDIAEoA1IJZXhwaXJlc0luEhoKCGRldmljZUlkGAQgASgJUghkZXZpY2VJ", 
          "ZBIfCgZvc1R5cGUYBSABKA4yBy5Pc1R5cGVSBm9zVHlwZRIOCgJhZBgGIAEo", 
          "CVICYWQ6FpKCGQ1hdXRoL2ZiL2xvZ2lumIIZlggijwEKEVNDRkJMb2dpblJl", 
          "c3BvbnNlEicKBnN0YXR1cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0", 
          "dXMSGgoIaWRlbnRpZnkYAiABKAlSCGlkZW50aWZ5Ei4KEmxvbmdMaWZlQWNl", 
          "c3NUb2tlbhgDIAEoCVISbG9uZ0xpZmVBY2Vzc1Rva2VuOgWYghmXCCKYAQoP", 
          "Q1NGQkJpbmRSZXF1ZXN0EhoKCGlkZW50aWZ5GAEgASgJUghpZGVudGlmeRIg", 
          "CgthY2Nlc3NUb2tlbhgCIAEoCVILYWNjZXNzVG9rZW4SEgoEZmJJZBgDIAEo", 
          "CVIEZmJJZBIcCglleHBpcmVzSW4YBCABKANSCWV4cGlyZXNJbjoVkoIZDGF1", 
          "dGgvZmIvYmluZJiCGZgIIqACChBTQ0ZCQmluZFJlc3BvbnNlEicKBnN0YXR1", 
          "cxgBIAEoCzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0dXMSGgoIaWRlbnRpZnkY", 
          "AiABKAlSCGlkZW50aWZ5Ei4KEmxvbmdMaWZlQWNlc3NUb2tlbhgDIAEoCVIS", 
          "bG9uZ0xpZmVBY2Vzc1Rva2VuEiQKDWhhc0JlZW5CaW5kZWQYBCABKAhSDWhh", 
          "c0JlZW5CaW5kZWQSDgoCaWQYBSABKANSAmlkEhIKBG5hbWUYBiABKAlSBG5h", 
          "bWUSFAoFbGV2ZWwYByABKAVSBWxldmVsEhwKCWNhc2hDb3VudBgIIAEoBVIJ", 
          "Y2FzaENvdW50EhIKBGljb24YCSABKAlSBGljb246BZiCGZkIIokBChxTQ0lk", 
          "ZW50aWZ5Q2hlY2tNdWlsdHlNZXNzYWdlEjkKCGNvbnRlbnRzGAEgAygLMh0u", 
          "SWRlbnRpZnlDaGVja1Jlc3BvbnNlQ29udGVudFIIY29udGVudHMSJwoGc3Rh", 
          "dHVzGAIgASgLMg8uUmVzcG9uc2VTdGF0dXNSBnN0YXR1czoFmIIZmggiSAoc", 
          "SWRlbnRpZnlDaGVja1Jlc3BvbnNlQ29udGVudBIUCgVtc2dJZBgBIAEoBVIF", 
          "bXNnSWQSEgoEZGF0YRgCIAEoCVIEZGF0YSJkChVQbGF5ZXJQcm9wU2VsbFJl", 
          "cXVlc3QSMAoLcGxheWVyUHJvcHMYASADKAsyDi5QbGF5ZXJQcm9wTXNnUgtw", 
          "bGF5ZXJQcm9wczoZkoIZEHBsYXllci9wcm9wL3NlbGyYghm3CSJWChZQbGF5", 
          "ZXJQcm9wU2VsbFJlc3Bvc25lEjUKDXJlcG9uc2VTdGF0dXMYASABKAsyDy5S", 
          "ZXNwb25zZVN0YXR1c1INcmVwb25zZVN0YXR1czoFmIIZuAkiVAoJQ1NEcm9w", 
          "UmVxEhYKBnByb3BJZBgBIAEoA1IGcHJvcElkEhQKBWNvdW50GAIgASgFUgVj", 
          "b3VudDoZkoIZEHBsYXllci9wcm9wL2Ryb3CYghm5CSI8CgpTQ0Ryb3BSZXNw", 
          "EicKCWRyb3BJbmZvcxgBIAMoCzIJLkRyb3BJbmZvUglkcm9wSW5mb3M6BZiC", 
          "GboJIkgKFlNDQXV0b09wZW5HaWZ0RHJvcFJlc3ASJwoJZHJvcEluZm9zGAEg", 
          "AygLMgkuRHJvcEluZm9SCWRyb3BJbmZvczoFmIIZuwkiOAoIRHJvcEluZm8S", 
          "FgoGcHJvcElkGAEgASgDUgZwcm9wSWQSFAoFY291bnQYAiABKAVSBWNvdW50", 
          "IkoKE0NTQ2hhdEZpbmlzaFJlcXVlc3QSFgoGY2hhdElkGAEgASgDUgZjaGF0", 
          "SWQ6G5KCGRJwbGF5ZXIvY2hhdC9maW5pc2iYghmzDiJGChRTQ0NoYXRGaW5p", 
          "c2hSZXNwb25zZRInCgZzdGF0dXMYASABKAsyDy5SZXNwb25zZVN0YXR1c1IG", 
          "c3RhdHVzOgWYghm0DiJBChxDU0dldEFsbFJld2FyZGVkVGFza3NSZXF1ZXN0", 
          "OiGSghkYdGFzay9nZXRBbGxSZXdhcmRlZFRhc2tzmIIZtQ4iTQodU0NHZXRB", 
          "bGxSZXdhcmRlZFRhc2tzUmVzcG9uc2USJQoFdGFza3MYASADKAsyDy5UYXNr", 
          "SWRUeXBlSW5mb1IFdGFza3M6BZiCGbYOImIKDlRhc2tJZFR5cGVJbmZvEhYK", 
          "BnRhc2tJZBgBIAEoA1IGdGFza0lkEhwKCWNoYXB0ZXJJZBgCIAEoA1IJY2hh", 
          "cHRlcklkEhoKCHRhc2tUeXBlGAMgASgFUgh0YXNrVHlwZSIvChZDU1BsYXll", 
          "ckNoZWNrSW5JbmZvUmVxOhWSghkMY2hlY2tpbi9pbmZvmIIZ/QoiWgoXU0NQ", 
          "bGF5ZXJDaGVja0luSW5mb1Jlc3ASDgoCaWQYASABKANSAmlkEhAKA2RheRgC", 
          "IAEoBVIDZGF5EhYKBnN0YXR1cxgDIAEoBVIGc3RhdHVzOgWYghn+CiIuChJD", 
          "U1BsYXllckNoZWNrSW5SZXE6GJKCGQ9jaGVja2luL2NoZWNraW6Yghn/CiI0", 
          "ChNTQ1BsYXllckNoZWNrSW5SZXNwEhYKBnJlc3VsdBgBIAEoBVIGcmVzdWx0", 
          "OgWYghmACyJQChRDU1BsYXllclJlbmV3SWNvblJlcRIYCgduZXdJY29uGAEg", 
          "ASgJUgduZXdJY29uOh6SghkVcGxheWVyL2luZm8vcmVuZXdpY29umIIZgQsi", 
          "UAoVU0NQbGF5ZXJSZW5ld0ljb25SZXNwEhYKBnJlc3VsdBgBIAEoBVIGcmVz", 
          "dWx0EhgKB25ld0ljb24YAiABKAlSB25ld0ljb246BZiCGYILIsUBCg9TQ1Bs", 
          "YXllclVwTGV2ZWwSGgoIb2xkTGV2ZWwYASABKAVSCG9sZExldmVsEhoKCG5l", 
          "d0xldmVsGAIgASgFUghuZXdMZXZlbBIlCgdyZXdhcmRzGAMgAygLMgsuUmV3", 
          "YXJkSXRlbVIHcmV3YXJkcxIkCg11bkxvY2tCdWlsZElkGAQgASgDUg11bkxv", 
          "Y2tCdWlsZElkEiYKCHB1c2hJbmZvGAUgASgLMgouUHVzaF9JbmZvUghwdXNo", 
          "SW5mbzoFmIIZgwsiMgoUQ1NQbGF5ZXJHdWlsZFJlcXVlc3Q6GpKCGRFwbGF5", 
          "ZXIvaW5mby9ndWlsZJiCGYQLIjQKFVNDUGxheWVyR3VpbGRSZXNwb25zZRIU", 
          "CgVndWlsZBgBIAEoCVIFZ3VpbGQ6BZiCGYULIlQKGkNTUGxheWVyR3VpbGRV", 
          "cGRhdGVSZXF1ZXN0EhQKBWd1aWxkGAEgASgJUgVndWlsZDogkoIZF3BsYXll", 
          "ci9pbmZvL2d1aWxkVXBkYXRlmIIZhgsi9QEKF0NTUGxheWVyRmVlZGJhY2tS", 
          "ZXF1ZXN0EhgKB2NvbnRlbnQYASABKAlSB2NvbnRlbnQSGgoIcGxhdGZvcm0Y", 
          "AiABKAlSCHBsYXRmb3JtEhgKB3JlbGVhc2UYAyABKAlSB3JlbGVhc2USMQoM", 
          "ZmVlZGJhY2tUeXBlGAQgASgOMg0uRmVlZGJhY2tUeXBlUgxmZWVkYmFja1R5", 
          "cGUSFAoFZW1haWwYBSABKAlSBWVtYWlsEiAKC2luZm9ybWF0aW9uGAYgASgJ", 
          "UgtpbmZvcm1hdGlvbjofkoIZFnBsYXllci9mZWVkYmFjay9zdWJtaXSYghnE", 
          "EyKUAQoYU0NQbGF5ZXJGZWVkYmFja1Jlc3BvbnNlEicKBnN0YXR1cxgBIAEo", 
          "CzIPLlJlc3BvbnNlU3RhdHVzUgZzdGF0dXMSLAoRbmV4dEF2YWlsYWJsZVRp", 
          "bWUYAiABKANSEW5leHRBdmFpbGFibGVUaW1lEhoKCHRpbWVMZWZ0GAMgASgF", 
          "Ugh0aW1lTGVmdDoFmIIZxRMiNAobU0NBY2hpZXZlbWVudFVubG9ja1Jlc3Bv", 
          "bnNlEg4KAmlkGAEgASgDUgJpZDoFmIIZtw4iOAoVU0NBY3Rpdml0eU5ld1Jl", 
          "c3BvbnNlEhgKB2hhdmVOZXcYASABKAVSB2hhdmVOZXc6BZiCGecPIoUBChdD", 
          "U1NjZW5lUmVjb25uZWN0UmVxdWVzdBIYCgdzY2VuZUlkGAEgASgDUgdzY2Vu", 
          "ZUlkEhwKCXN0YXJ0VGltZRgCIAEoA1IJc3RhcnRUaW1lEhgKB2VuZFRpbWUY", 
          "AyABKANSB2VuZFRpbWU6GJKCGQ9zY2VuZS9yZWNvbm5lY3SYghnbCCJaChhT", 
          "Q1NjZW5lUmVjb25uZWN0UmVzcG9uc2USNwoOcmVzcG9uc2VTdGF0dXMYASAB", 
          "KAsyDy5SZXNwb25zZVN0YXR1c1IOcmVzcG9uc2VTdGF0dXM6BZiCGdwIIkwK", 
          "FENTU2NlbmVEaWZmaWN1bHR5UmVxEhYKBmJpZ0lkcxgBIAMoA1IGYmlnSWRz", 
          "OhySghkTc2NlbmUvZ2V0RGlmZmljdWx0eZiCGd0IIl0KE1NjZW5lRGlmZmlj", 
          "dWx0eUluZm8SFAoFYmlnSWQYASABKANSBWJpZ0lkEh4KCmRpZmZpY3VsdHkY", 
          "AiABKAVSCmRpZmZpY3VsdHkSEAoDZXhwGAMgASgFUgNleHAiSgoVU0NTY2Vu", 
          "ZURpZmZpY3VsdHlSZXNwEioKBWluZm9zGAEgAygLMhQuU2NlbmVEaWZmaWN1", 
          "bHR5SW5mb1IFaW5mb3M6BZiCGd4IIocBChhDU0ppZ3Nhd1JlY29ubmVjdFJl", 
          "cXVlc3QSGAoHc2NlbmVJZBgBIAEoA1IHc2NlbmVJZBIcCglzdGFydFRpbWUY", 
          "AiABKANSCXN0YXJ0VGltZRIYCgdlbmRUaW1lGAMgASgDUgdlbmRUaW1lOhmS", 
          "ghkQamlnc2F3L3JlY29ubmVjdJiCGaMKIlsKGVNDSmlnc2F3UmVjb25uZWN0", 
          "UmVzcG9uc2USNwoOcmVzcG9uc2VTdGF0dXMYASABKAsyDy5SZXNwb25zZVN0", 
          "YXR1c1IOcmVzcG9uc2VTdGF0dXM6BZiCGaQKIjsKEVNlcnZpY2VDb25maWdJ", 
          "bmZvEhAKA2tleRgBIAEoCVIDa2V5EhQKBXZhbHVlGAIgASgJUgV2YWx1ZSI6", 
          "ChlDU0dldFNlcnZpY2VDb25maWdSZXF1ZXN0Oh2SghkUc3lzL2dldFNlcnZp", 
          "Y2VDb25maWeYghmbEiJLChpTQ0dldFNlcnZpY2VDb25maWdSZXNwb25zZRIm", 
          "CgRpbmZvGAEgAygLMhIuU2VydmljZUNvbmZpZ0luZm9SBGluZm86BZiCGZwS", 
          "IlgKH0NTR2V0U2VydmljZUNvbmZpZ1NpbmdsZVJlcXVlc3QSEAoDa2V5GAEg", 
          "ASgJUgNrZXk6I5KCGRpzeXMvZ2V0U2luZ2xlU2VydmljZUNvbmZpZ5iCGZ0S", 
          "Ij8KIFNDR2V0U2VydmljZUNvbmZpZ1NpbmdsZVJlc3BvbnNlEhQKBXZhbHVl", 
          "GAEgASgJUgV2YWx1ZToFmIIZnhIidwoLR2V0UGF0aEluZm8SDgoCaWQYASAB", 
          "KANSAmlkEhIKBHBhdGgYAiABKAlSBHBhdGgSFgoGc3RhdHVzGAMgASgFUgZz", 
          "dGF0dXMSGAoHdmVyc2lvbhgEIAEoCVIHdmVyc2lvbhISCgRwbGF0GAUgASgJ", 
          "UgRwbGF0Ij8KFkNTR2V0UGF0aENvbmZpZ1JlcXVlc3QSEgoEcGxhdBgBIAEo", 
          "CVIEcGxhdDoRkoIZCHN5cy9wYXRomIIZnxIiRAoXU0NHZXRQYXRoQ29uZmln", 
          "UmVzcG9uc2USIgoFaW5mb3MYASABKAsyDC5HZXRQYXRoSW5mb1IFaW5mb3M6", 
          "BZiCGaASIp0BChJDU0NsaWVudExvZ1JlcXVlc3QSHQoKZXZlbnRfbmFtZRgB", 
          "IAEoCVIJZXZlbnROYW1lEhwKCXZhbHVlNHN1bRgCIAEoAlIJdmFsdWU0c3Vt", 
          "EhYKBnBhcmFtcxgDIAEoCVIGcGFyYW1zEhoKCHBsYXllcklkGAQgASgDUghw", 
          "bGF5ZXJJZDoWkoIZDXN5cy9jbGllbnRMb2eYghmhEiKlAQoTU2NlbmVSZXdh", 
          "cmRDb21wcmlzZRISCgR0eXBlGAEgASgFUgR0eXBlEh4KCm91dHB1dENvaW4Y", 
          "AiABKAVSCm91dHB1dENvaW4SHgoKb3V0cHV0Q2FzaBgDIAEoBVIKb3V0cHV0", 
          "Q2FzaBIcCglvdXRwdXRWaXQYBCABKAVSCW91dHB1dFZpdBIcCglvdXRwdXRF", 
          "eHAYBSABKAVSCW91dHB1dEV4cCJnCglQdXNoX0luZm8SEgoEdHlwZRgBIAEo", 
          "BVIEdHlwZRIWCgZwdXNoSWQYAiABKANSBnB1c2hJZBIYCgdlbmRUaW1lGAMg", 
          "ASgDUgdlbmRUaW1lEhQKBWJ1eWVkGAQgASgIUgVidXllZCIpChBDU0dldFB1", 
          "c2hSZXF1ZXN0OhWSghkMcHVzaC9nZXRQdXNomIIZ8RUiPAoRU0NHZXRQdXNo", 
          "UmVzcG9uc2USIAoFaW5mb3MYASADKAsyCi5QdXNoX0luZm9SBWluZm9zOgWY", 
          "ghnyFSJBChBDU0J1eVB1c2hSZXF1ZXN0EhYKBnB1c2hJZBgBIAEoA1IGcHVz", 
          "aElkOhWSghkMcHVzaC9idXlQdXNomIIZ8xUiaQoRU0NCdXlQdXNoUmVzcG9u", 
          "c2USFgoGcHVzaElkGAEgASgDUgZwdXNoSWQSNQoNcmVwb25zZVN0YXR1cxgC", 
          "IAEoCzIPLlJlc3BvbnNlU3RhdHVzUg1yZXBvbnNlU3RhdHVzOgWYghn0FSIt", 
          "ChRDU0NvbWJpbmVJbmZvUmVxdWVzdDoVkoIZDGNvbWJpbmUvbGlzdJiCGe0L", 
          "InIKFVNDQ29tYmluZUluZm9SZXNwb25zZRIcCgljb21iaW5lSWQYASADKANS", 
          "CWNvbWJpbmVJZBIUCgVjb3VudBgCIAMoBVIFY291bnQSHgoKY291bnRMaW1p", 
          "dBgDIAMoBVIKY291bnRMaW1pdDoFmIIZ7gsiRQoQQ1NDb21iaW5lUmVxdWVz", 
          "dBIcCgljb21iaW5lSWQYASABKANSCWNvbWJpbmVJZDoTkoIZCmNvbWJpbmUv", 
          "ZG+YghnvCyJdChFTQ0NvbWJpbmVSZXNwb25zZRInCgZyZXN1bHQYASABKAsy", 
          "Dy5SZXNwb25zZVN0YXR1c1IGcmVzdWx0EhgKB3N1Y2Nlc3MYAiABKAhSB3N1", 
          "Y2Nlc3M6BZiCGfALKisKDEluT3JPdXRTY2VuZRINCglPVVRfU0NFTkUQABIM", 
          "CghJTl9TQ0VORRABKj4KCENhdGVnb3J5EggKBENBU0gQABIICgRDT0lOEAES", 
          "BwoDVklUEAISCgoGQ09NTU9OEAMSCQoFQkxBQ0sQBCo5CghDb3N0VHlwZRIN", 
          "CglDT1NUX0NBU0gQABINCglDT1NUX0NPSU4QARIPCgtDT1NUX0RPTExBUhAC", 
          "KkMKDUZyaWVuZFJlcVR5cGUSDAoIQVBQTFlJTkcQABIMCghBR1JFRUlORxAB", 
          "EgsKB0FERElORk8QAhIJCgVBRERFRBADKicKBk9zVHlwZRIHCgNpb3MQABIL", 
          "CgdhbmRvcmlkEAESBwoDd2ViEAIqFwoMRmVlZGJhY2tUeXBlEgcKA0FMTBAA", 
          "QiYKH2NvbS5mb3RvYWJsZS5jb25hbi5jb21tb24ucHJvdG9CA01zZ2IGcHJv", 
        "dG8z"));
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_ExceptionResponse__Descriptor = Descriptor.MessageTypes[0];
      internal__static_ExceptionResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ExceptionResponse, global::ExceptionResponse.Builder>(internal__static_ExceptionResponse__Descriptor,
              new string[] { "Status", });
      internal__static_ExceptionRemoteLoginResponse__Descriptor = Descriptor.MessageTypes[1];
      internal__static_ExceptionRemoteLoginResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ExceptionRemoteLoginResponse, global::ExceptionRemoteLoginResponse.Builder>(internal__static_ExceptionRemoteLoginResponse__Descriptor,
              new string[] { "Status", });
      internal__static_ResponseStatus__Descriptor = Descriptor.MessageTypes[2];
      internal__static_ResponseStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ResponseStatus, global::ResponseStatus.Builder>(internal__static_ResponseStatus__Descriptor,
              new string[] { "Code", "Msg", });
      internal__static_GmAddAttr__Descriptor = Descriptor.MessageTypes[3];
      internal__static_GmAddAttr__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GmAddAttr, global::GmAddAttr.Builder>(internal__static_GmAddAttr__Descriptor,
              new string[] { "PlayerId", "Count", "Type", });
      internal__static_GmAddProp__Descriptor = Descriptor.MessageTypes[4];
      internal__static_GmAddProp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GmAddProp, global::GmAddProp.Builder>(internal__static_GmAddProp__Descriptor,
              new string[] { "PlayerId", "PropId", "Count", });
      internal__static_GmFinishTask__Descriptor = Descriptor.MessageTypes[5];
      internal__static_GmFinishTask__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GmFinishTask, global::GmFinishTask.Builder>(internal__static_GmFinishTask__Descriptor,
              new string[] { "PlayerId", "ChapterId", "TaskId", });
      internal__static_GmOfficer__Descriptor = Descriptor.MessageTypes[6];
      internal__static_GmOfficer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GmOfficer, global::GmOfficer.Builder>(internal__static_GmOfficer__Descriptor,
              new string[] { "PlayerId", "OfficerId", "Type", });
      internal__static_GMGetPlayerMessageRequest__Descriptor = Descriptor.MessageTypes[7];
      internal__static_GMGetPlayerMessageRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GMGetPlayerMessageRequest, global::GMGetPlayerMessageRequest.Builder>(internal__static_GMGetPlayerMessageRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_GMGetPlayerMessageResponse__Descriptor = Descriptor.MessageTypes[8];
      internal__static_GMGetPlayerMessageResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GMGetPlayerMessageResponse, global::GMGetPlayerMessageResponse.Builder>(internal__static_GMGetPlayerMessageResponse__Descriptor,
              new string[] { "Message", });
      internal__static_CSEnterRequest__Descriptor = Descriptor.MessageTypes[9];
      internal__static_CSEnterRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEnterRequest, global::CSEnterRequest.Builder>(internal__static_CSEnterRequest__Descriptor,
              new string[] { "PlayerId", "SceneId", "OfficerIds", });
      internal__static_SCEnterResponse__Descriptor = Descriptor.MessageTypes[10];
      internal__static_SCEnterResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEnterResponse, global::SCEnterResponse.Builder>(internal__static_SCEnterResponse__Descriptor,
              new string[] { "Result", "VitConsume", "Seconds", "Fragments", "OfficerIds", });
      internal__static_CSQuitRequest__Descriptor = Descriptor.MessageTypes[11];
      internal__static_CSQuitRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSQuitRequest, global::CSQuitRequest.Builder>(internal__static_CSQuitRequest__Descriptor,
              new string[] { "PlayerId", "SceneId", });
      internal__static_SCQuitResponse__Descriptor = Descriptor.MessageTypes[12];
      internal__static_SCQuitResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCQuitResponse, global::SCQuitResponse.Builder>(internal__static_SCQuitResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSSuspendRequest__Descriptor = Descriptor.MessageTypes[13];
      internal__static_CSSuspendRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSuspendRequest, global::CSSuspendRequest.Builder>(internal__static_CSSuspendRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCSuspendResponse__Descriptor = Descriptor.MessageTypes[14];
      internal__static_SCSuspendResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSuspendResponse, global::SCSuspendResponse.Builder>(internal__static_SCSuspendResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSResumeRequest__Descriptor = Descriptor.MessageTypes[15];
      internal__static_CSResumeRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSResumeRequest, global::CSResumeRequest.Builder>(internal__static_CSResumeRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCResumeResponse__Descriptor = Descriptor.MessageTypes[16];
      internal__static_SCResumeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCResumeResponse, global::SCResumeResponse.Builder>(internal__static_SCResumeResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSStartRequest__Descriptor = Descriptor.MessageTypes[17];
      internal__static_CSStartRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSStartRequest, global::CSStartRequest.Builder>(internal__static_CSStartRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCStartResponse__Descriptor = Descriptor.MessageTypes[18];
      internal__static_SCStartResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCStartResponse, global::SCStartResponse.Builder>(internal__static_SCStartResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSFinishRequest__Descriptor = Descriptor.MessageTypes[19];
      internal__static_CSFinishRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFinishRequest, global::CSFinishRequest.Builder>(internal__static_CSFinishRequest__Descriptor,
              new string[] { "SceneId", "Result", "RestTime", "AllTime", });
      internal__static_SCFinishResponse__Descriptor = Descriptor.MessageTypes[20];
      internal__static_SCFinishResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFinishResponse, global::SCFinishResponse.Builder>(internal__static_SCFinishResponse__Descriptor,
              new string[] { "Result", "SceneId", "PropId", "Rewards", "JigsawState", "SceneRewardComprise", });
      internal__static_Reward__Descriptor = Descriptor.MessageTypes[21];
      internal__static_Reward__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Reward, global::Reward.Builder>(internal__static_Reward__Descriptor,
              new string[] { "Percent", "Type", "Num", });
      internal__static_CSRegRequest__Descriptor = Descriptor.MessageTypes[22];
      internal__static_CSRegRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRegRequest, global::CSRegRequest.Builder>(internal__static_CSRegRequest__Descriptor,
              new string[] { "Username", "Pwd", });
      internal__static_SCRegResponse__Descriptor = Descriptor.MessageTypes[23];
      internal__static_SCRegResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRegResponse, global::SCRegResponse.Builder>(internal__static_SCRegResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSAuthRequest__Descriptor = Descriptor.MessageTypes[24];
      internal__static_CSAuthRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAuthRequest, global::CSAuthRequest.Builder>(internal__static_CSAuthRequest__Descriptor,
              new string[] { "Username", "Pwd", });
      internal__static_SCAuthResponse__Descriptor = Descriptor.MessageTypes[25];
      internal__static_SCAuthResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAuthResponse, global::SCAuthResponse.Builder>(internal__static_SCAuthResponse__Descriptor,
              new string[] { "Result", "AccessToken", "Username", });
      internal__static_CSloginRequest__Descriptor = Descriptor.MessageTypes[26];
      internal__static_CSloginRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSloginRequest, global::CSloginRequest.Builder>(internal__static_CSloginRequest__Descriptor,
              new string[] { "Username", "Pwd", "Platform", "Nickname", });
      internal__static_SCloginResponse__Descriptor = Descriptor.MessageTypes[27];
      internal__static_SCloginResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCloginResponse, global::SCloginResponse.Builder>(internal__static_SCloginResponse__Descriptor,
              new string[] { "Result", "PlayerId", "PlayerName", "PlayerIcon", "Coin", "Cash", "Vit", "Level", "Exp", "LaborUnion", "UpgradeExp", "ExpMultiple", "Platform", "Nickname", "AccessToken", "LastAddVitTime", "MillisRecoverOneVit", "HasRenamed", });
      internal__static_CSChapterListRequest__Descriptor = Descriptor.MessageTypes[28];
      internal__static_CSChapterListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSChapterListRequest, global::CSChapterListRequest.Builder>(internal__static_CSChapterListRequest__Descriptor,
              new string[] { });
      internal__static_SCChapterListResponse__Descriptor = Descriptor.MessageTypes[29];
      internal__static_SCChapterListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCChapterListResponse, global::SCChapterListResponse.Builder>(internal__static_SCChapterListResponse__Descriptor,
              new string[] { "Chapters", });
      internal__static_PlayerChapterInfo__Descriptor = Descriptor.MessageTypes[30];
      internal__static_PlayerChapterInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerChapterInfo, global::PlayerChapterInfo.Builder>(internal__static_PlayerChapterInfo__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "Status", });
      internal__static_CSChapterDetailRequest__Descriptor = Descriptor.MessageTypes[31];
      internal__static_CSChapterDetailRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSChapterDetailRequest, global::CSChapterDetailRequest.Builder>(internal__static_CSChapterDetailRequest__Descriptor,
              new string[] { "PlayerChapterId", });
      internal__static_SCChapterDetailResponse__Descriptor = Descriptor.MessageTypes[32];
      internal__static_SCChapterDetailResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCChapterDetailResponse, global::SCChapterDetailResponse.Builder>(internal__static_SCChapterDetailResponse__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "Status", "Npcs", "Clues", "Scenes", "Tasks", });
      internal__static_ChapterNpcInfo__Descriptor = Descriptor.MessageTypes[33];
      internal__static_ChapterNpcInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ChapterNpcInfo, global::ChapterNpcInfo.Builder>(internal__static_ChapterNpcInfo__Descriptor,
              new string[] { "NpcId", "Status", "DialogueId", });
      internal__static_ChapterClueInfo__Descriptor = Descriptor.MessageTypes[34];
      internal__static_ChapterClueInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ChapterClueInfo, global::ChapterClueInfo.Builder>(internal__static_ChapterClueInfo__Descriptor,
              new string[] { "ClueId", "Status", });
      internal__static_ChapterSceneInfo__Descriptor = Descriptor.MessageTypes[35];
      internal__static_ChapterSceneInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ChapterSceneInfo, global::ChapterSceneInfo.Builder>(internal__static_ChapterSceneInfo__Descriptor,
              new string[] { "SceneId", "Status", });
      internal__static_ChapterTaskInfo__Descriptor = Descriptor.MessageTypes[36];
      internal__static_ChapterTaskInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ChapterTaskInfo, global::ChapterTaskInfo.Builder>(internal__static_ChapterTaskInfo__Descriptor,
              new string[] { "TaskId", "Status", });
      internal__static_SCClueUnlockNotice__Descriptor = Descriptor.MessageTypes[37];
      internal__static_SCClueUnlockNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCClueUnlockNotice, global::SCClueUnlockNotice.Builder>(internal__static_SCClueUnlockNotice__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "ClueId", });
      internal__static_SCNpcUnLockNotice__Descriptor = Descriptor.MessageTypes[38];
      internal__static_SCNpcUnLockNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCNpcUnLockNotice, global::SCNpcUnLockNotice.Builder>(internal__static_SCNpcUnLockNotice__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "NpcId", });
      internal__static_SCSceneUnLockNotice__Descriptor = Descriptor.MessageTypes[39];
      internal__static_SCSceneUnLockNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneUnLockNotice, global::SCSceneUnLockNotice.Builder>(internal__static_SCSceneUnLockNotice__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "SceneId", });
      internal__static_SCChapterTaskStatusChangeNotice__Descriptor = Descriptor.MessageTypes[40];
      internal__static_SCChapterTaskStatusChangeNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCChapterTaskStatusChangeNotice, global::SCChapterTaskStatusChangeNotice.Builder>(internal__static_SCChapterTaskStatusChangeNotice__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "TaskId", "NewStatus", });
      internal__static_SCChapterStatusChangeNotice__Descriptor = Descriptor.MessageTypes[41];
      internal__static_SCChapterStatusChangeNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCChapterStatusChangeNotice, global::SCChapterStatusChangeNotice.Builder>(internal__static_SCChapterStatusChangeNotice__Descriptor,
              new string[] { "PlayerChapterId", "ChapterId", "NewStatus", });
      internal__static_SCChapterRedNotice__Descriptor = Descriptor.MessageTypes[42];
      internal__static_SCChapterRedNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCChapterRedNotice, global::SCChapterRedNotice.Builder>(internal__static_SCChapterRedNotice__Descriptor,
              new string[] { "Reds", });
      internal__static_CSClearChapterRedRequest__Descriptor = Descriptor.MessageTypes[43];
      internal__static_CSClearChapterRedRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClearChapterRedRequest, global::CSClearChapterRedRequest.Builder>(internal__static_CSClearChapterRedRequest__Descriptor,
              new string[] { "ClearType", });
      internal__static_CSSceneEnterRequest__Descriptor = Descriptor.MessageTypes[44];
      internal__static_CSSceneEnterRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneEnterRequest, global::CSSceneEnterRequest.Builder>(internal__static_CSSceneEnterRequest__Descriptor,
              new string[] { "PlayerId", "SceneId", "OfficerIds", });
      internal__static_SCSceneEnterResponse__Descriptor = Descriptor.MessageTypes[45];
      internal__static_SCSceneEnterResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneEnterResponse, global::SCSceneEnterResponse.Builder>(internal__static_SCSceneEnterResponse__Descriptor,
              new string[] { "ResponseStatus", "SceneExhibits", "TaskExhibits", "VitConsume", "Seconds", "OfficerIds", "IsDropScene", "DropItems", "MultiId", });
      internal__static_CSSceneRewardRequest__Descriptor = Descriptor.MessageTypes[46];
      internal__static_CSSceneRewardRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneRewardRequest, global::CSSceneRewardRequest.Builder>(internal__static_CSSceneRewardRequest__Descriptor,
              new string[] { "PlayerId", "SceneId", "Result", "CostTime", "UseClickCount", });
      internal__static_SCSceneRewardResponse__Descriptor = Descriptor.MessageTypes[47];
      internal__static_SCSceneRewardResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneRewardResponse, global::SCSceneRewardResponse.Builder>(internal__static_SCSceneRewardResponse__Descriptor,
              new string[] { "ResponseStatus", "SceneId", "OutputCoin", "OutputCash", "OutputVit", "OutputExp", "GiftItems", "SceneRewardComprise", "Difficulty", "Exp", "UpLevelRewards", });
      internal__static_GiftItem__Descriptor = Descriptor.MessageTypes[48];
      internal__static_GiftItem__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GiftItem, global::GiftItem.Builder>(internal__static_GiftItem__Descriptor,
              new string[] { "ItemId", "Num", });
      internal__static_CSSceneQuitRequest__Descriptor = Descriptor.MessageTypes[49];
      internal__static_CSSceneQuitRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneQuitRequest, global::CSSceneQuitRequest.Builder>(internal__static_CSSceneQuitRequest__Descriptor,
              new string[] { "PlayerId", "Type", });
      internal__static_SCSceneQuitResponse__Descriptor = Descriptor.MessageTypes[50];
      internal__static_SCSceneQuitResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneQuitResponse, global::SCSceneQuitResponse.Builder>(internal__static_SCSceneQuitResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSSceneSuspendRequest__Descriptor = Descriptor.MessageTypes[51];
      internal__static_CSSceneSuspendRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneSuspendRequest, global::CSSceneSuspendRequest.Builder>(internal__static_CSSceneSuspendRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCSceneSuspendResponse__Descriptor = Descriptor.MessageTypes[52];
      internal__static_SCSceneSuspendResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneSuspendResponse, global::SCSceneSuspendResponse.Builder>(internal__static_SCSceneSuspendResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSSceneResumeRequest__Descriptor = Descriptor.MessageTypes[53];
      internal__static_CSSceneResumeRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneResumeRequest, global::CSSceneResumeRequest.Builder>(internal__static_CSSceneResumeRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCSceneResumeResponse__Descriptor = Descriptor.MessageTypes[54];
      internal__static_SCSceneResumeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneResumeResponse, global::SCSceneResumeResponse.Builder>(internal__static_SCSceneResumeResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSSceneStartRequest__Descriptor = Descriptor.MessageTypes[55];
      internal__static_CSSceneStartRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneStartRequest, global::CSSceneStartRequest.Builder>(internal__static_CSSceneStartRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCSceneStartResponse__Descriptor = Descriptor.MessageTypes[56];
      internal__static_SCSceneStartResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneStartResponse, global::SCSceneStartResponse.Builder>(internal__static_SCSceneStartResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSSearchSceneSelectOfficerReq__Descriptor = Descriptor.MessageTypes[57];
      internal__static_CSSearchSceneSelectOfficerReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSearchSceneSelectOfficerReq, global::CSSearchSceneSelectOfficerReq.Builder>(internal__static_CSSearchSceneSelectOfficerReq__Descriptor,
              new string[] { "OfficerIds", });
      internal__static_SCSearchSceneSelectOfficerResp__Descriptor = Descriptor.MessageTypes[58];
      internal__static_SCSearchSceneSelectOfficerResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSearchSceneSelectOfficerResp, global::SCSearchSceneSelectOfficerResp.Builder>(internal__static_SCSearchSceneSelectOfficerResp__Descriptor,
              new string[] { "VitConsume", "CostSeconds", "ResponseStatus", });
      internal__static_CSBuyItemRequest__Descriptor = Descriptor.MessageTypes[59];
      internal__static_CSBuyItemRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBuyItemRequest, global::CSBuyItemRequest.Builder>(internal__static_CSBuyItemRequest__Descriptor,
              new string[] { "PlayerId", "PropId", "Count", });
      internal__static_SCBuyItemResponse__Descriptor = Descriptor.MessageTypes[60];
      internal__static_SCBuyItemResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBuyItemResponse, global::SCBuyItemResponse.Builder>(internal__static_SCBuyItemResponse__Descriptor,
              new string[] { "PropId", "Count", "Result", });
      internal__static_PlayerPropMsg__Descriptor = Descriptor.MessageTypes[61];
      internal__static_PlayerPropMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerPropMsg, global::PlayerPropMsg.Builder>(internal__static_PlayerPropMsg__Descriptor,
              new string[] { "PropId", "Count", "ExpireTime", });
      internal__static_CSPlayerPropRequest__Descriptor = Descriptor.MessageTypes[62];
      internal__static_CSPlayerPropRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerPropRequest, global::CSPlayerPropRequest.Builder>(internal__static_CSPlayerPropRequest__Descriptor,
              new string[] { });
      internal__static_SCPlayerPropResponse__Descriptor = Descriptor.MessageTypes[63];
      internal__static_SCPlayerPropResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerPropResponse, global::SCPlayerPropResponse.Builder>(internal__static_SCPlayerPropResponse__Descriptor,
              new string[] { "ReponseStatus", "PlayerProps", "RecentProps", });
      internal__static_CSPlayerPropRecentRequest__Descriptor = Descriptor.MessageTypes[64];
      internal__static_CSPlayerPropRecentRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerPropRecentRequest, global::CSPlayerPropRecentRequest.Builder>(internal__static_CSPlayerPropRecentRequest__Descriptor,
              new string[] { });
      internal__static_SCPlayerPropRecentResposne__Descriptor = Descriptor.MessageTypes[65];
      internal__static_SCPlayerPropRecentResposne__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerPropRecentResposne, global::SCPlayerPropRecentResposne.Builder>(internal__static_SCPlayerPropRecentResposne__Descriptor,
              new string[] { "ReponseStatus", });
      internal__static_ReponseStatus__Descriptor = Descriptor.MessageTypes[66];
      internal__static_ReponseStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ReponseStatus, global::ReponseStatus.Builder>(internal__static_ReponseStatus__Descriptor,
              new string[] { "Code", "Msg", });
      internal__static_CSPlayerInfoRequest__Descriptor = Descriptor.MessageTypes[67];
      internal__static_CSPlayerInfoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerInfoRequest, global::CSPlayerInfoRequest.Builder>(internal__static_CSPlayerInfoRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCPlayerInfoResponse__Descriptor = Descriptor.MessageTypes[68];
      internal__static_SCPlayerInfoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerInfoResponse, global::SCPlayerInfoResponse.Builder>(internal__static_SCPlayerInfoResponse__Descriptor,
              new string[] { "PlayerId", "PlayerName", "PlayerIcon", "Coin", "Cash", "Vit", "Level", "Exp", "LaborUnion", "UpgradeExp", "ExpMultiple", "LastAddVitTime", "MillisRecoverOneVit", "HasRenamed", "InfiniteVitRestTime", });
      internal__static_CSRenameRequest__Descriptor = Descriptor.MessageTypes[69];
      internal__static_CSRenameRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRenameRequest, global::CSRenameRequest.Builder>(internal__static_CSRenameRequest__Descriptor,
              new string[] { "PlayerId", "NewName", });
      internal__static_SCRenameResponse__Descriptor = Descriptor.MessageTypes[70];
      internal__static_SCRenameResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRenameResponse, global::SCRenameResponse.Builder>(internal__static_SCRenameResponse__Descriptor,
              new string[] { "PlayerId", "Result", "NewName", });
      internal__static_CSOfficerListRequest__Descriptor = Descriptor.MessageTypes[71];
      internal__static_CSOfficerListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOfficerListRequest, global::CSOfficerListRequest.Builder>(internal__static_CSOfficerListRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCOfficerListResponse__Descriptor = Descriptor.MessageTypes[72];
      internal__static_SCOfficerListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOfficerListResponse, global::SCOfficerListResponse.Builder>(internal__static_SCOfficerListResponse__Descriptor,
              new string[] { "PlayerId", "Officers", });
      internal__static_OfficerInfo__Descriptor = Descriptor.MessageTypes[73];
      internal__static_OfficerInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::OfficerInfo, global::OfficerInfo.Builder>(internal__static_OfficerInfo__Descriptor,
              new string[] { "PlayerOfficerId", "OfficerId", "Level", "Outsight", "WillPower", "Attention", "Memory", "VitConsume", "SecondGain", });
      internal__static_CSOfficerInfoRequest__Descriptor = Descriptor.MessageTypes[74];
      internal__static_CSOfficerInfoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOfficerInfoRequest, global::CSOfficerInfoRequest.Builder>(internal__static_CSOfficerInfoRequest__Descriptor,
              new string[] { "PlayerId", "PlayerOfficerId", });
      internal__static_SCOfficerInfoResponse__Descriptor = Descriptor.MessageTypes[75];
      internal__static_SCOfficerInfoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOfficerInfoResponse, global::SCOfficerInfoResponse.Builder>(internal__static_SCOfficerInfoResponse__Descriptor,
              new string[] { "Office", });
      internal__static_CSEventPhaseFeedbackRequest__Descriptor = Descriptor.MessageTypes[76];
      internal__static_CSEventPhaseFeedbackRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEventPhaseFeedbackRequest, global::CSEventPhaseFeedbackRequest.Builder>(internal__static_CSEventPhaseFeedbackRequest__Descriptor,
              new string[] { "EventId", "PlayerOfficerId", });
      internal__static_SCEventPhaseFeedbackResponse__Descriptor = Descriptor.MessageTypes[77];
      internal__static_SCEventPhaseFeedbackResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEventPhaseFeedbackResponse, global::SCEventPhaseFeedbackResponse.Builder>(internal__static_SCEventPhaseFeedbackResponse__Descriptor,
              new string[] { "ResponseStatus", "Valuation", "TotalScore", "PhaseInfos", });
      internal__static_PhaseInfo__Descriptor = Descriptor.MessageTypes[78];
      internal__static_PhaseInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PhaseInfo, global::PhaseInfo.Builder>(internal__static_PhaseInfo__Descriptor,
              new string[] { "PhaseId", "OfficerTemplateId", "PhaseScore", "OfficerScore", "Perfect", "PerfectScore", "PhaseTemplateId", "MatchWordScoreInfo", });
      internal__static_MatchWordScoreInfo__Descriptor = Descriptor.MessageTypes[79];
      internal__static_MatchWordScoreInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MatchWordScoreInfo, global::MatchWordScoreInfo.Builder>(internal__static_MatchWordScoreInfo__Descriptor,
              new string[] { "KeyWordId", "KeyWordMatchScore", });
      internal__static_CSEventRewardRequest__Descriptor = Descriptor.MessageTypes[80];
      internal__static_CSEventRewardRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEventRewardRequest, global::CSEventRewardRequest.Builder>(internal__static_CSEventRewardRequest__Descriptor,
              new string[] { "PlayerId", "EventId", });
      internal__static_SCEventRewardResponse__Descriptor = Descriptor.MessageTypes[81];
      internal__static_SCEventRewardResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEventRewardResponse, global::SCEventRewardResponse.Builder>(internal__static_SCEventRewardResponse__Descriptor,
              new string[] { "ResponseStatus", "Score", "Valuation", "Rewards", "Exp", "Vit", "Coin", "Cash", "SceneRewardComprise", });
      internal__static_RewardItem__Descriptor = Descriptor.MessageTypes[82];
      internal__static_RewardItem__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RewardItem, global::RewardItem.Builder>(internal__static_RewardItem__Descriptor,
              new string[] { "PropId", "Num", });
      internal__static_CSOfficerCombineRequest__Descriptor = Descriptor.MessageTypes[83];
      internal__static_CSOfficerCombineRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOfficerCombineRequest, global::CSOfficerCombineRequest.Builder>(internal__static_CSOfficerCombineRequest__Descriptor,
              new string[] { "PlayerId", "OfficerId", });
      internal__static_SCOfficerCombineResponse__Descriptor = Descriptor.MessageTypes[84];
      internal__static_SCOfficerCombineResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOfficerCombineResponse, global::SCOfficerCombineResponse.Builder>(internal__static_SCOfficerCombineResponse__Descriptor,
              new string[] { "Result", "OfficeId", });
      internal__static_CSOfficerUpdateRequest__Descriptor = Descriptor.MessageTypes[85];
      internal__static_CSOfficerUpdateRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSOfficerUpdateRequest, global::CSOfficerUpdateRequest.Builder>(internal__static_CSOfficerUpdateRequest__Descriptor,
              new string[] { "PlayerId", "PlayerOfficerId", });
      internal__static_SCOfficerUpdateResponse__Descriptor = Descriptor.MessageTypes[86];
      internal__static_SCOfficerUpdateResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCOfficerUpdateResponse, global::SCOfficerUpdateResponse.Builder>(internal__static_SCOfficerUpdateResponse__Descriptor,
              new string[] { "Result", "OfficeId", "Level", });
      internal__static_CSEventEnterRequest__Descriptor = Descriptor.MessageTypes[87];
      internal__static_CSEventEnterRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEventEnterRequest, global::CSEventEnterRequest.Builder>(internal__static_CSEventEnterRequest__Descriptor,
              new string[] { "PlayerId", "EventId", });
      internal__static_SCEventEnterResponse__Descriptor = Descriptor.MessageTypes[88];
      internal__static_SCEventEnterResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEventEnterResponse, global::SCEventEnterResponse.Builder>(internal__static_SCEventEnterResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSEventDropInfoRequest__Descriptor = Descriptor.MessageTypes[89];
      internal__static_CSEventDropInfoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEventDropInfoRequest, global::CSEventDropInfoRequest.Builder>(internal__static_CSEventDropInfoRequest__Descriptor,
              new string[] { "EventId", });
      internal__static_SCEventDropInfoResponse__Descriptor = Descriptor.MessageTypes[90];
      internal__static_SCEventDropInfoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEventDropInfoResponse, global::SCEventDropInfoResponse.Builder>(internal__static_SCEventDropInfoResponse__Descriptor,
              new string[] { "PerfectProps", "NormalProps", "EventId", });
      internal__static_EventDropInfo__Descriptor = Descriptor.MessageTypes[91];
      internal__static_EventDropInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::EventDropInfo, global::EventDropInfo.Builder>(internal__static_EventDropInfo__Descriptor,
              new string[] { "PropId", "Count", });
      internal__static_CSSkillEmitRequest__Descriptor = Descriptor.MessageTypes[92];
      internal__static_CSSkillEmitRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSkillEmitRequest, global::CSSkillEmitRequest.Builder>(internal__static_CSSkillEmitRequest__Descriptor,
              new string[] { "PropId", "Count", "InOrOutScene", });
      internal__static_SCSkillEmitResponse__Descriptor = Descriptor.MessageTypes[93];
      internal__static_SCSkillEmitResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSkillEmitResponse, global::SCSkillEmitResponse.Builder>(internal__static_SCSkillEmitResponse__Descriptor,
              new string[] { "Result", "SkillId", "PropId", });
      internal__static_CSSkillTimerEmitReq__Descriptor = Descriptor.MessageTypes[94];
      internal__static_CSSkillTimerEmitReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSkillTimerEmitReq, global::CSSkillTimerEmitReq.Builder>(internal__static_CSSkillTimerEmitReq__Descriptor,
              new string[] { });
      internal__static_SCSkillTimerEmitResp__Descriptor = Descriptor.MessageTypes[95];
      internal__static_SCSkillTimerEmitResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSkillTimerEmitResp, global::SCSkillTimerEmitResp.Builder>(internal__static_SCSkillTimerEmitResp__Descriptor,
              new string[] { "Result", "SkillId", "PlayerOfficerId", });
      internal__static_CSReasoningRewardReq__Descriptor = Descriptor.MessageTypes[96];
      internal__static_CSReasoningRewardReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSReasoningRewardReq, global::CSReasoningRewardReq.Builder>(internal__static_CSReasoningRewardReq__Descriptor,
              new string[] { "ReasoningId", });
      internal__static_CSFindEnterReq__Descriptor = Descriptor.MessageTypes[97];
      internal__static_CSFindEnterReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFindEnterReq, global::CSFindEnterReq.Builder>(internal__static_CSFindEnterReq__Descriptor,
              new string[] { "FindId", });
      internal__static_SCFindEnterResp__Descriptor = Descriptor.MessageTypes[98];
      internal__static_SCFindEnterResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFindEnterResp, global::SCFindEnterResp.Builder>(internal__static_SCFindEnterResp__Descriptor,
              new string[] { "Result", });
      internal__static_CSFindRewardReq__Descriptor = Descriptor.MessageTypes[99];
      internal__static_CSFindRewardReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFindRewardReq, global::CSFindRewardReq.Builder>(internal__static_CSFindRewardReq__Descriptor,
              new string[] { "FindId", "Result", "FoundNum", "TotalNum", });
      internal__static_SCFindRewardResp__Descriptor = Descriptor.MessageTypes[100];
      internal__static_SCFindRewardResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFindRewardResp, global::SCFindRewardResp.Builder>(internal__static_SCFindRewardResp__Descriptor,
              new string[] { "ResponseStatus", "Vit", "SceneRewardComprise", });
      internal__static_CSSkyEyeRewardReq__Descriptor = Descriptor.MessageTypes[101];
      internal__static_CSSkyEyeRewardReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSkyEyeRewardReq, global::CSSkyEyeRewardReq.Builder>(internal__static_CSSkyEyeRewardReq__Descriptor,
              new string[] { "SkyEyeId", });
      internal__static_SCSkyEyeRewardReq__Descriptor = Descriptor.MessageTypes[102];
      internal__static_SCSkyEyeRewardReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSkyEyeRewardReq, global::SCSkyEyeRewardReq.Builder>(internal__static_SCSkyEyeRewardReq__Descriptor,
              new string[] { "SkyEyeId", "ResponseStatus", "Items", });
      internal__static_CSSkyEyeReq__Descriptor = Descriptor.MessageTypes[103];
      internal__static_CSSkyEyeReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSkyEyeReq, global::CSSkyEyeReq.Builder>(internal__static_CSSkyEyeReq__Descriptor,
              new string[] { });
      internal__static_SCSkyEyeReq__Descriptor = Descriptor.MessageTypes[104];
      internal__static_SCSkyEyeReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSkyEyeReq, global::SCSkyEyeReq.Builder>(internal__static_SCSkyEyeReq__Descriptor,
              new string[] { "HasRewarded", });
      internal__static_DiscountInfo__Descriptor = Descriptor.MessageTypes[105];
      internal__static_DiscountInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DiscountInfo, global::DiscountInfo.Builder>(internal__static_DiscountInfo__Descriptor,
              new string[] { "DiscountCost", "Discount", "DiscountStart", "DiscountEnd", "DiscountIcon", });
      internal__static_MarketItemMsg__Descriptor = Descriptor.MessageTypes[106];
      internal__static_MarketItemMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarketItemMsg, global::MarketItemMsg.Builder>(internal__static_MarketItemMsg__Descriptor,
              new string[] { "Id", "SellId", "SellCount", "CostType", "Cost", "BuyLimit", "DiscountInfo", "MaxLimit", });
      internal__static_MarketBlack__Descriptor = Descriptor.MessageTypes[107];
      internal__static_MarketBlack__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarketBlack, global::MarketBlack.Builder>(internal__static_MarketBlack__Descriptor,
              new string[] { "Id", "LastUpdateTime", "NextUpdateTime", "FreshCost", "FreshLimit", });
      internal__static_MarketRequest__Descriptor = Descriptor.MessageTypes[108];
      internal__static_MarketRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarketRequest, global::MarketRequest.Builder>(internal__static_MarketRequest__Descriptor,
              new string[] { "Category", });
      internal__static_MarketResponse__Descriptor = Descriptor.MessageTypes[109];
      internal__static_MarketResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarketResponse, global::MarketResponse.Builder>(internal__static_MarketResponse__Descriptor,
              new string[] { "ResponseStatus", "MarketItems", "MarketBlack", "Category", });
      internal__static_MarkeBuyRequest__Descriptor = Descriptor.MessageTypes[110];
      internal__static_MarkeBuyRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarkeBuyRequest, global::MarkeBuyRequest.Builder>(internal__static_MarkeBuyRequest__Descriptor,
              new string[] { "MarketItemId", "Count", });
      internal__static_MarkeBuyResponse__Descriptor = Descriptor.MessageTypes[111];
      internal__static_MarkeBuyResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarkeBuyResponse, global::MarkeBuyResponse.Builder>(internal__static_MarkeBuyResponse__Descriptor,
              new string[] { "ResponseStatus", "Props", });
      internal__static_CSMarketItemRequest__Descriptor = Descriptor.MessageTypes[112];
      internal__static_CSMarketItemRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMarketItemRequest, global::CSMarketItemRequest.Builder>(internal__static_CSMarketItemRequest__Descriptor,
              new string[] { "PropId", });
      internal__static_SCMarketItemResponse__Descriptor = Descriptor.MessageTypes[113];
      internal__static_SCMarketItemResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCMarketItemResponse, global::SCMarketItemResponse.Builder>(internal__static_SCMarketItemResponse__Descriptor,
              new string[] { "ResponseStatus", "MarketItems", });
      internal__static_MarkeFreshRequest__Descriptor = Descriptor.MessageTypes[114];
      internal__static_MarkeFreshRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarkeFreshRequest, global::MarkeFreshRequest.Builder>(internal__static_MarkeFreshRequest__Descriptor,
              new string[] { });
      internal__static_MarkeFreshResponse__Descriptor = Descriptor.MessageTypes[115];
      internal__static_MarkeFreshResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MarkeFreshResponse, global::MarkeFreshResponse.Builder>(internal__static_MarkeFreshResponse__Descriptor,
              new string[] { "ResponseStatus", "PlayerBaseInfo", "MarketBlack", "MarketItems", });
      internal__static_PlayerBaseInfo__Descriptor = Descriptor.MessageTypes[116];
      internal__static_PlayerBaseInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerBaseInfo, global::PlayerBaseInfo.Builder>(internal__static_PlayerBaseInfo__Descriptor,
              new string[] { "Coin", "Cash", });
      internal__static_CSNoticeListRequest__Descriptor = Descriptor.MessageTypes[117];
      internal__static_CSNoticeListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSNoticeListRequest, global::CSNoticeListRequest.Builder>(internal__static_CSNoticeListRequest__Descriptor,
              new string[] { "Id", "Type", });
      internal__static_SCNoticeListResponse__Descriptor = Descriptor.MessageTypes[118];
      internal__static_SCNoticeListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCNoticeListResponse, global::SCNoticeListResponse.Builder>(internal__static_SCNoticeListResponse__Descriptor,
              new string[] { "Notices", });
      internal__static_NoticeInfo__Descriptor = Descriptor.MessageTypes[119];
      internal__static_NoticeInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::NoticeInfo, global::NoticeInfo.Builder>(internal__static_NoticeInfo__Descriptor,
              new string[] { "Id", "Type", "Picture", "Title", "Content", "LevelLimit", "StartTime", "EndTime", "UpdateTime", });
      internal__static_CSPingRequest__Descriptor = Descriptor.MessageTypes[120];
      internal__static_CSPingRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPingRequest, global::CSPingRequest.Builder>(internal__static_CSPingRequest__Descriptor,
              new string[] { });
      internal__static_SCPingResponse__Descriptor = Descriptor.MessageTypes[121];
      internal__static_SCPingResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPingResponse, global::SCPingResponse.Builder>(internal__static_SCPingResponse__Descriptor,
              new string[] { "Count", "Content", });
      internal__static_PingResponseContent__Descriptor = Descriptor.MessageTypes[122];
      internal__static_PingResponseContent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PingResponseContent, global::PingResponseContent.Builder>(internal__static_PingResponseContent__Descriptor,
              new string[] { "MsgId", "Data", "IsEmpty", });
      internal__static_CSMessageRequest__Descriptor = Descriptor.MessageTypes[123];
      internal__static_CSMessageRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSMessageRequest, global::CSMessageRequest.Builder>(internal__static_CSMessageRequest__Descriptor,
              new string[] { });
      internal__static_LottoItemProto__Descriptor = Descriptor.MessageTypes[124];
      internal__static_LottoItemProto__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LottoItemProto, global::LottoItemProto.Builder>(internal__static_LottoItemProto__Descriptor,
              new string[] { "PropId", "Count", "Special", "Lucky", "Id", });
      internal__static_LottoRequest__Descriptor = Descriptor.MessageTypes[125];
      internal__static_LottoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LottoRequest, global::LottoRequest.Builder>(internal__static_LottoRequest__Descriptor,
              new string[] { "CostType", });
      internal__static_LottoResponse__Descriptor = Descriptor.MessageTypes[126];
      internal__static_LottoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LottoResponse, global::LottoResponse.Builder>(internal__static_LottoResponse__Descriptor,
              new string[] { "ResponseStatus", "CostType", "CostValue", "LottoId", "Items", "Lucky", });
      internal__static_LottoBuyRequest__Descriptor = Descriptor.MessageTypes[127];
      internal__static_LottoBuyRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LottoBuyRequest, global::LottoBuyRequest.Builder>(internal__static_LottoBuyRequest__Descriptor,
              new string[] { "LottoId", });
      internal__static_LottoBuyResponse__Descriptor = Descriptor.MessageTypes[128];
      internal__static_LottoBuyResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::LottoBuyResponse, global::LottoBuyResponse.Builder>(internal__static_LottoBuyResponse__Descriptor,
              new string[] { "ResponseStatus", "Props", "Id", "LottoCount", });
      internal__static_CSGooglePayChargeRequest__Descriptor = Descriptor.MessageTypes[129];
      internal__static_CSGooglePayChargeRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGooglePayChargeRequest, global::CSGooglePayChargeRequest.Builder>(internal__static_CSGooglePayChargeRequest__Descriptor,
              new string[] { "JsonData", "Signature", "ProductId", });
      internal__static_SCGooglePayChargeResponse__Descriptor = Descriptor.MessageTypes[130];
      internal__static_SCGooglePayChargeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGooglePayChargeResponse, global::SCGooglePayChargeResponse.Builder>(internal__static_SCGooglePayChargeResponse__Descriptor,
              new string[] { "ResponseStatus", "ProductId", });
      internal__static_CSIOSPayChargeRequest__Descriptor = Descriptor.MessageTypes[131];
      internal__static_CSIOSPayChargeRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSIOSPayChargeRequest, global::CSIOSPayChargeRequest.Builder>(internal__static_CSIOSPayChargeRequest__Descriptor,
              new string[] { "JsonData", "ProductId", });
      internal__static_SCIOSPayChargeResponse__Descriptor = Descriptor.MessageTypes[132];
      internal__static_SCIOSPayChargeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCIOSPayChargeResponse, global::SCIOSPayChargeResponse.Builder>(internal__static_SCIOSPayChargeResponse__Descriptor,
              new string[] { "ResponseStatus", "ProductId", "JsonData", });
      internal__static_SCAcceptTaskNotice__Descriptor = Descriptor.MessageTypes[133];
      internal__static_SCAcceptTaskNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAcceptTaskNotice, global::SCAcceptTaskNotice.Builder>(internal__static_SCAcceptTaskNotice__Descriptor,
              new string[] { "AcceptTasks", });
      internal__static_AcceptTaskInfo__Descriptor = Descriptor.MessageTypes[134];
      internal__static_AcceptTaskInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AcceptTaskInfo, global::AcceptTaskInfo.Builder>(internal__static_AcceptTaskInfo__Descriptor,
              new string[] { "TaskId", "PlayerTaskId", "Status", });
      internal__static_CSTaskListRequest__Descriptor = Descriptor.MessageTypes[135];
      internal__static_CSTaskListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTaskListRequest, global::CSTaskListRequest.Builder>(internal__static_CSTaskListRequest__Descriptor,
              new string[] { "Type", "TaskIds", });
      internal__static_SCTaskListResponse__Descriptor = Descriptor.MessageTypes[136];
      internal__static_SCTaskListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTaskListResponse, global::SCTaskListResponse.Builder>(internal__static_SCTaskListResponse__Descriptor,
              new string[] { "TaskInfos", });
      internal__static_TaskInfo__Descriptor = Descriptor.MessageTypes[137];
      internal__static_TaskInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TaskInfo, global::TaskInfo.Builder>(internal__static_TaskInfo__Descriptor,
              new string[] { "PlayerTaskId", "TaskId", "Status", "Level", "PropProgresss", "DialogueProgress", "EventProgress", "SceneProgress", "ExhibitProgress", });
      internal__static_TaskPropProgress__Descriptor = Descriptor.MessageTypes[138];
      internal__static_TaskPropProgress__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TaskPropProgress, global::TaskPropProgress.Builder>(internal__static_TaskPropProgress__Descriptor,
              new string[] { "PropId", "Count", });
      internal__static_TaskExhibitProgress__Descriptor = Descriptor.MessageTypes[139];
      internal__static_TaskExhibitProgress__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TaskExhibitProgress, global::TaskExhibitProgress.Builder>(internal__static_TaskExhibitProgress__Descriptor,
              new string[] { "ExhibitId", "Count", });
      internal__static_CSTaskCommitRequest__Descriptor = Descriptor.MessageTypes[140];
      internal__static_CSTaskCommitRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTaskCommitRequest, global::CSTaskCommitRequest.Builder>(internal__static_CSTaskCommitRequest__Descriptor,
              new string[] { "PlayerTaskId", });
      internal__static_SCTaskCommitResponse__Descriptor = Descriptor.MessageTypes[141];
      internal__static_SCTaskCommitResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTaskCommitResponse, global::SCTaskCommitResponse.Builder>(internal__static_SCTaskCommitResponse__Descriptor,
              new string[] { "Result", "Coin", "Cash", "Vit", "Exp", "TitleId", "PropRewards", "TaskId", });
      internal__static_TaskPropReward__Descriptor = Descriptor.MessageTypes[142];
      internal__static_TaskPropReward__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TaskPropReward, global::TaskPropReward.Builder>(internal__static_TaskPropReward__Descriptor,
              new string[] { "PropId", "Count", });
      internal__static_SCTaskStatusChangeNotice__Descriptor = Descriptor.MessageTypes[143];
      internal__static_SCTaskStatusChangeNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTaskStatusChangeNotice, global::SCTaskStatusChangeNotice.Builder>(internal__static_SCTaskStatusChangeNotice__Descriptor,
              new string[] { "PlayerTaskId", "TaskId", "Status", "TaskInfo", });
      internal__static_CSTriggerTaskActiveRequest__Descriptor = Descriptor.MessageTypes[144];
      internal__static_CSTriggerTaskActiveRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTriggerTaskActiveRequest, global::CSTriggerTaskActiveRequest.Builder>(internal__static_CSTriggerTaskActiveRequest__Descriptor,
              new string[] { "TaskId", });
      internal__static_SCTriggerTaskActiveResponse__Descriptor = Descriptor.MessageTypes[145];
      internal__static_SCTriggerTaskActiveResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTriggerTaskActiveResponse, global::SCTriggerTaskActiveResponse.Builder>(internal__static_SCTriggerTaskActiveResponse__Descriptor,
              new string[] { "Result", "TaskId", });
      internal__static_CSTaskIdListRequest__Descriptor = Descriptor.MessageTypes[146];
      internal__static_CSTaskIdListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTaskIdListRequest, global::CSTaskIdListRequest.Builder>(internal__static_CSTaskIdListRequest__Descriptor,
              new string[] { });
      internal__static_SCTaskIdListResponse__Descriptor = Descriptor.MessageTypes[147];
      internal__static_SCTaskIdListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTaskIdListResponse, global::SCTaskIdListResponse.Builder>(internal__static_SCTaskIdListResponse__Descriptor,
              new string[] { "TaskIdInfos", });
      internal__static_TaskIdInfo__Descriptor = Descriptor.MessageTypes[148];
      internal__static_TaskIdInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TaskIdInfo, global::TaskIdInfo.Builder>(internal__static_TaskIdInfo__Descriptor,
              new string[] { "PlayerTaskId", "TaskId", });
      internal__static_CSAchievementRequest__Descriptor = Descriptor.MessageTypes[149];
      internal__static_CSAchievementRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAchievementRequest, global::CSAchievementRequest.Builder>(internal__static_CSAchievementRequest__Descriptor,
              new string[] { });
      internal__static_AchievementMsg__Descriptor = Descriptor.MessageTypes[150];
      internal__static_AchievementMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AchievementMsg, global::AchievementMsg.Builder>(internal__static_AchievementMsg__Descriptor,
              new string[] { "Id", "Progress", "SubmitStatus", "FinishTime", "FinishTime1", "FinishTime2", });
      internal__static_SCAchievementResponse__Descriptor = Descriptor.MessageTypes[151];
      internal__static_SCAchievementResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAchievementResponse, global::SCAchievementResponse.Builder>(internal__static_SCAchievementResponse__Descriptor,
              new string[] { "Status", "Achievements", "TotalCount", });
      internal__static_CSAchievementSubmitRequest__Descriptor = Descriptor.MessageTypes[152];
      internal__static_CSAchievementSubmitRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSAchievementSubmitRequest, global::CSAchievementSubmitRequest.Builder>(internal__static_CSAchievementSubmitRequest__Descriptor,
              new string[] { "Id", "Stage", });
      internal__static_SCAchievementSubmitResponse__Descriptor = Descriptor.MessageTypes[153];
      internal__static_SCAchievementSubmitResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAchievementSubmitResponse, global::SCAchievementSubmitResponse.Builder>(internal__static_SCAchievementSubmitResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSActivityBaseListRequest__Descriptor = Descriptor.MessageTypes[154];
      internal__static_CSActivityBaseListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSActivityBaseListRequest, global::CSActivityBaseListRequest.Builder>(internal__static_CSActivityBaseListRequest__Descriptor,
              new string[] { });
      internal__static_SCActivityBaseListResponse__Descriptor = Descriptor.MessageTypes[155];
      internal__static_SCActivityBaseListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCActivityBaseListResponse, global::SCActivityBaseListResponse.Builder>(internal__static_SCActivityBaseListResponse__Descriptor,
              new string[] { "BaseInfos", });
      internal__static_ActivityBaseInfo__Descriptor = Descriptor.MessageTypes[156];
      internal__static_ActivityBaseInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ActivityBaseInfo, global::ActivityBaseInfo.Builder>(internal__static_ActivityBaseInfo__Descriptor,
              new string[] { "Id", "Type", "Icon", "Descs", "TargetType", "TargetPrefab", "WarmupTime", "StartTime", "EndTime", "Stage", "TimeType", "Days", "PersonalBeginTime", "PersonalEndTime", });
      internal__static_PropItem__Descriptor = Descriptor.MessageTypes[157];
      internal__static_PropItem__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PropItem, global::PropItem.Builder>(internal__static_PropItem__Descriptor,
              new string[] { "Id", "Num", "HasNum", });
      internal__static_CSActivityRequest__Descriptor = Descriptor.MessageTypes[158];
      internal__static_CSActivityRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSActivityRequest, global::CSActivityRequest.Builder>(internal__static_CSActivityRequest__Descriptor,
              new string[] { "Id", });
      internal__static_SCActivityDropResponse__Descriptor = Descriptor.MessageTypes[159];
      internal__static_SCActivityDropResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCActivityDropResponse, global::SCActivityDropResponse.Builder>(internal__static_SCActivityDropResponse__Descriptor,
              new string[] { "Id", "Description", "BackgroundSource", "WarmupSource", "Rewardid", "Items", "SceneId", "Stage", "HasReward", "Name", "CollectDes", "SceneDes", "RewardSource", "Tips", });
      internal__static_CSActivityRewardRequest__Descriptor = Descriptor.MessageTypes[160];
      internal__static_CSActivityRewardRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSActivityRewardRequest, global::CSActivityRewardRequest.Builder>(internal__static_CSActivityRewardRequest__Descriptor,
              new string[] { "Id", });
      internal__static_SCActivityRewardResponse__Descriptor = Descriptor.MessageTypes[161];
      internal__static_SCActivityRewardResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCActivityRewardResponse, global::SCActivityRewardResponse.Builder>(internal__static_SCActivityRewardResponse__Descriptor,
              new string[] { "ResponseStatus", "Items", });
      internal__static_CSCartoonEnterRequest__Descriptor = Descriptor.MessageTypes[162];
      internal__static_CSCartoonEnterRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartoonEnterRequest, global::CSCartoonEnterRequest.Builder>(internal__static_CSCartoonEnterRequest__Descriptor,
              new string[] { "SceneId", });
      internal__static_SCCartoonEnterResponse__Descriptor = Descriptor.MessageTypes[163];
      internal__static_SCCartoonEnterResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCartoonEnterResponse, global::SCCartoonEnterResponse.Builder>(internal__static_SCCartoonEnterResponse__Descriptor,
              new string[] { "Result", });
      internal__static_CSCartoonRewardRequest__Descriptor = Descriptor.MessageTypes[164];
      internal__static_CSCartoonRewardRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartoonRewardRequest, global::CSCartoonRewardRequest.Builder>(internal__static_CSCartoonRewardRequest__Descriptor,
              new string[] { });
      internal__static_SCCartoonRewardReqsponse__Descriptor = Descriptor.MessageTypes[165];
      internal__static_SCCartoonRewardReqsponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCartoonRewardReqsponse, global::SCCartoonRewardReqsponse.Builder>(internal__static_SCCartoonRewardReqsponse__Descriptor,
              new string[] { "Cash", "Coin", "Exp", "Vit", "SceneRewardComprise", });
      internal__static_CSCartoonQuitRequest__Descriptor = Descriptor.MessageTypes[166];
      internal__static_CSCartoonQuitRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCartoonQuitRequest, global::CSCartoonQuitRequest.Builder>(internal__static_CSCartoonQuitRequest__Descriptor,
              new string[] { });
      internal__static_CSEmailListRequest__Descriptor = Descriptor.MessageTypes[167];
      internal__static_CSEmailListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmailListRequest, global::CSEmailListRequest.Builder>(internal__static_CSEmailListRequest__Descriptor,
              new string[] { });
      internal__static_SCEmailListResponse__Descriptor = Descriptor.MessageTypes[168];
      internal__static_SCEmailListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmailListResponse, global::SCEmailListResponse.Builder>(internal__static_SCEmailListResponse__Descriptor,
              new string[] { "Emails", });
      internal__static_EmailInfo__Descriptor = Descriptor.MessageTypes[169];
      internal__static_EmailInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::EmailInfo, global::EmailInfo.Builder>(internal__static_EmailInfo__Descriptor,
              new string[] { "Id", "Type", "Status", "Title", "Content", "ReceiveTime", "Deadline", "Rewards", });
      internal__static_EmailReward__Descriptor = Descriptor.MessageTypes[170];
      internal__static_EmailReward__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::EmailReward, global::EmailReward.Builder>(internal__static_EmailReward__Descriptor,
              new string[] { "PropId", "Count", });
      internal__static_CSEmailRewardRequest__Descriptor = Descriptor.MessageTypes[171];
      internal__static_CSEmailRewardRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmailRewardRequest, global::CSEmailRewardRequest.Builder>(internal__static_CSEmailRewardRequest__Descriptor,
              new string[] { "Id", });
      internal__static_SCEmailRewardResponse__Descriptor = Descriptor.MessageTypes[172];
      internal__static_SCEmailRewardResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmailRewardResponse, global::SCEmailRewardResponse.Builder>(internal__static_SCEmailRewardResponse__Descriptor,
              new string[] { "Result", "Id", });
      internal__static_CSEmailReadRequest__Descriptor = Descriptor.MessageTypes[173];
      internal__static_CSEmailReadRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSEmailReadRequest, global::CSEmailReadRequest.Builder>(internal__static_CSEmailReadRequest__Descriptor,
              new string[] { "Id", });
      internal__static_SCEmailChangeNotice__Descriptor = Descriptor.MessageTypes[174];
      internal__static_SCEmailChangeNotice__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCEmailChangeNotice, global::SCEmailChangeNotice.Builder>(internal__static_SCEmailChangeNotice__Descriptor,
              new string[] { "SwitchTime", });
      internal__static_TitleMsg__Descriptor = Descriptor.MessageTypes[175];
      internal__static_TitleMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TitleMsg, global::TitleMsg.Builder>(internal__static_TitleMsg__Descriptor,
              new string[] { "TitleId", "Deadline", "GetTime", "Active", });
      internal__static_CSTitleRequest__Descriptor = Descriptor.MessageTypes[176];
      internal__static_CSTitleRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTitleRequest, global::CSTitleRequest.Builder>(internal__static_CSTitleRequest__Descriptor,
              new string[] { });
      internal__static_SCTitleResponse__Descriptor = Descriptor.MessageTypes[177];
      internal__static_SCTitleResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTitleResponse, global::SCTitleResponse.Builder>(internal__static_SCTitleResponse__Descriptor,
              new string[] { "Status", "Titles", });
      internal__static_CSTitleActiveRequest__Descriptor = Descriptor.MessageTypes[178];
      internal__static_CSTitleActiveRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTitleActiveRequest, global::CSTitleActiveRequest.Builder>(internal__static_CSTitleActiveRequest__Descriptor,
              new string[] { "TitleId", });
      internal__static_SCTitleActiveResponse__Descriptor = Descriptor.MessageTypes[179];
      internal__static_SCTitleActiveResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTitleActiveResponse, global::SCTitleActiveResponse.Builder>(internal__static_SCTitleActiveResponse__Descriptor,
              new string[] { "Status", "Title", });
      internal__static_CSTitleGetRequest__Descriptor = Descriptor.MessageTypes[180];
      internal__static_CSTitleGetRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSTitleGetRequest, global::CSTitleGetRequest.Builder>(internal__static_CSTitleGetRequest__Descriptor,
              new string[] { });
      internal__static_SCTitleGetResponse__Descriptor = Descriptor.MessageTypes[181];
      internal__static_SCTitleGetResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCTitleGetResponse, global::SCTitleGetResponse.Builder>(internal__static_SCTitleGetResponse__Descriptor,
              new string[] { "Status", "Title", });
      internal__static_PlayerFriendMsg__Descriptor = Descriptor.MessageTypes[182];
      internal__static_PlayerFriendMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerFriendMsg, global::PlayerFriendMsg.Builder>(internal__static_PlayerFriendMsg__Descriptor,
              new string[] { "PlayerId", "Name", "Level", "Gender", "Icon", "TitleId", "Gift", "StatusTime", });
      internal__static_CSFriendRequest__Descriptor = Descriptor.MessageTypes[183];
      internal__static_CSFriendRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendRequest, global::CSFriendRequest.Builder>(internal__static_CSFriendRequest__Descriptor,
              new string[] { "Type", });
      internal__static_SCFriendResponse__Descriptor = Descriptor.MessageTypes[184];
      internal__static_SCFriendResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendResponse, global::SCFriendResponse.Builder>(internal__static_SCFriendResponse__Descriptor,
              new string[] { "Status", "Friends", "Limit", "Total", "GiftCountLeft", "Type", "LastAgree", "AddSwitch", });
      internal__static_CSFriendAddRequest__Descriptor = Descriptor.MessageTypes[185];
      internal__static_CSFriendAddRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendAddRequest, global::CSFriendAddRequest.Builder>(internal__static_CSFriendAddRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCFriendAddResponse__Descriptor = Descriptor.MessageTypes[186];
      internal__static_SCFriendAddResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendAddResponse, global::SCFriendAddResponse.Builder>(internal__static_SCFriendAddResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSFriendDelRequest__Descriptor = Descriptor.MessageTypes[187];
      internal__static_CSFriendDelRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendDelRequest, global::CSFriendDelRequest.Builder>(internal__static_CSFriendDelRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCFriendDelResponse__Descriptor = Descriptor.MessageTypes[188];
      internal__static_SCFriendDelResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendDelResponse, global::SCFriendDelResponse.Builder>(internal__static_SCFriendDelResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSFriendAgreeRequest__Descriptor = Descriptor.MessageTypes[189];
      internal__static_CSFriendAgreeRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendAgreeRequest, global::CSFriendAgreeRequest.Builder>(internal__static_CSFriendAgreeRequest__Descriptor,
              new string[] { "PlayerId", });
      internal__static_SCFriendAgreeResponse__Descriptor = Descriptor.MessageTypes[190];
      internal__static_SCFriendAgreeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendAgreeResponse, global::SCFriendAgreeResponse.Builder>(internal__static_SCFriendAgreeResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSFriendDelApplyRequest__Descriptor = Descriptor.MessageTypes[191];
      internal__static_CSFriendDelApplyRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendDelApplyRequest, global::CSFriendDelApplyRequest.Builder>(internal__static_CSFriendDelApplyRequest__Descriptor,
              new string[] { "FriendId", });
      internal__static_SCFriendDelApplyResponse__Descriptor = Descriptor.MessageTypes[192];
      internal__static_SCFriendDelApplyResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendDelApplyResponse, global::SCFriendDelApplyResponse.Builder>(internal__static_SCFriendDelApplyResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSFriendGiftRequest__Descriptor = Descriptor.MessageTypes[193];
      internal__static_CSFriendGiftRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendGiftRequest, global::CSFriendGiftRequest.Builder>(internal__static_CSFriendGiftRequest__Descriptor,
              new string[] { });
      internal__static_FriendGift__Descriptor = Descriptor.MessageTypes[194];
      internal__static_FriendGift__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::FriendGift, global::FriendGift.Builder>(internal__static_FriendGift__Descriptor,
              new string[] { "PlayerFriends", "PlayPropMsg", "GiftId", });
      internal__static_SCFriendGiftResponse__Descriptor = Descriptor.MessageTypes[195];
      internal__static_SCFriendGiftResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendGiftResponse, global::SCFriendGiftResponse.Builder>(internal__static_SCFriendGiftResponse__Descriptor,
              new string[] { "Status", "FriendGiftLists", "Limit", "Count", });
      internal__static_CSFriendGiftSendRequest__Descriptor = Descriptor.MessageTypes[196];
      internal__static_CSFriendGiftSendRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendGiftSendRequest, global::CSFriendGiftSendRequest.Builder>(internal__static_CSFriendGiftSendRequest__Descriptor,
              new string[] { "FriendId", });
      internal__static_SCFriendGiftSendResponse__Descriptor = Descriptor.MessageTypes[197];
      internal__static_SCFriendGiftSendResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendGiftSendResponse, global::SCFriendGiftSendResponse.Builder>(internal__static_SCFriendGiftSendResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSFriendGiftDrawRequest__Descriptor = Descriptor.MessageTypes[198];
      internal__static_CSFriendGiftDrawRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendGiftDrawRequest, global::CSFriendGiftDrawRequest.Builder>(internal__static_CSFriendGiftDrawRequest__Descriptor,
              new string[] { "GiftId", });
      internal__static_SCFriendGiftDrawResponse__Descriptor = Descriptor.MessageTypes[199];
      internal__static_SCFriendGiftDrawResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendGiftDrawResponse, global::SCFriendGiftDrawResponse.Builder>(internal__static_SCFriendGiftDrawResponse__Descriptor,
              new string[] { "Status", "PlayerPropMsg", });
      internal__static_CSFriendViewRequest__Descriptor = Descriptor.MessageTypes[200];
      internal__static_CSFriendViewRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendViewRequest, global::CSFriendViewRequest.Builder>(internal__static_CSFriendViewRequest__Descriptor,
              new string[] { "FriendId", });
      internal__static_AchievementFriendMsg__Descriptor = Descriptor.MessageTypes[201];
      internal__static_AchievementFriendMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AchievementFriendMsg, global::AchievementFriendMsg.Builder>(internal__static_AchievementFriendMsg__Descriptor,
              new string[] { "Id", "Progress", "SubmitStatus", "FinishTime", "FinishTime1", "FinishTime2", });
      internal__static_SCFriendViewResponse__Descriptor = Descriptor.MessageTypes[202];
      internal__static_SCFriendViewResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendViewResponse, global::SCFriendViewResponse.Builder>(internal__static_SCFriendViewResponse__Descriptor,
              new string[] { "Status", "PlayerFriendMsg", "AchievementMsgs", });
      internal__static_CSFriendSwitchRequest__Descriptor = Descriptor.MessageTypes[203];
      internal__static_CSFriendSwitchRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendSwitchRequest, global::CSFriendSwitchRequest.Builder>(internal__static_CSFriendSwitchRequest__Descriptor,
              new string[] { });
      internal__static_SCFriendSwitchResponse__Descriptor = Descriptor.MessageTypes[204];
      internal__static_SCFriendSwitchResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendSwitchResponse, global::SCFriendSwitchResponse.Builder>(internal__static_SCFriendSwitchResponse__Descriptor,
              new string[] { "Status", });
      internal__static_SCFriendApplyResponse__Descriptor = Descriptor.MessageTypes[205];
      internal__static_SCFriendApplyResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendApplyResponse, global::SCFriendApplyResponse.Builder>(internal__static_SCFriendApplyResponse__Descriptor,
              new string[] { "FriendId", });
      internal__static_SCFriendNoticeResponse__Descriptor = Descriptor.MessageTypes[206];
      internal__static_SCFriendNoticeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendNoticeResponse, global::SCFriendNoticeResponse.Builder>(internal__static_SCFriendNoticeResponse__Descriptor,
              new string[] { "Point", });
      internal__static_FriendRecommendMsg__Descriptor = Descriptor.MessageTypes[207];
      internal__static_FriendRecommendMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::FriendRecommendMsg, global::FriendRecommendMsg.Builder>(internal__static_FriendRecommendMsg__Descriptor,
              new string[] { "Name", "Bind", "Status", "Level", "Icon", "RecommendId", });
      internal__static_CSFriendRecommendListRequest__Descriptor = Descriptor.MessageTypes[208];
      internal__static_CSFriendRecommendListRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendRecommendListRequest, global::CSFriendRecommendListRequest.Builder>(internal__static_CSFriendRecommendListRequest__Descriptor,
              new string[] { });
      internal__static_SCFriendRecommendListResponse__Descriptor = Descriptor.MessageTypes[209];
      internal__static_SCFriendRecommendListResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendRecommendListResponse, global::SCFriendRecommendListResponse.Builder>(internal__static_SCFriendRecommendListResponse__Descriptor,
              new string[] { "Status", "Recommend", "TimeDown", });
      internal__static_CSFriendRecommendGetRequest__Descriptor = Descriptor.MessageTypes[210];
      internal__static_CSFriendRecommendGetRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendRecommendGetRequest, global::CSFriendRecommendGetRequest.Builder>(internal__static_CSFriendRecommendGetRequest__Descriptor,
              new string[] { "RecommendId", });
      internal__static_SCFriendRecommendGetResponse__Descriptor = Descriptor.MessageTypes[211];
      internal__static_SCFriendRecommendGetResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendRecommendGetResponse, global::SCFriendRecommendGetResponse.Builder>(internal__static_SCFriendRecommendGetResponse__Descriptor,
              new string[] { "Status", "PlayerFriendMsg", "AchievementMsgs", });
      internal__static_CSFriendRecommendApplyRequest__Descriptor = Descriptor.MessageTypes[212];
      internal__static_CSFriendRecommendApplyRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFriendRecommendApplyRequest, global::CSFriendRecommendApplyRequest.Builder>(internal__static_CSFriendRecommendApplyRequest__Descriptor,
              new string[] { "RecommendId", });
      internal__static_SCFriendRecommendApplyResponse__Descriptor = Descriptor.MessageTypes[213];
      internal__static_SCFriendRecommendApplyResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFriendRecommendApplyResponse, global::SCFriendRecommendApplyResponse.Builder>(internal__static_SCFriendRecommendApplyResponse__Descriptor,
              new string[] { "Status", "RecommendId", });
      internal__static_CSBuildingListReq__Descriptor = Descriptor.MessageTypes[214];
      internal__static_CSBuildingListReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBuildingListReq, global::CSBuildingListReq.Builder>(internal__static_CSBuildingListReq__Descriptor,
              new string[] { });
      internal__static_SCBuildingListResp__Descriptor = Descriptor.MessageTypes[215];
      internal__static_SCBuildingListResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBuildingListResp, global::SCBuildingListResp.Builder>(internal__static_SCBuildingListResp__Descriptor,
              new string[] { "Infos", });
      internal__static_BuildingInfo__Descriptor = Descriptor.MessageTypes[216];
      internal__static_BuildingInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::BuildingInfo, global::BuildingInfo.Builder>(internal__static_BuildingInfo__Descriptor,
              new string[] { "BuildingId", "Status", });
      internal__static_CSBuildingUnlockReq__Descriptor = Descriptor.MessageTypes[217];
      internal__static_CSBuildingUnlockReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBuildingUnlockReq, global::CSBuildingUnlockReq.Builder>(internal__static_CSBuildingUnlockReq__Descriptor,
              new string[] { "BuildingId", });
      internal__static_SCBuildingUnlockResp__Descriptor = Descriptor.MessageTypes[218];
      internal__static_SCBuildingUnlockResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBuildingUnlockResp, global::SCBuildingUnlockResp.Builder>(internal__static_SCBuildingUnlockResp__Descriptor,
              new string[] { "ResponseStatus", "BuildingId", });
      internal__static_CSCanTaskRequest__Descriptor = Descriptor.MessageTypes[219];
      internal__static_CSCanTaskRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCanTaskRequest, global::CSCanTaskRequest.Builder>(internal__static_CSCanTaskRequest__Descriptor,
              new string[] { "TaskId", });
      internal__static_SCCanTaskResponse__Descriptor = Descriptor.MessageTypes[220];
      internal__static_SCCanTaskResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCanTaskResponse, global::SCCanTaskResponse.Builder>(internal__static_SCCanTaskResponse__Descriptor,
              new string[] { "CanTask", "TaskId", });
      internal__static_SCreceiveNewTitle__Descriptor = Descriptor.MessageTypes[221];
      internal__static_SCreceiveNewTitle__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCreceiveNewTitle, global::SCreceiveNewTitle.Builder>(internal__static_SCreceiveNewTitle__Descriptor,
              new string[] { "Title", });
      internal__static_CSRegGuestRequest__Descriptor = Descriptor.MessageTypes[222];
      internal__static_CSRegGuestRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSRegGuestRequest, global::CSRegGuestRequest.Builder>(internal__static_CSRegGuestRequest__Descriptor,
              new string[] { "DeviceId", "OsType", "Ad", });
      internal__static_SCRegGuestResponse__Descriptor = Descriptor.MessageTypes[223];
      internal__static_SCRegGuestResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCRegGuestResponse, global::SCRegGuestResponse.Builder>(internal__static_SCRegGuestResponse__Descriptor,
              new string[] { "Status", "GuestIdentify", });
      internal__static_CSIdentifyCheckRequest__Descriptor = Descriptor.MessageTypes[224];
      internal__static_CSIdentifyCheckRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSIdentifyCheckRequest, global::CSIdentifyCheckRequest.Builder>(internal__static_CSIdentifyCheckRequest__Descriptor,
              new string[] { "Identify", });
      internal__static_SCIdentifyCheckRepsonse__Descriptor = Descriptor.MessageTypes[225];
      internal__static_SCIdentifyCheckRepsonse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCIdentifyCheckRepsonse, global::SCIdentifyCheckRepsonse.Builder>(internal__static_SCIdentifyCheckRepsonse__Descriptor,
              new string[] { "Status", "AccessToken", "StartTime", "Deadline", "ThirdBind", });
      internal__static_CSFBLoginRequest__Descriptor = Descriptor.MessageTypes[226];
      internal__static_CSFBLoginRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFBLoginRequest, global::CSFBLoginRequest.Builder>(internal__static_CSFBLoginRequest__Descriptor,
              new string[] { "AccessToken", "FbId", "ExpiresIn", "DeviceId", "OsType", "Ad", });
      internal__static_SCFBLoginResponse__Descriptor = Descriptor.MessageTypes[227];
      internal__static_SCFBLoginResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFBLoginResponse, global::SCFBLoginResponse.Builder>(internal__static_SCFBLoginResponse__Descriptor,
              new string[] { "Status", "Identify", "LongLifeAcessToken", });
      internal__static_CSFBBindRequest__Descriptor = Descriptor.MessageTypes[228];
      internal__static_CSFBBindRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSFBBindRequest, global::CSFBBindRequest.Builder>(internal__static_CSFBBindRequest__Descriptor,
              new string[] { "Identify", "AccessToken", "FbId", "ExpiresIn", });
      internal__static_SCFBBindResponse__Descriptor = Descriptor.MessageTypes[229];
      internal__static_SCFBBindResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCFBBindResponse, global::SCFBBindResponse.Builder>(internal__static_SCFBBindResponse__Descriptor,
              new string[] { "Status", "Identify", "LongLifeAcessToken", "HasBeenBinded", "Id", "Name", "Level", "CashCount", "Icon", });
      internal__static_SCIdentifyCheckMuiltyMessage__Descriptor = Descriptor.MessageTypes[230];
      internal__static_SCIdentifyCheckMuiltyMessage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCIdentifyCheckMuiltyMessage, global::SCIdentifyCheckMuiltyMessage.Builder>(internal__static_SCIdentifyCheckMuiltyMessage__Descriptor,
              new string[] { "Contents", "Status", });
      internal__static_IdentifyCheckResponseContent__Descriptor = Descriptor.MessageTypes[231];
      internal__static_IdentifyCheckResponseContent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::IdentifyCheckResponseContent, global::IdentifyCheckResponseContent.Builder>(internal__static_IdentifyCheckResponseContent__Descriptor,
              new string[] { "MsgId", "Data", });
      internal__static_PlayerPropSellRequest__Descriptor = Descriptor.MessageTypes[232];
      internal__static_PlayerPropSellRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerPropSellRequest, global::PlayerPropSellRequest.Builder>(internal__static_PlayerPropSellRequest__Descriptor,
              new string[] { "PlayerProps", });
      internal__static_PlayerPropSellResposne__Descriptor = Descriptor.MessageTypes[233];
      internal__static_PlayerPropSellResposne__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerPropSellResposne, global::PlayerPropSellResposne.Builder>(internal__static_PlayerPropSellResposne__Descriptor,
              new string[] { "ReponseStatus", });
      internal__static_CSDropReq__Descriptor = Descriptor.MessageTypes[234];
      internal__static_CSDropReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSDropReq, global::CSDropReq.Builder>(internal__static_CSDropReq__Descriptor,
              new string[] { "PropId", "Count", });
      internal__static_SCDropResp__Descriptor = Descriptor.MessageTypes[235];
      internal__static_SCDropResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCDropResp, global::SCDropResp.Builder>(internal__static_SCDropResp__Descriptor,
              new string[] { "DropInfos", });
      internal__static_SCAutoOpenGiftDropResp__Descriptor = Descriptor.MessageTypes[236];
      internal__static_SCAutoOpenGiftDropResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAutoOpenGiftDropResp, global::SCAutoOpenGiftDropResp.Builder>(internal__static_SCAutoOpenGiftDropResp__Descriptor,
              new string[] { "DropInfos", });
      internal__static_DropInfo__Descriptor = Descriptor.MessageTypes[237];
      internal__static_DropInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DropInfo, global::DropInfo.Builder>(internal__static_DropInfo__Descriptor,
              new string[] { "PropId", "Count", });
      internal__static_CSChatFinishRequest__Descriptor = Descriptor.MessageTypes[238];
      internal__static_CSChatFinishRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSChatFinishRequest, global::CSChatFinishRequest.Builder>(internal__static_CSChatFinishRequest__Descriptor,
              new string[] { "ChatId", });
      internal__static_SCChatFinishResponse__Descriptor = Descriptor.MessageTypes[239];
      internal__static_SCChatFinishResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCChatFinishResponse, global::SCChatFinishResponse.Builder>(internal__static_SCChatFinishResponse__Descriptor,
              new string[] { "Status", });
      internal__static_CSGetAllRewardedTasksRequest__Descriptor = Descriptor.MessageTypes[240];
      internal__static_CSGetAllRewardedTasksRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGetAllRewardedTasksRequest, global::CSGetAllRewardedTasksRequest.Builder>(internal__static_CSGetAllRewardedTasksRequest__Descriptor,
              new string[] { });
      internal__static_SCGetAllRewardedTasksResponse__Descriptor = Descriptor.MessageTypes[241];
      internal__static_SCGetAllRewardedTasksResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGetAllRewardedTasksResponse, global::SCGetAllRewardedTasksResponse.Builder>(internal__static_SCGetAllRewardedTasksResponse__Descriptor,
              new string[] { "Tasks", });
      internal__static_TaskIdTypeInfo__Descriptor = Descriptor.MessageTypes[242];
      internal__static_TaskIdTypeInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TaskIdTypeInfo, global::TaskIdTypeInfo.Builder>(internal__static_TaskIdTypeInfo__Descriptor,
              new string[] { "TaskId", "ChapterId", "TaskType", });
      internal__static_CSPlayerCheckInInfoReq__Descriptor = Descriptor.MessageTypes[243];
      internal__static_CSPlayerCheckInInfoReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerCheckInInfoReq, global::CSPlayerCheckInInfoReq.Builder>(internal__static_CSPlayerCheckInInfoReq__Descriptor,
              new string[] { });
      internal__static_SCPlayerCheckInInfoResp__Descriptor = Descriptor.MessageTypes[244];
      internal__static_SCPlayerCheckInInfoResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerCheckInInfoResp, global::SCPlayerCheckInInfoResp.Builder>(internal__static_SCPlayerCheckInInfoResp__Descriptor,
              new string[] { "Id", "Day", "Status", });
      internal__static_CSPlayerCheckInReq__Descriptor = Descriptor.MessageTypes[245];
      internal__static_CSPlayerCheckInReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerCheckInReq, global::CSPlayerCheckInReq.Builder>(internal__static_CSPlayerCheckInReq__Descriptor,
              new string[] { });
      internal__static_SCPlayerCheckInResp__Descriptor = Descriptor.MessageTypes[246];
      internal__static_SCPlayerCheckInResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerCheckInResp, global::SCPlayerCheckInResp.Builder>(internal__static_SCPlayerCheckInResp__Descriptor,
              new string[] { "Result", });
      internal__static_CSPlayerRenewIconReq__Descriptor = Descriptor.MessageTypes[247];
      internal__static_CSPlayerRenewIconReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerRenewIconReq, global::CSPlayerRenewIconReq.Builder>(internal__static_CSPlayerRenewIconReq__Descriptor,
              new string[] { "NewIcon", });
      internal__static_SCPlayerRenewIconResp__Descriptor = Descriptor.MessageTypes[248];
      internal__static_SCPlayerRenewIconResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerRenewIconResp, global::SCPlayerRenewIconResp.Builder>(internal__static_SCPlayerRenewIconResp__Descriptor,
              new string[] { "Result", "NewIcon", });
      internal__static_SCPlayerUpLevel__Descriptor = Descriptor.MessageTypes[249];
      internal__static_SCPlayerUpLevel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerUpLevel, global::SCPlayerUpLevel.Builder>(internal__static_SCPlayerUpLevel__Descriptor,
              new string[] { "OldLevel", "NewLevel", "Rewards", "UnLockBuildId", "PushInfo", });
      internal__static_CSPlayerGuildRequest__Descriptor = Descriptor.MessageTypes[250];
      internal__static_CSPlayerGuildRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerGuildRequest, global::CSPlayerGuildRequest.Builder>(internal__static_CSPlayerGuildRequest__Descriptor,
              new string[] { });
      internal__static_SCPlayerGuildResponse__Descriptor = Descriptor.MessageTypes[251];
      internal__static_SCPlayerGuildResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerGuildResponse, global::SCPlayerGuildResponse.Builder>(internal__static_SCPlayerGuildResponse__Descriptor,
              new string[] { "Guild", });
      internal__static_CSPlayerGuildUpdateRequest__Descriptor = Descriptor.MessageTypes[252];
      internal__static_CSPlayerGuildUpdateRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerGuildUpdateRequest, global::CSPlayerGuildUpdateRequest.Builder>(internal__static_CSPlayerGuildUpdateRequest__Descriptor,
              new string[] { "Guild", });
      internal__static_CSPlayerFeedbackRequest__Descriptor = Descriptor.MessageTypes[253];
      internal__static_CSPlayerFeedbackRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSPlayerFeedbackRequest, global::CSPlayerFeedbackRequest.Builder>(internal__static_CSPlayerFeedbackRequest__Descriptor,
              new string[] { "Content", "Platform", "Release", "FeedbackType", "Email", "Information", });
      internal__static_SCPlayerFeedbackResponse__Descriptor = Descriptor.MessageTypes[254];
      internal__static_SCPlayerFeedbackResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCPlayerFeedbackResponse, global::SCPlayerFeedbackResponse.Builder>(internal__static_SCPlayerFeedbackResponse__Descriptor,
              new string[] { "Status", "NextAvailableTime", "TimeLeft", });
      internal__static_SCAchievementUnlockResponse__Descriptor = Descriptor.MessageTypes[255];
      internal__static_SCAchievementUnlockResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCAchievementUnlockResponse, global::SCAchievementUnlockResponse.Builder>(internal__static_SCAchievementUnlockResponse__Descriptor,
              new string[] { "Id", });
      internal__static_SCActivityNewResponse__Descriptor = Descriptor.MessageTypes[256];
      internal__static_SCActivityNewResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCActivityNewResponse, global::SCActivityNewResponse.Builder>(internal__static_SCActivityNewResponse__Descriptor,
              new string[] { "HaveNew", });
      internal__static_CSSceneReconnectRequest__Descriptor = Descriptor.MessageTypes[257];
      internal__static_CSSceneReconnectRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneReconnectRequest, global::CSSceneReconnectRequest.Builder>(internal__static_CSSceneReconnectRequest__Descriptor,
              new string[] { "SceneId", "StartTime", "EndTime", });
      internal__static_SCSceneReconnectResponse__Descriptor = Descriptor.MessageTypes[258];
      internal__static_SCSceneReconnectResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneReconnectResponse, global::SCSceneReconnectResponse.Builder>(internal__static_SCSceneReconnectResponse__Descriptor,
              new string[] { "ResponseStatus", });
      internal__static_CSSceneDifficultyReq__Descriptor = Descriptor.MessageTypes[259];
      internal__static_CSSceneDifficultyReq__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSSceneDifficultyReq, global::CSSceneDifficultyReq.Builder>(internal__static_CSSceneDifficultyReq__Descriptor,
              new string[] { "BigIds", });
      internal__static_SceneDifficultyInfo__Descriptor = Descriptor.MessageTypes[260];
      internal__static_SceneDifficultyInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SceneDifficultyInfo, global::SceneDifficultyInfo.Builder>(internal__static_SceneDifficultyInfo__Descriptor,
              new string[] { "BigId", "Difficulty", "Exp", });
      internal__static_SCSceneDifficultyResp__Descriptor = Descriptor.MessageTypes[261];
      internal__static_SCSceneDifficultyResp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCSceneDifficultyResp, global::SCSceneDifficultyResp.Builder>(internal__static_SCSceneDifficultyResp__Descriptor,
              new string[] { "Infos", });
      internal__static_CSJigsawReconnectRequest__Descriptor = Descriptor.MessageTypes[262];
      internal__static_CSJigsawReconnectRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSJigsawReconnectRequest, global::CSJigsawReconnectRequest.Builder>(internal__static_CSJigsawReconnectRequest__Descriptor,
              new string[] { "SceneId", "StartTime", "EndTime", });
      internal__static_SCJigsawReconnectResponse__Descriptor = Descriptor.MessageTypes[263];
      internal__static_SCJigsawReconnectResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCJigsawReconnectResponse, global::SCJigsawReconnectResponse.Builder>(internal__static_SCJigsawReconnectResponse__Descriptor,
              new string[] { "ResponseStatus", });
      internal__static_ServiceConfigInfo__Descriptor = Descriptor.MessageTypes[264];
      internal__static_ServiceConfigInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ServiceConfigInfo, global::ServiceConfigInfo.Builder>(internal__static_ServiceConfigInfo__Descriptor,
              new string[] { "Key", "Value", });
      internal__static_CSGetServiceConfigRequest__Descriptor = Descriptor.MessageTypes[265];
      internal__static_CSGetServiceConfigRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGetServiceConfigRequest, global::CSGetServiceConfigRequest.Builder>(internal__static_CSGetServiceConfigRequest__Descriptor,
              new string[] { });
      internal__static_SCGetServiceConfigResponse__Descriptor = Descriptor.MessageTypes[266];
      internal__static_SCGetServiceConfigResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGetServiceConfigResponse, global::SCGetServiceConfigResponse.Builder>(internal__static_SCGetServiceConfigResponse__Descriptor,
              new string[] { "Info", });
      internal__static_CSGetServiceConfigSingleRequest__Descriptor = Descriptor.MessageTypes[267];
      internal__static_CSGetServiceConfigSingleRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGetServiceConfigSingleRequest, global::CSGetServiceConfigSingleRequest.Builder>(internal__static_CSGetServiceConfigSingleRequest__Descriptor,
              new string[] { "Key", });
      internal__static_SCGetServiceConfigSingleResponse__Descriptor = Descriptor.MessageTypes[268];
      internal__static_SCGetServiceConfigSingleResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGetServiceConfigSingleResponse, global::SCGetServiceConfigSingleResponse.Builder>(internal__static_SCGetServiceConfigSingleResponse__Descriptor,
              new string[] { "Value", });
      internal__static_GetPathInfo__Descriptor = Descriptor.MessageTypes[269];
      internal__static_GetPathInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GetPathInfo, global::GetPathInfo.Builder>(internal__static_GetPathInfo__Descriptor,
              new string[] { "Id", "Path", "Status", "Version", "Plat", });
      internal__static_CSGetPathConfigRequest__Descriptor = Descriptor.MessageTypes[270];
      internal__static_CSGetPathConfigRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGetPathConfigRequest, global::CSGetPathConfigRequest.Builder>(internal__static_CSGetPathConfigRequest__Descriptor,
              new string[] { "Plat", });
      internal__static_SCGetPathConfigResponse__Descriptor = Descriptor.MessageTypes[271];
      internal__static_SCGetPathConfigResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGetPathConfigResponse, global::SCGetPathConfigResponse.Builder>(internal__static_SCGetPathConfigResponse__Descriptor,
              new string[] { "Infos", });
      internal__static_CSClientLogRequest__Descriptor = Descriptor.MessageTypes[272];
      internal__static_CSClientLogRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSClientLogRequest, global::CSClientLogRequest.Builder>(internal__static_CSClientLogRequest__Descriptor,
              new string[] { "EventName", "Value4Sum", "Params", "PlayerId", });
      internal__static_SceneRewardComprise__Descriptor = Descriptor.MessageTypes[273];
      internal__static_SceneRewardComprise__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SceneRewardComprise, global::SceneRewardComprise.Builder>(internal__static_SceneRewardComprise__Descriptor,
              new string[] { "Type", "OutputCoin", "OutputCash", "OutputVit", "OutputExp", });
      internal__static_Push_Info__Descriptor = Descriptor.MessageTypes[274];
      internal__static_Push_Info__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Push_Info, global::Push_Info.Builder>(internal__static_Push_Info__Descriptor,
              new string[] { "Type", "PushId", "EndTime", "Buyed", });
      internal__static_CSGetPushRequest__Descriptor = Descriptor.MessageTypes[275];
      internal__static_CSGetPushRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSGetPushRequest, global::CSGetPushRequest.Builder>(internal__static_CSGetPushRequest__Descriptor,
              new string[] { });
      internal__static_SCGetPushResponse__Descriptor = Descriptor.MessageTypes[276];
      internal__static_SCGetPushResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCGetPushResponse, global::SCGetPushResponse.Builder>(internal__static_SCGetPushResponse__Descriptor,
              new string[] { "Infos", });
      internal__static_CSBuyPushRequest__Descriptor = Descriptor.MessageTypes[277];
      internal__static_CSBuyPushRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSBuyPushRequest, global::CSBuyPushRequest.Builder>(internal__static_CSBuyPushRequest__Descriptor,
              new string[] { "PushId", });
      internal__static_SCBuyPushResponse__Descriptor = Descriptor.MessageTypes[278];
      internal__static_SCBuyPushResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCBuyPushResponse, global::SCBuyPushResponse.Builder>(internal__static_SCBuyPushResponse__Descriptor,
              new string[] { "PushId", "ReponseStatus", });
      internal__static_CSCombineInfoRequest__Descriptor = Descriptor.MessageTypes[279];
      internal__static_CSCombineInfoRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCombineInfoRequest, global::CSCombineInfoRequest.Builder>(internal__static_CSCombineInfoRequest__Descriptor,
              new string[] { });
      internal__static_SCCombineInfoResponse__Descriptor = Descriptor.MessageTypes[280];
      internal__static_SCCombineInfoResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCombineInfoResponse, global::SCCombineInfoResponse.Builder>(internal__static_SCCombineInfoResponse__Descriptor,
              new string[] { "CombineId", "Count", "CountLimit", });
      internal__static_CSCombineRequest__Descriptor = Descriptor.MessageTypes[281];
      internal__static_CSCombineRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CSCombineRequest, global::CSCombineRequest.Builder>(internal__static_CSCombineRequest__Descriptor,
              new string[] { "CombineId", });
      internal__static_SCCombineResponse__Descriptor = Descriptor.MessageTypes[282];
      internal__static_SCCombineResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SCCombineResponse, global::SCCombineResponse.Builder>(internal__static_SCCombineResponse__Descriptor,
              new string[] { "Result", "Success", });
      pb::ExtensionRegistry registry = pb::ExtensionRegistry.CreateInstance();
      RegisterAllExtensions(registry);
      global::Options.RegisterAllExtensions(registry);
      return registry;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::Options.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum InOrOutScene {
  OUT_SCENE = 0,
  IN_SCENE = 1,
}

public enum Category {
  CASH = 0,
  COIN = 1,
  VIT = 2,
  COMMON = 3,
  BLACK = 4,
}

public enum CostType {
  COST_CASH = 0,
  COST_COIN = 1,
  COST_DOLLAR = 2,
}

public enum FriendReqType {
  APPLYING = 0,
  AGREEING = 1,
  ADDINFO = 2,
  ADDED = 3,
}

public enum OsType {
  ios = 0,
  andorid = 1,
  web = 2,
}

public enum FeedbackType {
  ALL = 0,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ExceptionResponse : pb::GeneratedMessage<ExceptionResponse, ExceptionResponse.Builder> {
  private ExceptionResponse() { }
  private static readonly ExceptionResponse defaultInstance = new ExceptionResponse().MakeReadOnly();
  private static readonly string[] _exceptionResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _exceptionResponseFieldTags = new uint[] { 10 };
  public static ExceptionResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ExceptionResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ExceptionResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ExceptionResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ExceptionResponse, ExceptionResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ExceptionResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _exceptionResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ExceptionResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ExceptionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ExceptionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ExceptionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ExceptionResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ExceptionResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ExceptionResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ExceptionResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ExceptionResponse result;
    
    private ExceptionResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        ExceptionResponse original = result;
        result = new ExceptionResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ExceptionResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ExceptionResponse.Descriptor; }
    }
    
    public override ExceptionResponse DefaultInstanceForType {
      get { return global::ExceptionResponse.DefaultInstance; }
    }
    
    public override ExceptionResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ExceptionResponse) {
        return MergeFrom((ExceptionResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ExceptionResponse other) {
      if (other == global::ExceptionResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_exceptionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _exceptionResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static ExceptionResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ExceptionRemoteLoginResponse : pb::GeneratedMessage<ExceptionRemoteLoginResponse, ExceptionRemoteLoginResponse.Builder> {
  private ExceptionRemoteLoginResponse() { }
  private static readonly ExceptionRemoteLoginResponse defaultInstance = new ExceptionRemoteLoginResponse().MakeReadOnly();
  private static readonly string[] _exceptionRemoteLoginResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _exceptionRemoteLoginResponseFieldTags = new uint[] { 10 };
  public static ExceptionRemoteLoginResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ExceptionRemoteLoginResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ExceptionRemoteLoginResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ExceptionRemoteLoginResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ExceptionRemoteLoginResponse, ExceptionRemoteLoginResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ExceptionRemoteLoginResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _exceptionRemoteLoginResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ExceptionRemoteLoginResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ExceptionRemoteLoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ExceptionRemoteLoginResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ExceptionRemoteLoginResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ExceptionRemoteLoginResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ExceptionRemoteLoginResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ExceptionRemoteLoginResponse result;
    
    private ExceptionRemoteLoginResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        ExceptionRemoteLoginResponse original = result;
        result = new ExceptionRemoteLoginResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ExceptionRemoteLoginResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ExceptionRemoteLoginResponse.Descriptor; }
    }
    
    public override ExceptionRemoteLoginResponse DefaultInstanceForType {
      get { return global::ExceptionRemoteLoginResponse.DefaultInstance; }
    }
    
    public override ExceptionRemoteLoginResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ExceptionRemoteLoginResponse) {
        return MergeFrom((ExceptionRemoteLoginResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ExceptionRemoteLoginResponse other) {
      if (other == global::ExceptionRemoteLoginResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_exceptionRemoteLoginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _exceptionRemoteLoginResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static ExceptionRemoteLoginResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ResponseStatus : pb::GeneratedMessage<ResponseStatus, ResponseStatus.Builder> {
  private ResponseStatus() { }
  private static readonly ResponseStatus defaultInstance = new ResponseStatus().MakeReadOnly();
  private static readonly string[] _responseStatusFieldNames = new string[] { "code", "msg" };
  private static readonly uint[] _responseStatusFieldTags = new uint[] { 8, 18 };
  public static ResponseStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ResponseStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ResponseStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ResponseStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ResponseStatus, ResponseStatus.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ResponseStatus__FieldAccessorTable; }
  }
  
  public const int CodeFieldNumber = 1;
  private bool hasCode;
  private int code_;
  public bool HasCode {
    get { return hasCode; }
  }
  public int Code {
    get { return code_; }
  }
  
  public const int MsgFieldNumber = 2;
  private bool hasMsg;
  private string msg_ = "";
  public bool HasMsg {
    get { return hasMsg; }
  }
  public string Msg {
    get { return msg_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _responseStatusFieldNames;
    if (hasCode) {
      output.WriteInt32(1, field_names[0], Code);
    }
    if (hasMsg) {
      output.WriteString(2, field_names[1], Msg);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Code);
    }
    if (hasMsg) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ResponseStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ResponseStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ResponseStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ResponseStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ResponseStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ResponseStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ResponseStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ResponseStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ResponseStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ResponseStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ResponseStatus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ResponseStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ResponseStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ResponseStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ResponseStatus result;
    
    private ResponseStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        ResponseStatus original = result;
        result = new ResponseStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ResponseStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ResponseStatus.Descriptor; }
    }
    
    public override ResponseStatus DefaultInstanceForType {
      get { return global::ResponseStatus.DefaultInstance; }
    }
    
    public override ResponseStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ResponseStatus) {
        return MergeFrom((ResponseStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ResponseStatus other) {
      if (other == global::ResponseStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_responseStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _responseStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCode = input.ReadInt32(ref result.code_);
            break;
          }
          case 18: {
            result.hasMsg = input.ReadString(ref result.msg_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCode {
      get { return result.hasCode; }
    }
    public int Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(int value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = 0;
      return this;
    }
    
    public bool HasMsg {
      get { return result.hasMsg; }
    }
    public string Msg {
      get { return result.Msg; }
      set { SetMsg(value); }
    }
    public Builder SetMsg(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMsg = true;
      result.msg_ = value;
      return this;
    }
    public Builder ClearMsg() {
      PrepareBuilder();
      result.hasMsg = false;
      result.msg_ = "";
      return this;
    }
  }
  static ResponseStatus() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GmAddAttr : pb::GeneratedMessage<GmAddAttr, GmAddAttr.Builder> {
  private GmAddAttr() { }
  private static readonly GmAddAttr defaultInstance = new GmAddAttr().MakeReadOnly();
  private static readonly string[] _gmAddAttrFieldNames = new string[] { "count", "playerId", "type" };
  private static readonly uint[] _gmAddAttrFieldTags = new uint[] { 16, 8, 24 };
  public static GmAddAttr DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GmAddAttr DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GmAddAttr ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GmAddAttr__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GmAddAttr, GmAddAttr.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GmAddAttr__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int TypeFieldNumber = 3;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gmAddAttrFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    if (hasType) {
      output.WriteInt32(3, field_names[2], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GmAddAttr ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmAddAttr ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmAddAttr ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmAddAttr ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmAddAttr ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmAddAttr ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GmAddAttr ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GmAddAttr ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GmAddAttr ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmAddAttr ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GmAddAttr MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GmAddAttr prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GmAddAttr, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GmAddAttr cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GmAddAttr result;
    
    private GmAddAttr PrepareBuilder() {
      if (resultIsReadOnly) {
        GmAddAttr original = result;
        result = new GmAddAttr();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GmAddAttr MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GmAddAttr.Descriptor; }
    }
    
    public override GmAddAttr DefaultInstanceForType {
      get { return global::GmAddAttr.DefaultInstance; }
    }
    
    public override GmAddAttr BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GmAddAttr) {
        return MergeFrom((GmAddAttr) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GmAddAttr other) {
      if (other == global::GmAddAttr.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gmAddAttrFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gmAddAttrFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 24: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static GmAddAttr() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GmAddProp : pb::GeneratedMessage<GmAddProp, GmAddProp.Builder> {
  private GmAddProp() { }
  private static readonly GmAddProp defaultInstance = new GmAddProp().MakeReadOnly();
  private static readonly string[] _gmAddPropFieldNames = new string[] { "count", "playerId", "propId" };
  private static readonly uint[] _gmAddPropFieldTags = new uint[] { 24, 8, 16 };
  public static GmAddProp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GmAddProp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GmAddProp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GmAddProp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GmAddProp, GmAddProp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GmAddProp__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int PropIdFieldNumber = 2;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 3;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gmAddPropFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasPropId) {
      output.WriteInt64(2, field_names[2], PropId);
    }
    if (hasCount) {
      output.WriteInt32(3, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GmAddProp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmAddProp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmAddProp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmAddProp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmAddProp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmAddProp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GmAddProp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GmAddProp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GmAddProp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmAddProp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GmAddProp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GmAddProp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GmAddProp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GmAddProp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GmAddProp result;
    
    private GmAddProp PrepareBuilder() {
      if (resultIsReadOnly) {
        GmAddProp original = result;
        result = new GmAddProp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GmAddProp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GmAddProp.Descriptor; }
    }
    
    public override GmAddProp DefaultInstanceForType {
      get { return global::GmAddProp.DefaultInstance; }
    }
    
    public override GmAddProp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GmAddProp) {
        return MergeFrom((GmAddProp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GmAddProp other) {
      if (other == global::GmAddProp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gmAddPropFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gmAddPropFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 24: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static GmAddProp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GmFinishTask : pb::GeneratedMessage<GmFinishTask, GmFinishTask.Builder> {
  private GmFinishTask() { }
  private static readonly GmFinishTask defaultInstance = new GmFinishTask().MakeReadOnly();
  private static readonly string[] _gmFinishTaskFieldNames = new string[] { "chapterId", "playerId", "taskId" };
  private static readonly uint[] _gmFinishTaskFieldTags = new uint[] { 16, 8, 24 };
  public static GmFinishTask DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GmFinishTask DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GmFinishTask ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GmFinishTask__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GmFinishTask, GmFinishTask.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GmFinishTask__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int TaskIdFieldNumber = 3;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gmFinishTaskFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasTaskId) {
      output.WriteInt64(3, field_names[2], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GmFinishTask ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmFinishTask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmFinishTask ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmFinishTask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmFinishTask ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmFinishTask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GmFinishTask ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GmFinishTask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GmFinishTask ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmFinishTask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GmFinishTask MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GmFinishTask prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GmFinishTask, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GmFinishTask cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GmFinishTask result;
    
    private GmFinishTask PrepareBuilder() {
      if (resultIsReadOnly) {
        GmFinishTask original = result;
        result = new GmFinishTask();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GmFinishTask MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GmFinishTask.Descriptor; }
    }
    
    public override GmFinishTask DefaultInstanceForType {
      get { return global::GmFinishTask.DefaultInstance; }
    }
    
    public override GmFinishTask BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GmFinishTask) {
        return MergeFrom((GmFinishTask) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GmFinishTask other) {
      if (other == global::GmFinishTask.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gmFinishTaskFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gmFinishTaskFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static GmFinishTask() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GmOfficer : pb::GeneratedMessage<GmOfficer, GmOfficer.Builder> {
  private GmOfficer() { }
  private static readonly GmOfficer defaultInstance = new GmOfficer().MakeReadOnly();
  private static readonly string[] _gmOfficerFieldNames = new string[] { "officerId", "playerId", "type" };
  private static readonly uint[] _gmOfficerFieldTags = new uint[] { 16, 8, 24 };
  public static GmOfficer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GmOfficer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GmOfficer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GmOfficer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GmOfficer, GmOfficer.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GmOfficer__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int OfficerIdFieldNumber = 2;
  private bool hasOfficerId;
  private long officerId_;
  public bool HasOfficerId {
    get { return hasOfficerId; }
  }
  public long OfficerId {
    get { return officerId_; }
  }
  
  public const int TypeFieldNumber = 3;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gmOfficerFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasOfficerId) {
      output.WriteInt64(2, field_names[0], OfficerId);
    }
    if (hasType) {
      output.WriteInt32(3, field_names[2], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, OfficerId);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GmOfficer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmOfficer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmOfficer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GmOfficer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GmOfficer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmOfficer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GmOfficer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GmOfficer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GmOfficer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GmOfficer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GmOfficer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GmOfficer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GmOfficer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GmOfficer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GmOfficer result;
    
    private GmOfficer PrepareBuilder() {
      if (resultIsReadOnly) {
        GmOfficer original = result;
        result = new GmOfficer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GmOfficer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GmOfficer.Descriptor; }
    }
    
    public override GmOfficer DefaultInstanceForType {
      get { return global::GmOfficer.DefaultInstance; }
    }
    
    public override GmOfficer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GmOfficer) {
        return MergeFrom((GmOfficer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GmOfficer other) {
      if (other == global::GmOfficer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasOfficerId) {
        OfficerId = other.OfficerId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gmOfficerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gmOfficerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasOfficerId = input.ReadInt64(ref result.officerId_);
            break;
          }
          case 24: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasOfficerId {
      get { return result.hasOfficerId; }
    }
    public long OfficerId {
      get { return result.OfficerId; }
      set { SetOfficerId(value); }
    }
    public Builder SetOfficerId(long value) {
      PrepareBuilder();
      result.hasOfficerId = true;
      result.officerId_ = value;
      return this;
    }
    public Builder ClearOfficerId() {
      PrepareBuilder();
      result.hasOfficerId = false;
      result.officerId_ = 0L;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static GmOfficer() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GMGetPlayerMessageRequest : pb::GeneratedMessage<GMGetPlayerMessageRequest, GMGetPlayerMessageRequest.Builder> {
  private GMGetPlayerMessageRequest() { }
  private static readonly GMGetPlayerMessageRequest defaultInstance = new GMGetPlayerMessageRequest().MakeReadOnly();
  private static readonly string[] _gMGetPlayerMessageRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _gMGetPlayerMessageRequestFieldTags = new uint[] { 8 };
  public static GMGetPlayerMessageRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GMGetPlayerMessageRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GMGetPlayerMessageRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GMGetPlayerMessageRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GMGetPlayerMessageRequest, GMGetPlayerMessageRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GMGetPlayerMessageRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gMGetPlayerMessageRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GMGetPlayerMessageRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GMGetPlayerMessageRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GMGetPlayerMessageRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GMGetPlayerMessageRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GMGetPlayerMessageRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GMGetPlayerMessageRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GMGetPlayerMessageRequest result;
    
    private GMGetPlayerMessageRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        GMGetPlayerMessageRequest original = result;
        result = new GMGetPlayerMessageRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GMGetPlayerMessageRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GMGetPlayerMessageRequest.Descriptor; }
    }
    
    public override GMGetPlayerMessageRequest DefaultInstanceForType {
      get { return global::GMGetPlayerMessageRequest.DefaultInstance; }
    }
    
    public override GMGetPlayerMessageRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GMGetPlayerMessageRequest) {
        return MergeFrom((GMGetPlayerMessageRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GMGetPlayerMessageRequest other) {
      if (other == global::GMGetPlayerMessageRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gMGetPlayerMessageRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gMGetPlayerMessageRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static GMGetPlayerMessageRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GMGetPlayerMessageResponse : pb::GeneratedMessage<GMGetPlayerMessageResponse, GMGetPlayerMessageResponse.Builder> {
  private GMGetPlayerMessageResponse() { }
  private static readonly GMGetPlayerMessageResponse defaultInstance = new GMGetPlayerMessageResponse().MakeReadOnly();
  private static readonly string[] _gMGetPlayerMessageResponseFieldNames = new string[] { "message" };
  private static readonly uint[] _gMGetPlayerMessageResponseFieldTags = new uint[] { 10 };
  public static GMGetPlayerMessageResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GMGetPlayerMessageResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GMGetPlayerMessageResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GMGetPlayerMessageResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GMGetPlayerMessageResponse, GMGetPlayerMessageResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GMGetPlayerMessageResponse__FieldAccessorTable; }
  }
  
  public const int MessageFieldNumber = 1;
  private bool hasMessage;
  private string message_ = "";
  public bool HasMessage {
    get { return hasMessage; }
  }
  public string Message {
    get { return message_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _gMGetPlayerMessageResponseFieldNames;
    if (hasMessage) {
      output.WriteString(1, field_names[0], Message);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMessage) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Message);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GMGetPlayerMessageResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GMGetPlayerMessageResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GMGetPlayerMessageResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GMGetPlayerMessageResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GMGetPlayerMessageResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GMGetPlayerMessageResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GMGetPlayerMessageResponse result;
    
    private GMGetPlayerMessageResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        GMGetPlayerMessageResponse original = result;
        result = new GMGetPlayerMessageResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GMGetPlayerMessageResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GMGetPlayerMessageResponse.Descriptor; }
    }
    
    public override GMGetPlayerMessageResponse DefaultInstanceForType {
      get { return global::GMGetPlayerMessageResponse.DefaultInstance; }
    }
    
    public override GMGetPlayerMessageResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GMGetPlayerMessageResponse) {
        return MergeFrom((GMGetPlayerMessageResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GMGetPlayerMessageResponse other) {
      if (other == global::GMGetPlayerMessageResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMessage) {
        Message = other.Message;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gMGetPlayerMessageResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gMGetPlayerMessageResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasMessage = input.ReadString(ref result.message_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMessage {
      get { return result.hasMessage; }
    }
    public string Message {
      get { return result.Message; }
      set { SetMessage(value); }
    }
    public Builder SetMessage(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMessage = true;
      result.message_ = value;
      return this;
    }
    public Builder ClearMessage() {
      PrepareBuilder();
      result.hasMessage = false;
      result.message_ = "";
      return this;
    }
  }
  static GMGetPlayerMessageResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEnterRequest : pb::GeneratedMessage<CSEnterRequest, CSEnterRequest.Builder> {
  private CSEnterRequest() { }
  private static readonly CSEnterRequest defaultInstance = new CSEnterRequest().MakeReadOnly();
  private static readonly string[] _cSEnterRequestFieldNames = new string[] { "officerIds", "playerId", "sceneId" };
  private static readonly uint[] _cSEnterRequestFieldTags = new uint[] { 24, 8, 16 };
  public static CSEnterRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEnterRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEnterRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEnterRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEnterRequest, CSEnterRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEnterRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int SceneIdFieldNumber = 2;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int OfficerIdsFieldNumber = 3;
  private pbc::PopsicleList<long> officerIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> OfficerIdsList {
    get { return pbc::Lists.AsReadOnly(officerIds_); }
  }
  public int OfficerIdsCount {
    get { return officerIds_.Count; }
  }
  public long GetOfficerIds(int index) {
    return officerIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEnterRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasSceneId) {
      output.WriteInt64(2, field_names[2], SceneId);
    }
    if (officerIds_.Count > 0) {
      output.WriteInt64Array(3, field_names[0], officerIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SceneId);
    }
    {
      int dataSize = 0;
      foreach (long element in OfficerIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * officerIds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEnterRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEnterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEnterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEnterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEnterRequest MakeReadOnly() {
    officerIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEnterRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEnterRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEnterRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEnterRequest result;
    
    private CSEnterRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEnterRequest original = result;
        result = new CSEnterRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEnterRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEnterRequest.Descriptor; }
    }
    
    public override CSEnterRequest DefaultInstanceForType {
      get { return global::CSEnterRequest.DefaultInstance; }
    }
    
    public override CSEnterRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEnterRequest) {
        return MergeFrom((CSEnterRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEnterRequest other) {
      if (other == global::CSEnterRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.officerIds_.Count != 0) {
        result.officerIds_.Add(other.officerIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEnterRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEnterRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 26:
          case 24: {
            input.ReadInt64Array(tag, field_name, result.officerIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<long> OfficerIdsList {
      get { return PrepareBuilder().officerIds_; }
    }
    public int OfficerIdsCount {
      get { return result.OfficerIdsCount; }
    }
    public long GetOfficerIds(int index) {
      return result.GetOfficerIds(index);
    }
    public Builder SetOfficerIds(int index, long value) {
      PrepareBuilder();
      result.officerIds_[index] = value;
      return this;
    }
    public Builder AddOfficerIds(long value) {
      PrepareBuilder();
      result.officerIds_.Add(value);
      return this;
    }
    public Builder AddRangeOfficerIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.officerIds_.Add(values);
      return this;
    }
    public Builder ClearOfficerIds() {
      PrepareBuilder();
      result.officerIds_.Clear();
      return this;
    }
  }
  static CSEnterRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEnterResponse : pb::GeneratedMessage<SCEnterResponse, SCEnterResponse.Builder> {
  private SCEnterResponse() { }
  private static readonly SCEnterResponse defaultInstance = new SCEnterResponse().MakeReadOnly();
  private static readonly string[] _sCEnterResponseFieldNames = new string[] { "fragments", "officerIds", "result", "seconds", "vitConsume" };
  private static readonly uint[] _sCEnterResponseFieldTags = new uint[] { 32, 40, 8, 24, 16 };
  public static SCEnterResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEnterResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEnterResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEnterResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEnterResponse, SCEnterResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEnterResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int VitConsumeFieldNumber = 2;
  private bool hasVitConsume;
  private int vitConsume_;
  public bool HasVitConsume {
    get { return hasVitConsume; }
  }
  public int VitConsume {
    get { return vitConsume_; }
  }
  
  public const int SecondsFieldNumber = 3;
  private bool hasSeconds;
  private int seconds_;
  public bool HasSeconds {
    get { return hasSeconds; }
  }
  public int Seconds {
    get { return seconds_; }
  }
  
  public const int FragmentsFieldNumber = 4;
  private pbc::PopsicleList<long> fragments_ = new pbc::PopsicleList<long>();
  public scg::IList<long> FragmentsList {
    get { return pbc::Lists.AsReadOnly(fragments_); }
  }
  public int FragmentsCount {
    get { return fragments_.Count; }
  }
  public long GetFragments(int index) {
    return fragments_[index];
  }
  
  public const int OfficerIdsFieldNumber = 5;
  private pbc::PopsicleList<long> officerIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> OfficerIdsList {
    get { return pbc::Lists.AsReadOnly(officerIds_); }
  }
  public int OfficerIdsCount {
    get { return officerIds_.Count; }
  }
  public long GetOfficerIds(int index) {
    return officerIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEnterResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[2], Result);
    }
    if (hasVitConsume) {
      output.WriteInt32(2, field_names[4], VitConsume);
    }
    if (hasSeconds) {
      output.WriteInt32(3, field_names[3], Seconds);
    }
    if (fragments_.Count > 0) {
      output.WriteInt64Array(4, field_names[0], fragments_);
    }
    if (officerIds_.Count > 0) {
      output.WriteInt64Array(5, field_names[1], officerIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasVitConsume) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, VitConsume);
    }
    if (hasSeconds) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Seconds);
    }
    {
      int dataSize = 0;
      foreach (long element in FragmentsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * fragments_.Count;
    }
    {
      int dataSize = 0;
      foreach (long element in OfficerIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * officerIds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEnterResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEnterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEnterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEnterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEnterResponse MakeReadOnly() {
    fragments_.MakeReadOnly();
    officerIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEnterResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEnterResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEnterResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEnterResponse result;
    
    private SCEnterResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEnterResponse original = result;
        result = new SCEnterResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEnterResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEnterResponse.Descriptor; }
    }
    
    public override SCEnterResponse DefaultInstanceForType {
      get { return global::SCEnterResponse.DefaultInstance; }
    }
    
    public override SCEnterResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEnterResponse) {
        return MergeFrom((SCEnterResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEnterResponse other) {
      if (other == global::SCEnterResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasVitConsume) {
        VitConsume = other.VitConsume;
      }
      if (other.HasSeconds) {
        Seconds = other.Seconds;
      }
      if (other.fragments_.Count != 0) {
        result.fragments_.Add(other.fragments_);
      }
      if (other.officerIds_.Count != 0) {
        result.officerIds_.Add(other.officerIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEnterResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEnterResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasVitConsume = input.ReadInt32(ref result.vitConsume_);
            break;
          }
          case 24: {
            result.hasSeconds = input.ReadInt32(ref result.seconds_);
            break;
          }
          case 34:
          case 32: {
            input.ReadInt64Array(tag, field_name, result.fragments_);
            break;
          }
          case 42:
          case 40: {
            input.ReadInt64Array(tag, field_name, result.officerIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasVitConsume {
      get { return result.hasVitConsume; }
    }
    public int VitConsume {
      get { return result.VitConsume; }
      set { SetVitConsume(value); }
    }
    public Builder SetVitConsume(int value) {
      PrepareBuilder();
      result.hasVitConsume = true;
      result.vitConsume_ = value;
      return this;
    }
    public Builder ClearVitConsume() {
      PrepareBuilder();
      result.hasVitConsume = false;
      result.vitConsume_ = 0;
      return this;
    }
    
    public bool HasSeconds {
      get { return result.hasSeconds; }
    }
    public int Seconds {
      get { return result.Seconds; }
      set { SetSeconds(value); }
    }
    public Builder SetSeconds(int value) {
      PrepareBuilder();
      result.hasSeconds = true;
      result.seconds_ = value;
      return this;
    }
    public Builder ClearSeconds() {
      PrepareBuilder();
      result.hasSeconds = false;
      result.seconds_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<long> FragmentsList {
      get { return PrepareBuilder().fragments_; }
    }
    public int FragmentsCount {
      get { return result.FragmentsCount; }
    }
    public long GetFragments(int index) {
      return result.GetFragments(index);
    }
    public Builder SetFragments(int index, long value) {
      PrepareBuilder();
      result.fragments_[index] = value;
      return this;
    }
    public Builder AddFragments(long value) {
      PrepareBuilder();
      result.fragments_.Add(value);
      return this;
    }
    public Builder AddRangeFragments(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.fragments_.Add(values);
      return this;
    }
    public Builder ClearFragments() {
      PrepareBuilder();
      result.fragments_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<long> OfficerIdsList {
      get { return PrepareBuilder().officerIds_; }
    }
    public int OfficerIdsCount {
      get { return result.OfficerIdsCount; }
    }
    public long GetOfficerIds(int index) {
      return result.GetOfficerIds(index);
    }
    public Builder SetOfficerIds(int index, long value) {
      PrepareBuilder();
      result.officerIds_[index] = value;
      return this;
    }
    public Builder AddOfficerIds(long value) {
      PrepareBuilder();
      result.officerIds_.Add(value);
      return this;
    }
    public Builder AddRangeOfficerIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.officerIds_.Add(values);
      return this;
    }
    public Builder ClearOfficerIds() {
      PrepareBuilder();
      result.officerIds_.Clear();
      return this;
    }
  }
  static SCEnterResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSQuitRequest : pb::GeneratedMessage<CSQuitRequest, CSQuitRequest.Builder> {
  private CSQuitRequest() { }
  private static readonly CSQuitRequest defaultInstance = new CSQuitRequest().MakeReadOnly();
  private static readonly string[] _cSQuitRequestFieldNames = new string[] { "playerId", "sceneId" };
  private static readonly uint[] _cSQuitRequestFieldTags = new uint[] { 8, 16 };
  public static CSQuitRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSQuitRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSQuitRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSQuitRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSQuitRequest, CSQuitRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSQuitRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int SceneIdFieldNumber = 2;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSQuitRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    if (hasSceneId) {
      output.WriteInt64(2, field_names[1], SceneId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SceneId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSQuitRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSQuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSQuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSQuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSQuitRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSQuitRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSQuitRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSQuitRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSQuitRequest result;
    
    private CSQuitRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSQuitRequest original = result;
        result = new CSQuitRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSQuitRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSQuitRequest.Descriptor; }
    }
    
    public override CSQuitRequest DefaultInstanceForType {
      get { return global::CSQuitRequest.DefaultInstance; }
    }
    
    public override CSQuitRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSQuitRequest) {
        return MergeFrom((CSQuitRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSQuitRequest other) {
      if (other == global::CSQuitRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSQuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSQuitRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
  }
  static CSQuitRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCQuitResponse : pb::GeneratedMessage<SCQuitResponse, SCQuitResponse.Builder> {
  private SCQuitResponse() { }
  private static readonly SCQuitResponse defaultInstance = new SCQuitResponse().MakeReadOnly();
  private static readonly string[] _sCQuitResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCQuitResponseFieldTags = new uint[] { 8 };
  public static SCQuitResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCQuitResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCQuitResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCQuitResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCQuitResponse, SCQuitResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCQuitResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCQuitResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCQuitResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCQuitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCQuitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCQuitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCQuitResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCQuitResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCQuitResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCQuitResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCQuitResponse result;
    
    private SCQuitResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCQuitResponse original = result;
        result = new SCQuitResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCQuitResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCQuitResponse.Descriptor; }
    }
    
    public override SCQuitResponse DefaultInstanceForType {
      get { return global::SCQuitResponse.DefaultInstance; }
    }
    
    public override SCQuitResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCQuitResponse) {
        return MergeFrom((SCQuitResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCQuitResponse other) {
      if (other == global::SCQuitResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCQuitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCQuitResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCQuitResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSuspendRequest : pb::GeneratedMessage<CSSuspendRequest, CSSuspendRequest.Builder> {
  private CSSuspendRequest() { }
  private static readonly CSSuspendRequest defaultInstance = new CSSuspendRequest().MakeReadOnly();
  private static readonly string[] _cSSuspendRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSSuspendRequestFieldTags = new uint[] { 8 };
  public static CSSuspendRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSuspendRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSuspendRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSuspendRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSuspendRequest, CSSuspendRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSuspendRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSuspendRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSuspendRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSuspendRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSuspendRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSuspendRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSuspendRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSuspendRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSuspendRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSuspendRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSuspendRequest result;
    
    private CSSuspendRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSuspendRequest original = result;
        result = new CSSuspendRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSuspendRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSuspendRequest.Descriptor; }
    }
    
    public override CSSuspendRequest DefaultInstanceForType {
      get { return global::CSSuspendRequest.DefaultInstance; }
    }
    
    public override CSSuspendRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSuspendRequest) {
        return MergeFrom((CSSuspendRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSuspendRequest other) {
      if (other == global::CSSuspendRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSuspendRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSuspendRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSSuspendRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSuspendResponse : pb::GeneratedMessage<SCSuspendResponse, SCSuspendResponse.Builder> {
  private SCSuspendResponse() { }
  private static readonly SCSuspendResponse defaultInstance = new SCSuspendResponse().MakeReadOnly();
  private static readonly string[] _sCSuspendResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCSuspendResponseFieldTags = new uint[] { 8 };
  public static SCSuspendResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSuspendResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSuspendResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSuspendResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSuspendResponse, SCSuspendResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSuspendResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSuspendResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSuspendResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSuspendResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSuspendResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSuspendResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSuspendResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSuspendResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSuspendResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSuspendResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSuspendResponse result;
    
    private SCSuspendResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSuspendResponse original = result;
        result = new SCSuspendResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSuspendResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSuspendResponse.Descriptor; }
    }
    
    public override SCSuspendResponse DefaultInstanceForType {
      get { return global::SCSuspendResponse.DefaultInstance; }
    }
    
    public override SCSuspendResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSuspendResponse) {
        return MergeFrom((SCSuspendResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSuspendResponse other) {
      if (other == global::SCSuspendResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSuspendResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSuspendResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCSuspendResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSResumeRequest : pb::GeneratedMessage<CSResumeRequest, CSResumeRequest.Builder> {
  private CSResumeRequest() { }
  private static readonly CSResumeRequest defaultInstance = new CSResumeRequest().MakeReadOnly();
  private static readonly string[] _cSResumeRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSResumeRequestFieldTags = new uint[] { 8 };
  public static CSResumeRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSResumeRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSResumeRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSResumeRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSResumeRequest, CSResumeRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSResumeRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSResumeRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSResumeRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSResumeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSResumeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSResumeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSResumeRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSResumeRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSResumeRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSResumeRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSResumeRequest result;
    
    private CSResumeRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSResumeRequest original = result;
        result = new CSResumeRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSResumeRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSResumeRequest.Descriptor; }
    }
    
    public override CSResumeRequest DefaultInstanceForType {
      get { return global::CSResumeRequest.DefaultInstance; }
    }
    
    public override CSResumeRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSResumeRequest) {
        return MergeFrom((CSResumeRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSResumeRequest other) {
      if (other == global::CSResumeRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSResumeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSResumeRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSResumeRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCResumeResponse : pb::GeneratedMessage<SCResumeResponse, SCResumeResponse.Builder> {
  private SCResumeResponse() { }
  private static readonly SCResumeResponse defaultInstance = new SCResumeResponse().MakeReadOnly();
  private static readonly string[] _sCResumeResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCResumeResponseFieldTags = new uint[] { 8 };
  public static SCResumeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCResumeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCResumeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCResumeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCResumeResponse, SCResumeResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCResumeResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCResumeResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCResumeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCResumeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCResumeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCResumeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCResumeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCResumeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCResumeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCResumeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCResumeResponse result;
    
    private SCResumeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCResumeResponse original = result;
        result = new SCResumeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCResumeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCResumeResponse.Descriptor; }
    }
    
    public override SCResumeResponse DefaultInstanceForType {
      get { return global::SCResumeResponse.DefaultInstance; }
    }
    
    public override SCResumeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCResumeResponse) {
        return MergeFrom((SCResumeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCResumeResponse other) {
      if (other == global::SCResumeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCResumeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCResumeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCResumeResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSStartRequest : pb::GeneratedMessage<CSStartRequest, CSStartRequest.Builder> {
  private CSStartRequest() { }
  private static readonly CSStartRequest defaultInstance = new CSStartRequest().MakeReadOnly();
  private static readonly string[] _cSStartRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSStartRequestFieldTags = new uint[] { 8 };
  public static CSStartRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSStartRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSStartRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSStartRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSStartRequest, CSStartRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSStartRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSStartRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSStartRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStartRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStartRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSStartRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSStartRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStartRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSStartRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSStartRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSStartRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSStartRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSStartRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSStartRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSStartRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSStartRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSStartRequest result;
    
    private CSStartRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSStartRequest original = result;
        result = new CSStartRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSStartRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSStartRequest.Descriptor; }
    }
    
    public override CSStartRequest DefaultInstanceForType {
      get { return global::CSStartRequest.DefaultInstance; }
    }
    
    public override CSStartRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSStartRequest) {
        return MergeFrom((CSStartRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSStartRequest other) {
      if (other == global::CSStartRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSStartRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSStartRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSStartRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCStartResponse : pb::GeneratedMessage<SCStartResponse, SCStartResponse.Builder> {
  private SCStartResponse() { }
  private static readonly SCStartResponse defaultInstance = new SCStartResponse().MakeReadOnly();
  private static readonly string[] _sCStartResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCStartResponseFieldTags = new uint[] { 8 };
  public static SCStartResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCStartResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCStartResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCStartResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCStartResponse, SCStartResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCStartResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCStartResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCStartResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStartResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStartResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCStartResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCStartResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStartResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCStartResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCStartResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCStartResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCStartResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCStartResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCStartResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCStartResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCStartResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCStartResponse result;
    
    private SCStartResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCStartResponse original = result;
        result = new SCStartResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCStartResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCStartResponse.Descriptor; }
    }
    
    public override SCStartResponse DefaultInstanceForType {
      get { return global::SCStartResponse.DefaultInstance; }
    }
    
    public override SCStartResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCStartResponse) {
        return MergeFrom((SCStartResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCStartResponse other) {
      if (other == global::SCStartResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCStartResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCStartResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCStartResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFinishRequest : pb::GeneratedMessage<CSFinishRequest, CSFinishRequest.Builder> {
  private CSFinishRequest() { }
  private static readonly CSFinishRequest defaultInstance = new CSFinishRequest().MakeReadOnly();
  private static readonly string[] _cSFinishRequestFieldNames = new string[] { "allTime", "restTime", "result", "sceneId" };
  private static readonly uint[] _cSFinishRequestFieldTags = new uint[] { 32, 24, 16, 8 };
  public static CSFinishRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFinishRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFinishRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFinishRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFinishRequest, CSFinishRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFinishRequest__FieldAccessorTable; }
  }
  
  public const int SceneIdFieldNumber = 1;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int ResultFieldNumber = 2;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int RestTimeFieldNumber = 3;
  private bool hasRestTime;
  private int restTime_;
  public bool HasRestTime {
    get { return hasRestTime; }
  }
  public int RestTime {
    get { return restTime_; }
  }
  
  public const int AllTimeFieldNumber = 4;
  private bool hasAllTime;
  private int allTime_;
  public bool HasAllTime {
    get { return hasAllTime; }
  }
  public int AllTime {
    get { return allTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFinishRequestFieldNames;
    if (hasSceneId) {
      output.WriteInt64(1, field_names[3], SceneId);
    }
    if (hasResult) {
      output.WriteInt32(2, field_names[2], Result);
    }
    if (hasRestTime) {
      output.WriteInt32(3, field_names[1], RestTime);
    }
    if (hasAllTime) {
      output.WriteInt32(4, field_names[0], AllTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SceneId);
    }
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Result);
    }
    if (hasRestTime) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, RestTime);
    }
    if (hasAllTime) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, AllTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFinishRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFinishRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFinishRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFinishRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFinishRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFinishRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFinishRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFinishRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFinishRequest result;
    
    private CSFinishRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFinishRequest original = result;
        result = new CSFinishRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFinishRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFinishRequest.Descriptor; }
    }
    
    public override CSFinishRequest DefaultInstanceForType {
      get { return global::CSFinishRequest.DefaultInstance; }
    }
    
    public override CSFinishRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFinishRequest) {
        return MergeFrom((CSFinishRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFinishRequest other) {
      if (other == global::CSFinishRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasRestTime) {
        RestTime = other.RestTime;
      }
      if (other.HasAllTime) {
        AllTime = other.AllTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFinishRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFinishRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 16: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 24: {
            result.hasRestTime = input.ReadInt32(ref result.restTime_);
            break;
          }
          case 32: {
            result.hasAllTime = input.ReadInt32(ref result.allTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasRestTime {
      get { return result.hasRestTime; }
    }
    public int RestTime {
      get { return result.RestTime; }
      set { SetRestTime(value); }
    }
    public Builder SetRestTime(int value) {
      PrepareBuilder();
      result.hasRestTime = true;
      result.restTime_ = value;
      return this;
    }
    public Builder ClearRestTime() {
      PrepareBuilder();
      result.hasRestTime = false;
      result.restTime_ = 0;
      return this;
    }
    
    public bool HasAllTime {
      get { return result.hasAllTime; }
    }
    public int AllTime {
      get { return result.AllTime; }
      set { SetAllTime(value); }
    }
    public Builder SetAllTime(int value) {
      PrepareBuilder();
      result.hasAllTime = true;
      result.allTime_ = value;
      return this;
    }
    public Builder ClearAllTime() {
      PrepareBuilder();
      result.hasAllTime = false;
      result.allTime_ = 0;
      return this;
    }
  }
  static CSFinishRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFinishResponse : pb::GeneratedMessage<SCFinishResponse, SCFinishResponse.Builder> {
  private SCFinishResponse() { }
  private static readonly SCFinishResponse defaultInstance = new SCFinishResponse().MakeReadOnly();
  private static readonly string[] _sCFinishResponseFieldNames = new string[] { "jigsawState", "propId", "result", "rewards", "sceneId", "sceneRewardComprise" };
  private static readonly uint[] _sCFinishResponseFieldTags = new uint[] { 40, 24, 8, 34, 16, 50 };
  public static SCFinishResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFinishResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFinishResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFinishResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFinishResponse, SCFinishResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFinishResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int SceneIdFieldNumber = 2;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int PropIdFieldNumber = 3;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int RewardsFieldNumber = 4;
  private pbc::PopsicleList<global::Reward> rewards_ = new pbc::PopsicleList<global::Reward>();
  public scg::IList<global::Reward> RewardsList {
    get { return rewards_; }
  }
  public int RewardsCount {
    get { return rewards_.Count; }
  }
  public global::Reward GetRewards(int index) {
    return rewards_[index];
  }
  
  public const int JigsawStateFieldNumber = 5;
  private bool hasJigsawState;
  private int jigsawState_;
  public bool HasJigsawState {
    get { return hasJigsawState; }
  }
  public int JigsawState {
    get { return jigsawState_; }
  }
  
  public const int SceneRewardCompriseFieldNumber = 6;
  private pbc::PopsicleList<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::PopsicleList<global::SceneRewardComprise>();
  public scg::IList<global::SceneRewardComprise> SceneRewardCompriseList {
    get { return sceneRewardComprise_; }
  }
  public int SceneRewardCompriseCount {
    get { return sceneRewardComprise_.Count; }
  }
  public global::SceneRewardComprise GetSceneRewardComprise(int index) {
    return sceneRewardComprise_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFinishResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[2], Result);
    }
    if (hasSceneId) {
      output.WriteInt64(2, field_names[4], SceneId);
    }
    if (hasPropId) {
      output.WriteInt64(3, field_names[1], PropId);
    }
    if (rewards_.Count > 0) {
      output.WriteMessageArray(4, field_names[3], rewards_);
    }
    if (hasJigsawState) {
      output.WriteInt32(5, field_names[0], JigsawState);
    }
    if (sceneRewardComprise_.Count > 0) {
      output.WriteMessageArray(6, field_names[5], sceneRewardComprise_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SceneId);
    }
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, PropId);
    }
    foreach (global::Reward element in RewardsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    if (hasJigsawState) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, JigsawState);
    }
    foreach (global::SceneRewardComprise element in SceneRewardCompriseList) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFinishResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFinishResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFinishResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFinishResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFinishResponse MakeReadOnly() {
    rewards_.MakeReadOnly();
    sceneRewardComprise_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFinishResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFinishResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFinishResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFinishResponse result;
    
    private SCFinishResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFinishResponse original = result;
        result = new SCFinishResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFinishResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFinishResponse.Descriptor; }
    }
    
    public override SCFinishResponse DefaultInstanceForType {
      get { return global::SCFinishResponse.DefaultInstance; }
    }
    
    public override SCFinishResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFinishResponse) {
        return MergeFrom((SCFinishResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFinishResponse other) {
      if (other == global::SCFinishResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.rewards_.Count != 0) {
        result.rewards_.Add(other.rewards_);
      }
      if (other.HasJigsawState) {
        JigsawState = other.JigsawState;
      }
      if (other.sceneRewardComprise_.Count != 0) {
        result.sceneRewardComprise_.Add(other.sceneRewardComprise_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFinishResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFinishResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 24: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.rewards_, global::Reward.DefaultInstance, extensionRegistry);
            break;
          }
          case 40: {
            result.hasJigsawState = input.ReadInt32(ref result.jigsawState_);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, field_name, result.sceneRewardComprise_, global::SceneRewardComprise.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::Reward> RewardsList {
      get { return PrepareBuilder().rewards_; }
    }
    public int RewardsCount {
      get { return result.RewardsCount; }
    }
    public global::Reward GetRewards(int index) {
      return result.GetRewards(index);
    }
    public Builder SetRewards(int index, global::Reward value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_[index] = value;
      return this;
    }
    public Builder SetRewards(int index, global::Reward.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRewards(global::Reward value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_.Add(value);
      return this;
    }
    public Builder AddRewards(global::Reward.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRewards(scg::IEnumerable<global::Reward> values) {
      PrepareBuilder();
      result.rewards_.Add(values);
      return this;
    }
    public Builder ClearRewards() {
      PrepareBuilder();
      result.rewards_.Clear();
      return this;
    }
    
    public bool HasJigsawState {
      get { return result.hasJigsawState; }
    }
    public int JigsawState {
      get { return result.JigsawState; }
      set { SetJigsawState(value); }
    }
    public Builder SetJigsawState(int value) {
      PrepareBuilder();
      result.hasJigsawState = true;
      result.jigsawState_ = value;
      return this;
    }
    public Builder ClearJigsawState() {
      PrepareBuilder();
      result.hasJigsawState = false;
      result.jigsawState_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::SceneRewardComprise> SceneRewardCompriseList {
      get { return PrepareBuilder().sceneRewardComprise_; }
    }
    public int SceneRewardCompriseCount {
      get { return result.SceneRewardCompriseCount; }
    }
    public global::SceneRewardComprise GetSceneRewardComprise(int index) {
      return result.GetSceneRewardComprise(index);
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = value;
      return this;
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(value);
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSceneRewardComprise(scg::IEnumerable<global::SceneRewardComprise> values) {
      PrepareBuilder();
      result.sceneRewardComprise_.Add(values);
      return this;
    }
    public Builder ClearSceneRewardComprise() {
      PrepareBuilder();
      result.sceneRewardComprise_.Clear();
      return this;
    }
  }
  static SCFinishResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Reward : pb::GeneratedMessage<Reward, Reward.Builder> {
  private Reward() { }
  private static readonly Reward defaultInstance = new Reward().MakeReadOnly();
  private static readonly string[] _rewardFieldNames = new string[] { "num", "percent", "type" };
  private static readonly uint[] _rewardFieldTags = new uint[] { 24, 8, 16 };
  public static Reward DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Reward DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Reward ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_Reward__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Reward, Reward.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_Reward__FieldAccessorTable; }
  }
  
  public const int PercentFieldNumber = 1;
  private bool hasPercent;
  private int percent_;
  public bool HasPercent {
    get { return hasPercent; }
  }
  public int Percent {
    get { return percent_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int NumFieldNumber = 3;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _rewardFieldNames;
    if (hasPercent) {
      output.WriteInt32(1, field_names[1], Percent);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[2], Type);
    }
    if (hasNum) {
      output.WriteInt32(3, field_names[0], Num);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPercent) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Percent);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Num);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Reward ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Reward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Reward ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Reward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Reward ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Reward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Reward ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Reward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Reward ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Reward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Reward MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Reward prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Reward, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Reward cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Reward result;
    
    private Reward PrepareBuilder() {
      if (resultIsReadOnly) {
        Reward original = result;
        result = new Reward();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Reward MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Reward.Descriptor; }
    }
    
    public override Reward DefaultInstanceForType {
      get { return global::Reward.DefaultInstance; }
    }
    
    public override Reward BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Reward) {
        return MergeFrom((Reward) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Reward other) {
      if (other == global::Reward.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPercent) {
        Percent = other.Percent;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_rewardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _rewardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPercent = input.ReadInt32(ref result.percent_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPercent {
      get { return result.hasPercent; }
    }
    public int Percent {
      get { return result.Percent; }
      set { SetPercent(value); }
    }
    public Builder SetPercent(int value) {
      PrepareBuilder();
      result.hasPercent = true;
      result.percent_ = value;
      return this;
    }
    public Builder ClearPercent() {
      PrepareBuilder();
      result.hasPercent = false;
      result.percent_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
  }
  static Reward() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRegRequest : pb::GeneratedMessage<CSRegRequest, CSRegRequest.Builder> {
  private CSRegRequest() { }
  private static readonly CSRegRequest defaultInstance = new CSRegRequest().MakeReadOnly();
  private static readonly string[] _cSRegRequestFieldNames = new string[] { "pwd", "username" };
  private static readonly uint[] _cSRegRequestFieldTags = new uint[] { 18, 10 };
  public static CSRegRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRegRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRegRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSRegRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRegRequest, CSRegRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSRegRequest__FieldAccessorTable; }
  }
  
  public const int UsernameFieldNumber = 1;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int PwdFieldNumber = 2;
  private bool hasPwd;
  private string pwd_ = "";
  public bool HasPwd {
    get { return hasPwd; }
  }
  public string Pwd {
    get { return pwd_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRegRequestFieldNames;
    if (hasUsername) {
      output.WriteString(1, field_names[1], Username);
    }
    if (hasPwd) {
      output.WriteString(2, field_names[0], Pwd);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Username);
    }
    if (hasPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Pwd);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRegRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRegRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRegRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRegRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRegRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRegRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRegRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRegRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRegRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRegRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRegRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRegRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRegRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRegRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRegRequest result;
    
    private CSRegRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRegRequest original = result;
        result = new CSRegRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRegRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRegRequest.Descriptor; }
    }
    
    public override CSRegRequest DefaultInstanceForType {
      get { return global::CSRegRequest.DefaultInstance; }
    }
    
    public override CSRegRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRegRequest) {
        return MergeFrom((CSRegRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRegRequest other) {
      if (other == global::CSRegRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasPwd) {
        Pwd = other.Pwd;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRegRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRegRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 18: {
            result.hasPwd = input.ReadString(ref result.pwd_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasPwd {
      get { return result.hasPwd; }
    }
    public string Pwd {
      get { return result.Pwd; }
      set { SetPwd(value); }
    }
    public Builder SetPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPwd = true;
      result.pwd_ = value;
      return this;
    }
    public Builder ClearPwd() {
      PrepareBuilder();
      result.hasPwd = false;
      result.pwd_ = "";
      return this;
    }
  }
  static CSRegRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRegResponse : pb::GeneratedMessage<SCRegResponse, SCRegResponse.Builder> {
  private SCRegResponse() { }
  private static readonly SCRegResponse defaultInstance = new SCRegResponse().MakeReadOnly();
  private static readonly string[] _sCRegResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCRegResponseFieldTags = new uint[] { 8 };
  public static SCRegResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRegResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRegResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCRegResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRegResponse, SCRegResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCRegResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRegResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRegResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRegResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRegResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRegResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRegResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRegResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRegResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRegResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRegResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRegResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRegResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRegResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRegResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRegResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRegResponse result;
    
    private SCRegResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRegResponse original = result;
        result = new SCRegResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRegResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRegResponse.Descriptor; }
    }
    
    public override SCRegResponse DefaultInstanceForType {
      get { return global::SCRegResponse.DefaultInstance; }
    }
    
    public override SCRegResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRegResponse) {
        return MergeFrom((SCRegResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRegResponse other) {
      if (other == global::SCRegResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRegResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRegResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCRegResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAuthRequest : pb::GeneratedMessage<CSAuthRequest, CSAuthRequest.Builder> {
  private CSAuthRequest() { }
  private static readonly CSAuthRequest defaultInstance = new CSAuthRequest().MakeReadOnly();
  private static readonly string[] _cSAuthRequestFieldNames = new string[] { "pwd", "username" };
  private static readonly uint[] _cSAuthRequestFieldTags = new uint[] { 18, 10 };
  public static CSAuthRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAuthRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAuthRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSAuthRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAuthRequest, CSAuthRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSAuthRequest__FieldAccessorTable; }
  }
  
  public const int UsernameFieldNumber = 1;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int PwdFieldNumber = 2;
  private bool hasPwd;
  private string pwd_ = "";
  public bool HasPwd {
    get { return hasPwd; }
  }
  public string Pwd {
    get { return pwd_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAuthRequestFieldNames;
    if (hasUsername) {
      output.WriteString(1, field_names[1], Username);
    }
    if (hasPwd) {
      output.WriteString(2, field_names[0], Pwd);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Username);
    }
    if (hasPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Pwd);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAuthRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAuthRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAuthRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAuthRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAuthRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAuthRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAuthRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAuthRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAuthRequest result;
    
    private CSAuthRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAuthRequest original = result;
        result = new CSAuthRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAuthRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAuthRequest.Descriptor; }
    }
    
    public override CSAuthRequest DefaultInstanceForType {
      get { return global::CSAuthRequest.DefaultInstance; }
    }
    
    public override CSAuthRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAuthRequest) {
        return MergeFrom((CSAuthRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAuthRequest other) {
      if (other == global::CSAuthRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasPwd) {
        Pwd = other.Pwd;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAuthRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAuthRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 18: {
            result.hasPwd = input.ReadString(ref result.pwd_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasPwd {
      get { return result.hasPwd; }
    }
    public string Pwd {
      get { return result.Pwd; }
      set { SetPwd(value); }
    }
    public Builder SetPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPwd = true;
      result.pwd_ = value;
      return this;
    }
    public Builder ClearPwd() {
      PrepareBuilder();
      result.hasPwd = false;
      result.pwd_ = "";
      return this;
    }
  }
  static CSAuthRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAuthResponse : pb::GeneratedMessage<SCAuthResponse, SCAuthResponse.Builder> {
  private SCAuthResponse() { }
  private static readonly SCAuthResponse defaultInstance = new SCAuthResponse().MakeReadOnly();
  private static readonly string[] _sCAuthResponseFieldNames = new string[] { "accessToken", "result", "username" };
  private static readonly uint[] _sCAuthResponseFieldTags = new uint[] { 18, 8, 26 };
  public static SCAuthResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAuthResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAuthResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCAuthResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAuthResponse, SCAuthResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCAuthResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int AccessTokenFieldNumber = 2;
  private bool hasAccessToken;
  private string accessToken_ = "";
  public bool HasAccessToken {
    get { return hasAccessToken; }
  }
  public string AccessToken {
    get { return accessToken_; }
  }
  
  public const int UsernameFieldNumber = 3;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAuthResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[1], Result);
    }
    if (hasAccessToken) {
      output.WriteString(2, field_names[0], AccessToken);
    }
    if (hasUsername) {
      output.WriteString(3, field_names[2], Username);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasAccessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(2, AccessToken);
    }
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Username);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAuthResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAuthResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAuthResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAuthResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAuthResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAuthResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAuthResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAuthResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAuthResponse result;
    
    private SCAuthResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAuthResponse original = result;
        result = new SCAuthResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAuthResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAuthResponse.Descriptor; }
    }
    
    public override SCAuthResponse DefaultInstanceForType {
      get { return global::SCAuthResponse.DefaultInstance; }
    }
    
    public override SCAuthResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAuthResponse) {
        return MergeFrom((SCAuthResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAuthResponse other) {
      if (other == global::SCAuthResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAuthResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAuthResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 18: {
            result.hasAccessToken = input.ReadString(ref result.accessToken_);
            break;
          }
          case 26: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasAccessToken {
      get { return result.hasAccessToken; }
    }
    public string AccessToken {
      get { return result.AccessToken; }
      set { SetAccessToken(value); }
    }
    public Builder SetAccessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccessToken = true;
      result.accessToken_ = value;
      return this;
    }
    public Builder ClearAccessToken() {
      PrepareBuilder();
      result.hasAccessToken = false;
      result.accessToken_ = "";
      return this;
    }
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
  }
  static SCAuthResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSloginRequest : pb::GeneratedMessage<CSloginRequest, CSloginRequest.Builder> {
  private CSloginRequest() { }
  private static readonly CSloginRequest defaultInstance = new CSloginRequest().MakeReadOnly();
  private static readonly string[] _cSloginRequestFieldNames = new string[] { "nickname", "platform", "pwd", "username" };
  private static readonly uint[] _cSloginRequestFieldTags = new uint[] { 34, 24, 18, 10 };
  public static CSloginRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSloginRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSloginRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSloginRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSloginRequest, CSloginRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSloginRequest__FieldAccessorTable; }
  }
  
  public const int UsernameFieldNumber = 1;
  private bool hasUsername;
  private string username_ = "";
  public bool HasUsername {
    get { return hasUsername; }
  }
  public string Username {
    get { return username_; }
  }
  
  public const int PwdFieldNumber = 2;
  private bool hasPwd;
  private string pwd_ = "";
  public bool HasPwd {
    get { return hasPwd; }
  }
  public string Pwd {
    get { return pwd_; }
  }
  
  public const int PlatformFieldNumber = 3;
  private bool hasPlatform;
  private int platform_;
  public bool HasPlatform {
    get { return hasPlatform; }
  }
  public int Platform {
    get { return platform_; }
  }
  
  public const int NicknameFieldNumber = 4;
  private bool hasNickname;
  private string nickname_ = "";
  public bool HasNickname {
    get { return hasNickname; }
  }
  public string Nickname {
    get { return nickname_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSloginRequestFieldNames;
    if (hasUsername) {
      output.WriteString(1, field_names[3], Username);
    }
    if (hasPwd) {
      output.WriteString(2, field_names[2], Pwd);
    }
    if (hasPlatform) {
      output.WriteInt32(3, field_names[1], Platform);
    }
    if (hasNickname) {
      output.WriteString(4, field_names[0], Nickname);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasUsername) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Username);
    }
    if (hasPwd) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Pwd);
    }
    if (hasPlatform) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Platform);
    }
    if (hasNickname) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Nickname);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSloginRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSloginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSloginRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSloginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSloginRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSloginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSloginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSloginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSloginRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSloginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSloginRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSloginRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSloginRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSloginRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSloginRequest result;
    
    private CSloginRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSloginRequest original = result;
        result = new CSloginRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSloginRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSloginRequest.Descriptor; }
    }
    
    public override CSloginRequest DefaultInstanceForType {
      get { return global::CSloginRequest.DefaultInstance; }
    }
    
    public override CSloginRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSloginRequest) {
        return MergeFrom((CSloginRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSloginRequest other) {
      if (other == global::CSloginRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.HasPwd) {
        Pwd = other.Pwd;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasNickname) {
        Nickname = other.Nickname;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSloginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSloginRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasUsername = input.ReadString(ref result.username_);
            break;
          }
          case 18: {
            result.hasPwd = input.ReadString(ref result.pwd_);
            break;
          }
          case 24: {
            result.hasPlatform = input.ReadInt32(ref result.platform_);
            break;
          }
          case 34: {
            result.hasNickname = input.ReadString(ref result.nickname_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUsername {
      get { return result.hasUsername; }
    }
    public string Username {
      get { return result.Username; }
      set { SetUsername(value); }
    }
    public Builder SetUsername(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUsername = true;
      result.username_ = value;
      return this;
    }
    public Builder ClearUsername() {
      PrepareBuilder();
      result.hasUsername = false;
      result.username_ = "";
      return this;
    }
    
    public bool HasPwd {
      get { return result.hasPwd; }
    }
    public string Pwd {
      get { return result.Pwd; }
      set { SetPwd(value); }
    }
    public Builder SetPwd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPwd = true;
      result.pwd_ = value;
      return this;
    }
    public Builder ClearPwd() {
      PrepareBuilder();
      result.hasPwd = false;
      result.pwd_ = "";
      return this;
    }
    
    public bool HasPlatform {
      get { return result.hasPlatform; }
    }
    public int Platform {
      get { return result.Platform; }
      set { SetPlatform(value); }
    }
    public Builder SetPlatform(int value) {
      PrepareBuilder();
      result.hasPlatform = true;
      result.platform_ = value;
      return this;
    }
    public Builder ClearPlatform() {
      PrepareBuilder();
      result.hasPlatform = false;
      result.platform_ = 0;
      return this;
    }
    
    public bool HasNickname {
      get { return result.hasNickname; }
    }
    public string Nickname {
      get { return result.Nickname; }
      set { SetNickname(value); }
    }
    public Builder SetNickname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickname = true;
      result.nickname_ = value;
      return this;
    }
    public Builder ClearNickname() {
      PrepareBuilder();
      result.hasNickname = false;
      result.nickname_ = "";
      return this;
    }
  }
  static CSloginRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCloginResponse : pb::GeneratedMessage<SCloginResponse, SCloginResponse.Builder> {
  private SCloginResponse() { }
  private static readonly SCloginResponse defaultInstance = new SCloginResponse().MakeReadOnly();
  private static readonly string[] _sCloginResponseFieldNames = new string[] { "accessToken", "cash", "coin", "exp", "expMultiple", "hasRenamed", "laborUnion", "lastAddVitTime", "level", "millisRecoverOneVit", "nickname", "platform", "playerIcon", "playerId", "playerName", "result", "upgradeExp", "vit" };
  private static readonly uint[] _sCloginResponseFieldTags = new uint[] { 122, 48, 40, 72, 101, 152, 80, 128, 64, 144, 114, 104, 34, 16, 26, 8, 88, 56 };
  public static SCloginResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCloginResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCloginResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCloginResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCloginResponse, SCloginResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCloginResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int PlayerIdFieldNumber = 2;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int PlayerNameFieldNumber = 3;
  private bool hasPlayerName;
  private string playerName_ = "";
  public bool HasPlayerName {
    get { return hasPlayerName; }
  }
  public string PlayerName {
    get { return playerName_; }
  }
  
  public const int PlayerIconFieldNumber = 4;
  private bool hasPlayerIcon;
  private string playerIcon_ = "";
  public bool HasPlayerIcon {
    get { return hasPlayerIcon; }
  }
  public string PlayerIcon {
    get { return playerIcon_; }
  }
  
  public const int CoinFieldNumber = 5;
  private bool hasCoin;
  private int coin_;
  public bool HasCoin {
    get { return hasCoin; }
  }
  public int Coin {
    get { return coin_; }
  }
  
  public const int CashFieldNumber = 6;
  private bool hasCash;
  private int cash_;
  public bool HasCash {
    get { return hasCash; }
  }
  public int Cash {
    get { return cash_; }
  }
  
  public const int VitFieldNumber = 7;
  private bool hasVit;
  private int vit_;
  public bool HasVit {
    get { return hasVit; }
  }
  public int Vit {
    get { return vit_; }
  }
  
  public const int LevelFieldNumber = 8;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int ExpFieldNumber = 9;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int LaborUnionFieldNumber = 10;
  private bool hasLaborUnion;
  private int laborUnion_;
  public bool HasLaborUnion {
    get { return hasLaborUnion; }
  }
  public int LaborUnion {
    get { return laborUnion_; }
  }
  
  public const int UpgradeExpFieldNumber = 11;
  private bool hasUpgradeExp;
  private int upgradeExp_;
  public bool HasUpgradeExp {
    get { return hasUpgradeExp; }
  }
  public int UpgradeExp {
    get { return upgradeExp_; }
  }
  
  public const int ExpMultipleFieldNumber = 12;
  private bool hasExpMultiple;
  private float expMultiple_;
  public bool HasExpMultiple {
    get { return hasExpMultiple; }
  }
  public float ExpMultiple {
    get { return expMultiple_; }
  }
  
  public const int PlatformFieldNumber = 13;
  private bool hasPlatform;
  private int platform_;
  public bool HasPlatform {
    get { return hasPlatform; }
  }
  public int Platform {
    get { return platform_; }
  }
  
  public const int NicknameFieldNumber = 14;
  private bool hasNickname;
  private string nickname_ = "";
  public bool HasNickname {
    get { return hasNickname; }
  }
  public string Nickname {
    get { return nickname_; }
  }
  
  public const int AccessTokenFieldNumber = 15;
  private bool hasAccessToken;
  private string accessToken_ = "";
  public bool HasAccessToken {
    get { return hasAccessToken; }
  }
  public string AccessToken {
    get { return accessToken_; }
  }
  
  public const int LastAddVitTimeFieldNumber = 16;
  private bool hasLastAddVitTime;
  private long lastAddVitTime_;
  public bool HasLastAddVitTime {
    get { return hasLastAddVitTime; }
  }
  public long LastAddVitTime {
    get { return lastAddVitTime_; }
  }
  
  public const int MillisRecoverOneVitFieldNumber = 18;
  private bool hasMillisRecoverOneVit;
  private long millisRecoverOneVit_;
  public bool HasMillisRecoverOneVit {
    get { return hasMillisRecoverOneVit; }
  }
  public long MillisRecoverOneVit {
    get { return millisRecoverOneVit_; }
  }
  
  public const int HasRenamedFieldNumber = 19;
  private bool hasHasRenamed;
  private int hasRenamed_;
  public bool HasHasRenamed {
    get { return hasHasRenamed; }
  }
  public int HasRenamed {
    get { return hasRenamed_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCloginResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[15], Result);
    }
    if (hasPlayerId) {
      output.WriteInt64(2, field_names[13], PlayerId);
    }
    if (hasPlayerName) {
      output.WriteString(3, field_names[14], PlayerName);
    }
    if (hasPlayerIcon) {
      output.WriteString(4, field_names[12], PlayerIcon);
    }
    if (hasCoin) {
      output.WriteInt32(5, field_names[2], Coin);
    }
    if (hasCash) {
      output.WriteInt32(6, field_names[1], Cash);
    }
    if (hasVit) {
      output.WriteInt32(7, field_names[17], Vit);
    }
    if (hasLevel) {
      output.WriteInt32(8, field_names[8], Level);
    }
    if (hasExp) {
      output.WriteInt32(9, field_names[3], Exp);
    }
    if (hasLaborUnion) {
      output.WriteInt32(10, field_names[6], LaborUnion);
    }
    if (hasUpgradeExp) {
      output.WriteInt32(11, field_names[16], UpgradeExp);
    }
    if (hasExpMultiple) {
      output.WriteFloat(12, field_names[4], ExpMultiple);
    }
    if (hasPlatform) {
      output.WriteInt32(13, field_names[11], Platform);
    }
    if (hasNickname) {
      output.WriteString(14, field_names[10], Nickname);
    }
    if (hasAccessToken) {
      output.WriteString(15, field_names[0], AccessToken);
    }
    if (hasLastAddVitTime) {
      output.WriteInt64(16, field_names[7], LastAddVitTime);
    }
    if (hasMillisRecoverOneVit) {
      output.WriteInt64(18, field_names[9], MillisRecoverOneVit);
    }
    if (hasHasRenamed) {
      output.WriteInt32(19, field_names[5], HasRenamed);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PlayerId);
    }
    if (hasPlayerName) {
      size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
    }
    if (hasPlayerIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(4, PlayerIcon);
    }
    if (hasCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Coin);
    }
    if (hasCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Cash);
    }
    if (hasVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Vit);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Level);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Exp);
    }
    if (hasLaborUnion) {
      size += pb::CodedOutputStream.ComputeInt32Size(10, LaborUnion);
    }
    if (hasUpgradeExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(11, UpgradeExp);
    }
    if (hasExpMultiple) {
      size += pb::CodedOutputStream.ComputeFloatSize(12, ExpMultiple);
    }
    if (hasPlatform) {
      size += pb::CodedOutputStream.ComputeInt32Size(13, Platform);
    }
    if (hasNickname) {
      size += pb::CodedOutputStream.ComputeStringSize(14, Nickname);
    }
    if (hasAccessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(15, AccessToken);
    }
    if (hasLastAddVitTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(16, LastAddVitTime);
    }
    if (hasMillisRecoverOneVit) {
      size += pb::CodedOutputStream.ComputeInt64Size(18, MillisRecoverOneVit);
    }
    if (hasHasRenamed) {
      size += pb::CodedOutputStream.ComputeInt32Size(19, HasRenamed);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCloginResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCloginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCloginResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCloginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCloginResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCloginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCloginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCloginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCloginResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCloginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCloginResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCloginResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCloginResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCloginResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCloginResponse result;
    
    private SCloginResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCloginResponse original = result;
        result = new SCloginResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCloginResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCloginResponse.Descriptor; }
    }
    
    public override SCloginResponse DefaultInstanceForType {
      get { return global::SCloginResponse.DefaultInstance; }
    }
    
    public override SCloginResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCloginResponse) {
        return MergeFrom((SCloginResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCloginResponse other) {
      if (other == global::SCloginResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPlayerName) {
        PlayerName = other.PlayerName;
      }
      if (other.HasPlayerIcon) {
        PlayerIcon = other.PlayerIcon;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasVit) {
        Vit = other.Vit;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasLaborUnion) {
        LaborUnion = other.LaborUnion;
      }
      if (other.HasUpgradeExp) {
        UpgradeExp = other.UpgradeExp;
      }
      if (other.HasExpMultiple) {
        ExpMultiple = other.ExpMultiple;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasNickname) {
        Nickname = other.Nickname;
      }
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      if (other.HasLastAddVitTime) {
        LastAddVitTime = other.LastAddVitTime;
      }
      if (other.HasMillisRecoverOneVit) {
        MillisRecoverOneVit = other.MillisRecoverOneVit;
      }
      if (other.HasHasRenamed) {
        HasRenamed = other.HasRenamed;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCloginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCloginResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 26: {
            result.hasPlayerName = input.ReadString(ref result.playerName_);
            break;
          }
          case 34: {
            result.hasPlayerIcon = input.ReadString(ref result.playerIcon_);
            break;
          }
          case 40: {
            result.hasCoin = input.ReadInt32(ref result.coin_);
            break;
          }
          case 48: {
            result.hasCash = input.ReadInt32(ref result.cash_);
            break;
          }
          case 56: {
            result.hasVit = input.ReadInt32(ref result.vit_);
            break;
          }
          case 64: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 72: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
          case 80: {
            result.hasLaborUnion = input.ReadInt32(ref result.laborUnion_);
            break;
          }
          case 88: {
            result.hasUpgradeExp = input.ReadInt32(ref result.upgradeExp_);
            break;
          }
          case 101: {
            result.hasExpMultiple = input.ReadFloat(ref result.expMultiple_);
            break;
          }
          case 104: {
            result.hasPlatform = input.ReadInt32(ref result.platform_);
            break;
          }
          case 114: {
            result.hasNickname = input.ReadString(ref result.nickname_);
            break;
          }
          case 122: {
            result.hasAccessToken = input.ReadString(ref result.accessToken_);
            break;
          }
          case 128: {
            result.hasLastAddVitTime = input.ReadInt64(ref result.lastAddVitTime_);
            break;
          }
          case 144: {
            result.hasMillisRecoverOneVit = input.ReadInt64(ref result.millisRecoverOneVit_);
            break;
          }
          case 152: {
            result.hasHasRenamed = input.ReadInt32(ref result.hasRenamed_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasPlayerName {
      get { return result.hasPlayerName; }
    }
    public string PlayerName {
      get { return result.PlayerName; }
      set { SetPlayerName(value); }
    }
    public Builder SetPlayerName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerName = true;
      result.playerName_ = value;
      return this;
    }
    public Builder ClearPlayerName() {
      PrepareBuilder();
      result.hasPlayerName = false;
      result.playerName_ = "";
      return this;
    }
    
    public bool HasPlayerIcon {
      get { return result.hasPlayerIcon; }
    }
    public string PlayerIcon {
      get { return result.PlayerIcon; }
      set { SetPlayerIcon(value); }
    }
    public Builder SetPlayerIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerIcon = true;
      result.playerIcon_ = value;
      return this;
    }
    public Builder ClearPlayerIcon() {
      PrepareBuilder();
      result.hasPlayerIcon = false;
      result.playerIcon_ = "";
      return this;
    }
    
    public bool HasCoin {
      get { return result.hasCoin; }
    }
    public int Coin {
      get { return result.Coin; }
      set { SetCoin(value); }
    }
    public Builder SetCoin(int value) {
      PrepareBuilder();
      result.hasCoin = true;
      result.coin_ = value;
      return this;
    }
    public Builder ClearCoin() {
      PrepareBuilder();
      result.hasCoin = false;
      result.coin_ = 0;
      return this;
    }
    
    public bool HasCash {
      get { return result.hasCash; }
    }
    public int Cash {
      get { return result.Cash; }
      set { SetCash(value); }
    }
    public Builder SetCash(int value) {
      PrepareBuilder();
      result.hasCash = true;
      result.cash_ = value;
      return this;
    }
    public Builder ClearCash() {
      PrepareBuilder();
      result.hasCash = false;
      result.cash_ = 0;
      return this;
    }
    
    public bool HasVit {
      get { return result.hasVit; }
    }
    public int Vit {
      get { return result.Vit; }
      set { SetVit(value); }
    }
    public Builder SetVit(int value) {
      PrepareBuilder();
      result.hasVit = true;
      result.vit_ = value;
      return this;
    }
    public Builder ClearVit() {
      PrepareBuilder();
      result.hasVit = false;
      result.vit_ = 0;
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasLaborUnion {
      get { return result.hasLaborUnion; }
    }
    public int LaborUnion {
      get { return result.LaborUnion; }
      set { SetLaborUnion(value); }
    }
    public Builder SetLaborUnion(int value) {
      PrepareBuilder();
      result.hasLaborUnion = true;
      result.laborUnion_ = value;
      return this;
    }
    public Builder ClearLaborUnion() {
      PrepareBuilder();
      result.hasLaborUnion = false;
      result.laborUnion_ = 0;
      return this;
    }
    
    public bool HasUpgradeExp {
      get { return result.hasUpgradeExp; }
    }
    public int UpgradeExp {
      get { return result.UpgradeExp; }
      set { SetUpgradeExp(value); }
    }
    public Builder SetUpgradeExp(int value) {
      PrepareBuilder();
      result.hasUpgradeExp = true;
      result.upgradeExp_ = value;
      return this;
    }
    public Builder ClearUpgradeExp() {
      PrepareBuilder();
      result.hasUpgradeExp = false;
      result.upgradeExp_ = 0;
      return this;
    }
    
    public bool HasExpMultiple {
      get { return result.hasExpMultiple; }
    }
    public float ExpMultiple {
      get { return result.ExpMultiple; }
      set { SetExpMultiple(value); }
    }
    public Builder SetExpMultiple(float value) {
      PrepareBuilder();
      result.hasExpMultiple = true;
      result.expMultiple_ = value;
      return this;
    }
    public Builder ClearExpMultiple() {
      PrepareBuilder();
      result.hasExpMultiple = false;
      result.expMultiple_ = 0F;
      return this;
    }
    
    public bool HasPlatform {
      get { return result.hasPlatform; }
    }
    public int Platform {
      get { return result.Platform; }
      set { SetPlatform(value); }
    }
    public Builder SetPlatform(int value) {
      PrepareBuilder();
      result.hasPlatform = true;
      result.platform_ = value;
      return this;
    }
    public Builder ClearPlatform() {
      PrepareBuilder();
      result.hasPlatform = false;
      result.platform_ = 0;
      return this;
    }
    
    public bool HasNickname {
      get { return result.hasNickname; }
    }
    public string Nickname {
      get { return result.Nickname; }
      set { SetNickname(value); }
    }
    public Builder SetNickname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNickname = true;
      result.nickname_ = value;
      return this;
    }
    public Builder ClearNickname() {
      PrepareBuilder();
      result.hasNickname = false;
      result.nickname_ = "";
      return this;
    }
    
    public bool HasAccessToken {
      get { return result.hasAccessToken; }
    }
    public string AccessToken {
      get { return result.AccessToken; }
      set { SetAccessToken(value); }
    }
    public Builder SetAccessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccessToken = true;
      result.accessToken_ = value;
      return this;
    }
    public Builder ClearAccessToken() {
      PrepareBuilder();
      result.hasAccessToken = false;
      result.accessToken_ = "";
      return this;
    }
    
    public bool HasLastAddVitTime {
      get { return result.hasLastAddVitTime; }
    }
    public long LastAddVitTime {
      get { return result.LastAddVitTime; }
      set { SetLastAddVitTime(value); }
    }
    public Builder SetLastAddVitTime(long value) {
      PrepareBuilder();
      result.hasLastAddVitTime = true;
      result.lastAddVitTime_ = value;
      return this;
    }
    public Builder ClearLastAddVitTime() {
      PrepareBuilder();
      result.hasLastAddVitTime = false;
      result.lastAddVitTime_ = 0L;
      return this;
    }
    
    public bool HasMillisRecoverOneVit {
      get { return result.hasMillisRecoverOneVit; }
    }
    public long MillisRecoverOneVit {
      get { return result.MillisRecoverOneVit; }
      set { SetMillisRecoverOneVit(value); }
    }
    public Builder SetMillisRecoverOneVit(long value) {
      PrepareBuilder();
      result.hasMillisRecoverOneVit = true;
      result.millisRecoverOneVit_ = value;
      return this;
    }
    public Builder ClearMillisRecoverOneVit() {
      PrepareBuilder();
      result.hasMillisRecoverOneVit = false;
      result.millisRecoverOneVit_ = 0L;
      return this;
    }
    
    public bool HasHasRenamed {
      get { return result.hasHasRenamed; }
    }
    public int HasRenamed {
      get { return result.HasRenamed; }
      set { SetHasRenamed(value); }
    }
    public Builder SetHasRenamed(int value) {
      PrepareBuilder();
      result.hasHasRenamed = true;
      result.hasRenamed_ = value;
      return this;
    }
    public Builder ClearHasRenamed() {
      PrepareBuilder();
      result.hasHasRenamed = false;
      result.hasRenamed_ = 0;
      return this;
    }
  }
  static SCloginResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSChapterListRequest : pb::GeneratedMessage<CSChapterListRequest, CSChapterListRequest.Builder> {
  private CSChapterListRequest() { }
  private static readonly CSChapterListRequest defaultInstance = new CSChapterListRequest().MakeReadOnly();
  private static readonly string[] _cSChapterListRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSChapterListRequestFieldTags = new uint[] {  };
  public static CSChapterListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSChapterListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSChapterListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSChapterListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSChapterListRequest, CSChapterListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSChapterListRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSChapterListRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSChapterListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSChapterListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSChapterListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSChapterListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSChapterListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSChapterListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSChapterListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSChapterListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSChapterListRequest result;
    
    private CSChapterListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSChapterListRequest original = result;
        result = new CSChapterListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSChapterListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSChapterListRequest.Descriptor; }
    }
    
    public override CSChapterListRequest DefaultInstanceForType {
      get { return global::CSChapterListRequest.DefaultInstance; }
    }
    
    public override CSChapterListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSChapterListRequest) {
        return MergeFrom((CSChapterListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSChapterListRequest other) {
      if (other == global::CSChapterListRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSChapterListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSChapterListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSChapterListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCChapterListResponse : pb::GeneratedMessage<SCChapterListResponse, SCChapterListResponse.Builder> {
  private SCChapterListResponse() { }
  private static readonly SCChapterListResponse defaultInstance = new SCChapterListResponse().MakeReadOnly();
  private static readonly string[] _sCChapterListResponseFieldNames = new string[] { "chapters" };
  private static readonly uint[] _sCChapterListResponseFieldTags = new uint[] { 10 };
  public static SCChapterListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCChapterListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCChapterListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCChapterListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCChapterListResponse, SCChapterListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCChapterListResponse__FieldAccessorTable; }
  }
  
  public const int ChaptersFieldNumber = 1;
  private pbc::PopsicleList<global::PlayerChapterInfo> chapters_ = new pbc::PopsicleList<global::PlayerChapterInfo>();
  public scg::IList<global::PlayerChapterInfo> ChaptersList {
    get { return chapters_; }
  }
  public int ChaptersCount {
    get { return chapters_.Count; }
  }
  public global::PlayerChapterInfo GetChapters(int index) {
    return chapters_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCChapterListResponseFieldNames;
    if (chapters_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], chapters_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::PlayerChapterInfo element in ChaptersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCChapterListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCChapterListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCChapterListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCChapterListResponse MakeReadOnly() {
    chapters_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCChapterListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCChapterListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCChapterListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCChapterListResponse result;
    
    private SCChapterListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCChapterListResponse original = result;
        result = new SCChapterListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCChapterListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCChapterListResponse.Descriptor; }
    }
    
    public override SCChapterListResponse DefaultInstanceForType {
      get { return global::SCChapterListResponse.DefaultInstance; }
    }
    
    public override SCChapterListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCChapterListResponse) {
        return MergeFrom((SCChapterListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCChapterListResponse other) {
      if (other == global::SCChapterListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.chapters_.Count != 0) {
        result.chapters_.Add(other.chapters_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCChapterListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCChapterListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.chapters_, global::PlayerChapterInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::PlayerChapterInfo> ChaptersList {
      get { return PrepareBuilder().chapters_; }
    }
    public int ChaptersCount {
      get { return result.ChaptersCount; }
    }
    public global::PlayerChapterInfo GetChapters(int index) {
      return result.GetChapters(index);
    }
    public Builder SetChapters(int index, global::PlayerChapterInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.chapters_[index] = value;
      return this;
    }
    public Builder SetChapters(int index, global::PlayerChapterInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.chapters_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddChapters(global::PlayerChapterInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.chapters_.Add(value);
      return this;
    }
    public Builder AddChapters(global::PlayerChapterInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.chapters_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeChapters(scg::IEnumerable<global::PlayerChapterInfo> values) {
      PrepareBuilder();
      result.chapters_.Add(values);
      return this;
    }
    public Builder ClearChapters() {
      PrepareBuilder();
      result.chapters_.Clear();
      return this;
    }
  }
  static SCChapterListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerChapterInfo : pb::GeneratedMessage<PlayerChapterInfo, PlayerChapterInfo.Builder> {
  private PlayerChapterInfo() { }
  private static readonly PlayerChapterInfo defaultInstance = new PlayerChapterInfo().MakeReadOnly();
  private static readonly string[] _playerChapterInfoFieldNames = new string[] { "chapterId", "playerChapterId", "status" };
  private static readonly uint[] _playerChapterInfoFieldTags = new uint[] { 16, 8, 24 };
  public static PlayerChapterInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerChapterInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerChapterInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PlayerChapterInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerChapterInfo, PlayerChapterInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PlayerChapterInfo__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerChapterInfoFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[1], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[2], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerChapterInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerChapterInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerChapterInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerChapterInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerChapterInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerChapterInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerChapterInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerChapterInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerChapterInfo result;
    
    private PlayerChapterInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerChapterInfo original = result;
        result = new PlayerChapterInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerChapterInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerChapterInfo.Descriptor; }
    }
    
    public override PlayerChapterInfo DefaultInstanceForType {
      get { return global::PlayerChapterInfo.DefaultInstance; }
    }
    
    public override PlayerChapterInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerChapterInfo) {
        return MergeFrom((PlayerChapterInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerChapterInfo other) {
      if (other == global::PlayerChapterInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerChapterInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerChapterInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static PlayerChapterInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSChapterDetailRequest : pb::GeneratedMessage<CSChapterDetailRequest, CSChapterDetailRequest.Builder> {
  private CSChapterDetailRequest() { }
  private static readonly CSChapterDetailRequest defaultInstance = new CSChapterDetailRequest().MakeReadOnly();
  private static readonly string[] _cSChapterDetailRequestFieldNames = new string[] { "playerChapterId" };
  private static readonly uint[] _cSChapterDetailRequestFieldTags = new uint[] { 8 };
  public static CSChapterDetailRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSChapterDetailRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSChapterDetailRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSChapterDetailRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSChapterDetailRequest, CSChapterDetailRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSChapterDetailRequest__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSChapterDetailRequestFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[0], PlayerChapterId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSChapterDetailRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSChapterDetailRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSChapterDetailRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSChapterDetailRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSChapterDetailRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSChapterDetailRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSChapterDetailRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSChapterDetailRequest result;
    
    private CSChapterDetailRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSChapterDetailRequest original = result;
        result = new CSChapterDetailRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSChapterDetailRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSChapterDetailRequest.Descriptor; }
    }
    
    public override CSChapterDetailRequest DefaultInstanceForType {
      get { return global::CSChapterDetailRequest.DefaultInstance; }
    }
    
    public override CSChapterDetailRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSChapterDetailRequest) {
        return MergeFrom((CSChapterDetailRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSChapterDetailRequest other) {
      if (other == global::CSChapterDetailRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSChapterDetailRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSChapterDetailRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
  }
  static CSChapterDetailRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCChapterDetailResponse : pb::GeneratedMessage<SCChapterDetailResponse, SCChapterDetailResponse.Builder> {
  private SCChapterDetailResponse() { }
  private static readonly SCChapterDetailResponse defaultInstance = new SCChapterDetailResponse().MakeReadOnly();
  private static readonly string[] _sCChapterDetailResponseFieldNames = new string[] { "chapterId", "clues", "npcs", "playerChapterId", "scenes", "status", "tasks" };
  private static readonly uint[] _sCChapterDetailResponseFieldTags = new uint[] { 16, 42, 34, 8, 50, 24, 58 };
  public static SCChapterDetailResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCChapterDetailResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCChapterDetailResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCChapterDetailResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCChapterDetailResponse, SCChapterDetailResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCChapterDetailResponse__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int NpcsFieldNumber = 4;
  private pbc::PopsicleList<global::ChapterNpcInfo> npcs_ = new pbc::PopsicleList<global::ChapterNpcInfo>();
  public scg::IList<global::ChapterNpcInfo> NpcsList {
    get { return npcs_; }
  }
  public int NpcsCount {
    get { return npcs_.Count; }
  }
  public global::ChapterNpcInfo GetNpcs(int index) {
    return npcs_[index];
  }
  
  public const int CluesFieldNumber = 5;
  private pbc::PopsicleList<global::ChapterClueInfo> clues_ = new pbc::PopsicleList<global::ChapterClueInfo>();
  public scg::IList<global::ChapterClueInfo> CluesList {
    get { return clues_; }
  }
  public int CluesCount {
    get { return clues_.Count; }
  }
  public global::ChapterClueInfo GetClues(int index) {
    return clues_[index];
  }
  
  public const int ScenesFieldNumber = 6;
  private pbc::PopsicleList<global::ChapterSceneInfo> scenes_ = new pbc::PopsicleList<global::ChapterSceneInfo>();
  public scg::IList<global::ChapterSceneInfo> ScenesList {
    get { return scenes_; }
  }
  public int ScenesCount {
    get { return scenes_.Count; }
  }
  public global::ChapterSceneInfo GetScenes(int index) {
    return scenes_[index];
  }
  
  public const int TasksFieldNumber = 7;
  private pbc::PopsicleList<global::ChapterTaskInfo> tasks_ = new pbc::PopsicleList<global::ChapterTaskInfo>();
  public scg::IList<global::ChapterTaskInfo> TasksList {
    get { return tasks_; }
  }
  public int TasksCount {
    get { return tasks_.Count; }
  }
  public global::ChapterTaskInfo GetTasks(int index) {
    return tasks_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCChapterDetailResponseFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[3], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[5], Status);
    }
    if (npcs_.Count > 0) {
      output.WriteMessageArray(4, field_names[2], npcs_);
    }
    if (clues_.Count > 0) {
      output.WriteMessageArray(5, field_names[1], clues_);
    }
    if (scenes_.Count > 0) {
      output.WriteMessageArray(6, field_names[4], scenes_);
    }
    if (tasks_.Count > 0) {
      output.WriteMessageArray(7, field_names[6], tasks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    foreach (global::ChapterNpcInfo element in NpcsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    foreach (global::ChapterClueInfo element in CluesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, element);
    }
    foreach (global::ChapterSceneInfo element in ScenesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, element);
    }
    foreach (global::ChapterTaskInfo element in TasksList) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCChapterDetailResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCChapterDetailResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterDetailResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCChapterDetailResponse MakeReadOnly() {
    npcs_.MakeReadOnly();
    clues_.MakeReadOnly();
    scenes_.MakeReadOnly();
    tasks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCChapterDetailResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCChapterDetailResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCChapterDetailResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCChapterDetailResponse result;
    
    private SCChapterDetailResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCChapterDetailResponse original = result;
        result = new SCChapterDetailResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCChapterDetailResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCChapterDetailResponse.Descriptor; }
    }
    
    public override SCChapterDetailResponse DefaultInstanceForType {
      get { return global::SCChapterDetailResponse.DefaultInstance; }
    }
    
    public override SCChapterDetailResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCChapterDetailResponse) {
        return MergeFrom((SCChapterDetailResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCChapterDetailResponse other) {
      if (other == global::SCChapterDetailResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.npcs_.Count != 0) {
        result.npcs_.Add(other.npcs_);
      }
      if (other.clues_.Count != 0) {
        result.clues_.Add(other.clues_);
      }
      if (other.scenes_.Count != 0) {
        result.scenes_.Add(other.scenes_);
      }
      if (other.tasks_.Count != 0) {
        result.tasks_.Add(other.tasks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCChapterDetailResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCChapterDetailResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.npcs_, global::ChapterNpcInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.clues_, global::ChapterClueInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, field_name, result.scenes_, global::ChapterSceneInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, field_name, result.tasks_, global::ChapterTaskInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::ChapterNpcInfo> NpcsList {
      get { return PrepareBuilder().npcs_; }
    }
    public int NpcsCount {
      get { return result.NpcsCount; }
    }
    public global::ChapterNpcInfo GetNpcs(int index) {
      return result.GetNpcs(index);
    }
    public Builder SetNpcs(int index, global::ChapterNpcInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.npcs_[index] = value;
      return this;
    }
    public Builder SetNpcs(int index, global::ChapterNpcInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.npcs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddNpcs(global::ChapterNpcInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.npcs_.Add(value);
      return this;
    }
    public Builder AddNpcs(global::ChapterNpcInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.npcs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeNpcs(scg::IEnumerable<global::ChapterNpcInfo> values) {
      PrepareBuilder();
      result.npcs_.Add(values);
      return this;
    }
    public Builder ClearNpcs() {
      PrepareBuilder();
      result.npcs_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::ChapterClueInfo> CluesList {
      get { return PrepareBuilder().clues_; }
    }
    public int CluesCount {
      get { return result.CluesCount; }
    }
    public global::ChapterClueInfo GetClues(int index) {
      return result.GetClues(index);
    }
    public Builder SetClues(int index, global::ChapterClueInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.clues_[index] = value;
      return this;
    }
    public Builder SetClues(int index, global::ChapterClueInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.clues_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddClues(global::ChapterClueInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.clues_.Add(value);
      return this;
    }
    public Builder AddClues(global::ChapterClueInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.clues_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeClues(scg::IEnumerable<global::ChapterClueInfo> values) {
      PrepareBuilder();
      result.clues_.Add(values);
      return this;
    }
    public Builder ClearClues() {
      PrepareBuilder();
      result.clues_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::ChapterSceneInfo> ScenesList {
      get { return PrepareBuilder().scenes_; }
    }
    public int ScenesCount {
      get { return result.ScenesCount; }
    }
    public global::ChapterSceneInfo GetScenes(int index) {
      return result.GetScenes(index);
    }
    public Builder SetScenes(int index, global::ChapterSceneInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.scenes_[index] = value;
      return this;
    }
    public Builder SetScenes(int index, global::ChapterSceneInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.scenes_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddScenes(global::ChapterSceneInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.scenes_.Add(value);
      return this;
    }
    public Builder AddScenes(global::ChapterSceneInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.scenes_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeScenes(scg::IEnumerable<global::ChapterSceneInfo> values) {
      PrepareBuilder();
      result.scenes_.Add(values);
      return this;
    }
    public Builder ClearScenes() {
      PrepareBuilder();
      result.scenes_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::ChapterTaskInfo> TasksList {
      get { return PrepareBuilder().tasks_; }
    }
    public int TasksCount {
      get { return result.TasksCount; }
    }
    public global::ChapterTaskInfo GetTasks(int index) {
      return result.GetTasks(index);
    }
    public Builder SetTasks(int index, global::ChapterTaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tasks_[index] = value;
      return this;
    }
    public Builder SetTasks(int index, global::ChapterTaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tasks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTasks(global::ChapterTaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tasks_.Add(value);
      return this;
    }
    public Builder AddTasks(global::ChapterTaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tasks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTasks(scg::IEnumerable<global::ChapterTaskInfo> values) {
      PrepareBuilder();
      result.tasks_.Add(values);
      return this;
    }
    public Builder ClearTasks() {
      PrepareBuilder();
      result.tasks_.Clear();
      return this;
    }
  }
  static SCChapterDetailResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ChapterNpcInfo : pb::GeneratedMessage<ChapterNpcInfo, ChapterNpcInfo.Builder> {
  private ChapterNpcInfo() { }
  private static readonly ChapterNpcInfo defaultInstance = new ChapterNpcInfo().MakeReadOnly();
  private static readonly string[] _chapterNpcInfoFieldNames = new string[] { "dialogueId", "npcId", "status" };
  private static readonly uint[] _chapterNpcInfoFieldTags = new uint[] { 24, 8, 16 };
  public static ChapterNpcInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ChapterNpcInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ChapterNpcInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ChapterNpcInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ChapterNpcInfo, ChapterNpcInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ChapterNpcInfo__FieldAccessorTable; }
  }
  
  public const int NpcIdFieldNumber = 1;
  private bool hasNpcId;
  private long npcId_;
  public bool HasNpcId {
    get { return hasNpcId; }
  }
  public long NpcId {
    get { return npcId_; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int DialogueIdFieldNumber = 3;
  private bool hasDialogueId;
  private long dialogueId_;
  public bool HasDialogueId {
    get { return hasDialogueId; }
  }
  public long DialogueId {
    get { return dialogueId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _chapterNpcInfoFieldNames;
    if (hasNpcId) {
      output.WriteInt64(1, field_names[1], NpcId);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[2], Status);
    }
    if (hasDialogueId) {
      output.WriteInt64(3, field_names[0], DialogueId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasNpcId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, NpcId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    if (hasDialogueId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, DialogueId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ChapterNpcInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ChapterNpcInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ChapterNpcInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterNpcInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ChapterNpcInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ChapterNpcInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ChapterNpcInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ChapterNpcInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ChapterNpcInfo result;
    
    private ChapterNpcInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ChapterNpcInfo original = result;
        result = new ChapterNpcInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ChapterNpcInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ChapterNpcInfo.Descriptor; }
    }
    
    public override ChapterNpcInfo DefaultInstanceForType {
      get { return global::ChapterNpcInfo.DefaultInstance; }
    }
    
    public override ChapterNpcInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ChapterNpcInfo) {
        return MergeFrom((ChapterNpcInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ChapterNpcInfo other) {
      if (other == global::ChapterNpcInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasDialogueId) {
        DialogueId = other.DialogueId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_chapterNpcInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _chapterNpcInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasNpcId = input.ReadInt64(ref result.npcId_);
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 24: {
            result.hasDialogueId = input.ReadInt64(ref result.dialogueId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNpcId {
      get { return result.hasNpcId; }
    }
    public long NpcId {
      get { return result.NpcId; }
      set { SetNpcId(value); }
    }
    public Builder SetNpcId(long value) {
      PrepareBuilder();
      result.hasNpcId = true;
      result.npcId_ = value;
      return this;
    }
    public Builder ClearNpcId() {
      PrepareBuilder();
      result.hasNpcId = false;
      result.npcId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasDialogueId {
      get { return result.hasDialogueId; }
    }
    public long DialogueId {
      get { return result.DialogueId; }
      set { SetDialogueId(value); }
    }
    public Builder SetDialogueId(long value) {
      PrepareBuilder();
      result.hasDialogueId = true;
      result.dialogueId_ = value;
      return this;
    }
    public Builder ClearDialogueId() {
      PrepareBuilder();
      result.hasDialogueId = false;
      result.dialogueId_ = 0L;
      return this;
    }
  }
  static ChapterNpcInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ChapterClueInfo : pb::GeneratedMessage<ChapterClueInfo, ChapterClueInfo.Builder> {
  private ChapterClueInfo() { }
  private static readonly ChapterClueInfo defaultInstance = new ChapterClueInfo().MakeReadOnly();
  private static readonly string[] _chapterClueInfoFieldNames = new string[] { "clueId", "status" };
  private static readonly uint[] _chapterClueInfoFieldTags = new uint[] { 10, 16 };
  public static ChapterClueInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ChapterClueInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ChapterClueInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ChapterClueInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ChapterClueInfo, ChapterClueInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ChapterClueInfo__FieldAccessorTable; }
  }
  
  public const int ClueIdFieldNumber = 1;
  private bool hasClueId;
  private string clueId_ = "";
  public bool HasClueId {
    get { return hasClueId; }
  }
  public string ClueId {
    get { return clueId_; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _chapterClueInfoFieldNames;
    if (hasClueId) {
      output.WriteString(1, field_names[0], ClueId);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[1], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasClueId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, ClueId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ChapterClueInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ChapterClueInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ChapterClueInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterClueInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ChapterClueInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ChapterClueInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ChapterClueInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ChapterClueInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ChapterClueInfo result;
    
    private ChapterClueInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ChapterClueInfo original = result;
        result = new ChapterClueInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ChapterClueInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ChapterClueInfo.Descriptor; }
    }
    
    public override ChapterClueInfo DefaultInstanceForType {
      get { return global::ChapterClueInfo.DefaultInstance; }
    }
    
    public override ChapterClueInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ChapterClueInfo) {
        return MergeFrom((ChapterClueInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ChapterClueInfo other) {
      if (other == global::ChapterClueInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasClueId) {
        ClueId = other.ClueId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_chapterClueInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _chapterClueInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasClueId = input.ReadString(ref result.clueId_);
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasClueId {
      get { return result.hasClueId; }
    }
    public string ClueId {
      get { return result.ClueId; }
      set { SetClueId(value); }
    }
    public Builder SetClueId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasClueId = true;
      result.clueId_ = value;
      return this;
    }
    public Builder ClearClueId() {
      PrepareBuilder();
      result.hasClueId = false;
      result.clueId_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static ChapterClueInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ChapterSceneInfo : pb::GeneratedMessage<ChapterSceneInfo, ChapterSceneInfo.Builder> {
  private ChapterSceneInfo() { }
  private static readonly ChapterSceneInfo defaultInstance = new ChapterSceneInfo().MakeReadOnly();
  private static readonly string[] _chapterSceneInfoFieldNames = new string[] { "sceneId", "status" };
  private static readonly uint[] _chapterSceneInfoFieldTags = new uint[] { 8, 16 };
  public static ChapterSceneInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ChapterSceneInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ChapterSceneInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ChapterSceneInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ChapterSceneInfo, ChapterSceneInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ChapterSceneInfo__FieldAccessorTable; }
  }
  
  public const int SceneIdFieldNumber = 1;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _chapterSceneInfoFieldNames;
    if (hasSceneId) {
      output.WriteInt64(1, field_names[0], SceneId);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[1], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SceneId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ChapterSceneInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ChapterSceneInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ChapterSceneInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterSceneInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ChapterSceneInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ChapterSceneInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ChapterSceneInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ChapterSceneInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ChapterSceneInfo result;
    
    private ChapterSceneInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ChapterSceneInfo original = result;
        result = new ChapterSceneInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ChapterSceneInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ChapterSceneInfo.Descriptor; }
    }
    
    public override ChapterSceneInfo DefaultInstanceForType {
      get { return global::ChapterSceneInfo.DefaultInstance; }
    }
    
    public override ChapterSceneInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ChapterSceneInfo) {
        return MergeFrom((ChapterSceneInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ChapterSceneInfo other) {
      if (other == global::ChapterSceneInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_chapterSceneInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _chapterSceneInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static ChapterSceneInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ChapterTaskInfo : pb::GeneratedMessage<ChapterTaskInfo, ChapterTaskInfo.Builder> {
  private ChapterTaskInfo() { }
  private static readonly ChapterTaskInfo defaultInstance = new ChapterTaskInfo().MakeReadOnly();
  private static readonly string[] _chapterTaskInfoFieldNames = new string[] { "status", "taskId" };
  private static readonly uint[] _chapterTaskInfoFieldTags = new uint[] { 16, 8 };
  public static ChapterTaskInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ChapterTaskInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ChapterTaskInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ChapterTaskInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ChapterTaskInfo, ChapterTaskInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ChapterTaskInfo__FieldAccessorTable; }
  }
  
  public const int TaskIdFieldNumber = 1;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _chapterTaskInfoFieldNames;
    if (hasTaskId) {
      output.WriteInt64(1, field_names[1], TaskId);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TaskId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ChapterTaskInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ChapterTaskInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ChapterTaskInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ChapterTaskInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ChapterTaskInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ChapterTaskInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ChapterTaskInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ChapterTaskInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ChapterTaskInfo result;
    
    private ChapterTaskInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ChapterTaskInfo original = result;
        result = new ChapterTaskInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ChapterTaskInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ChapterTaskInfo.Descriptor; }
    }
    
    public override ChapterTaskInfo DefaultInstanceForType {
      get { return global::ChapterTaskInfo.DefaultInstance; }
    }
    
    public override ChapterTaskInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ChapterTaskInfo) {
        return MergeFrom((ChapterTaskInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ChapterTaskInfo other) {
      if (other == global::ChapterTaskInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_chapterTaskInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _chapterTaskInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static ChapterTaskInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCClueUnlockNotice : pb::GeneratedMessage<SCClueUnlockNotice, SCClueUnlockNotice.Builder> {
  private SCClueUnlockNotice() { }
  private static readonly SCClueUnlockNotice defaultInstance = new SCClueUnlockNotice().MakeReadOnly();
  private static readonly string[] _sCClueUnlockNoticeFieldNames = new string[] { "chapterId", "clueId", "playerChapterId" };
  private static readonly uint[] _sCClueUnlockNoticeFieldTags = new uint[] { 16, 26, 8 };
  public static SCClueUnlockNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCClueUnlockNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCClueUnlockNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCClueUnlockNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCClueUnlockNotice, SCClueUnlockNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCClueUnlockNotice__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int ClueIdFieldNumber = 3;
  private bool hasClueId;
  private string clueId_ = "";
  public bool HasClueId {
    get { return hasClueId; }
  }
  public string ClueId {
    get { return clueId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCClueUnlockNoticeFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[2], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasClueId) {
      output.WriteString(3, field_names[1], ClueId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasClueId) {
      size += pb::CodedOutputStream.ComputeStringSize(3, ClueId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCClueUnlockNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCClueUnlockNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCClueUnlockNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCClueUnlockNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCClueUnlockNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCClueUnlockNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCClueUnlockNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCClueUnlockNotice result;
    
    private SCClueUnlockNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCClueUnlockNotice original = result;
        result = new SCClueUnlockNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCClueUnlockNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCClueUnlockNotice.Descriptor; }
    }
    
    public override SCClueUnlockNotice DefaultInstanceForType {
      get { return global::SCClueUnlockNotice.DefaultInstance; }
    }
    
    public override SCClueUnlockNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCClueUnlockNotice) {
        return MergeFrom((SCClueUnlockNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCClueUnlockNotice other) {
      if (other == global::SCClueUnlockNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasClueId) {
        ClueId = other.ClueId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCClueUnlockNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCClueUnlockNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 26: {
            result.hasClueId = input.ReadString(ref result.clueId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasClueId {
      get { return result.hasClueId; }
    }
    public string ClueId {
      get { return result.ClueId; }
      set { SetClueId(value); }
    }
    public Builder SetClueId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasClueId = true;
      result.clueId_ = value;
      return this;
    }
    public Builder ClearClueId() {
      PrepareBuilder();
      result.hasClueId = false;
      result.clueId_ = "";
      return this;
    }
  }
  static SCClueUnlockNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCNpcUnLockNotice : pb::GeneratedMessage<SCNpcUnLockNotice, SCNpcUnLockNotice.Builder> {
  private SCNpcUnLockNotice() { }
  private static readonly SCNpcUnLockNotice defaultInstance = new SCNpcUnLockNotice().MakeReadOnly();
  private static readonly string[] _sCNpcUnLockNoticeFieldNames = new string[] { "chapterId", "npcId", "playerChapterId" };
  private static readonly uint[] _sCNpcUnLockNoticeFieldTags = new uint[] { 16, 24, 8 };
  public static SCNpcUnLockNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCNpcUnLockNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCNpcUnLockNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCNpcUnLockNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCNpcUnLockNotice, SCNpcUnLockNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCNpcUnLockNotice__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int NpcIdFieldNumber = 3;
  private bool hasNpcId;
  private long npcId_;
  public bool HasNpcId {
    get { return hasNpcId; }
  }
  public long NpcId {
    get { return npcId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCNpcUnLockNoticeFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[2], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasNpcId) {
      output.WriteInt64(3, field_names[1], NpcId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasNpcId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, NpcId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCNpcUnLockNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCNpcUnLockNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCNpcUnLockNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCNpcUnLockNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCNpcUnLockNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCNpcUnLockNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCNpcUnLockNotice result;
    
    private SCNpcUnLockNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCNpcUnLockNotice original = result;
        result = new SCNpcUnLockNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCNpcUnLockNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCNpcUnLockNotice.Descriptor; }
    }
    
    public override SCNpcUnLockNotice DefaultInstanceForType {
      get { return global::SCNpcUnLockNotice.DefaultInstance; }
    }
    
    public override SCNpcUnLockNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCNpcUnLockNotice) {
        return MergeFrom((SCNpcUnLockNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCNpcUnLockNotice other) {
      if (other == global::SCNpcUnLockNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasNpcId) {
        NpcId = other.NpcId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCNpcUnLockNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCNpcUnLockNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasNpcId = input.ReadInt64(ref result.npcId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasNpcId {
      get { return result.hasNpcId; }
    }
    public long NpcId {
      get { return result.NpcId; }
      set { SetNpcId(value); }
    }
    public Builder SetNpcId(long value) {
      PrepareBuilder();
      result.hasNpcId = true;
      result.npcId_ = value;
      return this;
    }
    public Builder ClearNpcId() {
      PrepareBuilder();
      result.hasNpcId = false;
      result.npcId_ = 0L;
      return this;
    }
  }
  static SCNpcUnLockNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneUnLockNotice : pb::GeneratedMessage<SCSceneUnLockNotice, SCSceneUnLockNotice.Builder> {
  private SCSceneUnLockNotice() { }
  private static readonly SCSceneUnLockNotice defaultInstance = new SCSceneUnLockNotice().MakeReadOnly();
  private static readonly string[] _sCSceneUnLockNoticeFieldNames = new string[] { "chapterId", "playerChapterId", "sceneId" };
  private static readonly uint[] _sCSceneUnLockNoticeFieldTags = new uint[] { 16, 8, 24 };
  public static SCSceneUnLockNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneUnLockNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneUnLockNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneUnLockNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneUnLockNotice, SCSceneUnLockNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneUnLockNotice__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int SceneIdFieldNumber = 3;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneUnLockNoticeFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[1], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasSceneId) {
      output.WriteInt64(3, field_names[2], SceneId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, SceneId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneUnLockNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneUnLockNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneUnLockNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneUnLockNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneUnLockNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneUnLockNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneUnLockNotice result;
    
    private SCSceneUnLockNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneUnLockNotice original = result;
        result = new SCSceneUnLockNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneUnLockNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneUnLockNotice.Descriptor; }
    }
    
    public override SCSceneUnLockNotice DefaultInstanceForType {
      get { return global::SCSceneUnLockNotice.DefaultInstance; }
    }
    
    public override SCSceneUnLockNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneUnLockNotice) {
        return MergeFrom((SCSceneUnLockNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneUnLockNotice other) {
      if (other == global::SCSceneUnLockNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneUnLockNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneUnLockNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
  }
  static SCSceneUnLockNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCChapterTaskStatusChangeNotice : pb::GeneratedMessage<SCChapterTaskStatusChangeNotice, SCChapterTaskStatusChangeNotice.Builder> {
  private SCChapterTaskStatusChangeNotice() { }
  private static readonly SCChapterTaskStatusChangeNotice defaultInstance = new SCChapterTaskStatusChangeNotice().MakeReadOnly();
  private static readonly string[] _sCChapterTaskStatusChangeNoticeFieldNames = new string[] { "chapterId", "newStatus", "playerChapterId", "taskId" };
  private static readonly uint[] _sCChapterTaskStatusChangeNoticeFieldTags = new uint[] { 16, 32, 8, 24 };
  public static SCChapterTaskStatusChangeNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCChapterTaskStatusChangeNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCChapterTaskStatusChangeNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCChapterTaskStatusChangeNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCChapterTaskStatusChangeNotice, SCChapterTaskStatusChangeNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCChapterTaskStatusChangeNotice__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int TaskIdFieldNumber = 3;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public const int NewStatusFieldNumber = 4;
  private bool hasNewStatus;
  private int newStatus_;
  public bool HasNewStatus {
    get { return hasNewStatus; }
  }
  public int NewStatus {
    get { return newStatus_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCChapterTaskStatusChangeNoticeFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[2], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasTaskId) {
      output.WriteInt64(3, field_names[3], TaskId);
    }
    if (hasNewStatus) {
      output.WriteInt32(4, field_names[1], NewStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, TaskId);
    }
    if (hasNewStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, NewStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterTaskStatusChangeNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCChapterTaskStatusChangeNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCChapterTaskStatusChangeNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCChapterTaskStatusChangeNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCChapterTaskStatusChangeNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCChapterTaskStatusChangeNotice result;
    
    private SCChapterTaskStatusChangeNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCChapterTaskStatusChangeNotice original = result;
        result = new SCChapterTaskStatusChangeNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCChapterTaskStatusChangeNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCChapterTaskStatusChangeNotice.Descriptor; }
    }
    
    public override SCChapterTaskStatusChangeNotice DefaultInstanceForType {
      get { return global::SCChapterTaskStatusChangeNotice.DefaultInstance; }
    }
    
    public override SCChapterTaskStatusChangeNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCChapterTaskStatusChangeNotice) {
        return MergeFrom((SCChapterTaskStatusChangeNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCChapterTaskStatusChangeNotice other) {
      if (other == global::SCChapterTaskStatusChangeNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasNewStatus) {
        NewStatus = other.NewStatus;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCChapterTaskStatusChangeNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCChapterTaskStatusChangeNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
          case 32: {
            result.hasNewStatus = input.ReadInt32(ref result.newStatus_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
    
    public bool HasNewStatus {
      get { return result.hasNewStatus; }
    }
    public int NewStatus {
      get { return result.NewStatus; }
      set { SetNewStatus(value); }
    }
    public Builder SetNewStatus(int value) {
      PrepareBuilder();
      result.hasNewStatus = true;
      result.newStatus_ = value;
      return this;
    }
    public Builder ClearNewStatus() {
      PrepareBuilder();
      result.hasNewStatus = false;
      result.newStatus_ = 0;
      return this;
    }
  }
  static SCChapterTaskStatusChangeNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCChapterStatusChangeNotice : pb::GeneratedMessage<SCChapterStatusChangeNotice, SCChapterStatusChangeNotice.Builder> {
  private SCChapterStatusChangeNotice() { }
  private static readonly SCChapterStatusChangeNotice defaultInstance = new SCChapterStatusChangeNotice().MakeReadOnly();
  private static readonly string[] _sCChapterStatusChangeNoticeFieldNames = new string[] { "chapterId", "newStatus", "playerChapterId" };
  private static readonly uint[] _sCChapterStatusChangeNoticeFieldTags = new uint[] { 16, 24, 8 };
  public static SCChapterStatusChangeNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCChapterStatusChangeNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCChapterStatusChangeNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCChapterStatusChangeNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCChapterStatusChangeNotice, SCChapterStatusChangeNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCChapterStatusChangeNotice__FieldAccessorTable; }
  }
  
  public const int PlayerChapterIdFieldNumber = 1;
  private bool hasPlayerChapterId;
  private long playerChapterId_;
  public bool HasPlayerChapterId {
    get { return hasPlayerChapterId; }
  }
  public long PlayerChapterId {
    get { return playerChapterId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int NewStatusFieldNumber = 3;
  private bool hasNewStatus;
  private int newStatus_;
  public bool HasNewStatus {
    get { return hasNewStatus; }
  }
  public int NewStatus {
    get { return newStatus_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCChapterStatusChangeNoticeFieldNames;
    if (hasPlayerChapterId) {
      output.WriteInt64(1, field_names[2], PlayerChapterId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasNewStatus) {
      output.WriteInt32(3, field_names[1], NewStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerChapterId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasNewStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, NewStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCChapterStatusChangeNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterStatusChangeNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCChapterStatusChangeNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCChapterStatusChangeNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCChapterStatusChangeNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCChapterStatusChangeNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCChapterStatusChangeNotice result;
    
    private SCChapterStatusChangeNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCChapterStatusChangeNotice original = result;
        result = new SCChapterStatusChangeNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCChapterStatusChangeNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCChapterStatusChangeNotice.Descriptor; }
    }
    
    public override SCChapterStatusChangeNotice DefaultInstanceForType {
      get { return global::SCChapterStatusChangeNotice.DefaultInstance; }
    }
    
    public override SCChapterStatusChangeNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCChapterStatusChangeNotice) {
        return MergeFrom((SCChapterStatusChangeNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCChapterStatusChangeNotice other) {
      if (other == global::SCChapterStatusChangeNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerChapterId) {
        PlayerChapterId = other.PlayerChapterId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasNewStatus) {
        NewStatus = other.NewStatus;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCChapterStatusChangeNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCChapterStatusChangeNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerChapterId = input.ReadInt64(ref result.playerChapterId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasNewStatus = input.ReadInt32(ref result.newStatus_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerChapterId {
      get { return result.hasPlayerChapterId; }
    }
    public long PlayerChapterId {
      get { return result.PlayerChapterId; }
      set { SetPlayerChapterId(value); }
    }
    public Builder SetPlayerChapterId(long value) {
      PrepareBuilder();
      result.hasPlayerChapterId = true;
      result.playerChapterId_ = value;
      return this;
    }
    public Builder ClearPlayerChapterId() {
      PrepareBuilder();
      result.hasPlayerChapterId = false;
      result.playerChapterId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasNewStatus {
      get { return result.hasNewStatus; }
    }
    public int NewStatus {
      get { return result.NewStatus; }
      set { SetNewStatus(value); }
    }
    public Builder SetNewStatus(int value) {
      PrepareBuilder();
      result.hasNewStatus = true;
      result.newStatus_ = value;
      return this;
    }
    public Builder ClearNewStatus() {
      PrepareBuilder();
      result.hasNewStatus = false;
      result.newStatus_ = 0;
      return this;
    }
  }
  static SCChapterStatusChangeNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCChapterRedNotice : pb::GeneratedMessage<SCChapterRedNotice, SCChapterRedNotice.Builder> {
  private SCChapterRedNotice() { }
  private static readonly SCChapterRedNotice defaultInstance = new SCChapterRedNotice().MakeReadOnly();
  private static readonly string[] _sCChapterRedNoticeFieldNames = new string[] { "reds" };
  private static readonly uint[] _sCChapterRedNoticeFieldTags = new uint[] { 8 };
  public static SCChapterRedNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCChapterRedNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCChapterRedNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCChapterRedNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCChapterRedNotice, SCChapterRedNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCChapterRedNotice__FieldAccessorTable; }
  }
  
  public const int RedsFieldNumber = 1;
  private pbc::PopsicleList<int> reds_ = new pbc::PopsicleList<int>();
  public scg::IList<int> RedsList {
    get { return pbc::Lists.AsReadOnly(reds_); }
  }
  public int RedsCount {
    get { return reds_.Count; }
  }
  public int GetReds(int index) {
    return reds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCChapterRedNoticeFieldNames;
    if (reds_.Count > 0) {
      output.WriteInt32Array(1, field_names[0], reds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (int element in RedsList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * reds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCChapterRedNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCChapterRedNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCChapterRedNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChapterRedNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCChapterRedNotice MakeReadOnly() {
    reds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCChapterRedNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCChapterRedNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCChapterRedNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCChapterRedNotice result;
    
    private SCChapterRedNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCChapterRedNotice original = result;
        result = new SCChapterRedNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCChapterRedNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCChapterRedNotice.Descriptor; }
    }
    
    public override SCChapterRedNotice DefaultInstanceForType {
      get { return global::SCChapterRedNotice.DefaultInstance; }
    }
    
    public override SCChapterRedNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCChapterRedNotice) {
        return MergeFrom((SCChapterRedNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCChapterRedNotice other) {
      if (other == global::SCChapterRedNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.reds_.Count != 0) {
        result.reds_.Add(other.reds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCChapterRedNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCChapterRedNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt32Array(tag, field_name, result.reds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<int> RedsList {
      get { return PrepareBuilder().reds_; }
    }
    public int RedsCount {
      get { return result.RedsCount; }
    }
    public int GetReds(int index) {
      return result.GetReds(index);
    }
    public Builder SetReds(int index, int value) {
      PrepareBuilder();
      result.reds_[index] = value;
      return this;
    }
    public Builder AddReds(int value) {
      PrepareBuilder();
      result.reds_.Add(value);
      return this;
    }
    public Builder AddRangeReds(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.reds_.Add(values);
      return this;
    }
    public Builder ClearReds() {
      PrepareBuilder();
      result.reds_.Clear();
      return this;
    }
  }
  static SCChapterRedNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClearChapterRedRequest : pb::GeneratedMessage<CSClearChapterRedRequest, CSClearChapterRedRequest.Builder> {
  private CSClearChapterRedRequest() { }
  private static readonly CSClearChapterRedRequest defaultInstance = new CSClearChapterRedRequest().MakeReadOnly();
  private static readonly string[] _cSClearChapterRedRequestFieldNames = new string[] { "clearType" };
  private static readonly uint[] _cSClearChapterRedRequestFieldTags = new uint[] { 8 };
  public static CSClearChapterRedRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClearChapterRedRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClearChapterRedRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSClearChapterRedRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClearChapterRedRequest, CSClearChapterRedRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSClearChapterRedRequest__FieldAccessorTable; }
  }
  
  public const int ClearTypeFieldNumber = 1;
  private bool hasClearType;
  private int clearType_;
  public bool HasClearType {
    get { return hasClearType; }
  }
  public int ClearType {
    get { return clearType_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClearChapterRedRequestFieldNames;
    if (hasClearType) {
      output.WriteInt32(1, field_names[0], ClearType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasClearType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, ClearType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClearChapterRedRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClearChapterRedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClearChapterRedRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClearChapterRedRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClearChapterRedRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClearChapterRedRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClearChapterRedRequest result;
    
    private CSClearChapterRedRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClearChapterRedRequest original = result;
        result = new CSClearChapterRedRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClearChapterRedRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClearChapterRedRequest.Descriptor; }
    }
    
    public override CSClearChapterRedRequest DefaultInstanceForType {
      get { return global::CSClearChapterRedRequest.DefaultInstance; }
    }
    
    public override CSClearChapterRedRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClearChapterRedRequest) {
        return MergeFrom((CSClearChapterRedRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClearChapterRedRequest other) {
      if (other == global::CSClearChapterRedRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasClearType) {
        ClearType = other.ClearType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClearChapterRedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClearChapterRedRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasClearType = input.ReadInt32(ref result.clearType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasClearType {
      get { return result.hasClearType; }
    }
    public int ClearType {
      get { return result.ClearType; }
      set { SetClearType(value); }
    }
    public Builder SetClearType(int value) {
      PrepareBuilder();
      result.hasClearType = true;
      result.clearType_ = value;
      return this;
    }
    public Builder ClearClearType() {
      PrepareBuilder();
      result.hasClearType = false;
      result.clearType_ = 0;
      return this;
    }
  }
  static CSClearChapterRedRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneEnterRequest : pb::GeneratedMessage<CSSceneEnterRequest, CSSceneEnterRequest.Builder> {
  private CSSceneEnterRequest() { }
  private static readonly CSSceneEnterRequest defaultInstance = new CSSceneEnterRequest().MakeReadOnly();
  private static readonly string[] _cSSceneEnterRequestFieldNames = new string[] { "officerIds", "playerId", "sceneId" };
  private static readonly uint[] _cSSceneEnterRequestFieldTags = new uint[] { 24, 8, 16 };
  public static CSSceneEnterRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneEnterRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneEnterRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneEnterRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneEnterRequest, CSSceneEnterRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneEnterRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int SceneIdFieldNumber = 2;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int OfficerIdsFieldNumber = 3;
  private pbc::PopsicleList<long> officerIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> OfficerIdsList {
    get { return pbc::Lists.AsReadOnly(officerIds_); }
  }
  public int OfficerIdsCount {
    get { return officerIds_.Count; }
  }
  public long GetOfficerIds(int index) {
    return officerIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneEnterRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasSceneId) {
      output.WriteInt64(2, field_names[2], SceneId);
    }
    if (officerIds_.Count > 0) {
      output.WriteInt64Array(3, field_names[0], officerIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SceneId);
    }
    {
      int dataSize = 0;
      foreach (long element in OfficerIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * officerIds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneEnterRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneEnterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneEnterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneEnterRequest MakeReadOnly() {
    officerIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneEnterRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneEnterRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneEnterRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneEnterRequest result;
    
    private CSSceneEnterRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneEnterRequest original = result;
        result = new CSSceneEnterRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneEnterRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneEnterRequest.Descriptor; }
    }
    
    public override CSSceneEnterRequest DefaultInstanceForType {
      get { return global::CSSceneEnterRequest.DefaultInstance; }
    }
    
    public override CSSceneEnterRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneEnterRequest) {
        return MergeFrom((CSSceneEnterRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneEnterRequest other) {
      if (other == global::CSSceneEnterRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.officerIds_.Count != 0) {
        result.officerIds_.Add(other.officerIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneEnterRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneEnterRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 26:
          case 24: {
            input.ReadInt64Array(tag, field_name, result.officerIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<long> OfficerIdsList {
      get { return PrepareBuilder().officerIds_; }
    }
    public int OfficerIdsCount {
      get { return result.OfficerIdsCount; }
    }
    public long GetOfficerIds(int index) {
      return result.GetOfficerIds(index);
    }
    public Builder SetOfficerIds(int index, long value) {
      PrepareBuilder();
      result.officerIds_[index] = value;
      return this;
    }
    public Builder AddOfficerIds(long value) {
      PrepareBuilder();
      result.officerIds_.Add(value);
      return this;
    }
    public Builder AddRangeOfficerIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.officerIds_.Add(values);
      return this;
    }
    public Builder ClearOfficerIds() {
      PrepareBuilder();
      result.officerIds_.Clear();
      return this;
    }
  }
  static CSSceneEnterRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneEnterResponse : pb::GeneratedMessage<SCSceneEnterResponse, SCSceneEnterResponse.Builder> {
  private SCSceneEnterResponse() { }
  private static readonly SCSceneEnterResponse defaultInstance = new SCSceneEnterResponse().MakeReadOnly();
  private static readonly string[] _sCSceneEnterResponseFieldNames = new string[] { "dropItems", "isDropScene", "multiId", "officerIds", "responseStatus", "sceneExhibits", "seconds", "taskExhibits", "vitConsume" };
  private static readonly uint[] _sCSceneEnterResponseFieldTags = new uint[] { 66, 56, 72, 48, 10, 16, 40, 24, 32 };
  public static SCSceneEnterResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneEnterResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneEnterResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneEnterResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneEnterResponse, SCSceneEnterResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneEnterResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int SceneExhibitsFieldNumber = 2;
  private pbc::PopsicleList<long> sceneExhibits_ = new pbc::PopsicleList<long>();
  public scg::IList<long> SceneExhibitsList {
    get { return pbc::Lists.AsReadOnly(sceneExhibits_); }
  }
  public int SceneExhibitsCount {
    get { return sceneExhibits_.Count; }
  }
  public long GetSceneExhibits(int index) {
    return sceneExhibits_[index];
  }
  
  public const int TaskExhibitsFieldNumber = 3;
  private pbc::PopsicleList<long> taskExhibits_ = new pbc::PopsicleList<long>();
  public scg::IList<long> TaskExhibitsList {
    get { return pbc::Lists.AsReadOnly(taskExhibits_); }
  }
  public int TaskExhibitsCount {
    get { return taskExhibits_.Count; }
  }
  public long GetTaskExhibits(int index) {
    return taskExhibits_[index];
  }
  
  public const int VitConsumeFieldNumber = 4;
  private bool hasVitConsume;
  private int vitConsume_;
  public bool HasVitConsume {
    get { return hasVitConsume; }
  }
  public int VitConsume {
    get { return vitConsume_; }
  }
  
  public const int SecondsFieldNumber = 5;
  private bool hasSeconds;
  private int seconds_;
  public bool HasSeconds {
    get { return hasSeconds; }
  }
  public int Seconds {
    get { return seconds_; }
  }
  
  public const int OfficerIdsFieldNumber = 6;
  private pbc::PopsicleList<long> officerIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> OfficerIdsList {
    get { return pbc::Lists.AsReadOnly(officerIds_); }
  }
  public int OfficerIdsCount {
    get { return officerIds_.Count; }
  }
  public long GetOfficerIds(int index) {
    return officerIds_[index];
  }
  
  public const int IsDropSceneFieldNumber = 7;
  private bool hasIsDropScene;
  private bool isDropScene_;
  public bool HasIsDropScene {
    get { return hasIsDropScene; }
  }
  public bool IsDropScene {
    get { return isDropScene_; }
  }
  
  public const int DropItemsFieldNumber = 8;
  private pbc::PopsicleList<global::GiftItem> dropItems_ = new pbc::PopsicleList<global::GiftItem>();
  public scg::IList<global::GiftItem> DropItemsList {
    get { return dropItems_; }
  }
  public int DropItemsCount {
    get { return dropItems_.Count; }
  }
  public global::GiftItem GetDropItems(int index) {
    return dropItems_[index];
  }
  
  public const int MultiIdFieldNumber = 9;
  private bool hasMultiId;
  private long multiId_;
  public bool HasMultiId {
    get { return hasMultiId; }
  }
  public long MultiId {
    get { return multiId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneEnterResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[4], ResponseStatus);
    }
    if (sceneExhibits_.Count > 0) {
      output.WriteInt64Array(2, field_names[5], sceneExhibits_);
    }
    if (taskExhibits_.Count > 0) {
      output.WriteInt64Array(3, field_names[7], taskExhibits_);
    }
    if (hasVitConsume) {
      output.WriteInt32(4, field_names[8], VitConsume);
    }
    if (hasSeconds) {
      output.WriteInt32(5, field_names[6], Seconds);
    }
    if (officerIds_.Count > 0) {
      output.WriteInt64Array(6, field_names[3], officerIds_);
    }
    if (hasIsDropScene) {
      output.WriteBool(7, field_names[1], IsDropScene);
    }
    if (dropItems_.Count > 0) {
      output.WriteMessageArray(8, field_names[0], dropItems_);
    }
    if (hasMultiId) {
      output.WriteInt64(9, field_names[2], MultiId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    {
      int dataSize = 0;
      foreach (long element in SceneExhibitsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * sceneExhibits_.Count;
    }
    {
      int dataSize = 0;
      foreach (long element in TaskExhibitsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * taskExhibits_.Count;
    }
    if (hasVitConsume) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, VitConsume);
    }
    if (hasSeconds) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Seconds);
    }
    {
      int dataSize = 0;
      foreach (long element in OfficerIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * officerIds_.Count;
    }
    if (hasIsDropScene) {
      size += pb::CodedOutputStream.ComputeBoolSize(7, IsDropScene);
    }
    foreach (global::GiftItem element in DropItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, element);
    }
    if (hasMultiId) {
      size += pb::CodedOutputStream.ComputeInt64Size(9, MultiId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneEnterResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneEnterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneEnterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneEnterResponse MakeReadOnly() {
    sceneExhibits_.MakeReadOnly();
    taskExhibits_.MakeReadOnly();
    officerIds_.MakeReadOnly();
    dropItems_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneEnterResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneEnterResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneEnterResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneEnterResponse result;
    
    private SCSceneEnterResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneEnterResponse original = result;
        result = new SCSceneEnterResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneEnterResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneEnterResponse.Descriptor; }
    }
    
    public override SCSceneEnterResponse DefaultInstanceForType {
      get { return global::SCSceneEnterResponse.DefaultInstance; }
    }
    
    public override SCSceneEnterResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneEnterResponse) {
        return MergeFrom((SCSceneEnterResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneEnterResponse other) {
      if (other == global::SCSceneEnterResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.sceneExhibits_.Count != 0) {
        result.sceneExhibits_.Add(other.sceneExhibits_);
      }
      if (other.taskExhibits_.Count != 0) {
        result.taskExhibits_.Add(other.taskExhibits_);
      }
      if (other.HasVitConsume) {
        VitConsume = other.VitConsume;
      }
      if (other.HasSeconds) {
        Seconds = other.Seconds;
      }
      if (other.officerIds_.Count != 0) {
        result.officerIds_.Add(other.officerIds_);
      }
      if (other.HasIsDropScene) {
        IsDropScene = other.IsDropScene;
      }
      if (other.dropItems_.Count != 0) {
        result.dropItems_.Add(other.dropItems_);
      }
      if (other.HasMultiId) {
        MultiId = other.MultiId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneEnterResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneEnterResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18:
          case 16: {
            input.ReadInt64Array(tag, field_name, result.sceneExhibits_);
            break;
          }
          case 26:
          case 24: {
            input.ReadInt64Array(tag, field_name, result.taskExhibits_);
            break;
          }
          case 32: {
            result.hasVitConsume = input.ReadInt32(ref result.vitConsume_);
            break;
          }
          case 40: {
            result.hasSeconds = input.ReadInt32(ref result.seconds_);
            break;
          }
          case 50:
          case 48: {
            input.ReadInt64Array(tag, field_name, result.officerIds_);
            break;
          }
          case 56: {
            result.hasIsDropScene = input.ReadBool(ref result.isDropScene_);
            break;
          }
          case 66: {
            input.ReadMessageArray(tag, field_name, result.dropItems_, global::GiftItem.DefaultInstance, extensionRegistry);
            break;
          }
          case 72: {
            result.hasMultiId = input.ReadInt64(ref result.multiId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<long> SceneExhibitsList {
      get { return PrepareBuilder().sceneExhibits_; }
    }
    public int SceneExhibitsCount {
      get { return result.SceneExhibitsCount; }
    }
    public long GetSceneExhibits(int index) {
      return result.GetSceneExhibits(index);
    }
    public Builder SetSceneExhibits(int index, long value) {
      PrepareBuilder();
      result.sceneExhibits_[index] = value;
      return this;
    }
    public Builder AddSceneExhibits(long value) {
      PrepareBuilder();
      result.sceneExhibits_.Add(value);
      return this;
    }
    public Builder AddRangeSceneExhibits(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.sceneExhibits_.Add(values);
      return this;
    }
    public Builder ClearSceneExhibits() {
      PrepareBuilder();
      result.sceneExhibits_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<long> TaskExhibitsList {
      get { return PrepareBuilder().taskExhibits_; }
    }
    public int TaskExhibitsCount {
      get { return result.TaskExhibitsCount; }
    }
    public long GetTaskExhibits(int index) {
      return result.GetTaskExhibits(index);
    }
    public Builder SetTaskExhibits(int index, long value) {
      PrepareBuilder();
      result.taskExhibits_[index] = value;
      return this;
    }
    public Builder AddTaskExhibits(long value) {
      PrepareBuilder();
      result.taskExhibits_.Add(value);
      return this;
    }
    public Builder AddRangeTaskExhibits(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.taskExhibits_.Add(values);
      return this;
    }
    public Builder ClearTaskExhibits() {
      PrepareBuilder();
      result.taskExhibits_.Clear();
      return this;
    }
    
    public bool HasVitConsume {
      get { return result.hasVitConsume; }
    }
    public int VitConsume {
      get { return result.VitConsume; }
      set { SetVitConsume(value); }
    }
    public Builder SetVitConsume(int value) {
      PrepareBuilder();
      result.hasVitConsume = true;
      result.vitConsume_ = value;
      return this;
    }
    public Builder ClearVitConsume() {
      PrepareBuilder();
      result.hasVitConsume = false;
      result.vitConsume_ = 0;
      return this;
    }
    
    public bool HasSeconds {
      get { return result.hasSeconds; }
    }
    public int Seconds {
      get { return result.Seconds; }
      set { SetSeconds(value); }
    }
    public Builder SetSeconds(int value) {
      PrepareBuilder();
      result.hasSeconds = true;
      result.seconds_ = value;
      return this;
    }
    public Builder ClearSeconds() {
      PrepareBuilder();
      result.hasSeconds = false;
      result.seconds_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<long> OfficerIdsList {
      get { return PrepareBuilder().officerIds_; }
    }
    public int OfficerIdsCount {
      get { return result.OfficerIdsCount; }
    }
    public long GetOfficerIds(int index) {
      return result.GetOfficerIds(index);
    }
    public Builder SetOfficerIds(int index, long value) {
      PrepareBuilder();
      result.officerIds_[index] = value;
      return this;
    }
    public Builder AddOfficerIds(long value) {
      PrepareBuilder();
      result.officerIds_.Add(value);
      return this;
    }
    public Builder AddRangeOfficerIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.officerIds_.Add(values);
      return this;
    }
    public Builder ClearOfficerIds() {
      PrepareBuilder();
      result.officerIds_.Clear();
      return this;
    }
    
    public bool HasIsDropScene {
      get { return result.hasIsDropScene; }
    }
    public bool IsDropScene {
      get { return result.IsDropScene; }
      set { SetIsDropScene(value); }
    }
    public Builder SetIsDropScene(bool value) {
      PrepareBuilder();
      result.hasIsDropScene = true;
      result.isDropScene_ = value;
      return this;
    }
    public Builder ClearIsDropScene() {
      PrepareBuilder();
      result.hasIsDropScene = false;
      result.isDropScene_ = false;
      return this;
    }
    
    public pbc::IPopsicleList<global::GiftItem> DropItemsList {
      get { return PrepareBuilder().dropItems_; }
    }
    public int DropItemsCount {
      get { return result.DropItemsCount; }
    }
    public global::GiftItem GetDropItems(int index) {
      return result.GetDropItems(index);
    }
    public Builder SetDropItems(int index, global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dropItems_[index] = value;
      return this;
    }
    public Builder SetDropItems(int index, global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dropItems_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDropItems(global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dropItems_.Add(value);
      return this;
    }
    public Builder AddDropItems(global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dropItems_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDropItems(scg::IEnumerable<global::GiftItem> values) {
      PrepareBuilder();
      result.dropItems_.Add(values);
      return this;
    }
    public Builder ClearDropItems() {
      PrepareBuilder();
      result.dropItems_.Clear();
      return this;
    }
    
    public bool HasMultiId {
      get { return result.hasMultiId; }
    }
    public long MultiId {
      get { return result.MultiId; }
      set { SetMultiId(value); }
    }
    public Builder SetMultiId(long value) {
      PrepareBuilder();
      result.hasMultiId = true;
      result.multiId_ = value;
      return this;
    }
    public Builder ClearMultiId() {
      PrepareBuilder();
      result.hasMultiId = false;
      result.multiId_ = 0L;
      return this;
    }
  }
  static SCSceneEnterResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneRewardRequest : pb::GeneratedMessage<CSSceneRewardRequest, CSSceneRewardRequest.Builder> {
  private CSSceneRewardRequest() { }
  private static readonly CSSceneRewardRequest defaultInstance = new CSSceneRewardRequest().MakeReadOnly();
  private static readonly string[] _cSSceneRewardRequestFieldNames = new string[] { "costTime", "playerId", "result", "sceneId", "useClickCount" };
  private static readonly uint[] _cSSceneRewardRequestFieldTags = new uint[] { 32, 8, 24, 16, 40 };
  public static CSSceneRewardRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneRewardRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneRewardRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneRewardRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneRewardRequest, CSSceneRewardRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneRewardRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int SceneIdFieldNumber = 2;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int ResultFieldNumber = 3;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int CostTimeFieldNumber = 4;
  private bool hasCostTime;
  private int costTime_;
  public bool HasCostTime {
    get { return hasCostTime; }
  }
  public int CostTime {
    get { return costTime_; }
  }
  
  public const int UseClickCountFieldNumber = 5;
  private bool hasUseClickCount;
  private int useClickCount_;
  public bool HasUseClickCount {
    get { return hasUseClickCount; }
  }
  public int UseClickCount {
    get { return useClickCount_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneRewardRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasSceneId) {
      output.WriteInt64(2, field_names[3], SceneId);
    }
    if (hasResult) {
      output.WriteInt32(3, field_names[2], Result);
    }
    if (hasCostTime) {
      output.WriteInt32(4, field_names[0], CostTime);
    }
    if (hasUseClickCount) {
      output.WriteInt32(5, field_names[4], UseClickCount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SceneId);
    }
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Result);
    }
    if (hasCostTime) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, CostTime);
    }
    if (hasUseClickCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, UseClickCount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneRewardRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneRewardRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneRewardRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneRewardRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneRewardRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneRewardRequest result;
    
    private CSSceneRewardRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneRewardRequest original = result;
        result = new CSSceneRewardRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneRewardRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneRewardRequest.Descriptor; }
    }
    
    public override CSSceneRewardRequest DefaultInstanceForType {
      get { return global::CSSceneRewardRequest.DefaultInstance; }
    }
    
    public override CSSceneRewardRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneRewardRequest) {
        return MergeFrom((CSSceneRewardRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneRewardRequest other) {
      if (other == global::CSSceneRewardRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasCostTime) {
        CostTime = other.CostTime;
      }
      if (other.HasUseClickCount) {
        UseClickCount = other.UseClickCount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneRewardRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 24: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 32: {
            result.hasCostTime = input.ReadInt32(ref result.costTime_);
            break;
          }
          case 40: {
            result.hasUseClickCount = input.ReadInt32(ref result.useClickCount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasCostTime {
      get { return result.hasCostTime; }
    }
    public int CostTime {
      get { return result.CostTime; }
      set { SetCostTime(value); }
    }
    public Builder SetCostTime(int value) {
      PrepareBuilder();
      result.hasCostTime = true;
      result.costTime_ = value;
      return this;
    }
    public Builder ClearCostTime() {
      PrepareBuilder();
      result.hasCostTime = false;
      result.costTime_ = 0;
      return this;
    }
    
    public bool HasUseClickCount {
      get { return result.hasUseClickCount; }
    }
    public int UseClickCount {
      get { return result.UseClickCount; }
      set { SetUseClickCount(value); }
    }
    public Builder SetUseClickCount(int value) {
      PrepareBuilder();
      result.hasUseClickCount = true;
      result.useClickCount_ = value;
      return this;
    }
    public Builder ClearUseClickCount() {
      PrepareBuilder();
      result.hasUseClickCount = false;
      result.useClickCount_ = 0;
      return this;
    }
  }
  static CSSceneRewardRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneRewardResponse : pb::GeneratedMessage<SCSceneRewardResponse, SCSceneRewardResponse.Builder> {
  private SCSceneRewardResponse() { }
  private static readonly SCSceneRewardResponse defaultInstance = new SCSceneRewardResponse().MakeReadOnly();
  private static readonly string[] _sCSceneRewardResponseFieldNames = new string[] { "difficulty", "exp", "giftItems", "outputCash", "outputCoin", "outputExp", "outputVit", "responseStatus", "sceneId", "sceneRewardComprise", "upLevelRewards" };
  private static readonly uint[] _sCSceneRewardResponseFieldTags = new uint[] { 72, 80, 58, 32, 24, 48, 40, 10, 16, 66, 90 };
  public static SCSceneRewardResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneRewardResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneRewardResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneRewardResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneRewardResponse, SCSceneRewardResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneRewardResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int SceneIdFieldNumber = 2;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int OutputCoinFieldNumber = 3;
  private bool hasOutputCoin;
  private int outputCoin_;
  public bool HasOutputCoin {
    get { return hasOutputCoin; }
  }
  public int OutputCoin {
    get { return outputCoin_; }
  }
  
  public const int OutputCashFieldNumber = 4;
  private bool hasOutputCash;
  private int outputCash_;
  public bool HasOutputCash {
    get { return hasOutputCash; }
  }
  public int OutputCash {
    get { return outputCash_; }
  }
  
  public const int OutputVitFieldNumber = 5;
  private bool hasOutputVit;
  private int outputVit_;
  public bool HasOutputVit {
    get { return hasOutputVit; }
  }
  public int OutputVit {
    get { return outputVit_; }
  }
  
  public const int OutputExpFieldNumber = 6;
  private bool hasOutputExp;
  private int outputExp_;
  public bool HasOutputExp {
    get { return hasOutputExp; }
  }
  public int OutputExp {
    get { return outputExp_; }
  }
  
  public const int GiftItemsFieldNumber = 7;
  private pbc::PopsicleList<global::GiftItem> giftItems_ = new pbc::PopsicleList<global::GiftItem>();
  public scg::IList<global::GiftItem> GiftItemsList {
    get { return giftItems_; }
  }
  public int GiftItemsCount {
    get { return giftItems_.Count; }
  }
  public global::GiftItem GetGiftItems(int index) {
    return giftItems_[index];
  }
  
  public const int SceneRewardCompriseFieldNumber = 8;
  private pbc::PopsicleList<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::PopsicleList<global::SceneRewardComprise>();
  public scg::IList<global::SceneRewardComprise> SceneRewardCompriseList {
    get { return sceneRewardComprise_; }
  }
  public int SceneRewardCompriseCount {
    get { return sceneRewardComprise_.Count; }
  }
  public global::SceneRewardComprise GetSceneRewardComprise(int index) {
    return sceneRewardComprise_[index];
  }
  
  public const int DifficultyFieldNumber = 9;
  private bool hasDifficulty;
  private int difficulty_;
  public bool HasDifficulty {
    get { return hasDifficulty; }
  }
  public int Difficulty {
    get { return difficulty_; }
  }
  
  public const int ExpFieldNumber = 10;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int UpLevelRewardsFieldNumber = 11;
  private pbc::PopsicleList<global::GiftItem> upLevelRewards_ = new pbc::PopsicleList<global::GiftItem>();
  public scg::IList<global::GiftItem> UpLevelRewardsList {
    get { return upLevelRewards_; }
  }
  public int UpLevelRewardsCount {
    get { return upLevelRewards_.Count; }
  }
  public global::GiftItem GetUpLevelRewards(int index) {
    return upLevelRewards_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneRewardResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[7], ResponseStatus);
    }
    if (hasSceneId) {
      output.WriteInt64(2, field_names[8], SceneId);
    }
    if (hasOutputCoin) {
      output.WriteInt32(3, field_names[4], OutputCoin);
    }
    if (hasOutputCash) {
      output.WriteInt32(4, field_names[3], OutputCash);
    }
    if (hasOutputVit) {
      output.WriteInt32(5, field_names[6], OutputVit);
    }
    if (hasOutputExp) {
      output.WriteInt32(6, field_names[5], OutputExp);
    }
    if (giftItems_.Count > 0) {
      output.WriteMessageArray(7, field_names[2], giftItems_);
    }
    if (sceneRewardComprise_.Count > 0) {
      output.WriteMessageArray(8, field_names[9], sceneRewardComprise_);
    }
    if (hasDifficulty) {
      output.WriteInt32(9, field_names[0], Difficulty);
    }
    if (hasExp) {
      output.WriteInt32(10, field_names[1], Exp);
    }
    if (upLevelRewards_.Count > 0) {
      output.WriteMessageArray(11, field_names[10], upLevelRewards_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SceneId);
    }
    if (hasOutputCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, OutputCoin);
    }
    if (hasOutputCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, OutputCash);
    }
    if (hasOutputVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, OutputVit);
    }
    if (hasOutputExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, OutputExp);
    }
    foreach (global::GiftItem element in GiftItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, element);
    }
    foreach (global::SceneRewardComprise element in SceneRewardCompriseList) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, element);
    }
    if (hasDifficulty) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, Difficulty);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(10, Exp);
    }
    foreach (global::GiftItem element in UpLevelRewardsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(11, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneRewardResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneRewardResponse MakeReadOnly() {
    giftItems_.MakeReadOnly();
    sceneRewardComprise_.MakeReadOnly();
    upLevelRewards_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneRewardResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneRewardResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneRewardResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneRewardResponse result;
    
    private SCSceneRewardResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneRewardResponse original = result;
        result = new SCSceneRewardResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneRewardResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneRewardResponse.Descriptor; }
    }
    
    public override SCSceneRewardResponse DefaultInstanceForType {
      get { return global::SCSceneRewardResponse.DefaultInstance; }
    }
    
    public override SCSceneRewardResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneRewardResponse) {
        return MergeFrom((SCSceneRewardResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneRewardResponse other) {
      if (other == global::SCSceneRewardResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasOutputCoin) {
        OutputCoin = other.OutputCoin;
      }
      if (other.HasOutputCash) {
        OutputCash = other.OutputCash;
      }
      if (other.HasOutputVit) {
        OutputVit = other.OutputVit;
      }
      if (other.HasOutputExp) {
        OutputExp = other.OutputExp;
      }
      if (other.giftItems_.Count != 0) {
        result.giftItems_.Add(other.giftItems_);
      }
      if (other.sceneRewardComprise_.Count != 0) {
        result.sceneRewardComprise_.Add(other.sceneRewardComprise_);
      }
      if (other.HasDifficulty) {
        Difficulty = other.Difficulty;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.upLevelRewards_.Count != 0) {
        result.upLevelRewards_.Add(other.upLevelRewards_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneRewardResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 24: {
            result.hasOutputCoin = input.ReadInt32(ref result.outputCoin_);
            break;
          }
          case 32: {
            result.hasOutputCash = input.ReadInt32(ref result.outputCash_);
            break;
          }
          case 40: {
            result.hasOutputVit = input.ReadInt32(ref result.outputVit_);
            break;
          }
          case 48: {
            result.hasOutputExp = input.ReadInt32(ref result.outputExp_);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, field_name, result.giftItems_, global::GiftItem.DefaultInstance, extensionRegistry);
            break;
          }
          case 66: {
            input.ReadMessageArray(tag, field_name, result.sceneRewardComprise_, global::SceneRewardComprise.DefaultInstance, extensionRegistry);
            break;
          }
          case 72: {
            result.hasDifficulty = input.ReadInt32(ref result.difficulty_);
            break;
          }
          case 80: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
          case 90: {
            input.ReadMessageArray(tag, field_name, result.upLevelRewards_, global::GiftItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasOutputCoin {
      get { return result.hasOutputCoin; }
    }
    public int OutputCoin {
      get { return result.OutputCoin; }
      set { SetOutputCoin(value); }
    }
    public Builder SetOutputCoin(int value) {
      PrepareBuilder();
      result.hasOutputCoin = true;
      result.outputCoin_ = value;
      return this;
    }
    public Builder ClearOutputCoin() {
      PrepareBuilder();
      result.hasOutputCoin = false;
      result.outputCoin_ = 0;
      return this;
    }
    
    public bool HasOutputCash {
      get { return result.hasOutputCash; }
    }
    public int OutputCash {
      get { return result.OutputCash; }
      set { SetOutputCash(value); }
    }
    public Builder SetOutputCash(int value) {
      PrepareBuilder();
      result.hasOutputCash = true;
      result.outputCash_ = value;
      return this;
    }
    public Builder ClearOutputCash() {
      PrepareBuilder();
      result.hasOutputCash = false;
      result.outputCash_ = 0;
      return this;
    }
    
    public bool HasOutputVit {
      get { return result.hasOutputVit; }
    }
    public int OutputVit {
      get { return result.OutputVit; }
      set { SetOutputVit(value); }
    }
    public Builder SetOutputVit(int value) {
      PrepareBuilder();
      result.hasOutputVit = true;
      result.outputVit_ = value;
      return this;
    }
    public Builder ClearOutputVit() {
      PrepareBuilder();
      result.hasOutputVit = false;
      result.outputVit_ = 0;
      return this;
    }
    
    public bool HasOutputExp {
      get { return result.hasOutputExp; }
    }
    public int OutputExp {
      get { return result.OutputExp; }
      set { SetOutputExp(value); }
    }
    public Builder SetOutputExp(int value) {
      PrepareBuilder();
      result.hasOutputExp = true;
      result.outputExp_ = value;
      return this;
    }
    public Builder ClearOutputExp() {
      PrepareBuilder();
      result.hasOutputExp = false;
      result.outputExp_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::GiftItem> GiftItemsList {
      get { return PrepareBuilder().giftItems_; }
    }
    public int GiftItemsCount {
      get { return result.GiftItemsCount; }
    }
    public global::GiftItem GetGiftItems(int index) {
      return result.GetGiftItems(index);
    }
    public Builder SetGiftItems(int index, global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.giftItems_[index] = value;
      return this;
    }
    public Builder SetGiftItems(int index, global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.giftItems_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGiftItems(global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.giftItems_.Add(value);
      return this;
    }
    public Builder AddGiftItems(global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.giftItems_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGiftItems(scg::IEnumerable<global::GiftItem> values) {
      PrepareBuilder();
      result.giftItems_.Add(values);
      return this;
    }
    public Builder ClearGiftItems() {
      PrepareBuilder();
      result.giftItems_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::SceneRewardComprise> SceneRewardCompriseList {
      get { return PrepareBuilder().sceneRewardComprise_; }
    }
    public int SceneRewardCompriseCount {
      get { return result.SceneRewardCompriseCount; }
    }
    public global::SceneRewardComprise GetSceneRewardComprise(int index) {
      return result.GetSceneRewardComprise(index);
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = value;
      return this;
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(value);
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSceneRewardComprise(scg::IEnumerable<global::SceneRewardComprise> values) {
      PrepareBuilder();
      result.sceneRewardComprise_.Add(values);
      return this;
    }
    public Builder ClearSceneRewardComprise() {
      PrepareBuilder();
      result.sceneRewardComprise_.Clear();
      return this;
    }
    
    public bool HasDifficulty {
      get { return result.hasDifficulty; }
    }
    public int Difficulty {
      get { return result.Difficulty; }
      set { SetDifficulty(value); }
    }
    public Builder SetDifficulty(int value) {
      PrepareBuilder();
      result.hasDifficulty = true;
      result.difficulty_ = value;
      return this;
    }
    public Builder ClearDifficulty() {
      PrepareBuilder();
      result.hasDifficulty = false;
      result.difficulty_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::GiftItem> UpLevelRewardsList {
      get { return PrepareBuilder().upLevelRewards_; }
    }
    public int UpLevelRewardsCount {
      get { return result.UpLevelRewardsCount; }
    }
    public global::GiftItem GetUpLevelRewards(int index) {
      return result.GetUpLevelRewards(index);
    }
    public Builder SetUpLevelRewards(int index, global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.upLevelRewards_[index] = value;
      return this;
    }
    public Builder SetUpLevelRewards(int index, global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.upLevelRewards_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddUpLevelRewards(global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.upLevelRewards_.Add(value);
      return this;
    }
    public Builder AddUpLevelRewards(global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.upLevelRewards_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeUpLevelRewards(scg::IEnumerable<global::GiftItem> values) {
      PrepareBuilder();
      result.upLevelRewards_.Add(values);
      return this;
    }
    public Builder ClearUpLevelRewards() {
      PrepareBuilder();
      result.upLevelRewards_.Clear();
      return this;
    }
  }
  static SCSceneRewardResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GiftItem : pb::GeneratedMessage<GiftItem, GiftItem.Builder> {
  private GiftItem() { }
  private static readonly GiftItem defaultInstance = new GiftItem().MakeReadOnly();
  private static readonly string[] _giftItemFieldNames = new string[] { "itemId", "num" };
  private static readonly uint[] _giftItemFieldTags = new uint[] { 8, 16 };
  public static GiftItem DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GiftItem DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GiftItem ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GiftItem__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GiftItem, GiftItem.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GiftItem__FieldAccessorTable; }
  }
  
  public const int ItemIdFieldNumber = 1;
  private bool hasItemId;
  private long itemId_;
  public bool HasItemId {
    get { return hasItemId; }
  }
  public long ItemId {
    get { return itemId_; }
  }
  
  public const int NumFieldNumber = 2;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _giftItemFieldNames;
    if (hasItemId) {
      output.WriteInt64(1, field_names[0], ItemId);
    }
    if (hasNum) {
      output.WriteInt32(2, field_names[1], Num);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasItemId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, ItemId);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GiftItem ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GiftItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GiftItem ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GiftItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GiftItem ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GiftItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GiftItem ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GiftItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GiftItem ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GiftItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GiftItem MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GiftItem prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GiftItem, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GiftItem cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GiftItem result;
    
    private GiftItem PrepareBuilder() {
      if (resultIsReadOnly) {
        GiftItem original = result;
        result = new GiftItem();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GiftItem MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GiftItem.Descriptor; }
    }
    
    public override GiftItem DefaultInstanceForType {
      get { return global::GiftItem.DefaultInstance; }
    }
    
    public override GiftItem BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GiftItem) {
        return MergeFrom((GiftItem) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GiftItem other) {
      if (other == global::GiftItem.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasItemId) {
        ItemId = other.ItemId;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_giftItemFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _giftItemFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasItemId = input.ReadInt64(ref result.itemId_);
            break;
          }
          case 16: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasItemId {
      get { return result.hasItemId; }
    }
    public long ItemId {
      get { return result.ItemId; }
      set { SetItemId(value); }
    }
    public Builder SetItemId(long value) {
      PrepareBuilder();
      result.hasItemId = true;
      result.itemId_ = value;
      return this;
    }
    public Builder ClearItemId() {
      PrepareBuilder();
      result.hasItemId = false;
      result.itemId_ = 0L;
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
  }
  static GiftItem() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneQuitRequest : pb::GeneratedMessage<CSSceneQuitRequest, CSSceneQuitRequest.Builder> {
  private CSSceneQuitRequest() { }
  private static readonly CSSceneQuitRequest defaultInstance = new CSSceneQuitRequest().MakeReadOnly();
  private static readonly string[] _cSSceneQuitRequestFieldNames = new string[] { "playerId", "type" };
  private static readonly uint[] _cSSceneQuitRequestFieldTags = new uint[] { 8, 16 };
  public static CSSceneQuitRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneQuitRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneQuitRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneQuitRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneQuitRequest, CSSceneQuitRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneQuitRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneQuitRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[1], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneQuitRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneQuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneQuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneQuitRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneQuitRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneQuitRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneQuitRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneQuitRequest result;
    
    private CSSceneQuitRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneQuitRequest original = result;
        result = new CSSceneQuitRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneQuitRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneQuitRequest.Descriptor; }
    }
    
    public override CSSceneQuitRequest DefaultInstanceForType {
      get { return global::CSSceneQuitRequest.DefaultInstance; }
    }
    
    public override CSSceneQuitRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneQuitRequest) {
        return MergeFrom((CSSceneQuitRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneQuitRequest other) {
      if (other == global::CSSceneQuitRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneQuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneQuitRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static CSSceneQuitRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneQuitResponse : pb::GeneratedMessage<SCSceneQuitResponse, SCSceneQuitResponse.Builder> {
  private SCSceneQuitResponse() { }
  private static readonly SCSceneQuitResponse defaultInstance = new SCSceneQuitResponse().MakeReadOnly();
  private static readonly string[] _sCSceneQuitResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCSceneQuitResponseFieldTags = new uint[] { 8 };
  public static SCSceneQuitResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneQuitResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneQuitResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneQuitResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneQuitResponse, SCSceneQuitResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneQuitResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneQuitResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneQuitResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneQuitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneQuitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneQuitResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneQuitResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneQuitResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneQuitResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneQuitResponse result;
    
    private SCSceneQuitResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneQuitResponse original = result;
        result = new SCSceneQuitResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneQuitResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneQuitResponse.Descriptor; }
    }
    
    public override SCSceneQuitResponse DefaultInstanceForType {
      get { return global::SCSceneQuitResponse.DefaultInstance; }
    }
    
    public override SCSceneQuitResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneQuitResponse) {
        return MergeFrom((SCSceneQuitResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneQuitResponse other) {
      if (other == global::SCSceneQuitResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneQuitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneQuitResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCSceneQuitResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneSuspendRequest : pb::GeneratedMessage<CSSceneSuspendRequest, CSSceneSuspendRequest.Builder> {
  private CSSceneSuspendRequest() { }
  private static readonly CSSceneSuspendRequest defaultInstance = new CSSceneSuspendRequest().MakeReadOnly();
  private static readonly string[] _cSSceneSuspendRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSSceneSuspendRequestFieldTags = new uint[] { 8 };
  public static CSSceneSuspendRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneSuspendRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneSuspendRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneSuspendRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneSuspendRequest, CSSceneSuspendRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneSuspendRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneSuspendRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneSuspendRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneSuspendRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneSuspendRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneSuspendRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneSuspendRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneSuspendRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneSuspendRequest result;
    
    private CSSceneSuspendRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneSuspendRequest original = result;
        result = new CSSceneSuspendRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneSuspendRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneSuspendRequest.Descriptor; }
    }
    
    public override CSSceneSuspendRequest DefaultInstanceForType {
      get { return global::CSSceneSuspendRequest.DefaultInstance; }
    }
    
    public override CSSceneSuspendRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneSuspendRequest) {
        return MergeFrom((CSSceneSuspendRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneSuspendRequest other) {
      if (other == global::CSSceneSuspendRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneSuspendRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneSuspendRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSSceneSuspendRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneSuspendResponse : pb::GeneratedMessage<SCSceneSuspendResponse, SCSceneSuspendResponse.Builder> {
  private SCSceneSuspendResponse() { }
  private static readonly SCSceneSuspendResponse defaultInstance = new SCSceneSuspendResponse().MakeReadOnly();
  private static readonly string[] _sCSceneSuspendResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCSceneSuspendResponseFieldTags = new uint[] { 8 };
  public static SCSceneSuspendResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneSuspendResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneSuspendResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneSuspendResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneSuspendResponse, SCSceneSuspendResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneSuspendResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneSuspendResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneSuspendResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneSuspendResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneSuspendResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneSuspendResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneSuspendResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneSuspendResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneSuspendResponse result;
    
    private SCSceneSuspendResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneSuspendResponse original = result;
        result = new SCSceneSuspendResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneSuspendResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneSuspendResponse.Descriptor; }
    }
    
    public override SCSceneSuspendResponse DefaultInstanceForType {
      get { return global::SCSceneSuspendResponse.DefaultInstance; }
    }
    
    public override SCSceneSuspendResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneSuspendResponse) {
        return MergeFrom((SCSceneSuspendResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneSuspendResponse other) {
      if (other == global::SCSceneSuspendResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneSuspendResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneSuspendResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCSceneSuspendResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneResumeRequest : pb::GeneratedMessage<CSSceneResumeRequest, CSSceneResumeRequest.Builder> {
  private CSSceneResumeRequest() { }
  private static readonly CSSceneResumeRequest defaultInstance = new CSSceneResumeRequest().MakeReadOnly();
  private static readonly string[] _cSSceneResumeRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSSceneResumeRequestFieldTags = new uint[] { 8 };
  public static CSSceneResumeRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneResumeRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneResumeRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneResumeRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneResumeRequest, CSSceneResumeRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneResumeRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneResumeRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneResumeRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneResumeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneResumeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneResumeRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneResumeRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneResumeRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneResumeRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneResumeRequest result;
    
    private CSSceneResumeRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneResumeRequest original = result;
        result = new CSSceneResumeRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneResumeRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneResumeRequest.Descriptor; }
    }
    
    public override CSSceneResumeRequest DefaultInstanceForType {
      get { return global::CSSceneResumeRequest.DefaultInstance; }
    }
    
    public override CSSceneResumeRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneResumeRequest) {
        return MergeFrom((CSSceneResumeRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneResumeRequest other) {
      if (other == global::CSSceneResumeRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneResumeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneResumeRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSSceneResumeRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneResumeResponse : pb::GeneratedMessage<SCSceneResumeResponse, SCSceneResumeResponse.Builder> {
  private SCSceneResumeResponse() { }
  private static readonly SCSceneResumeResponse defaultInstance = new SCSceneResumeResponse().MakeReadOnly();
  private static readonly string[] _sCSceneResumeResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCSceneResumeResponseFieldTags = new uint[] { 8 };
  public static SCSceneResumeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneResumeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneResumeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneResumeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneResumeResponse, SCSceneResumeResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneResumeResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneResumeResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneResumeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneResumeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneResumeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneResumeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneResumeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneResumeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneResumeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneResumeResponse result;
    
    private SCSceneResumeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneResumeResponse original = result;
        result = new SCSceneResumeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneResumeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneResumeResponse.Descriptor; }
    }
    
    public override SCSceneResumeResponse DefaultInstanceForType {
      get { return global::SCSceneResumeResponse.DefaultInstance; }
    }
    
    public override SCSceneResumeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneResumeResponse) {
        return MergeFrom((SCSceneResumeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneResumeResponse other) {
      if (other == global::SCSceneResumeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneResumeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneResumeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCSceneResumeResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneStartRequest : pb::GeneratedMessage<CSSceneStartRequest, CSSceneStartRequest.Builder> {
  private CSSceneStartRequest() { }
  private static readonly CSSceneStartRequest defaultInstance = new CSSceneStartRequest().MakeReadOnly();
  private static readonly string[] _cSSceneStartRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSSceneStartRequestFieldTags = new uint[] { 8 };
  public static CSSceneStartRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneStartRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneStartRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneStartRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneStartRequest, CSSceneStartRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneStartRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneStartRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneStartRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneStartRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneStartRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneStartRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneStartRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneStartRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneStartRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneStartRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneStartRequest result;
    
    private CSSceneStartRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneStartRequest original = result;
        result = new CSSceneStartRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneStartRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneStartRequest.Descriptor; }
    }
    
    public override CSSceneStartRequest DefaultInstanceForType {
      get { return global::CSSceneStartRequest.DefaultInstance; }
    }
    
    public override CSSceneStartRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneStartRequest) {
        return MergeFrom((CSSceneStartRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneStartRequest other) {
      if (other == global::CSSceneStartRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneStartRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneStartRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSSceneStartRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneStartResponse : pb::GeneratedMessage<SCSceneStartResponse, SCSceneStartResponse.Builder> {
  private SCSceneStartResponse() { }
  private static readonly SCSceneStartResponse defaultInstance = new SCSceneStartResponse().MakeReadOnly();
  private static readonly string[] _sCSceneStartResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCSceneStartResponseFieldTags = new uint[] { 8 };
  public static SCSceneStartResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneStartResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneStartResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneStartResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneStartResponse, SCSceneStartResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneStartResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneStartResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneStartResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneStartResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneStartResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneStartResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneStartResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneStartResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneStartResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneStartResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneStartResponse result;
    
    private SCSceneStartResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneStartResponse original = result;
        result = new SCSceneStartResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneStartResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneStartResponse.Descriptor; }
    }
    
    public override SCSceneStartResponse DefaultInstanceForType {
      get { return global::SCSceneStartResponse.DefaultInstance; }
    }
    
    public override SCSceneStartResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneStartResponse) {
        return MergeFrom((SCSceneStartResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneStartResponse other) {
      if (other == global::SCSceneStartResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneStartResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneStartResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCSceneStartResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSearchSceneSelectOfficerReq : pb::GeneratedMessage<CSSearchSceneSelectOfficerReq, CSSearchSceneSelectOfficerReq.Builder> {
  private CSSearchSceneSelectOfficerReq() { }
  private static readonly CSSearchSceneSelectOfficerReq defaultInstance = new CSSearchSceneSelectOfficerReq().MakeReadOnly();
  private static readonly string[] _cSSearchSceneSelectOfficerReqFieldNames = new string[] { "officerIds" };
  private static readonly uint[] _cSSearchSceneSelectOfficerReqFieldTags = new uint[] { 8 };
  public static CSSearchSceneSelectOfficerReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSearchSceneSelectOfficerReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSearchSceneSelectOfficerReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSearchSceneSelectOfficerReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSearchSceneSelectOfficerReq, CSSearchSceneSelectOfficerReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSearchSceneSelectOfficerReq__FieldAccessorTable; }
  }
  
  public const int OfficerIdsFieldNumber = 1;
  private pbc::PopsicleList<long> officerIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> OfficerIdsList {
    get { return pbc::Lists.AsReadOnly(officerIds_); }
  }
  public int OfficerIdsCount {
    get { return officerIds_.Count; }
  }
  public long GetOfficerIds(int index) {
    return officerIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSearchSceneSelectOfficerReqFieldNames;
    if (officerIds_.Count > 0) {
      output.WriteInt64Array(1, field_names[0], officerIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (long element in OfficerIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * officerIds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSearchSceneSelectOfficerReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSearchSceneSelectOfficerReq MakeReadOnly() {
    officerIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSearchSceneSelectOfficerReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSearchSceneSelectOfficerReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSearchSceneSelectOfficerReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSearchSceneSelectOfficerReq result;
    
    private CSSearchSceneSelectOfficerReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSearchSceneSelectOfficerReq original = result;
        result = new CSSearchSceneSelectOfficerReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSearchSceneSelectOfficerReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSearchSceneSelectOfficerReq.Descriptor; }
    }
    
    public override CSSearchSceneSelectOfficerReq DefaultInstanceForType {
      get { return global::CSSearchSceneSelectOfficerReq.DefaultInstance; }
    }
    
    public override CSSearchSceneSelectOfficerReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSearchSceneSelectOfficerReq) {
        return MergeFrom((CSSearchSceneSelectOfficerReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSearchSceneSelectOfficerReq other) {
      if (other == global::CSSearchSceneSelectOfficerReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.officerIds_.Count != 0) {
        result.officerIds_.Add(other.officerIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSearchSceneSelectOfficerReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSearchSceneSelectOfficerReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt64Array(tag, field_name, result.officerIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<long> OfficerIdsList {
      get { return PrepareBuilder().officerIds_; }
    }
    public int OfficerIdsCount {
      get { return result.OfficerIdsCount; }
    }
    public long GetOfficerIds(int index) {
      return result.GetOfficerIds(index);
    }
    public Builder SetOfficerIds(int index, long value) {
      PrepareBuilder();
      result.officerIds_[index] = value;
      return this;
    }
    public Builder AddOfficerIds(long value) {
      PrepareBuilder();
      result.officerIds_.Add(value);
      return this;
    }
    public Builder AddRangeOfficerIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.officerIds_.Add(values);
      return this;
    }
    public Builder ClearOfficerIds() {
      PrepareBuilder();
      result.officerIds_.Clear();
      return this;
    }
  }
  static CSSearchSceneSelectOfficerReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSearchSceneSelectOfficerResp : pb::GeneratedMessage<SCSearchSceneSelectOfficerResp, SCSearchSceneSelectOfficerResp.Builder> {
  private SCSearchSceneSelectOfficerResp() { }
  private static readonly SCSearchSceneSelectOfficerResp defaultInstance = new SCSearchSceneSelectOfficerResp().MakeReadOnly();
  private static readonly string[] _sCSearchSceneSelectOfficerRespFieldNames = new string[] { "costSeconds", "responseStatus", "vitConsume" };
  private static readonly uint[] _sCSearchSceneSelectOfficerRespFieldTags = new uint[] { 16, 26, 8 };
  public static SCSearchSceneSelectOfficerResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSearchSceneSelectOfficerResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSearchSceneSelectOfficerResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSearchSceneSelectOfficerResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSearchSceneSelectOfficerResp, SCSearchSceneSelectOfficerResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSearchSceneSelectOfficerResp__FieldAccessorTable; }
  }
  
  public const int VitConsumeFieldNumber = 1;
  private bool hasVitConsume;
  private int vitConsume_;
  public bool HasVitConsume {
    get { return hasVitConsume; }
  }
  public int VitConsume {
    get { return vitConsume_; }
  }
  
  public const int CostSecondsFieldNumber = 2;
  private bool hasCostSeconds;
  private int costSeconds_;
  public bool HasCostSeconds {
    get { return hasCostSeconds; }
  }
  public int CostSeconds {
    get { return costSeconds_; }
  }
  
  public const int ResponseStatusFieldNumber = 3;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSearchSceneSelectOfficerRespFieldNames;
    if (hasVitConsume) {
      output.WriteInt32(1, field_names[2], VitConsume);
    }
    if (hasCostSeconds) {
      output.WriteInt32(2, field_names[0], CostSeconds);
    }
    if (hasResponseStatus) {
      output.WriteMessage(3, field_names[1], ResponseStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasVitConsume) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, VitConsume);
    }
    if (hasCostSeconds) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, CostSeconds);
    }
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, ResponseStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSearchSceneSelectOfficerResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSearchSceneSelectOfficerResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSearchSceneSelectOfficerResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSearchSceneSelectOfficerResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSearchSceneSelectOfficerResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSearchSceneSelectOfficerResp result;
    
    private SCSearchSceneSelectOfficerResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSearchSceneSelectOfficerResp original = result;
        result = new SCSearchSceneSelectOfficerResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSearchSceneSelectOfficerResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSearchSceneSelectOfficerResp.Descriptor; }
    }
    
    public override SCSearchSceneSelectOfficerResp DefaultInstanceForType {
      get { return global::SCSearchSceneSelectOfficerResp.DefaultInstance; }
    }
    
    public override SCSearchSceneSelectOfficerResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSearchSceneSelectOfficerResp) {
        return MergeFrom((SCSearchSceneSelectOfficerResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSearchSceneSelectOfficerResp other) {
      if (other == global::SCSearchSceneSelectOfficerResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasVitConsume) {
        VitConsume = other.VitConsume;
      }
      if (other.HasCostSeconds) {
        CostSeconds = other.CostSeconds;
      }
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSearchSceneSelectOfficerRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSearchSceneSelectOfficerRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasVitConsume = input.ReadInt32(ref result.vitConsume_);
            break;
          }
          case 16: {
            result.hasCostSeconds = input.ReadInt32(ref result.costSeconds_);
            break;
          }
          case 26: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasVitConsume {
      get { return result.hasVitConsume; }
    }
    public int VitConsume {
      get { return result.VitConsume; }
      set { SetVitConsume(value); }
    }
    public Builder SetVitConsume(int value) {
      PrepareBuilder();
      result.hasVitConsume = true;
      result.vitConsume_ = value;
      return this;
    }
    public Builder ClearVitConsume() {
      PrepareBuilder();
      result.hasVitConsume = false;
      result.vitConsume_ = 0;
      return this;
    }
    
    public bool HasCostSeconds {
      get { return result.hasCostSeconds; }
    }
    public int CostSeconds {
      get { return result.CostSeconds; }
      set { SetCostSeconds(value); }
    }
    public Builder SetCostSeconds(int value) {
      PrepareBuilder();
      result.hasCostSeconds = true;
      result.costSeconds_ = value;
      return this;
    }
    public Builder ClearCostSeconds() {
      PrepareBuilder();
      result.hasCostSeconds = false;
      result.costSeconds_ = 0;
      return this;
    }
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
  }
  static SCSearchSceneSelectOfficerResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBuyItemRequest : pb::GeneratedMessage<CSBuyItemRequest, CSBuyItemRequest.Builder> {
  private CSBuyItemRequest() { }
  private static readonly CSBuyItemRequest defaultInstance = new CSBuyItemRequest().MakeReadOnly();
  private static readonly string[] _cSBuyItemRequestFieldNames = new string[] { "count", "playerId", "propId" };
  private static readonly uint[] _cSBuyItemRequestFieldTags = new uint[] { 24, 8, 16 };
  public static CSBuyItemRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBuyItemRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBuyItemRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSBuyItemRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBuyItemRequest, CSBuyItemRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSBuyItemRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int PropIdFieldNumber = 2;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 3;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBuyItemRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasPropId) {
      output.WriteInt64(2, field_names[2], PropId);
    }
    if (hasCount) {
      output.WriteInt32(3, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBuyItemRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBuyItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBuyItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuyItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBuyItemRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBuyItemRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBuyItemRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBuyItemRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBuyItemRequest result;
    
    private CSBuyItemRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBuyItemRequest original = result;
        result = new CSBuyItemRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBuyItemRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBuyItemRequest.Descriptor; }
    }
    
    public override CSBuyItemRequest DefaultInstanceForType {
      get { return global::CSBuyItemRequest.DefaultInstance; }
    }
    
    public override CSBuyItemRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBuyItemRequest) {
        return MergeFrom((CSBuyItemRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBuyItemRequest other) {
      if (other == global::CSBuyItemRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBuyItemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBuyItemRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 24: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static CSBuyItemRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBuyItemResponse : pb::GeneratedMessage<SCBuyItemResponse, SCBuyItemResponse.Builder> {
  private SCBuyItemResponse() { }
  private static readonly SCBuyItemResponse defaultInstance = new SCBuyItemResponse().MakeReadOnly();
  private static readonly string[] _sCBuyItemResponseFieldNames = new string[] { "count", "propId", "result" };
  private static readonly uint[] _sCBuyItemResponseFieldTags = new uint[] { 16, 8, 24 };
  public static SCBuyItemResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBuyItemResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBuyItemResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCBuyItemResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBuyItemResponse, SCBuyItemResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCBuyItemResponse__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int ResultFieldNumber = 3;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBuyItemResponseFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    if (hasResult) {
      output.WriteInt32(3, field_names[2], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBuyItemResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBuyItemResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBuyItemResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuyItemResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBuyItemResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBuyItemResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBuyItemResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBuyItemResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBuyItemResponse result;
    
    private SCBuyItemResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBuyItemResponse original = result;
        result = new SCBuyItemResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBuyItemResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBuyItemResponse.Descriptor; }
    }
    
    public override SCBuyItemResponse DefaultInstanceForType {
      get { return global::SCBuyItemResponse.DefaultInstance; }
    }
    
    public override SCBuyItemResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBuyItemResponse) {
        return MergeFrom((SCBuyItemResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBuyItemResponse other) {
      if (other == global::SCBuyItemResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBuyItemResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBuyItemResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 24: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCBuyItemResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerPropMsg : pb::GeneratedMessage<PlayerPropMsg, PlayerPropMsg.Builder> {
  private PlayerPropMsg() { }
  private static readonly PlayerPropMsg defaultInstance = new PlayerPropMsg().MakeReadOnly();
  private static readonly string[] _playerPropMsgFieldNames = new string[] { "count", "expireTime", "propId" };
  private static readonly uint[] _playerPropMsgFieldTags = new uint[] { 16, 24, 8 };
  public static PlayerPropMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerPropMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerPropMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PlayerPropMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerPropMsg, PlayerPropMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PlayerPropMsg__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int ExpireTimeFieldNumber = 3;
  private bool hasExpireTime;
  private long expireTime_;
  public bool HasExpireTime {
    get { return hasExpireTime; }
  }
  public long ExpireTime {
    get { return expireTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerPropMsgFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[2], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    if (hasExpireTime) {
      output.WriteInt64(3, field_names[1], ExpireTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    if (hasExpireTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, ExpireTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerPropMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerPropMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerPropMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerPropMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerPropMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerPropMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerPropMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerPropMsg result;
    
    private PlayerPropMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerPropMsg original = result;
        result = new PlayerPropMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerPropMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerPropMsg.Descriptor; }
    }
    
    public override PlayerPropMsg DefaultInstanceForType {
      get { return global::PlayerPropMsg.DefaultInstance; }
    }
    
    public override PlayerPropMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerPropMsg) {
        return MergeFrom((PlayerPropMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerPropMsg other) {
      if (other == global::PlayerPropMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasExpireTime) {
        ExpireTime = other.ExpireTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerPropMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerPropMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 24: {
            result.hasExpireTime = input.ReadInt64(ref result.expireTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasExpireTime {
      get { return result.hasExpireTime; }
    }
    public long ExpireTime {
      get { return result.ExpireTime; }
      set { SetExpireTime(value); }
    }
    public Builder SetExpireTime(long value) {
      PrepareBuilder();
      result.hasExpireTime = true;
      result.expireTime_ = value;
      return this;
    }
    public Builder ClearExpireTime() {
      PrepareBuilder();
      result.hasExpireTime = false;
      result.expireTime_ = 0L;
      return this;
    }
  }
  static PlayerPropMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerPropRequest : pb::GeneratedMessage<CSPlayerPropRequest, CSPlayerPropRequest.Builder> {
  private CSPlayerPropRequest() { }
  private static readonly CSPlayerPropRequest defaultInstance = new CSPlayerPropRequest().MakeReadOnly();
  private static readonly string[] _cSPlayerPropRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSPlayerPropRequestFieldTags = new uint[] {  };
  public static CSPlayerPropRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerPropRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerPropRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerPropRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerPropRequest, CSPlayerPropRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerPropRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerPropRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerPropRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerPropRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerPropRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerPropRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerPropRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerPropRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerPropRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerPropRequest result;
    
    private CSPlayerPropRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerPropRequest original = result;
        result = new CSPlayerPropRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerPropRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerPropRequest.Descriptor; }
    }
    
    public override CSPlayerPropRequest DefaultInstanceForType {
      get { return global::CSPlayerPropRequest.DefaultInstance; }
    }
    
    public override CSPlayerPropRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerPropRequest) {
        return MergeFrom((CSPlayerPropRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerPropRequest other) {
      if (other == global::CSPlayerPropRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerPropRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerPropRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSPlayerPropRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerPropResponse : pb::GeneratedMessage<SCPlayerPropResponse, SCPlayerPropResponse.Builder> {
  private SCPlayerPropResponse() { }
  private static readonly SCPlayerPropResponse defaultInstance = new SCPlayerPropResponse().MakeReadOnly();
  private static readonly string[] _sCPlayerPropResponseFieldNames = new string[] { "playerProps", "recentProps", "reponseStatus" };
  private static readonly uint[] _sCPlayerPropResponseFieldTags = new uint[] { 18, 26, 10 };
  public static SCPlayerPropResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerPropResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerPropResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerPropResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerPropResponse, SCPlayerPropResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerPropResponse__FieldAccessorTable; }
  }
  
  public const int ReponseStatusFieldNumber = 1;
  private bool hasReponseStatus;
  private global::ReponseStatus reponseStatus_;
  public bool HasReponseStatus {
    get { return hasReponseStatus; }
  }
  public global::ReponseStatus ReponseStatus {
    get { return reponseStatus_ ?? global::ReponseStatus.DefaultInstance; }
  }
  
  public const int PlayerPropsFieldNumber = 2;
  private pbc::PopsicleList<global::PlayerPropMsg> playerProps_ = new pbc::PopsicleList<global::PlayerPropMsg>();
  public scg::IList<global::PlayerPropMsg> PlayerPropsList {
    get { return playerProps_; }
  }
  public int PlayerPropsCount {
    get { return playerProps_.Count; }
  }
  public global::PlayerPropMsg GetPlayerProps(int index) {
    return playerProps_[index];
  }
  
  public const int RecentPropsFieldNumber = 3;
  private pbc::PopsicleList<global::PlayerPropMsg> recentProps_ = new pbc::PopsicleList<global::PlayerPropMsg>();
  public scg::IList<global::PlayerPropMsg> RecentPropsList {
    get { return recentProps_; }
  }
  public int RecentPropsCount {
    get { return recentProps_.Count; }
  }
  public global::PlayerPropMsg GetRecentProps(int index) {
    return recentProps_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerPropResponseFieldNames;
    if (hasReponseStatus) {
      output.WriteMessage(1, field_names[2], ReponseStatus);
    }
    if (playerProps_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], playerProps_);
    }
    if (recentProps_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], recentProps_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasReponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ReponseStatus);
    }
    foreach (global::PlayerPropMsg element in PlayerPropsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    foreach (global::PlayerPropMsg element in RecentPropsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerPropResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerPropResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerPropResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerPropResponse MakeReadOnly() {
    playerProps_.MakeReadOnly();
    recentProps_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerPropResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerPropResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerPropResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerPropResponse result;
    
    private SCPlayerPropResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerPropResponse original = result;
        result = new SCPlayerPropResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerPropResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerPropResponse.Descriptor; }
    }
    
    public override SCPlayerPropResponse DefaultInstanceForType {
      get { return global::SCPlayerPropResponse.DefaultInstance; }
    }
    
    public override SCPlayerPropResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerPropResponse) {
        return MergeFrom((SCPlayerPropResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerPropResponse other) {
      if (other == global::SCPlayerPropResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasReponseStatus) {
        MergeReponseStatus(other.ReponseStatus);
      }
      if (other.playerProps_.Count != 0) {
        result.playerProps_.Add(other.playerProps_);
      }
      if (other.recentProps_.Count != 0) {
        result.recentProps_.Add(other.recentProps_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerPropResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerPropResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ReponseStatus.Builder subBuilder = global::ReponseStatus.CreateBuilder();
            if (result.hasReponseStatus) {
              subBuilder.MergeFrom(ReponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ReponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.playerProps_, global::PlayerPropMsg.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.recentProps_, global::PlayerPropMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasReponseStatus {
     get { return result.hasReponseStatus; }
    }
    public global::ReponseStatus ReponseStatus {
      get { return result.ReponseStatus; }
      set { SetReponseStatus(value); }
    }
    public Builder SetReponseStatus(global::ReponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = value;
      return this;
    }
    public Builder SetReponseStatus(global::ReponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReponseStatus(global::ReponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReponseStatus &&
          result.reponseStatus_ != global::ReponseStatus.DefaultInstance) {
          result.reponseStatus_ = global::ReponseStatus.CreateBuilder(result.reponseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.reponseStatus_ = value;
      }
      result.hasReponseStatus = true;
      return this;
    }
    public Builder ClearReponseStatus() {
      PrepareBuilder();
      result.hasReponseStatus = false;
      result.reponseStatus_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerPropMsg> PlayerPropsList {
      get { return PrepareBuilder().playerProps_; }
    }
    public int PlayerPropsCount {
      get { return result.PlayerPropsCount; }
    }
    public global::PlayerPropMsg GetPlayerProps(int index) {
      return result.GetPlayerProps(index);
    }
    public Builder SetPlayerProps(int index, global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerProps_[index] = value;
      return this;
    }
    public Builder SetPlayerProps(int index, global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerProps_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayerProps(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerProps_.Add(value);
      return this;
    }
    public Builder AddPlayerProps(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerProps_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayerProps(scg::IEnumerable<global::PlayerPropMsg> values) {
      PrepareBuilder();
      result.playerProps_.Add(values);
      return this;
    }
    public Builder ClearPlayerProps() {
      PrepareBuilder();
      result.playerProps_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerPropMsg> RecentPropsList {
      get { return PrepareBuilder().recentProps_; }
    }
    public int RecentPropsCount {
      get { return result.RecentPropsCount; }
    }
    public global::PlayerPropMsg GetRecentProps(int index) {
      return result.GetRecentProps(index);
    }
    public Builder SetRecentProps(int index, global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.recentProps_[index] = value;
      return this;
    }
    public Builder SetRecentProps(int index, global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.recentProps_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRecentProps(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.recentProps_.Add(value);
      return this;
    }
    public Builder AddRecentProps(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.recentProps_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRecentProps(scg::IEnumerable<global::PlayerPropMsg> values) {
      PrepareBuilder();
      result.recentProps_.Add(values);
      return this;
    }
    public Builder ClearRecentProps() {
      PrepareBuilder();
      result.recentProps_.Clear();
      return this;
    }
  }
  static SCPlayerPropResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerPropRecentRequest : pb::GeneratedMessage<CSPlayerPropRecentRequest, CSPlayerPropRecentRequest.Builder> {
  private CSPlayerPropRecentRequest() { }
  private static readonly CSPlayerPropRecentRequest defaultInstance = new CSPlayerPropRecentRequest().MakeReadOnly();
  private static readonly string[] _cSPlayerPropRecentRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSPlayerPropRecentRequestFieldTags = new uint[] {  };
  public static CSPlayerPropRecentRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerPropRecentRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerPropRecentRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerPropRecentRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerPropRecentRequest, CSPlayerPropRecentRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerPropRecentRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerPropRecentRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerPropRecentRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerPropRecentRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerPropRecentRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerPropRecentRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerPropRecentRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerPropRecentRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerPropRecentRequest result;
    
    private CSPlayerPropRecentRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerPropRecentRequest original = result;
        result = new CSPlayerPropRecentRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerPropRecentRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerPropRecentRequest.Descriptor; }
    }
    
    public override CSPlayerPropRecentRequest DefaultInstanceForType {
      get { return global::CSPlayerPropRecentRequest.DefaultInstance; }
    }
    
    public override CSPlayerPropRecentRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerPropRecentRequest) {
        return MergeFrom((CSPlayerPropRecentRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerPropRecentRequest other) {
      if (other == global::CSPlayerPropRecentRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerPropRecentRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerPropRecentRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSPlayerPropRecentRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerPropRecentResposne : pb::GeneratedMessage<SCPlayerPropRecentResposne, SCPlayerPropRecentResposne.Builder> {
  private SCPlayerPropRecentResposne() { }
  private static readonly SCPlayerPropRecentResposne defaultInstance = new SCPlayerPropRecentResposne().MakeReadOnly();
  private static readonly string[] _sCPlayerPropRecentResposneFieldNames = new string[] { "reponseStatus" };
  private static readonly uint[] _sCPlayerPropRecentResposneFieldTags = new uint[] { 10 };
  public static SCPlayerPropRecentResposne DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerPropRecentResposne DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerPropRecentResposne ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerPropRecentResposne__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerPropRecentResposne, SCPlayerPropRecentResposne.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerPropRecentResposne__FieldAccessorTable; }
  }
  
  public const int ReponseStatusFieldNumber = 1;
  private bool hasReponseStatus;
  private global::ReponseStatus reponseStatus_;
  public bool HasReponseStatus {
    get { return hasReponseStatus; }
  }
  public global::ReponseStatus ReponseStatus {
    get { return reponseStatus_ ?? global::ReponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerPropRecentResposneFieldNames;
    if (hasReponseStatus) {
      output.WriteMessage(1, field_names[0], ReponseStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasReponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ReponseStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerPropRecentResposne ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerPropRecentResposne ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerPropRecentResposne MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerPropRecentResposne prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerPropRecentResposne, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerPropRecentResposne cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerPropRecentResposne result;
    
    private SCPlayerPropRecentResposne PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerPropRecentResposne original = result;
        result = new SCPlayerPropRecentResposne();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerPropRecentResposne MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerPropRecentResposne.Descriptor; }
    }
    
    public override SCPlayerPropRecentResposne DefaultInstanceForType {
      get { return global::SCPlayerPropRecentResposne.DefaultInstance; }
    }
    
    public override SCPlayerPropRecentResposne BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerPropRecentResposne) {
        return MergeFrom((SCPlayerPropRecentResposne) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerPropRecentResposne other) {
      if (other == global::SCPlayerPropRecentResposne.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasReponseStatus) {
        MergeReponseStatus(other.ReponseStatus);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerPropRecentResposneFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerPropRecentResposneFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ReponseStatus.Builder subBuilder = global::ReponseStatus.CreateBuilder();
            if (result.hasReponseStatus) {
              subBuilder.MergeFrom(ReponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ReponseStatus = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasReponseStatus {
     get { return result.hasReponseStatus; }
    }
    public global::ReponseStatus ReponseStatus {
      get { return result.ReponseStatus; }
      set { SetReponseStatus(value); }
    }
    public Builder SetReponseStatus(global::ReponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = value;
      return this;
    }
    public Builder SetReponseStatus(global::ReponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReponseStatus(global::ReponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReponseStatus &&
          result.reponseStatus_ != global::ReponseStatus.DefaultInstance) {
          result.reponseStatus_ = global::ReponseStatus.CreateBuilder(result.reponseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.reponseStatus_ = value;
      }
      result.hasReponseStatus = true;
      return this;
    }
    public Builder ClearReponseStatus() {
      PrepareBuilder();
      result.hasReponseStatus = false;
      result.reponseStatus_ = null;
      return this;
    }
  }
  static SCPlayerPropRecentResposne() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ReponseStatus : pb::GeneratedMessage<ReponseStatus, ReponseStatus.Builder> {
  private ReponseStatus() { }
  private static readonly ReponseStatus defaultInstance = new ReponseStatus().MakeReadOnly();
  private static readonly string[] _reponseStatusFieldNames = new string[] { "code", "msg" };
  private static readonly uint[] _reponseStatusFieldTags = new uint[] { 8, 18 };
  public static ReponseStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ReponseStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ReponseStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ReponseStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ReponseStatus, ReponseStatus.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ReponseStatus__FieldAccessorTable; }
  }
  
  public const int CodeFieldNumber = 1;
  private bool hasCode;
  private int code_;
  public bool HasCode {
    get { return hasCode; }
  }
  public int Code {
    get { return code_; }
  }
  
  public const int MsgFieldNumber = 2;
  private bool hasMsg;
  private string msg_ = "";
  public bool HasMsg {
    get { return hasMsg; }
  }
  public string Msg {
    get { return msg_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _reponseStatusFieldNames;
    if (hasCode) {
      output.WriteInt32(1, field_names[0], Code);
    }
    if (hasMsg) {
      output.WriteString(2, field_names[1], Msg);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCode) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Code);
    }
    if (hasMsg) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Msg);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ReponseStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReponseStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReponseStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ReponseStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ReponseStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReponseStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ReponseStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ReponseStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ReponseStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ReponseStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ReponseStatus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ReponseStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ReponseStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ReponseStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ReponseStatus result;
    
    private ReponseStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        ReponseStatus original = result;
        result = new ReponseStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ReponseStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ReponseStatus.Descriptor; }
    }
    
    public override ReponseStatus DefaultInstanceForType {
      get { return global::ReponseStatus.DefaultInstance; }
    }
    
    public override ReponseStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ReponseStatus) {
        return MergeFrom((ReponseStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ReponseStatus other) {
      if (other == global::ReponseStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCode) {
        Code = other.Code;
      }
      if (other.HasMsg) {
        Msg = other.Msg;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_reponseStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _reponseStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCode = input.ReadInt32(ref result.code_);
            break;
          }
          case 18: {
            result.hasMsg = input.ReadString(ref result.msg_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCode {
      get { return result.hasCode; }
    }
    public int Code {
      get { return result.Code; }
      set { SetCode(value); }
    }
    public Builder SetCode(int value) {
      PrepareBuilder();
      result.hasCode = true;
      result.code_ = value;
      return this;
    }
    public Builder ClearCode() {
      PrepareBuilder();
      result.hasCode = false;
      result.code_ = 0;
      return this;
    }
    
    public bool HasMsg {
      get { return result.hasMsg; }
    }
    public string Msg {
      get { return result.Msg; }
      set { SetMsg(value); }
    }
    public Builder SetMsg(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMsg = true;
      result.msg_ = value;
      return this;
    }
    public Builder ClearMsg() {
      PrepareBuilder();
      result.hasMsg = false;
      result.msg_ = "";
      return this;
    }
  }
  static ReponseStatus() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerInfoRequest : pb::GeneratedMessage<CSPlayerInfoRequest, CSPlayerInfoRequest.Builder> {
  private CSPlayerInfoRequest() { }
  private static readonly CSPlayerInfoRequest defaultInstance = new CSPlayerInfoRequest().MakeReadOnly();
  private static readonly string[] _cSPlayerInfoRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSPlayerInfoRequestFieldTags = new uint[] { 8 };
  public static CSPlayerInfoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerInfoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerInfoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerInfoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerInfoRequest, CSPlayerInfoRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerInfoRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerInfoRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerInfoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerInfoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerInfoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerInfoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerInfoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerInfoRequest result;
    
    private CSPlayerInfoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerInfoRequest original = result;
        result = new CSPlayerInfoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerInfoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerInfoRequest.Descriptor; }
    }
    
    public override CSPlayerInfoRequest DefaultInstanceForType {
      get { return global::CSPlayerInfoRequest.DefaultInstance; }
    }
    
    public override CSPlayerInfoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerInfoRequest) {
        return MergeFrom((CSPlayerInfoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerInfoRequest other) {
      if (other == global::CSPlayerInfoRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerInfoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSPlayerInfoRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerInfoResponse : pb::GeneratedMessage<SCPlayerInfoResponse, SCPlayerInfoResponse.Builder> {
  private SCPlayerInfoResponse() { }
  private static readonly SCPlayerInfoResponse defaultInstance = new SCPlayerInfoResponse().MakeReadOnly();
  private static readonly string[] _sCPlayerInfoResponseFieldNames = new string[] { "cash", "coin", "exp", "expMultiple", "hasRenamed", "infiniteVitRestTime", "laborUnion", "lastAddVitTime", "level", "millisRecoverOneVit", "playerIcon", "playerId", "playerName", "upgradeExp", "vit" };
  private static readonly uint[] _sCPlayerInfoResponseFieldTags = new uint[] { 40, 32, 64, 93, 112, 120, 72, 96, 56, 104, 26, 8, 18, 80, 48 };
  public static SCPlayerInfoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerInfoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerInfoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerInfoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerInfoResponse, SCPlayerInfoResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerInfoResponse__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int PlayerNameFieldNumber = 2;
  private bool hasPlayerName;
  private string playerName_ = "";
  public bool HasPlayerName {
    get { return hasPlayerName; }
  }
  public string PlayerName {
    get { return playerName_; }
  }
  
  public const int PlayerIconFieldNumber = 3;
  private bool hasPlayerIcon;
  private string playerIcon_ = "";
  public bool HasPlayerIcon {
    get { return hasPlayerIcon; }
  }
  public string PlayerIcon {
    get { return playerIcon_; }
  }
  
  public const int CoinFieldNumber = 4;
  private bool hasCoin;
  private int coin_;
  public bool HasCoin {
    get { return hasCoin; }
  }
  public int Coin {
    get { return coin_; }
  }
  
  public const int CashFieldNumber = 5;
  private bool hasCash;
  private int cash_;
  public bool HasCash {
    get { return hasCash; }
  }
  public int Cash {
    get { return cash_; }
  }
  
  public const int VitFieldNumber = 6;
  private bool hasVit;
  private int vit_;
  public bool HasVit {
    get { return hasVit; }
  }
  public int Vit {
    get { return vit_; }
  }
  
  public const int LevelFieldNumber = 7;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int ExpFieldNumber = 8;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int LaborUnionFieldNumber = 9;
  private bool hasLaborUnion;
  private int laborUnion_;
  public bool HasLaborUnion {
    get { return hasLaborUnion; }
  }
  public int LaborUnion {
    get { return laborUnion_; }
  }
  
  public const int UpgradeExpFieldNumber = 10;
  private bool hasUpgradeExp;
  private int upgradeExp_;
  public bool HasUpgradeExp {
    get { return hasUpgradeExp; }
  }
  public int UpgradeExp {
    get { return upgradeExp_; }
  }
  
  public const int ExpMultipleFieldNumber = 11;
  private bool hasExpMultiple;
  private float expMultiple_;
  public bool HasExpMultiple {
    get { return hasExpMultiple; }
  }
  public float ExpMultiple {
    get { return expMultiple_; }
  }
  
  public const int LastAddVitTimeFieldNumber = 12;
  private bool hasLastAddVitTime;
  private long lastAddVitTime_;
  public bool HasLastAddVitTime {
    get { return hasLastAddVitTime; }
  }
  public long LastAddVitTime {
    get { return lastAddVitTime_; }
  }
  
  public const int MillisRecoverOneVitFieldNumber = 13;
  private bool hasMillisRecoverOneVit;
  private long millisRecoverOneVit_;
  public bool HasMillisRecoverOneVit {
    get { return hasMillisRecoverOneVit; }
  }
  public long MillisRecoverOneVit {
    get { return millisRecoverOneVit_; }
  }
  
  public const int HasRenamedFieldNumber = 14;
  private bool hasHasRenamed;
  private int hasRenamed_;
  public bool HasHasRenamed {
    get { return hasHasRenamed; }
  }
  public int HasRenamed {
    get { return hasRenamed_; }
  }
  
  public const int InfiniteVitRestTimeFieldNumber = 15;
  private bool hasInfiniteVitRestTime;
  private long infiniteVitRestTime_;
  public bool HasInfiniteVitRestTime {
    get { return hasInfiniteVitRestTime; }
  }
  public long InfiniteVitRestTime {
    get { return infiniteVitRestTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerInfoResponseFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[11], PlayerId);
    }
    if (hasPlayerName) {
      output.WriteString(2, field_names[12], PlayerName);
    }
    if (hasPlayerIcon) {
      output.WriteString(3, field_names[10], PlayerIcon);
    }
    if (hasCoin) {
      output.WriteInt32(4, field_names[1], Coin);
    }
    if (hasCash) {
      output.WriteInt32(5, field_names[0], Cash);
    }
    if (hasVit) {
      output.WriteInt32(6, field_names[14], Vit);
    }
    if (hasLevel) {
      output.WriteInt32(7, field_names[8], Level);
    }
    if (hasExp) {
      output.WriteInt32(8, field_names[2], Exp);
    }
    if (hasLaborUnion) {
      output.WriteInt32(9, field_names[6], LaborUnion);
    }
    if (hasUpgradeExp) {
      output.WriteInt32(10, field_names[13], UpgradeExp);
    }
    if (hasExpMultiple) {
      output.WriteFloat(11, field_names[3], ExpMultiple);
    }
    if (hasLastAddVitTime) {
      output.WriteInt64(12, field_names[7], LastAddVitTime);
    }
    if (hasMillisRecoverOneVit) {
      output.WriteInt64(13, field_names[9], MillisRecoverOneVit);
    }
    if (hasHasRenamed) {
      output.WriteInt32(14, field_names[4], HasRenamed);
    }
    if (hasInfiniteVitRestTime) {
      output.WriteInt64(15, field_names[5], InfiniteVitRestTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasPlayerName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, PlayerName);
    }
    if (hasPlayerIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(3, PlayerIcon);
    }
    if (hasCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Coin);
    }
    if (hasCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Cash);
    }
    if (hasVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Vit);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Level);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Exp);
    }
    if (hasLaborUnion) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, LaborUnion);
    }
    if (hasUpgradeExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(10, UpgradeExp);
    }
    if (hasExpMultiple) {
      size += pb::CodedOutputStream.ComputeFloatSize(11, ExpMultiple);
    }
    if (hasLastAddVitTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(12, LastAddVitTime);
    }
    if (hasMillisRecoverOneVit) {
      size += pb::CodedOutputStream.ComputeInt64Size(13, MillisRecoverOneVit);
    }
    if (hasHasRenamed) {
      size += pb::CodedOutputStream.ComputeInt32Size(14, HasRenamed);
    }
    if (hasInfiniteVitRestTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(15, InfiniteVitRestTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerInfoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerInfoResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerInfoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerInfoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerInfoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerInfoResponse result;
    
    private SCPlayerInfoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerInfoResponse original = result;
        result = new SCPlayerInfoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerInfoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerInfoResponse.Descriptor; }
    }
    
    public override SCPlayerInfoResponse DefaultInstanceForType {
      get { return global::SCPlayerInfoResponse.DefaultInstance; }
    }
    
    public override SCPlayerInfoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerInfoResponse) {
        return MergeFrom((SCPlayerInfoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerInfoResponse other) {
      if (other == global::SCPlayerInfoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPlayerName) {
        PlayerName = other.PlayerName;
      }
      if (other.HasPlayerIcon) {
        PlayerIcon = other.PlayerIcon;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasVit) {
        Vit = other.Vit;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasLaborUnion) {
        LaborUnion = other.LaborUnion;
      }
      if (other.HasUpgradeExp) {
        UpgradeExp = other.UpgradeExp;
      }
      if (other.HasExpMultiple) {
        ExpMultiple = other.ExpMultiple;
      }
      if (other.HasLastAddVitTime) {
        LastAddVitTime = other.LastAddVitTime;
      }
      if (other.HasMillisRecoverOneVit) {
        MillisRecoverOneVit = other.MillisRecoverOneVit;
      }
      if (other.HasHasRenamed) {
        HasRenamed = other.HasRenamed;
      }
      if (other.HasInfiniteVitRestTime) {
        InfiniteVitRestTime = other.InfiniteVitRestTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerInfoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 18: {
            result.hasPlayerName = input.ReadString(ref result.playerName_);
            break;
          }
          case 26: {
            result.hasPlayerIcon = input.ReadString(ref result.playerIcon_);
            break;
          }
          case 32: {
            result.hasCoin = input.ReadInt32(ref result.coin_);
            break;
          }
          case 40: {
            result.hasCash = input.ReadInt32(ref result.cash_);
            break;
          }
          case 48: {
            result.hasVit = input.ReadInt32(ref result.vit_);
            break;
          }
          case 56: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 64: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
          case 72: {
            result.hasLaborUnion = input.ReadInt32(ref result.laborUnion_);
            break;
          }
          case 80: {
            result.hasUpgradeExp = input.ReadInt32(ref result.upgradeExp_);
            break;
          }
          case 93: {
            result.hasExpMultiple = input.ReadFloat(ref result.expMultiple_);
            break;
          }
          case 96: {
            result.hasLastAddVitTime = input.ReadInt64(ref result.lastAddVitTime_);
            break;
          }
          case 104: {
            result.hasMillisRecoverOneVit = input.ReadInt64(ref result.millisRecoverOneVit_);
            break;
          }
          case 112: {
            result.hasHasRenamed = input.ReadInt32(ref result.hasRenamed_);
            break;
          }
          case 120: {
            result.hasInfiniteVitRestTime = input.ReadInt64(ref result.infiniteVitRestTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasPlayerName {
      get { return result.hasPlayerName; }
    }
    public string PlayerName {
      get { return result.PlayerName; }
      set { SetPlayerName(value); }
    }
    public Builder SetPlayerName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerName = true;
      result.playerName_ = value;
      return this;
    }
    public Builder ClearPlayerName() {
      PrepareBuilder();
      result.hasPlayerName = false;
      result.playerName_ = "";
      return this;
    }
    
    public bool HasPlayerIcon {
      get { return result.hasPlayerIcon; }
    }
    public string PlayerIcon {
      get { return result.PlayerIcon; }
      set { SetPlayerIcon(value); }
    }
    public Builder SetPlayerIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerIcon = true;
      result.playerIcon_ = value;
      return this;
    }
    public Builder ClearPlayerIcon() {
      PrepareBuilder();
      result.hasPlayerIcon = false;
      result.playerIcon_ = "";
      return this;
    }
    
    public bool HasCoin {
      get { return result.hasCoin; }
    }
    public int Coin {
      get { return result.Coin; }
      set { SetCoin(value); }
    }
    public Builder SetCoin(int value) {
      PrepareBuilder();
      result.hasCoin = true;
      result.coin_ = value;
      return this;
    }
    public Builder ClearCoin() {
      PrepareBuilder();
      result.hasCoin = false;
      result.coin_ = 0;
      return this;
    }
    
    public bool HasCash {
      get { return result.hasCash; }
    }
    public int Cash {
      get { return result.Cash; }
      set { SetCash(value); }
    }
    public Builder SetCash(int value) {
      PrepareBuilder();
      result.hasCash = true;
      result.cash_ = value;
      return this;
    }
    public Builder ClearCash() {
      PrepareBuilder();
      result.hasCash = false;
      result.cash_ = 0;
      return this;
    }
    
    public bool HasVit {
      get { return result.hasVit; }
    }
    public int Vit {
      get { return result.Vit; }
      set { SetVit(value); }
    }
    public Builder SetVit(int value) {
      PrepareBuilder();
      result.hasVit = true;
      result.vit_ = value;
      return this;
    }
    public Builder ClearVit() {
      PrepareBuilder();
      result.hasVit = false;
      result.vit_ = 0;
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasLaborUnion {
      get { return result.hasLaborUnion; }
    }
    public int LaborUnion {
      get { return result.LaborUnion; }
      set { SetLaborUnion(value); }
    }
    public Builder SetLaborUnion(int value) {
      PrepareBuilder();
      result.hasLaborUnion = true;
      result.laborUnion_ = value;
      return this;
    }
    public Builder ClearLaborUnion() {
      PrepareBuilder();
      result.hasLaborUnion = false;
      result.laborUnion_ = 0;
      return this;
    }
    
    public bool HasUpgradeExp {
      get { return result.hasUpgradeExp; }
    }
    public int UpgradeExp {
      get { return result.UpgradeExp; }
      set { SetUpgradeExp(value); }
    }
    public Builder SetUpgradeExp(int value) {
      PrepareBuilder();
      result.hasUpgradeExp = true;
      result.upgradeExp_ = value;
      return this;
    }
    public Builder ClearUpgradeExp() {
      PrepareBuilder();
      result.hasUpgradeExp = false;
      result.upgradeExp_ = 0;
      return this;
    }
    
    public bool HasExpMultiple {
      get { return result.hasExpMultiple; }
    }
    public float ExpMultiple {
      get { return result.ExpMultiple; }
      set { SetExpMultiple(value); }
    }
    public Builder SetExpMultiple(float value) {
      PrepareBuilder();
      result.hasExpMultiple = true;
      result.expMultiple_ = value;
      return this;
    }
    public Builder ClearExpMultiple() {
      PrepareBuilder();
      result.hasExpMultiple = false;
      result.expMultiple_ = 0F;
      return this;
    }
    
    public bool HasLastAddVitTime {
      get { return result.hasLastAddVitTime; }
    }
    public long LastAddVitTime {
      get { return result.LastAddVitTime; }
      set { SetLastAddVitTime(value); }
    }
    public Builder SetLastAddVitTime(long value) {
      PrepareBuilder();
      result.hasLastAddVitTime = true;
      result.lastAddVitTime_ = value;
      return this;
    }
    public Builder ClearLastAddVitTime() {
      PrepareBuilder();
      result.hasLastAddVitTime = false;
      result.lastAddVitTime_ = 0L;
      return this;
    }
    
    public bool HasMillisRecoverOneVit {
      get { return result.hasMillisRecoverOneVit; }
    }
    public long MillisRecoverOneVit {
      get { return result.MillisRecoverOneVit; }
      set { SetMillisRecoverOneVit(value); }
    }
    public Builder SetMillisRecoverOneVit(long value) {
      PrepareBuilder();
      result.hasMillisRecoverOneVit = true;
      result.millisRecoverOneVit_ = value;
      return this;
    }
    public Builder ClearMillisRecoverOneVit() {
      PrepareBuilder();
      result.hasMillisRecoverOneVit = false;
      result.millisRecoverOneVit_ = 0L;
      return this;
    }
    
    public bool HasHasRenamed {
      get { return result.hasHasRenamed; }
    }
    public int HasRenamed {
      get { return result.HasRenamed; }
      set { SetHasRenamed(value); }
    }
    public Builder SetHasRenamed(int value) {
      PrepareBuilder();
      result.hasHasRenamed = true;
      result.hasRenamed_ = value;
      return this;
    }
    public Builder ClearHasRenamed() {
      PrepareBuilder();
      result.hasHasRenamed = false;
      result.hasRenamed_ = 0;
      return this;
    }
    
    public bool HasInfiniteVitRestTime {
      get { return result.hasInfiniteVitRestTime; }
    }
    public long InfiniteVitRestTime {
      get { return result.InfiniteVitRestTime; }
      set { SetInfiniteVitRestTime(value); }
    }
    public Builder SetInfiniteVitRestTime(long value) {
      PrepareBuilder();
      result.hasInfiniteVitRestTime = true;
      result.infiniteVitRestTime_ = value;
      return this;
    }
    public Builder ClearInfiniteVitRestTime() {
      PrepareBuilder();
      result.hasInfiniteVitRestTime = false;
      result.infiniteVitRestTime_ = 0L;
      return this;
    }
  }
  static SCPlayerInfoResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRenameRequest : pb::GeneratedMessage<CSRenameRequest, CSRenameRequest.Builder> {
  private CSRenameRequest() { }
  private static readonly CSRenameRequest defaultInstance = new CSRenameRequest().MakeReadOnly();
  private static readonly string[] _cSRenameRequestFieldNames = new string[] { "newName", "playerId" };
  private static readonly uint[] _cSRenameRequestFieldTags = new uint[] { 18, 8 };
  public static CSRenameRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRenameRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRenameRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSRenameRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRenameRequest, CSRenameRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSRenameRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int NewNameFieldNumber = 2;
  private bool hasNewName;
  private string newName_ = "";
  public bool HasNewName {
    get { return hasNewName; }
  }
  public string NewName {
    get { return newName_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRenameRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasNewName) {
      output.WriteString(2, field_names[0], NewName);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasNewName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, NewName);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRenameRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRenameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRenameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRenameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRenameRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRenameRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRenameRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRenameRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRenameRequest result;
    
    private CSRenameRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRenameRequest original = result;
        result = new CSRenameRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRenameRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRenameRequest.Descriptor; }
    }
    
    public override CSRenameRequest DefaultInstanceForType {
      get { return global::CSRenameRequest.DefaultInstance; }
    }
    
    public override CSRenameRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRenameRequest) {
        return MergeFrom((CSRenameRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRenameRequest other) {
      if (other == global::CSRenameRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasNewName) {
        NewName = other.NewName;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRenameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRenameRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 18: {
            result.hasNewName = input.ReadString(ref result.newName_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasNewName {
      get { return result.hasNewName; }
    }
    public string NewName {
      get { return result.NewName; }
      set { SetNewName(value); }
    }
    public Builder SetNewName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNewName = true;
      result.newName_ = value;
      return this;
    }
    public Builder ClearNewName() {
      PrepareBuilder();
      result.hasNewName = false;
      result.newName_ = "";
      return this;
    }
  }
  static CSRenameRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRenameResponse : pb::GeneratedMessage<SCRenameResponse, SCRenameResponse.Builder> {
  private SCRenameResponse() { }
  private static readonly SCRenameResponse defaultInstance = new SCRenameResponse().MakeReadOnly();
  private static readonly string[] _sCRenameResponseFieldNames = new string[] { "newName", "playerId", "result" };
  private static readonly uint[] _sCRenameResponseFieldTags = new uint[] { 26, 8, 16 };
  public static SCRenameResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRenameResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRenameResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCRenameResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRenameResponse, SCRenameResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCRenameResponse__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int ResultFieldNumber = 2;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int NewNameFieldNumber = 3;
  private bool hasNewName;
  private string newName_ = "";
  public bool HasNewName {
    get { return hasNewName; }
  }
  public string NewName {
    get { return newName_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRenameResponseFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasResult) {
      output.WriteInt32(2, field_names[2], Result);
    }
    if (hasNewName) {
      output.WriteString(3, field_names[0], NewName);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Result);
    }
    if (hasNewName) {
      size += pb::CodedOutputStream.ComputeStringSize(3, NewName);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRenameResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRenameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRenameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRenameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRenameResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRenameResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRenameResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRenameResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRenameResponse result;
    
    private SCRenameResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRenameResponse original = result;
        result = new SCRenameResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRenameResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRenameResponse.Descriptor; }
    }
    
    public override SCRenameResponse DefaultInstanceForType {
      get { return global::SCRenameResponse.DefaultInstance; }
    }
    
    public override SCRenameResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRenameResponse) {
        return MergeFrom((SCRenameResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRenameResponse other) {
      if (other == global::SCRenameResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasNewName) {
        NewName = other.NewName;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRenameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRenameResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 26: {
            result.hasNewName = input.ReadString(ref result.newName_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasNewName {
      get { return result.hasNewName; }
    }
    public string NewName {
      get { return result.NewName; }
      set { SetNewName(value); }
    }
    public Builder SetNewName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNewName = true;
      result.newName_ = value;
      return this;
    }
    public Builder ClearNewName() {
      PrepareBuilder();
      result.hasNewName = false;
      result.newName_ = "";
      return this;
    }
  }
  static SCRenameResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOfficerListRequest : pb::GeneratedMessage<CSOfficerListRequest, CSOfficerListRequest.Builder> {
  private CSOfficerListRequest() { }
  private static readonly CSOfficerListRequest defaultInstance = new CSOfficerListRequest().MakeReadOnly();
  private static readonly string[] _cSOfficerListRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSOfficerListRequestFieldTags = new uint[] { 8 };
  public static CSOfficerListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOfficerListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOfficerListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSOfficerListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOfficerListRequest, CSOfficerListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSOfficerListRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOfficerListRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOfficerListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOfficerListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOfficerListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOfficerListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOfficerListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOfficerListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOfficerListRequest result;
    
    private CSOfficerListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOfficerListRequest original = result;
        result = new CSOfficerListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOfficerListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOfficerListRequest.Descriptor; }
    }
    
    public override CSOfficerListRequest DefaultInstanceForType {
      get { return global::CSOfficerListRequest.DefaultInstance; }
    }
    
    public override CSOfficerListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOfficerListRequest) {
        return MergeFrom((CSOfficerListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOfficerListRequest other) {
      if (other == global::CSOfficerListRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOfficerListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOfficerListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSOfficerListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOfficerListResponse : pb::GeneratedMessage<SCOfficerListResponse, SCOfficerListResponse.Builder> {
  private SCOfficerListResponse() { }
  private static readonly SCOfficerListResponse defaultInstance = new SCOfficerListResponse().MakeReadOnly();
  private static readonly string[] _sCOfficerListResponseFieldNames = new string[] { "officers", "playerId" };
  private static readonly uint[] _sCOfficerListResponseFieldTags = new uint[] { 18, 8 };
  public static SCOfficerListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOfficerListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOfficerListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCOfficerListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOfficerListResponse, SCOfficerListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCOfficerListResponse__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int OfficersFieldNumber = 2;
  private pbc::PopsicleList<global::OfficerInfo> officers_ = new pbc::PopsicleList<global::OfficerInfo>();
  public scg::IList<global::OfficerInfo> OfficersList {
    get { return officers_; }
  }
  public int OfficersCount {
    get { return officers_.Count; }
  }
  public global::OfficerInfo GetOfficers(int index) {
    return officers_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOfficerListResponseFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (officers_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], officers_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    foreach (global::OfficerInfo element in OfficersList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOfficerListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOfficerListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOfficerListResponse MakeReadOnly() {
    officers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOfficerListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOfficerListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOfficerListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOfficerListResponse result;
    
    private SCOfficerListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOfficerListResponse original = result;
        result = new SCOfficerListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOfficerListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOfficerListResponse.Descriptor; }
    }
    
    public override SCOfficerListResponse DefaultInstanceForType {
      get { return global::SCOfficerListResponse.DefaultInstance; }
    }
    
    public override SCOfficerListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOfficerListResponse) {
        return MergeFrom((SCOfficerListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOfficerListResponse other) {
      if (other == global::SCOfficerListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.officers_.Count != 0) {
        result.officers_.Add(other.officers_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOfficerListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOfficerListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.officers_, global::OfficerInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::OfficerInfo> OfficersList {
      get { return PrepareBuilder().officers_; }
    }
    public int OfficersCount {
      get { return result.OfficersCount; }
    }
    public global::OfficerInfo GetOfficers(int index) {
      return result.GetOfficers(index);
    }
    public Builder SetOfficers(int index, global::OfficerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.officers_[index] = value;
      return this;
    }
    public Builder SetOfficers(int index, global::OfficerInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.officers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddOfficers(global::OfficerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.officers_.Add(value);
      return this;
    }
    public Builder AddOfficers(global::OfficerInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.officers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeOfficers(scg::IEnumerable<global::OfficerInfo> values) {
      PrepareBuilder();
      result.officers_.Add(values);
      return this;
    }
    public Builder ClearOfficers() {
      PrepareBuilder();
      result.officers_.Clear();
      return this;
    }
  }
  static SCOfficerListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class OfficerInfo : pb::GeneratedMessage<OfficerInfo, OfficerInfo.Builder> {
  private OfficerInfo() { }
  private static readonly OfficerInfo defaultInstance = new OfficerInfo().MakeReadOnly();
  private static readonly string[] _officerInfoFieldNames = new string[] { "attention", "level", "memory", "officerId", "outsight", "playerOfficerId", "secondGain", "vitConsume", "willPower" };
  private static readonly uint[] _officerInfoFieldTags = new uint[] { 48, 24, 56, 16, 32, 8, 72, 64, 40 };
  public static OfficerInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override OfficerInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override OfficerInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_OfficerInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<OfficerInfo, OfficerInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_OfficerInfo__FieldAccessorTable; }
  }
  
  public const int PlayerOfficerIdFieldNumber = 1;
  private bool hasPlayerOfficerId;
  private long playerOfficerId_;
  public bool HasPlayerOfficerId {
    get { return hasPlayerOfficerId; }
  }
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
  }
  
  public const int OfficerIdFieldNumber = 2;
  private bool hasOfficerId;
  private long officerId_;
  public bool HasOfficerId {
    get { return hasOfficerId; }
  }
  public long OfficerId {
    get { return officerId_; }
  }
  
  public const int LevelFieldNumber = 3;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int OutsightFieldNumber = 4;
  private bool hasOutsight;
  private int outsight_;
  public bool HasOutsight {
    get { return hasOutsight; }
  }
  public int Outsight {
    get { return outsight_; }
  }
  
  public const int WillPowerFieldNumber = 5;
  private bool hasWillPower;
  private int willPower_;
  public bool HasWillPower {
    get { return hasWillPower; }
  }
  public int WillPower {
    get { return willPower_; }
  }
  
  public const int AttentionFieldNumber = 6;
  private bool hasAttention;
  private int attention_;
  public bool HasAttention {
    get { return hasAttention; }
  }
  public int Attention {
    get { return attention_; }
  }
  
  public const int MemoryFieldNumber = 7;
  private bool hasMemory;
  private int memory_;
  public bool HasMemory {
    get { return hasMemory; }
  }
  public int Memory {
    get { return memory_; }
  }
  
  public const int VitConsumeFieldNumber = 8;
  private bool hasVitConsume;
  private int vitConsume_;
  public bool HasVitConsume {
    get { return hasVitConsume; }
  }
  public int VitConsume {
    get { return vitConsume_; }
  }
  
  public const int SecondGainFieldNumber = 9;
  private bool hasSecondGain;
  private int secondGain_;
  public bool HasSecondGain {
    get { return hasSecondGain; }
  }
  public int SecondGain {
    get { return secondGain_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _officerInfoFieldNames;
    if (hasPlayerOfficerId) {
      output.WriteInt64(1, field_names[5], PlayerOfficerId);
    }
    if (hasOfficerId) {
      output.WriteInt64(2, field_names[3], OfficerId);
    }
    if (hasLevel) {
      output.WriteInt32(3, field_names[1], Level);
    }
    if (hasOutsight) {
      output.WriteInt32(4, field_names[4], Outsight);
    }
    if (hasWillPower) {
      output.WriteInt32(5, field_names[8], WillPower);
    }
    if (hasAttention) {
      output.WriteInt32(6, field_names[0], Attention);
    }
    if (hasMemory) {
      output.WriteInt32(7, field_names[2], Memory);
    }
    if (hasVitConsume) {
      output.WriteInt32(8, field_names[7], VitConsume);
    }
    if (hasSecondGain) {
      output.WriteInt32(9, field_names[6], SecondGain);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerOfficerId);
    }
    if (hasOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, OfficerId);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
    }
    if (hasOutsight) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Outsight);
    }
    if (hasWillPower) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, WillPower);
    }
    if (hasAttention) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Attention);
    }
    if (hasMemory) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Memory);
    }
    if (hasVitConsume) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, VitConsume);
    }
    if (hasSecondGain) {
      size += pb::CodedOutputStream.ComputeInt32Size(9, SecondGain);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static OfficerInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OfficerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OfficerInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OfficerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OfficerInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OfficerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static OfficerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static OfficerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static OfficerInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OfficerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private OfficerInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(OfficerInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<OfficerInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(OfficerInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private OfficerInfo result;
    
    private OfficerInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        OfficerInfo original = result;
        result = new OfficerInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override OfficerInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::OfficerInfo.Descriptor; }
    }
    
    public override OfficerInfo DefaultInstanceForType {
      get { return global::OfficerInfo.DefaultInstance; }
    }
    
    public override OfficerInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is OfficerInfo) {
        return MergeFrom((OfficerInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(OfficerInfo other) {
      if (other == global::OfficerInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerOfficerId) {
        PlayerOfficerId = other.PlayerOfficerId;
      }
      if (other.HasOfficerId) {
        OfficerId = other.OfficerId;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasOutsight) {
        Outsight = other.Outsight;
      }
      if (other.HasWillPower) {
        WillPower = other.WillPower;
      }
      if (other.HasAttention) {
        Attention = other.Attention;
      }
      if (other.HasMemory) {
        Memory = other.Memory;
      }
      if (other.HasVitConsume) {
        VitConsume = other.VitConsume;
      }
      if (other.HasSecondGain) {
        SecondGain = other.SecondGain;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_officerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _officerInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerOfficerId = input.ReadInt64(ref result.playerOfficerId_);
            break;
          }
          case 16: {
            result.hasOfficerId = input.ReadInt64(ref result.officerId_);
            break;
          }
          case 24: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 32: {
            result.hasOutsight = input.ReadInt32(ref result.outsight_);
            break;
          }
          case 40: {
            result.hasWillPower = input.ReadInt32(ref result.willPower_);
            break;
          }
          case 48: {
            result.hasAttention = input.ReadInt32(ref result.attention_);
            break;
          }
          case 56: {
            result.hasMemory = input.ReadInt32(ref result.memory_);
            break;
          }
          case 64: {
            result.hasVitConsume = input.ReadInt32(ref result.vitConsume_);
            break;
          }
          case 72: {
            result.hasSecondGain = input.ReadInt32(ref result.secondGain_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerOfficerId {
      get { return result.hasPlayerOfficerId; }
    }
    public long PlayerOfficerId {
      get { return result.PlayerOfficerId; }
      set { SetPlayerOfficerId(value); }
    }
    public Builder SetPlayerOfficerId(long value) {
      PrepareBuilder();
      result.hasPlayerOfficerId = true;
      result.playerOfficerId_ = value;
      return this;
    }
    public Builder ClearPlayerOfficerId() {
      PrepareBuilder();
      result.hasPlayerOfficerId = false;
      result.playerOfficerId_ = 0L;
      return this;
    }
    
    public bool HasOfficerId {
      get { return result.hasOfficerId; }
    }
    public long OfficerId {
      get { return result.OfficerId; }
      set { SetOfficerId(value); }
    }
    public Builder SetOfficerId(long value) {
      PrepareBuilder();
      result.hasOfficerId = true;
      result.officerId_ = value;
      return this;
    }
    public Builder ClearOfficerId() {
      PrepareBuilder();
      result.hasOfficerId = false;
      result.officerId_ = 0L;
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasOutsight {
      get { return result.hasOutsight; }
    }
    public int Outsight {
      get { return result.Outsight; }
      set { SetOutsight(value); }
    }
    public Builder SetOutsight(int value) {
      PrepareBuilder();
      result.hasOutsight = true;
      result.outsight_ = value;
      return this;
    }
    public Builder ClearOutsight() {
      PrepareBuilder();
      result.hasOutsight = false;
      result.outsight_ = 0;
      return this;
    }
    
    public bool HasWillPower {
      get { return result.hasWillPower; }
    }
    public int WillPower {
      get { return result.WillPower; }
      set { SetWillPower(value); }
    }
    public Builder SetWillPower(int value) {
      PrepareBuilder();
      result.hasWillPower = true;
      result.willPower_ = value;
      return this;
    }
    public Builder ClearWillPower() {
      PrepareBuilder();
      result.hasWillPower = false;
      result.willPower_ = 0;
      return this;
    }
    
    public bool HasAttention {
      get { return result.hasAttention; }
    }
    public int Attention {
      get { return result.Attention; }
      set { SetAttention(value); }
    }
    public Builder SetAttention(int value) {
      PrepareBuilder();
      result.hasAttention = true;
      result.attention_ = value;
      return this;
    }
    public Builder ClearAttention() {
      PrepareBuilder();
      result.hasAttention = false;
      result.attention_ = 0;
      return this;
    }
    
    public bool HasMemory {
      get { return result.hasMemory; }
    }
    public int Memory {
      get { return result.Memory; }
      set { SetMemory(value); }
    }
    public Builder SetMemory(int value) {
      PrepareBuilder();
      result.hasMemory = true;
      result.memory_ = value;
      return this;
    }
    public Builder ClearMemory() {
      PrepareBuilder();
      result.hasMemory = false;
      result.memory_ = 0;
      return this;
    }
    
    public bool HasVitConsume {
      get { return result.hasVitConsume; }
    }
    public int VitConsume {
      get { return result.VitConsume; }
      set { SetVitConsume(value); }
    }
    public Builder SetVitConsume(int value) {
      PrepareBuilder();
      result.hasVitConsume = true;
      result.vitConsume_ = value;
      return this;
    }
    public Builder ClearVitConsume() {
      PrepareBuilder();
      result.hasVitConsume = false;
      result.vitConsume_ = 0;
      return this;
    }
    
    public bool HasSecondGain {
      get { return result.hasSecondGain; }
    }
    public int SecondGain {
      get { return result.SecondGain; }
      set { SetSecondGain(value); }
    }
    public Builder SetSecondGain(int value) {
      PrepareBuilder();
      result.hasSecondGain = true;
      result.secondGain_ = value;
      return this;
    }
    public Builder ClearSecondGain() {
      PrepareBuilder();
      result.hasSecondGain = false;
      result.secondGain_ = 0;
      return this;
    }
  }
  static OfficerInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOfficerInfoRequest : pb::GeneratedMessage<CSOfficerInfoRequest, CSOfficerInfoRequest.Builder> {
  private CSOfficerInfoRequest() { }
  private static readonly CSOfficerInfoRequest defaultInstance = new CSOfficerInfoRequest().MakeReadOnly();
  private static readonly string[] _cSOfficerInfoRequestFieldNames = new string[] { "playerId", "playerOfficerId" };
  private static readonly uint[] _cSOfficerInfoRequestFieldTags = new uint[] { 8, 16 };
  public static CSOfficerInfoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOfficerInfoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOfficerInfoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSOfficerInfoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOfficerInfoRequest, CSOfficerInfoRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSOfficerInfoRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int PlayerOfficerIdFieldNumber = 2;
  private bool hasPlayerOfficerId;
  private long playerOfficerId_;
  public bool HasPlayerOfficerId {
    get { return hasPlayerOfficerId; }
  }
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOfficerInfoRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    if (hasPlayerOfficerId) {
      output.WriteInt64(2, field_names[1], PlayerOfficerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasPlayerOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PlayerOfficerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOfficerInfoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOfficerInfoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOfficerInfoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOfficerInfoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOfficerInfoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOfficerInfoRequest result;
    
    private CSOfficerInfoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOfficerInfoRequest original = result;
        result = new CSOfficerInfoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOfficerInfoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOfficerInfoRequest.Descriptor; }
    }
    
    public override CSOfficerInfoRequest DefaultInstanceForType {
      get { return global::CSOfficerInfoRequest.DefaultInstance; }
    }
    
    public override CSOfficerInfoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOfficerInfoRequest) {
        return MergeFrom((CSOfficerInfoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOfficerInfoRequest other) {
      if (other == global::CSOfficerInfoRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPlayerOfficerId) {
        PlayerOfficerId = other.PlayerOfficerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOfficerInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOfficerInfoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasPlayerOfficerId = input.ReadInt64(ref result.playerOfficerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasPlayerOfficerId {
      get { return result.hasPlayerOfficerId; }
    }
    public long PlayerOfficerId {
      get { return result.PlayerOfficerId; }
      set { SetPlayerOfficerId(value); }
    }
    public Builder SetPlayerOfficerId(long value) {
      PrepareBuilder();
      result.hasPlayerOfficerId = true;
      result.playerOfficerId_ = value;
      return this;
    }
    public Builder ClearPlayerOfficerId() {
      PrepareBuilder();
      result.hasPlayerOfficerId = false;
      result.playerOfficerId_ = 0L;
      return this;
    }
  }
  static CSOfficerInfoRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOfficerInfoResponse : pb::GeneratedMessage<SCOfficerInfoResponse, SCOfficerInfoResponse.Builder> {
  private SCOfficerInfoResponse() { }
  private static readonly SCOfficerInfoResponse defaultInstance = new SCOfficerInfoResponse().MakeReadOnly();
  private static readonly string[] _sCOfficerInfoResponseFieldNames = new string[] { "office" };
  private static readonly uint[] _sCOfficerInfoResponseFieldTags = new uint[] { 10 };
  public static SCOfficerInfoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOfficerInfoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOfficerInfoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCOfficerInfoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOfficerInfoResponse, SCOfficerInfoResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCOfficerInfoResponse__FieldAccessorTable; }
  }
  
  public const int OfficeFieldNumber = 1;
  private bool hasOffice;
  private global::OfficerInfo office_;
  public bool HasOffice {
    get { return hasOffice; }
  }
  public global::OfficerInfo Office {
    get { return office_ ?? global::OfficerInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOfficerInfoResponseFieldNames;
    if (hasOffice) {
      output.WriteMessage(1, field_names[0], Office);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOffice) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Office);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOfficerInfoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOfficerInfoResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOfficerInfoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOfficerInfoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOfficerInfoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOfficerInfoResponse result;
    
    private SCOfficerInfoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOfficerInfoResponse original = result;
        result = new SCOfficerInfoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOfficerInfoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOfficerInfoResponse.Descriptor; }
    }
    
    public override SCOfficerInfoResponse DefaultInstanceForType {
      get { return global::SCOfficerInfoResponse.DefaultInstance; }
    }
    
    public override SCOfficerInfoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOfficerInfoResponse) {
        return MergeFrom((SCOfficerInfoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOfficerInfoResponse other) {
      if (other == global::SCOfficerInfoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOffice) {
        MergeOffice(other.Office);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOfficerInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOfficerInfoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::OfficerInfo.Builder subBuilder = global::OfficerInfo.CreateBuilder();
            if (result.hasOffice) {
              subBuilder.MergeFrom(Office);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Office = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOffice {
     get { return result.hasOffice; }
    }
    public global::OfficerInfo Office {
      get { return result.Office; }
      set { SetOffice(value); }
    }
    public Builder SetOffice(global::OfficerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOffice = true;
      result.office_ = value;
      return this;
    }
    public Builder SetOffice(global::OfficerInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasOffice = true;
      result.office_ = builderForValue.Build();
      return this;
    }
    public Builder MergeOffice(global::OfficerInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasOffice &&
          result.office_ != global::OfficerInfo.DefaultInstance) {
          result.office_ = global::OfficerInfo.CreateBuilder(result.office_).MergeFrom(value).BuildPartial();
      } else {
        result.office_ = value;
      }
      result.hasOffice = true;
      return this;
    }
    public Builder ClearOffice() {
      PrepareBuilder();
      result.hasOffice = false;
      result.office_ = null;
      return this;
    }
  }
  static SCOfficerInfoResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEventPhaseFeedbackRequest : pb::GeneratedMessage<CSEventPhaseFeedbackRequest, CSEventPhaseFeedbackRequest.Builder> {
  private CSEventPhaseFeedbackRequest() { }
  private static readonly CSEventPhaseFeedbackRequest defaultInstance = new CSEventPhaseFeedbackRequest().MakeReadOnly();
  private static readonly string[] _cSEventPhaseFeedbackRequestFieldNames = new string[] { "eventId", "playerOfficerId" };
  private static readonly uint[] _cSEventPhaseFeedbackRequestFieldTags = new uint[] { 8, 16 };
  public static CSEventPhaseFeedbackRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEventPhaseFeedbackRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEventPhaseFeedbackRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEventPhaseFeedbackRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEventPhaseFeedbackRequest, CSEventPhaseFeedbackRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEventPhaseFeedbackRequest__FieldAccessorTable; }
  }
  
  public const int EventIdFieldNumber = 1;
  private bool hasEventId;
  private long eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public long EventId {
    get { return eventId_; }
  }
  
  public const int PlayerOfficerIdFieldNumber = 2;
  private pbc::PopsicleList<long> playerOfficerId_ = new pbc::PopsicleList<long>();
  public scg::IList<long> PlayerOfficerIdList {
    get { return pbc::Lists.AsReadOnly(playerOfficerId_); }
  }
  public int PlayerOfficerIdCount {
    get { return playerOfficerId_.Count; }
  }
  public long GetPlayerOfficerId(int index) {
    return playerOfficerId_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEventPhaseFeedbackRequestFieldNames;
    if (hasEventId) {
      output.WriteInt64(1, field_names[0], EventId);
    }
    if (playerOfficerId_.Count > 0) {
      output.WriteInt64Array(2, field_names[1], playerOfficerId_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasEventId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, EventId);
    }
    {
      int dataSize = 0;
      foreach (long element in PlayerOfficerIdList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * playerOfficerId_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventPhaseFeedbackRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEventPhaseFeedbackRequest MakeReadOnly() {
    playerOfficerId_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEventPhaseFeedbackRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEventPhaseFeedbackRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEventPhaseFeedbackRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEventPhaseFeedbackRequest result;
    
    private CSEventPhaseFeedbackRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEventPhaseFeedbackRequest original = result;
        result = new CSEventPhaseFeedbackRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEventPhaseFeedbackRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEventPhaseFeedbackRequest.Descriptor; }
    }
    
    public override CSEventPhaseFeedbackRequest DefaultInstanceForType {
      get { return global::CSEventPhaseFeedbackRequest.DefaultInstance; }
    }
    
    public override CSEventPhaseFeedbackRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEventPhaseFeedbackRequest) {
        return MergeFrom((CSEventPhaseFeedbackRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEventPhaseFeedbackRequest other) {
      if (other == global::CSEventPhaseFeedbackRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.playerOfficerId_.Count != 0) {
        result.playerOfficerId_.Add(other.playerOfficerId_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEventPhaseFeedbackRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEventPhaseFeedbackRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventId = input.ReadInt64(ref result.eventId_);
            break;
          }
          case 18:
          case 16: {
            input.ReadInt64Array(tag, field_name, result.playerOfficerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public long EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(long value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<long> PlayerOfficerIdList {
      get { return PrepareBuilder().playerOfficerId_; }
    }
    public int PlayerOfficerIdCount {
      get { return result.PlayerOfficerIdCount; }
    }
    public long GetPlayerOfficerId(int index) {
      return result.GetPlayerOfficerId(index);
    }
    public Builder SetPlayerOfficerId(int index, long value) {
      PrepareBuilder();
      result.playerOfficerId_[index] = value;
      return this;
    }
    public Builder AddPlayerOfficerId(long value) {
      PrepareBuilder();
      result.playerOfficerId_.Add(value);
      return this;
    }
    public Builder AddRangePlayerOfficerId(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.playerOfficerId_.Add(values);
      return this;
    }
    public Builder ClearPlayerOfficerId() {
      PrepareBuilder();
      result.playerOfficerId_.Clear();
      return this;
    }
  }
  static CSEventPhaseFeedbackRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEventPhaseFeedbackResponse : pb::GeneratedMessage<SCEventPhaseFeedbackResponse, SCEventPhaseFeedbackResponse.Builder> {
  private SCEventPhaseFeedbackResponse() { }
  private static readonly SCEventPhaseFeedbackResponse defaultInstance = new SCEventPhaseFeedbackResponse().MakeReadOnly();
  private static readonly string[] _sCEventPhaseFeedbackResponseFieldNames = new string[] { "ResponseStatus", "phaseInfos", "totalScore", "valuation" };
  private static readonly uint[] _sCEventPhaseFeedbackResponseFieldTags = new uint[] { 10, 34, 24, 16 };
  public static SCEventPhaseFeedbackResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEventPhaseFeedbackResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEventPhaseFeedbackResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEventPhaseFeedbackResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEventPhaseFeedbackResponse, SCEventPhaseFeedbackResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEventPhaseFeedbackResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int ValuationFieldNumber = 2;
  private bool hasValuation;
  private bool valuation_;
  public bool HasValuation {
    get { return hasValuation; }
  }
  public bool Valuation {
    get { return valuation_; }
  }
  
  public const int TotalScoreFieldNumber = 3;
  private bool hasTotalScore;
  private int totalScore_;
  public bool HasTotalScore {
    get { return hasTotalScore; }
  }
  public int TotalScore {
    get { return totalScore_; }
  }
  
  public const int PhaseInfosFieldNumber = 4;
  private pbc::PopsicleList<global::PhaseInfo> phaseInfos_ = new pbc::PopsicleList<global::PhaseInfo>();
  public scg::IList<global::PhaseInfo> PhaseInfosList {
    get { return phaseInfos_; }
  }
  public int PhaseInfosCount {
    get { return phaseInfos_.Count; }
  }
  public global::PhaseInfo GetPhaseInfos(int index) {
    return phaseInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEventPhaseFeedbackResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[0], ResponseStatus);
    }
    if (hasValuation) {
      output.WriteBool(2, field_names[3], Valuation);
    }
    if (hasTotalScore) {
      output.WriteInt32(3, field_names[2], TotalScore);
    }
    if (phaseInfos_.Count > 0) {
      output.WriteMessageArray(4, field_names[1], phaseInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasValuation) {
      size += pb::CodedOutputStream.ComputeBoolSize(2, Valuation);
    }
    if (hasTotalScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, TotalScore);
    }
    foreach (global::PhaseInfo element in PhaseInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventPhaseFeedbackResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEventPhaseFeedbackResponse MakeReadOnly() {
    phaseInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEventPhaseFeedbackResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEventPhaseFeedbackResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEventPhaseFeedbackResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEventPhaseFeedbackResponse result;
    
    private SCEventPhaseFeedbackResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEventPhaseFeedbackResponse original = result;
        result = new SCEventPhaseFeedbackResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEventPhaseFeedbackResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEventPhaseFeedbackResponse.Descriptor; }
    }
    
    public override SCEventPhaseFeedbackResponse DefaultInstanceForType {
      get { return global::SCEventPhaseFeedbackResponse.DefaultInstance; }
    }
    
    public override SCEventPhaseFeedbackResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEventPhaseFeedbackResponse) {
        return MergeFrom((SCEventPhaseFeedbackResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEventPhaseFeedbackResponse other) {
      if (other == global::SCEventPhaseFeedbackResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasValuation) {
        Valuation = other.Valuation;
      }
      if (other.HasTotalScore) {
        TotalScore = other.TotalScore;
      }
      if (other.phaseInfos_.Count != 0) {
        result.phaseInfos_.Add(other.phaseInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEventPhaseFeedbackResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEventPhaseFeedbackResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasValuation = input.ReadBool(ref result.valuation_);
            break;
          }
          case 24: {
            result.hasTotalScore = input.ReadInt32(ref result.totalScore_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.phaseInfos_, global::PhaseInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasValuation {
      get { return result.hasValuation; }
    }
    public bool Valuation {
      get { return result.Valuation; }
      set { SetValuation(value); }
    }
    public Builder SetValuation(bool value) {
      PrepareBuilder();
      result.hasValuation = true;
      result.valuation_ = value;
      return this;
    }
    public Builder ClearValuation() {
      PrepareBuilder();
      result.hasValuation = false;
      result.valuation_ = false;
      return this;
    }
    
    public bool HasTotalScore {
      get { return result.hasTotalScore; }
    }
    public int TotalScore {
      get { return result.TotalScore; }
      set { SetTotalScore(value); }
    }
    public Builder SetTotalScore(int value) {
      PrepareBuilder();
      result.hasTotalScore = true;
      result.totalScore_ = value;
      return this;
    }
    public Builder ClearTotalScore() {
      PrepareBuilder();
      result.hasTotalScore = false;
      result.totalScore_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::PhaseInfo> PhaseInfosList {
      get { return PrepareBuilder().phaseInfos_; }
    }
    public int PhaseInfosCount {
      get { return result.PhaseInfosCount; }
    }
    public global::PhaseInfo GetPhaseInfos(int index) {
      return result.GetPhaseInfos(index);
    }
    public Builder SetPhaseInfos(int index, global::PhaseInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.phaseInfos_[index] = value;
      return this;
    }
    public Builder SetPhaseInfos(int index, global::PhaseInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.phaseInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPhaseInfos(global::PhaseInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.phaseInfos_.Add(value);
      return this;
    }
    public Builder AddPhaseInfos(global::PhaseInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.phaseInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePhaseInfos(scg::IEnumerable<global::PhaseInfo> values) {
      PrepareBuilder();
      result.phaseInfos_.Add(values);
      return this;
    }
    public Builder ClearPhaseInfos() {
      PrepareBuilder();
      result.phaseInfos_.Clear();
      return this;
    }
  }
  static SCEventPhaseFeedbackResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PhaseInfo : pb::GeneratedMessage<PhaseInfo, PhaseInfo.Builder> {
  private PhaseInfo() { }
  private static readonly PhaseInfo defaultInstance = new PhaseInfo().MakeReadOnly();
  private static readonly string[] _phaseInfoFieldNames = new string[] { "matchWordScoreInfo", "officerScore", "officerTemplateId", "perfect", "perfectScore", "phaseId", "phaseScore", "phaseTemplateId" };
  private static readonly uint[] _phaseInfoFieldTags = new uint[] { 66, 32, 16, 40, 48, 8, 24, 56 };
  public static PhaseInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PhaseInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PhaseInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PhaseInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PhaseInfo, PhaseInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PhaseInfo__FieldAccessorTable; }
  }
  
  public const int PhaseIdFieldNumber = 1;
  private bool hasPhaseId;
  private int phaseId_;
  public bool HasPhaseId {
    get { return hasPhaseId; }
  }
  public int PhaseId {
    get { return phaseId_; }
  }
  
  public const int OfficerTemplateIdFieldNumber = 2;
  private bool hasOfficerTemplateId;
  private long officerTemplateId_;
  public bool HasOfficerTemplateId {
    get { return hasOfficerTemplateId; }
  }
  public long OfficerTemplateId {
    get { return officerTemplateId_; }
  }
  
  public const int PhaseScoreFieldNumber = 3;
  private bool hasPhaseScore;
  private int phaseScore_;
  public bool HasPhaseScore {
    get { return hasPhaseScore; }
  }
  public int PhaseScore {
    get { return phaseScore_; }
  }
  
  public const int OfficerScoreFieldNumber = 4;
  private bool hasOfficerScore;
  private int officerScore_;
  public bool HasOfficerScore {
    get { return hasOfficerScore; }
  }
  public int OfficerScore {
    get { return officerScore_; }
  }
  
  public const int PerfectFieldNumber = 5;
  private bool hasPerfect;
  private bool perfect_;
  public bool HasPerfect {
    get { return hasPerfect; }
  }
  public bool Perfect {
    get { return perfect_; }
  }
  
  public const int PerfectScoreFieldNumber = 6;
  private bool hasPerfectScore;
  private int perfectScore_;
  public bool HasPerfectScore {
    get { return hasPerfectScore; }
  }
  public int PerfectScore {
    get { return perfectScore_; }
  }
  
  public const int PhaseTemplateIdFieldNumber = 7;
  private bool hasPhaseTemplateId;
  private long phaseTemplateId_;
  public bool HasPhaseTemplateId {
    get { return hasPhaseTemplateId; }
  }
  public long PhaseTemplateId {
    get { return phaseTemplateId_; }
  }
  
  public const int MatchWordScoreInfoFieldNumber = 8;
  private pbc::PopsicleList<global::MatchWordScoreInfo> matchWordScoreInfo_ = new pbc::PopsicleList<global::MatchWordScoreInfo>();
  public scg::IList<global::MatchWordScoreInfo> MatchWordScoreInfoList {
    get { return matchWordScoreInfo_; }
  }
  public int MatchWordScoreInfoCount {
    get { return matchWordScoreInfo_.Count; }
  }
  public global::MatchWordScoreInfo GetMatchWordScoreInfo(int index) {
    return matchWordScoreInfo_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _phaseInfoFieldNames;
    if (hasPhaseId) {
      output.WriteInt32(1, field_names[5], PhaseId);
    }
    if (hasOfficerTemplateId) {
      output.WriteInt64(2, field_names[2], OfficerTemplateId);
    }
    if (hasPhaseScore) {
      output.WriteInt32(3, field_names[6], PhaseScore);
    }
    if (hasOfficerScore) {
      output.WriteInt32(4, field_names[1], OfficerScore);
    }
    if (hasPerfect) {
      output.WriteBool(5, field_names[3], Perfect);
    }
    if (hasPerfectScore) {
      output.WriteInt32(6, field_names[4], PerfectScore);
    }
    if (hasPhaseTemplateId) {
      output.WriteInt64(7, field_names[7], PhaseTemplateId);
    }
    if (matchWordScoreInfo_.Count > 0) {
      output.WriteMessageArray(8, field_names[0], matchWordScoreInfo_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPhaseId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, PhaseId);
    }
    if (hasOfficerTemplateId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, OfficerTemplateId);
    }
    if (hasPhaseScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, PhaseScore);
    }
    if (hasOfficerScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, OfficerScore);
    }
    if (hasPerfect) {
      size += pb::CodedOutputStream.ComputeBoolSize(5, Perfect);
    }
    if (hasPerfectScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, PerfectScore);
    }
    if (hasPhaseTemplateId) {
      size += pb::CodedOutputStream.ComputeInt64Size(7, PhaseTemplateId);
    }
    foreach (global::MatchWordScoreInfo element in MatchWordScoreInfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PhaseInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PhaseInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PhaseInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PhaseInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PhaseInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PhaseInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PhaseInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PhaseInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PhaseInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PhaseInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PhaseInfo MakeReadOnly() {
    matchWordScoreInfo_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PhaseInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PhaseInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PhaseInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PhaseInfo result;
    
    private PhaseInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        PhaseInfo original = result;
        result = new PhaseInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PhaseInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PhaseInfo.Descriptor; }
    }
    
    public override PhaseInfo DefaultInstanceForType {
      get { return global::PhaseInfo.DefaultInstance; }
    }
    
    public override PhaseInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PhaseInfo) {
        return MergeFrom((PhaseInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PhaseInfo other) {
      if (other == global::PhaseInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPhaseId) {
        PhaseId = other.PhaseId;
      }
      if (other.HasOfficerTemplateId) {
        OfficerTemplateId = other.OfficerTemplateId;
      }
      if (other.HasPhaseScore) {
        PhaseScore = other.PhaseScore;
      }
      if (other.HasOfficerScore) {
        OfficerScore = other.OfficerScore;
      }
      if (other.HasPerfect) {
        Perfect = other.Perfect;
      }
      if (other.HasPerfectScore) {
        PerfectScore = other.PerfectScore;
      }
      if (other.HasPhaseTemplateId) {
        PhaseTemplateId = other.PhaseTemplateId;
      }
      if (other.matchWordScoreInfo_.Count != 0) {
        result.matchWordScoreInfo_.Add(other.matchWordScoreInfo_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_phaseInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _phaseInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPhaseId = input.ReadInt32(ref result.phaseId_);
            break;
          }
          case 16: {
            result.hasOfficerTemplateId = input.ReadInt64(ref result.officerTemplateId_);
            break;
          }
          case 24: {
            result.hasPhaseScore = input.ReadInt32(ref result.phaseScore_);
            break;
          }
          case 32: {
            result.hasOfficerScore = input.ReadInt32(ref result.officerScore_);
            break;
          }
          case 40: {
            result.hasPerfect = input.ReadBool(ref result.perfect_);
            break;
          }
          case 48: {
            result.hasPerfectScore = input.ReadInt32(ref result.perfectScore_);
            break;
          }
          case 56: {
            result.hasPhaseTemplateId = input.ReadInt64(ref result.phaseTemplateId_);
            break;
          }
          case 66: {
            input.ReadMessageArray(tag, field_name, result.matchWordScoreInfo_, global::MatchWordScoreInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPhaseId {
      get { return result.hasPhaseId; }
    }
    public int PhaseId {
      get { return result.PhaseId; }
      set { SetPhaseId(value); }
    }
    public Builder SetPhaseId(int value) {
      PrepareBuilder();
      result.hasPhaseId = true;
      result.phaseId_ = value;
      return this;
    }
    public Builder ClearPhaseId() {
      PrepareBuilder();
      result.hasPhaseId = false;
      result.phaseId_ = 0;
      return this;
    }
    
    public bool HasOfficerTemplateId {
      get { return result.hasOfficerTemplateId; }
    }
    public long OfficerTemplateId {
      get { return result.OfficerTemplateId; }
      set { SetOfficerTemplateId(value); }
    }
    public Builder SetOfficerTemplateId(long value) {
      PrepareBuilder();
      result.hasOfficerTemplateId = true;
      result.officerTemplateId_ = value;
      return this;
    }
    public Builder ClearOfficerTemplateId() {
      PrepareBuilder();
      result.hasOfficerTemplateId = false;
      result.officerTemplateId_ = 0L;
      return this;
    }
    
    public bool HasPhaseScore {
      get { return result.hasPhaseScore; }
    }
    public int PhaseScore {
      get { return result.PhaseScore; }
      set { SetPhaseScore(value); }
    }
    public Builder SetPhaseScore(int value) {
      PrepareBuilder();
      result.hasPhaseScore = true;
      result.phaseScore_ = value;
      return this;
    }
    public Builder ClearPhaseScore() {
      PrepareBuilder();
      result.hasPhaseScore = false;
      result.phaseScore_ = 0;
      return this;
    }
    
    public bool HasOfficerScore {
      get { return result.hasOfficerScore; }
    }
    public int OfficerScore {
      get { return result.OfficerScore; }
      set { SetOfficerScore(value); }
    }
    public Builder SetOfficerScore(int value) {
      PrepareBuilder();
      result.hasOfficerScore = true;
      result.officerScore_ = value;
      return this;
    }
    public Builder ClearOfficerScore() {
      PrepareBuilder();
      result.hasOfficerScore = false;
      result.officerScore_ = 0;
      return this;
    }
    
    public bool HasPerfect {
      get { return result.hasPerfect; }
    }
    public bool Perfect {
      get { return result.Perfect; }
      set { SetPerfect(value); }
    }
    public Builder SetPerfect(bool value) {
      PrepareBuilder();
      result.hasPerfect = true;
      result.perfect_ = value;
      return this;
    }
    public Builder ClearPerfect() {
      PrepareBuilder();
      result.hasPerfect = false;
      result.perfect_ = false;
      return this;
    }
    
    public bool HasPerfectScore {
      get { return result.hasPerfectScore; }
    }
    public int PerfectScore {
      get { return result.PerfectScore; }
      set { SetPerfectScore(value); }
    }
    public Builder SetPerfectScore(int value) {
      PrepareBuilder();
      result.hasPerfectScore = true;
      result.perfectScore_ = value;
      return this;
    }
    public Builder ClearPerfectScore() {
      PrepareBuilder();
      result.hasPerfectScore = false;
      result.perfectScore_ = 0;
      return this;
    }
    
    public bool HasPhaseTemplateId {
      get { return result.hasPhaseTemplateId; }
    }
    public long PhaseTemplateId {
      get { return result.PhaseTemplateId; }
      set { SetPhaseTemplateId(value); }
    }
    public Builder SetPhaseTemplateId(long value) {
      PrepareBuilder();
      result.hasPhaseTemplateId = true;
      result.phaseTemplateId_ = value;
      return this;
    }
    public Builder ClearPhaseTemplateId() {
      PrepareBuilder();
      result.hasPhaseTemplateId = false;
      result.phaseTemplateId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::MatchWordScoreInfo> MatchWordScoreInfoList {
      get { return PrepareBuilder().matchWordScoreInfo_; }
    }
    public int MatchWordScoreInfoCount {
      get { return result.MatchWordScoreInfoCount; }
    }
    public global::MatchWordScoreInfo GetMatchWordScoreInfo(int index) {
      return result.GetMatchWordScoreInfo(index);
    }
    public Builder SetMatchWordScoreInfo(int index, global::MatchWordScoreInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.matchWordScoreInfo_[index] = value;
      return this;
    }
    public Builder SetMatchWordScoreInfo(int index, global::MatchWordScoreInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.matchWordScoreInfo_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMatchWordScoreInfo(global::MatchWordScoreInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.matchWordScoreInfo_.Add(value);
      return this;
    }
    public Builder AddMatchWordScoreInfo(global::MatchWordScoreInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.matchWordScoreInfo_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMatchWordScoreInfo(scg::IEnumerable<global::MatchWordScoreInfo> values) {
      PrepareBuilder();
      result.matchWordScoreInfo_.Add(values);
      return this;
    }
    public Builder ClearMatchWordScoreInfo() {
      PrepareBuilder();
      result.matchWordScoreInfo_.Clear();
      return this;
    }
  }
  static PhaseInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MatchWordScoreInfo : pb::GeneratedMessage<MatchWordScoreInfo, MatchWordScoreInfo.Builder> {
  private MatchWordScoreInfo() { }
  private static readonly MatchWordScoreInfo defaultInstance = new MatchWordScoreInfo().MakeReadOnly();
  private static readonly string[] _matchWordScoreInfoFieldNames = new string[] { "keyWordId", "keyWordMatchScore" };
  private static readonly uint[] _matchWordScoreInfoFieldTags = new uint[] { 8, 16 };
  public static MatchWordScoreInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MatchWordScoreInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MatchWordScoreInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MatchWordScoreInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MatchWordScoreInfo, MatchWordScoreInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MatchWordScoreInfo__FieldAccessorTable; }
  }
  
  public const int KeyWordIdFieldNumber = 1;
  private bool hasKeyWordId;
  private int keyWordId_;
  public bool HasKeyWordId {
    get { return hasKeyWordId; }
  }
  public int KeyWordId {
    get { return keyWordId_; }
  }
  
  public const int KeyWordMatchScoreFieldNumber = 2;
  private bool hasKeyWordMatchScore;
  private int keyWordMatchScore_;
  public bool HasKeyWordMatchScore {
    get { return hasKeyWordMatchScore; }
  }
  public int KeyWordMatchScore {
    get { return keyWordMatchScore_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _matchWordScoreInfoFieldNames;
    if (hasKeyWordId) {
      output.WriteInt32(1, field_names[0], KeyWordId);
    }
    if (hasKeyWordMatchScore) {
      output.WriteInt32(2, field_names[1], KeyWordMatchScore);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasKeyWordId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, KeyWordId);
    }
    if (hasKeyWordMatchScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, KeyWordMatchScore);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MatchWordScoreInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MatchWordScoreInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MatchWordScoreInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MatchWordScoreInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MatchWordScoreInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MatchWordScoreInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MatchWordScoreInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MatchWordScoreInfo result;
    
    private MatchWordScoreInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        MatchWordScoreInfo original = result;
        result = new MatchWordScoreInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MatchWordScoreInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MatchWordScoreInfo.Descriptor; }
    }
    
    public override MatchWordScoreInfo DefaultInstanceForType {
      get { return global::MatchWordScoreInfo.DefaultInstance; }
    }
    
    public override MatchWordScoreInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MatchWordScoreInfo) {
        return MergeFrom((MatchWordScoreInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MatchWordScoreInfo other) {
      if (other == global::MatchWordScoreInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasKeyWordId) {
        KeyWordId = other.KeyWordId;
      }
      if (other.HasKeyWordMatchScore) {
        KeyWordMatchScore = other.KeyWordMatchScore;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_matchWordScoreInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _matchWordScoreInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasKeyWordId = input.ReadInt32(ref result.keyWordId_);
            break;
          }
          case 16: {
            result.hasKeyWordMatchScore = input.ReadInt32(ref result.keyWordMatchScore_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasKeyWordId {
      get { return result.hasKeyWordId; }
    }
    public int KeyWordId {
      get { return result.KeyWordId; }
      set { SetKeyWordId(value); }
    }
    public Builder SetKeyWordId(int value) {
      PrepareBuilder();
      result.hasKeyWordId = true;
      result.keyWordId_ = value;
      return this;
    }
    public Builder ClearKeyWordId() {
      PrepareBuilder();
      result.hasKeyWordId = false;
      result.keyWordId_ = 0;
      return this;
    }
    
    public bool HasKeyWordMatchScore {
      get { return result.hasKeyWordMatchScore; }
    }
    public int KeyWordMatchScore {
      get { return result.KeyWordMatchScore; }
      set { SetKeyWordMatchScore(value); }
    }
    public Builder SetKeyWordMatchScore(int value) {
      PrepareBuilder();
      result.hasKeyWordMatchScore = true;
      result.keyWordMatchScore_ = value;
      return this;
    }
    public Builder ClearKeyWordMatchScore() {
      PrepareBuilder();
      result.hasKeyWordMatchScore = false;
      result.keyWordMatchScore_ = 0;
      return this;
    }
  }
  static MatchWordScoreInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEventRewardRequest : pb::GeneratedMessage<CSEventRewardRequest, CSEventRewardRequest.Builder> {
  private CSEventRewardRequest() { }
  private static readonly CSEventRewardRequest defaultInstance = new CSEventRewardRequest().MakeReadOnly();
  private static readonly string[] _cSEventRewardRequestFieldNames = new string[] { "eventId", "playerId" };
  private static readonly uint[] _cSEventRewardRequestFieldTags = new uint[] { 16, 8 };
  public static CSEventRewardRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEventRewardRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEventRewardRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEventRewardRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEventRewardRequest, CSEventRewardRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEventRewardRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int EventIdFieldNumber = 2;
  private bool hasEventId;
  private long eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public long EventId {
    get { return eventId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEventRewardRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasEventId) {
      output.WriteInt64(2, field_names[0], EventId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasEventId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, EventId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEventRewardRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEventRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEventRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEventRewardRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEventRewardRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEventRewardRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEventRewardRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEventRewardRequest result;
    
    private CSEventRewardRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEventRewardRequest original = result;
        result = new CSEventRewardRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEventRewardRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEventRewardRequest.Descriptor; }
    }
    
    public override CSEventRewardRequest DefaultInstanceForType {
      get { return global::CSEventRewardRequest.DefaultInstance; }
    }
    
    public override CSEventRewardRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEventRewardRequest) {
        return MergeFrom((CSEventRewardRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEventRewardRequest other) {
      if (other == global::CSEventRewardRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEventRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEventRewardRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasEventId = input.ReadInt64(ref result.eventId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public long EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(long value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0L;
      return this;
    }
  }
  static CSEventRewardRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEventRewardResponse : pb::GeneratedMessage<SCEventRewardResponse, SCEventRewardResponse.Builder> {
  private SCEventRewardResponse() { }
  private static readonly SCEventRewardResponse defaultInstance = new SCEventRewardResponse().MakeReadOnly();
  private static readonly string[] _sCEventRewardResponseFieldNames = new string[] { "ResponseStatus", "cash", "coin", "exp", "rewards", "sceneRewardComprise", "score", "valuation", "vit" };
  private static readonly uint[] _sCEventRewardResponseFieldTags = new uint[] { 10, 64, 56, 40, 34, 74, 16, 24, 48 };
  public static SCEventRewardResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEventRewardResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEventRewardResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEventRewardResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEventRewardResponse, SCEventRewardResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEventRewardResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int ScoreFieldNumber = 2;
  private bool hasScore;
  private int score_;
  public bool HasScore {
    get { return hasScore; }
  }
  public int Score {
    get { return score_; }
  }
  
  public const int ValuationFieldNumber = 3;
  private bool hasValuation;
  private int valuation_;
  public bool HasValuation {
    get { return hasValuation; }
  }
  public int Valuation {
    get { return valuation_; }
  }
  
  public const int RewardsFieldNumber = 4;
  private pbc::PopsicleList<global::RewardItem> rewards_ = new pbc::PopsicleList<global::RewardItem>();
  public scg::IList<global::RewardItem> RewardsList {
    get { return rewards_; }
  }
  public int RewardsCount {
    get { return rewards_.Count; }
  }
  public global::RewardItem GetRewards(int index) {
    return rewards_[index];
  }
  
  public const int ExpFieldNumber = 5;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int VitFieldNumber = 6;
  private bool hasVit;
  private int vit_;
  public bool HasVit {
    get { return hasVit; }
  }
  public int Vit {
    get { return vit_; }
  }
  
  public const int CoinFieldNumber = 7;
  private bool hasCoin;
  private int coin_;
  public bool HasCoin {
    get { return hasCoin; }
  }
  public int Coin {
    get { return coin_; }
  }
  
  public const int CashFieldNumber = 8;
  private bool hasCash;
  private int cash_;
  public bool HasCash {
    get { return hasCash; }
  }
  public int Cash {
    get { return cash_; }
  }
  
  public const int SceneRewardCompriseFieldNumber = 9;
  private pbc::PopsicleList<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::PopsicleList<global::SceneRewardComprise>();
  public scg::IList<global::SceneRewardComprise> SceneRewardCompriseList {
    get { return sceneRewardComprise_; }
  }
  public int SceneRewardCompriseCount {
    get { return sceneRewardComprise_.Count; }
  }
  public global::SceneRewardComprise GetSceneRewardComprise(int index) {
    return sceneRewardComprise_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEventRewardResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[0], ResponseStatus);
    }
    if (hasScore) {
      output.WriteInt32(2, field_names[6], Score);
    }
    if (hasValuation) {
      output.WriteInt32(3, field_names[7], Valuation);
    }
    if (rewards_.Count > 0) {
      output.WriteMessageArray(4, field_names[4], rewards_);
    }
    if (hasExp) {
      output.WriteInt32(5, field_names[3], Exp);
    }
    if (hasVit) {
      output.WriteInt32(6, field_names[8], Vit);
    }
    if (hasCoin) {
      output.WriteInt32(7, field_names[2], Coin);
    }
    if (hasCash) {
      output.WriteInt32(8, field_names[1], Cash);
    }
    if (sceneRewardComprise_.Count > 0) {
      output.WriteMessageArray(9, field_names[5], sceneRewardComprise_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasScore) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Score);
    }
    if (hasValuation) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Valuation);
    }
    foreach (global::RewardItem element in RewardsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Exp);
    }
    if (hasVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Vit);
    }
    if (hasCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Coin);
    }
    if (hasCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Cash);
    }
    foreach (global::SceneRewardComprise element in SceneRewardCompriseList) {
      size += pb::CodedOutputStream.ComputeMessageSize(9, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEventRewardResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEventRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEventRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEventRewardResponse MakeReadOnly() {
    rewards_.MakeReadOnly();
    sceneRewardComprise_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEventRewardResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEventRewardResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEventRewardResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEventRewardResponse result;
    
    private SCEventRewardResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEventRewardResponse original = result;
        result = new SCEventRewardResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEventRewardResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEventRewardResponse.Descriptor; }
    }
    
    public override SCEventRewardResponse DefaultInstanceForType {
      get { return global::SCEventRewardResponse.DefaultInstance; }
    }
    
    public override SCEventRewardResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEventRewardResponse) {
        return MergeFrom((SCEventRewardResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEventRewardResponse other) {
      if (other == global::SCEventRewardResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasValuation) {
        Valuation = other.Valuation;
      }
      if (other.rewards_.Count != 0) {
        result.rewards_.Add(other.rewards_);
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasVit) {
        Vit = other.Vit;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.sceneRewardComprise_.Count != 0) {
        result.sceneRewardComprise_.Add(other.sceneRewardComprise_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEventRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEventRewardResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasScore = input.ReadInt32(ref result.score_);
            break;
          }
          case 24: {
            result.hasValuation = input.ReadInt32(ref result.valuation_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.rewards_, global::RewardItem.DefaultInstance, extensionRegistry);
            break;
          }
          case 40: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
          case 48: {
            result.hasVit = input.ReadInt32(ref result.vit_);
            break;
          }
          case 56: {
            result.hasCoin = input.ReadInt32(ref result.coin_);
            break;
          }
          case 64: {
            result.hasCash = input.ReadInt32(ref result.cash_);
            break;
          }
          case 74: {
            input.ReadMessageArray(tag, field_name, result.sceneRewardComprise_, global::SceneRewardComprise.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasScore {
      get { return result.hasScore; }
    }
    public int Score {
      get { return result.Score; }
      set { SetScore(value); }
    }
    public Builder SetScore(int value) {
      PrepareBuilder();
      result.hasScore = true;
      result.score_ = value;
      return this;
    }
    public Builder ClearScore() {
      PrepareBuilder();
      result.hasScore = false;
      result.score_ = 0;
      return this;
    }
    
    public bool HasValuation {
      get { return result.hasValuation; }
    }
    public int Valuation {
      get { return result.Valuation; }
      set { SetValuation(value); }
    }
    public Builder SetValuation(int value) {
      PrepareBuilder();
      result.hasValuation = true;
      result.valuation_ = value;
      return this;
    }
    public Builder ClearValuation() {
      PrepareBuilder();
      result.hasValuation = false;
      result.valuation_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::RewardItem> RewardsList {
      get { return PrepareBuilder().rewards_; }
    }
    public int RewardsCount {
      get { return result.RewardsCount; }
    }
    public global::RewardItem GetRewards(int index) {
      return result.GetRewards(index);
    }
    public Builder SetRewards(int index, global::RewardItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_[index] = value;
      return this;
    }
    public Builder SetRewards(int index, global::RewardItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRewards(global::RewardItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_.Add(value);
      return this;
    }
    public Builder AddRewards(global::RewardItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRewards(scg::IEnumerable<global::RewardItem> values) {
      PrepareBuilder();
      result.rewards_.Add(values);
      return this;
    }
    public Builder ClearRewards() {
      PrepareBuilder();
      result.rewards_.Clear();
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasVit {
      get { return result.hasVit; }
    }
    public int Vit {
      get { return result.Vit; }
      set { SetVit(value); }
    }
    public Builder SetVit(int value) {
      PrepareBuilder();
      result.hasVit = true;
      result.vit_ = value;
      return this;
    }
    public Builder ClearVit() {
      PrepareBuilder();
      result.hasVit = false;
      result.vit_ = 0;
      return this;
    }
    
    public bool HasCoin {
      get { return result.hasCoin; }
    }
    public int Coin {
      get { return result.Coin; }
      set { SetCoin(value); }
    }
    public Builder SetCoin(int value) {
      PrepareBuilder();
      result.hasCoin = true;
      result.coin_ = value;
      return this;
    }
    public Builder ClearCoin() {
      PrepareBuilder();
      result.hasCoin = false;
      result.coin_ = 0;
      return this;
    }
    
    public bool HasCash {
      get { return result.hasCash; }
    }
    public int Cash {
      get { return result.Cash; }
      set { SetCash(value); }
    }
    public Builder SetCash(int value) {
      PrepareBuilder();
      result.hasCash = true;
      result.cash_ = value;
      return this;
    }
    public Builder ClearCash() {
      PrepareBuilder();
      result.hasCash = false;
      result.cash_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::SceneRewardComprise> SceneRewardCompriseList {
      get { return PrepareBuilder().sceneRewardComprise_; }
    }
    public int SceneRewardCompriseCount {
      get { return result.SceneRewardCompriseCount; }
    }
    public global::SceneRewardComprise GetSceneRewardComprise(int index) {
      return result.GetSceneRewardComprise(index);
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = value;
      return this;
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(value);
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSceneRewardComprise(scg::IEnumerable<global::SceneRewardComprise> values) {
      PrepareBuilder();
      result.sceneRewardComprise_.Add(values);
      return this;
    }
    public Builder ClearSceneRewardComprise() {
      PrepareBuilder();
      result.sceneRewardComprise_.Clear();
      return this;
    }
  }
  static SCEventRewardResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RewardItem : pb::GeneratedMessage<RewardItem, RewardItem.Builder> {
  private RewardItem() { }
  private static readonly RewardItem defaultInstance = new RewardItem().MakeReadOnly();
  private static readonly string[] _rewardItemFieldNames = new string[] { "num", "propId" };
  private static readonly uint[] _rewardItemFieldTags = new uint[] { 16, 8 };
  public static RewardItem DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RewardItem DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RewardItem ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_RewardItem__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RewardItem, RewardItem.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_RewardItem__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int NumFieldNumber = 2;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _rewardItemFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasNum) {
      output.WriteInt32(2, field_names[0], Num);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static RewardItem ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RewardItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RewardItem ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RewardItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RewardItem ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RewardItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RewardItem ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RewardItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RewardItem ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RewardItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RewardItem MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RewardItem prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RewardItem, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RewardItem cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RewardItem result;
    
    private RewardItem PrepareBuilder() {
      if (resultIsReadOnly) {
        RewardItem original = result;
        result = new RewardItem();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RewardItem MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RewardItem.Descriptor; }
    }
    
    public override RewardItem DefaultInstanceForType {
      get { return global::RewardItem.DefaultInstance; }
    }
    
    public override RewardItem BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RewardItem) {
        return MergeFrom((RewardItem) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RewardItem other) {
      if (other == global::RewardItem.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_rewardItemFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _rewardItemFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
  }
  static RewardItem() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOfficerCombineRequest : pb::GeneratedMessage<CSOfficerCombineRequest, CSOfficerCombineRequest.Builder> {
  private CSOfficerCombineRequest() { }
  private static readonly CSOfficerCombineRequest defaultInstance = new CSOfficerCombineRequest().MakeReadOnly();
  private static readonly string[] _cSOfficerCombineRequestFieldNames = new string[] { "officerId", "playerId" };
  private static readonly uint[] _cSOfficerCombineRequestFieldTags = new uint[] { 16, 8 };
  public static CSOfficerCombineRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOfficerCombineRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOfficerCombineRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSOfficerCombineRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOfficerCombineRequest, CSOfficerCombineRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSOfficerCombineRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int OfficerIdFieldNumber = 2;
  private bool hasOfficerId;
  private long officerId_;
  public bool HasOfficerId {
    get { return hasOfficerId; }
  }
  public long OfficerId {
    get { return officerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOfficerCombineRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasOfficerId) {
      output.WriteInt64(2, field_names[0], OfficerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, OfficerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOfficerCombineRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerCombineRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOfficerCombineRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOfficerCombineRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOfficerCombineRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOfficerCombineRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOfficerCombineRequest result;
    
    private CSOfficerCombineRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOfficerCombineRequest original = result;
        result = new CSOfficerCombineRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOfficerCombineRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOfficerCombineRequest.Descriptor; }
    }
    
    public override CSOfficerCombineRequest DefaultInstanceForType {
      get { return global::CSOfficerCombineRequest.DefaultInstance; }
    }
    
    public override CSOfficerCombineRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOfficerCombineRequest) {
        return MergeFrom((CSOfficerCombineRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOfficerCombineRequest other) {
      if (other == global::CSOfficerCombineRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasOfficerId) {
        OfficerId = other.OfficerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOfficerCombineRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOfficerCombineRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasOfficerId = input.ReadInt64(ref result.officerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasOfficerId {
      get { return result.hasOfficerId; }
    }
    public long OfficerId {
      get { return result.OfficerId; }
      set { SetOfficerId(value); }
    }
    public Builder SetOfficerId(long value) {
      PrepareBuilder();
      result.hasOfficerId = true;
      result.officerId_ = value;
      return this;
    }
    public Builder ClearOfficerId() {
      PrepareBuilder();
      result.hasOfficerId = false;
      result.officerId_ = 0L;
      return this;
    }
  }
  static CSOfficerCombineRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOfficerCombineResponse : pb::GeneratedMessage<SCOfficerCombineResponse, SCOfficerCombineResponse.Builder> {
  private SCOfficerCombineResponse() { }
  private static readonly SCOfficerCombineResponse defaultInstance = new SCOfficerCombineResponse().MakeReadOnly();
  private static readonly string[] _sCOfficerCombineResponseFieldNames = new string[] { "officeId", "result" };
  private static readonly uint[] _sCOfficerCombineResponseFieldTags = new uint[] { 16, 8 };
  public static SCOfficerCombineResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOfficerCombineResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOfficerCombineResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCOfficerCombineResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOfficerCombineResponse, SCOfficerCombineResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCOfficerCombineResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int OfficeIdFieldNumber = 2;
  private bool hasOfficeId;
  private long officeId_;
  public bool HasOfficeId {
    get { return hasOfficeId; }
  }
  public long OfficeId {
    get { return officeId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOfficerCombineResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[1], Result);
    }
    if (hasOfficeId) {
      output.WriteInt64(2, field_names[0], OfficeId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasOfficeId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, OfficeId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOfficerCombineResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerCombineResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOfficerCombineResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOfficerCombineResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOfficerCombineResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOfficerCombineResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOfficerCombineResponse result;
    
    private SCOfficerCombineResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOfficerCombineResponse original = result;
        result = new SCOfficerCombineResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOfficerCombineResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOfficerCombineResponse.Descriptor; }
    }
    
    public override SCOfficerCombineResponse DefaultInstanceForType {
      get { return global::SCOfficerCombineResponse.DefaultInstance; }
    }
    
    public override SCOfficerCombineResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOfficerCombineResponse) {
        return MergeFrom((SCOfficerCombineResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOfficerCombineResponse other) {
      if (other == global::SCOfficerCombineResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasOfficeId) {
        OfficeId = other.OfficeId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOfficerCombineResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOfficerCombineResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasOfficeId = input.ReadInt64(ref result.officeId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasOfficeId {
      get { return result.hasOfficeId; }
    }
    public long OfficeId {
      get { return result.OfficeId; }
      set { SetOfficeId(value); }
    }
    public Builder SetOfficeId(long value) {
      PrepareBuilder();
      result.hasOfficeId = true;
      result.officeId_ = value;
      return this;
    }
    public Builder ClearOfficeId() {
      PrepareBuilder();
      result.hasOfficeId = false;
      result.officeId_ = 0L;
      return this;
    }
  }
  static SCOfficerCombineResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSOfficerUpdateRequest : pb::GeneratedMessage<CSOfficerUpdateRequest, CSOfficerUpdateRequest.Builder> {
  private CSOfficerUpdateRequest() { }
  private static readonly CSOfficerUpdateRequest defaultInstance = new CSOfficerUpdateRequest().MakeReadOnly();
  private static readonly string[] _cSOfficerUpdateRequestFieldNames = new string[] { "playerId", "playerOfficerId" };
  private static readonly uint[] _cSOfficerUpdateRequestFieldTags = new uint[] { 8, 16 };
  public static CSOfficerUpdateRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSOfficerUpdateRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSOfficerUpdateRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSOfficerUpdateRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSOfficerUpdateRequest, CSOfficerUpdateRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSOfficerUpdateRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int PlayerOfficerIdFieldNumber = 2;
  private bool hasPlayerOfficerId;
  private long playerOfficerId_;
  public bool HasPlayerOfficerId {
    get { return hasPlayerOfficerId; }
  }
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSOfficerUpdateRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    if (hasPlayerOfficerId) {
      output.WriteInt64(2, field_names[1], PlayerOfficerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasPlayerOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PlayerOfficerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSOfficerUpdateRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSOfficerUpdateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSOfficerUpdateRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSOfficerUpdateRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSOfficerUpdateRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSOfficerUpdateRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSOfficerUpdateRequest result;
    
    private CSOfficerUpdateRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSOfficerUpdateRequest original = result;
        result = new CSOfficerUpdateRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSOfficerUpdateRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSOfficerUpdateRequest.Descriptor; }
    }
    
    public override CSOfficerUpdateRequest DefaultInstanceForType {
      get { return global::CSOfficerUpdateRequest.DefaultInstance; }
    }
    
    public override CSOfficerUpdateRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSOfficerUpdateRequest) {
        return MergeFrom((CSOfficerUpdateRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSOfficerUpdateRequest other) {
      if (other == global::CSOfficerUpdateRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasPlayerOfficerId) {
        PlayerOfficerId = other.PlayerOfficerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSOfficerUpdateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSOfficerUpdateRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasPlayerOfficerId = input.ReadInt64(ref result.playerOfficerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasPlayerOfficerId {
      get { return result.hasPlayerOfficerId; }
    }
    public long PlayerOfficerId {
      get { return result.PlayerOfficerId; }
      set { SetPlayerOfficerId(value); }
    }
    public Builder SetPlayerOfficerId(long value) {
      PrepareBuilder();
      result.hasPlayerOfficerId = true;
      result.playerOfficerId_ = value;
      return this;
    }
    public Builder ClearPlayerOfficerId() {
      PrepareBuilder();
      result.hasPlayerOfficerId = false;
      result.playerOfficerId_ = 0L;
      return this;
    }
  }
  static CSOfficerUpdateRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCOfficerUpdateResponse : pb::GeneratedMessage<SCOfficerUpdateResponse, SCOfficerUpdateResponse.Builder> {
  private SCOfficerUpdateResponse() { }
  private static readonly SCOfficerUpdateResponse defaultInstance = new SCOfficerUpdateResponse().MakeReadOnly();
  private static readonly string[] _sCOfficerUpdateResponseFieldNames = new string[] { "level", "officeId", "result" };
  private static readonly uint[] _sCOfficerUpdateResponseFieldTags = new uint[] { 24, 16, 8 };
  public static SCOfficerUpdateResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCOfficerUpdateResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCOfficerUpdateResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCOfficerUpdateResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCOfficerUpdateResponse, SCOfficerUpdateResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCOfficerUpdateResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int OfficeIdFieldNumber = 2;
  private bool hasOfficeId;
  private long officeId_;
  public bool HasOfficeId {
    get { return hasOfficeId; }
  }
  public long OfficeId {
    get { return officeId_; }
  }
  
  public const int LevelFieldNumber = 3;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCOfficerUpdateResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[2], Result);
    }
    if (hasOfficeId) {
      output.WriteInt64(2, field_names[1], OfficeId);
    }
    if (hasLevel) {
      output.WriteInt32(3, field_names[0], Level);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasOfficeId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, OfficeId);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCOfficerUpdateResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCOfficerUpdateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCOfficerUpdateResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCOfficerUpdateResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCOfficerUpdateResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCOfficerUpdateResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCOfficerUpdateResponse result;
    
    private SCOfficerUpdateResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCOfficerUpdateResponse original = result;
        result = new SCOfficerUpdateResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCOfficerUpdateResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCOfficerUpdateResponse.Descriptor; }
    }
    
    public override SCOfficerUpdateResponse DefaultInstanceForType {
      get { return global::SCOfficerUpdateResponse.DefaultInstance; }
    }
    
    public override SCOfficerUpdateResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCOfficerUpdateResponse) {
        return MergeFrom((SCOfficerUpdateResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCOfficerUpdateResponse other) {
      if (other == global::SCOfficerUpdateResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasOfficeId) {
        OfficeId = other.OfficeId;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCOfficerUpdateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCOfficerUpdateResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasOfficeId = input.ReadInt64(ref result.officeId_);
            break;
          }
          case 24: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasOfficeId {
      get { return result.hasOfficeId; }
    }
    public long OfficeId {
      get { return result.OfficeId; }
      set { SetOfficeId(value); }
    }
    public Builder SetOfficeId(long value) {
      PrepareBuilder();
      result.hasOfficeId = true;
      result.officeId_ = value;
      return this;
    }
    public Builder ClearOfficeId() {
      PrepareBuilder();
      result.hasOfficeId = false;
      result.officeId_ = 0L;
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
  }
  static SCOfficerUpdateResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEventEnterRequest : pb::GeneratedMessage<CSEventEnterRequest, CSEventEnterRequest.Builder> {
  private CSEventEnterRequest() { }
  private static readonly CSEventEnterRequest defaultInstance = new CSEventEnterRequest().MakeReadOnly();
  private static readonly string[] _cSEventEnterRequestFieldNames = new string[] { "eventId", "playerId" };
  private static readonly uint[] _cSEventEnterRequestFieldTags = new uint[] { 16, 8 };
  public static CSEventEnterRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEventEnterRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEventEnterRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEventEnterRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEventEnterRequest, CSEventEnterRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEventEnterRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int EventIdFieldNumber = 2;
  private bool hasEventId;
  private long eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public long EventId {
    get { return eventId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEventEnterRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[1], PlayerId);
    }
    if (hasEventId) {
      output.WriteInt64(2, field_names[0], EventId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasEventId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, EventId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEventEnterRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEventEnterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEventEnterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventEnterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEventEnterRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEventEnterRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEventEnterRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEventEnterRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEventEnterRequest result;
    
    private CSEventEnterRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEventEnterRequest original = result;
        result = new CSEventEnterRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEventEnterRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEventEnterRequest.Descriptor; }
    }
    
    public override CSEventEnterRequest DefaultInstanceForType {
      get { return global::CSEventEnterRequest.DefaultInstance; }
    }
    
    public override CSEventEnterRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEventEnterRequest) {
        return MergeFrom((CSEventEnterRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEventEnterRequest other) {
      if (other == global::CSEventEnterRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEventEnterRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEventEnterRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 16: {
            result.hasEventId = input.ReadInt64(ref result.eventId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public long EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(long value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0L;
      return this;
    }
  }
  static CSEventEnterRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEventEnterResponse : pb::GeneratedMessage<SCEventEnterResponse, SCEventEnterResponse.Builder> {
  private SCEventEnterResponse() { }
  private static readonly SCEventEnterResponse defaultInstance = new SCEventEnterResponse().MakeReadOnly();
  private static readonly string[] _sCEventEnterResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCEventEnterResponseFieldTags = new uint[] { 8 };
  public static SCEventEnterResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEventEnterResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEventEnterResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEventEnterResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEventEnterResponse, SCEventEnterResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEventEnterResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEventEnterResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEventEnterResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEventEnterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEventEnterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventEnterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEventEnterResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEventEnterResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEventEnterResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEventEnterResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEventEnterResponse result;
    
    private SCEventEnterResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEventEnterResponse original = result;
        result = new SCEventEnterResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEventEnterResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEventEnterResponse.Descriptor; }
    }
    
    public override SCEventEnterResponse DefaultInstanceForType {
      get { return global::SCEventEnterResponse.DefaultInstance; }
    }
    
    public override SCEventEnterResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEventEnterResponse) {
        return MergeFrom((SCEventEnterResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEventEnterResponse other) {
      if (other == global::SCEventEnterResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEventEnterResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEventEnterResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCEventEnterResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEventDropInfoRequest : pb::GeneratedMessage<CSEventDropInfoRequest, CSEventDropInfoRequest.Builder> {
  private CSEventDropInfoRequest() { }
  private static readonly CSEventDropInfoRequest defaultInstance = new CSEventDropInfoRequest().MakeReadOnly();
  private static readonly string[] _cSEventDropInfoRequestFieldNames = new string[] { "eventId" };
  private static readonly uint[] _cSEventDropInfoRequestFieldTags = new uint[] { 8 };
  public static CSEventDropInfoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEventDropInfoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEventDropInfoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEventDropInfoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEventDropInfoRequest, CSEventDropInfoRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEventDropInfoRequest__FieldAccessorTable; }
  }
  
  public const int EventIdFieldNumber = 1;
  private bool hasEventId;
  private long eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public long EventId {
    get { return eventId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEventDropInfoRequestFieldNames;
    if (hasEventId) {
      output.WriteInt64(1, field_names[0], EventId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasEventId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, EventId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEventDropInfoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEventDropInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEventDropInfoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEventDropInfoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEventDropInfoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEventDropInfoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEventDropInfoRequest result;
    
    private CSEventDropInfoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEventDropInfoRequest original = result;
        result = new CSEventDropInfoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEventDropInfoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEventDropInfoRequest.Descriptor; }
    }
    
    public override CSEventDropInfoRequest DefaultInstanceForType {
      get { return global::CSEventDropInfoRequest.DefaultInstance; }
    }
    
    public override CSEventDropInfoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEventDropInfoRequest) {
        return MergeFrom((CSEventDropInfoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEventDropInfoRequest other) {
      if (other == global::CSEventDropInfoRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEventDropInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEventDropInfoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventId = input.ReadInt64(ref result.eventId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public long EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(long value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0L;
      return this;
    }
  }
  static CSEventDropInfoRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEventDropInfoResponse : pb::GeneratedMessage<SCEventDropInfoResponse, SCEventDropInfoResponse.Builder> {
  private SCEventDropInfoResponse() { }
  private static readonly SCEventDropInfoResponse defaultInstance = new SCEventDropInfoResponse().MakeReadOnly();
  private static readonly string[] _sCEventDropInfoResponseFieldNames = new string[] { "eventId", "normalProps", "perfectProps" };
  private static readonly uint[] _sCEventDropInfoResponseFieldTags = new uint[] { 24, 18, 10 };
  public static SCEventDropInfoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEventDropInfoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEventDropInfoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEventDropInfoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEventDropInfoResponse, SCEventDropInfoResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEventDropInfoResponse__FieldAccessorTable; }
  }
  
  public const int PerfectPropsFieldNumber = 1;
  private pbc::PopsicleList<global::EventDropInfo> perfectProps_ = new pbc::PopsicleList<global::EventDropInfo>();
  public scg::IList<global::EventDropInfo> PerfectPropsList {
    get { return perfectProps_; }
  }
  public int PerfectPropsCount {
    get { return perfectProps_.Count; }
  }
  public global::EventDropInfo GetPerfectProps(int index) {
    return perfectProps_[index];
  }
  
  public const int NormalPropsFieldNumber = 2;
  private pbc::PopsicleList<global::EventDropInfo> normalProps_ = new pbc::PopsicleList<global::EventDropInfo>();
  public scg::IList<global::EventDropInfo> NormalPropsList {
    get { return normalProps_; }
  }
  public int NormalPropsCount {
    get { return normalProps_.Count; }
  }
  public global::EventDropInfo GetNormalProps(int index) {
    return normalProps_[index];
  }
  
  public const int EventIdFieldNumber = 3;
  private bool hasEventId;
  private long eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public long EventId {
    get { return eventId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEventDropInfoResponseFieldNames;
    if (perfectProps_.Count > 0) {
      output.WriteMessageArray(1, field_names[2], perfectProps_);
    }
    if (normalProps_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], normalProps_);
    }
    if (hasEventId) {
      output.WriteInt64(3, field_names[0], EventId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::EventDropInfo element in PerfectPropsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    foreach (global::EventDropInfo element in NormalPropsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasEventId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, EventId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEventDropInfoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEventDropInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEventDropInfoResponse MakeReadOnly() {
    perfectProps_.MakeReadOnly();
    normalProps_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEventDropInfoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEventDropInfoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEventDropInfoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEventDropInfoResponse result;
    
    private SCEventDropInfoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEventDropInfoResponse original = result;
        result = new SCEventDropInfoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEventDropInfoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEventDropInfoResponse.Descriptor; }
    }
    
    public override SCEventDropInfoResponse DefaultInstanceForType {
      get { return global::SCEventDropInfoResponse.DefaultInstance; }
    }
    
    public override SCEventDropInfoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEventDropInfoResponse) {
        return MergeFrom((SCEventDropInfoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEventDropInfoResponse other) {
      if (other == global::SCEventDropInfoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.perfectProps_.Count != 0) {
        result.perfectProps_.Add(other.perfectProps_);
      }
      if (other.normalProps_.Count != 0) {
        result.normalProps_.Add(other.normalProps_);
      }
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEventDropInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEventDropInfoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.perfectProps_, global::EventDropInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.normalProps_, global::EventDropInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasEventId = input.ReadInt64(ref result.eventId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::EventDropInfo> PerfectPropsList {
      get { return PrepareBuilder().perfectProps_; }
    }
    public int PerfectPropsCount {
      get { return result.PerfectPropsCount; }
    }
    public global::EventDropInfo GetPerfectProps(int index) {
      return result.GetPerfectProps(index);
    }
    public Builder SetPerfectProps(int index, global::EventDropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.perfectProps_[index] = value;
      return this;
    }
    public Builder SetPerfectProps(int index, global::EventDropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.perfectProps_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPerfectProps(global::EventDropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.perfectProps_.Add(value);
      return this;
    }
    public Builder AddPerfectProps(global::EventDropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.perfectProps_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePerfectProps(scg::IEnumerable<global::EventDropInfo> values) {
      PrepareBuilder();
      result.perfectProps_.Add(values);
      return this;
    }
    public Builder ClearPerfectProps() {
      PrepareBuilder();
      result.perfectProps_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::EventDropInfo> NormalPropsList {
      get { return PrepareBuilder().normalProps_; }
    }
    public int NormalPropsCount {
      get { return result.NormalPropsCount; }
    }
    public global::EventDropInfo GetNormalProps(int index) {
      return result.GetNormalProps(index);
    }
    public Builder SetNormalProps(int index, global::EventDropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.normalProps_[index] = value;
      return this;
    }
    public Builder SetNormalProps(int index, global::EventDropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.normalProps_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddNormalProps(global::EventDropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.normalProps_.Add(value);
      return this;
    }
    public Builder AddNormalProps(global::EventDropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.normalProps_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeNormalProps(scg::IEnumerable<global::EventDropInfo> values) {
      PrepareBuilder();
      result.normalProps_.Add(values);
      return this;
    }
    public Builder ClearNormalProps() {
      PrepareBuilder();
      result.normalProps_.Clear();
      return this;
    }
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public long EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(long value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0L;
      return this;
    }
  }
  static SCEventDropInfoResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EventDropInfo : pb::GeneratedMessage<EventDropInfo, EventDropInfo.Builder> {
  private EventDropInfo() { }
  private static readonly EventDropInfo defaultInstance = new EventDropInfo().MakeReadOnly();
  private static readonly string[] _eventDropInfoFieldNames = new string[] { "count", "propId" };
  private static readonly uint[] _eventDropInfoFieldTags = new uint[] { 16, 8 };
  public static EventDropInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override EventDropInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override EventDropInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_EventDropInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<EventDropInfo, EventDropInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_EventDropInfo__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _eventDropInfoFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static EventDropInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static EventDropInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static EventDropInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static EventDropInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static EventDropInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static EventDropInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static EventDropInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static EventDropInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static EventDropInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static EventDropInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private EventDropInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(EventDropInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<EventDropInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(EventDropInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private EventDropInfo result;
    
    private EventDropInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        EventDropInfo original = result;
        result = new EventDropInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override EventDropInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::EventDropInfo.Descriptor; }
    }
    
    public override EventDropInfo DefaultInstanceForType {
      get { return global::EventDropInfo.DefaultInstance; }
    }
    
    public override EventDropInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is EventDropInfo) {
        return MergeFrom((EventDropInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(EventDropInfo other) {
      if (other == global::EventDropInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_eventDropInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _eventDropInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static EventDropInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSkillEmitRequest : pb::GeneratedMessage<CSSkillEmitRequest, CSSkillEmitRequest.Builder> {
  private CSSkillEmitRequest() { }
  private static readonly CSSkillEmitRequest defaultInstance = new CSSkillEmitRequest().MakeReadOnly();
  private static readonly string[] _cSSkillEmitRequestFieldNames = new string[] { "count", "inOrOutScene", "propId" };
  private static readonly uint[] _cSSkillEmitRequestFieldTags = new uint[] { 16, 24, 8 };
  public static CSSkillEmitRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSkillEmitRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSkillEmitRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSkillEmitRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSkillEmitRequest, CSSkillEmitRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSkillEmitRequest__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int InOrOutSceneFieldNumber = 3;
  private bool hasInOrOutScene;
  private global::InOrOutScene inOrOutScene_ = global::InOrOutScene.OUT_SCENE;
  public bool HasInOrOutScene {
    get { return hasInOrOutScene; }
  }
  public global::InOrOutScene InOrOutScene {
    get { return inOrOutScene_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSkillEmitRequestFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[2], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    if (hasInOrOutScene) {
      output.WriteEnum(3, field_names[1], (int) InOrOutScene, InOrOutScene);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    if (hasInOrOutScene) {
      size += pb::CodedOutputStream.ComputeEnumSize(3, (int) InOrOutScene);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSkillEmitRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSkillEmitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkillEmitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSkillEmitRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSkillEmitRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSkillEmitRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSkillEmitRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSkillEmitRequest result;
    
    private CSSkillEmitRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSkillEmitRequest original = result;
        result = new CSSkillEmitRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSkillEmitRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSkillEmitRequest.Descriptor; }
    }
    
    public override CSSkillEmitRequest DefaultInstanceForType {
      get { return global::CSSkillEmitRequest.DefaultInstance; }
    }
    
    public override CSSkillEmitRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSkillEmitRequest) {
        return MergeFrom((CSSkillEmitRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSkillEmitRequest other) {
      if (other == global::CSSkillEmitRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasInOrOutScene) {
        InOrOutScene = other.InOrOutScene;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSkillEmitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSkillEmitRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 24: {
            object unknown;
            if(input.ReadEnum(ref result.inOrOutScene_, out unknown)) {
              result.hasInOrOutScene = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(3, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasInOrOutScene {
     get { return result.hasInOrOutScene; }
    }
    public global::InOrOutScene InOrOutScene {
      get { return result.InOrOutScene; }
      set { SetInOrOutScene(value); }
    }
    public Builder SetInOrOutScene(global::InOrOutScene value) {
      PrepareBuilder();
      result.hasInOrOutScene = true;
      result.inOrOutScene_ = value;
      return this;
    }
    public Builder ClearInOrOutScene() {
      PrepareBuilder();
      result.hasInOrOutScene = false;
      result.inOrOutScene_ = global::InOrOutScene.OUT_SCENE;
      return this;
    }
  }
  static CSSkillEmitRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSkillEmitResponse : pb::GeneratedMessage<SCSkillEmitResponse, SCSkillEmitResponse.Builder> {
  private SCSkillEmitResponse() { }
  private static readonly SCSkillEmitResponse defaultInstance = new SCSkillEmitResponse().MakeReadOnly();
  private static readonly string[] _sCSkillEmitResponseFieldNames = new string[] { "propId", "result", "skillId" };
  private static readonly uint[] _sCSkillEmitResponseFieldTags = new uint[] { 24, 8, 16 };
  public static SCSkillEmitResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSkillEmitResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSkillEmitResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSkillEmitResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSkillEmitResponse, SCSkillEmitResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSkillEmitResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int SkillIdFieldNumber = 2;
  private bool hasSkillId;
  private long skillId_;
  public bool HasSkillId {
    get { return hasSkillId; }
  }
  public long SkillId {
    get { return skillId_; }
  }
  
  public const int PropIdFieldNumber = 3;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSkillEmitResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[1], Result);
    }
    if (hasSkillId) {
      output.WriteInt64(2, field_names[2], SkillId);
    }
    if (hasPropId) {
      output.WriteInt64(3, field_names[0], PropId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasSkillId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SkillId);
    }
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, PropId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSkillEmitResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSkillEmitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkillEmitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSkillEmitResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSkillEmitResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSkillEmitResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSkillEmitResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSkillEmitResponse result;
    
    private SCSkillEmitResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSkillEmitResponse original = result;
        result = new SCSkillEmitResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSkillEmitResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSkillEmitResponse.Descriptor; }
    }
    
    public override SCSkillEmitResponse DefaultInstanceForType {
      get { return global::SCSkillEmitResponse.DefaultInstance; }
    }
    
    public override SCSkillEmitResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSkillEmitResponse) {
        return MergeFrom((SCSkillEmitResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSkillEmitResponse other) {
      if (other == global::SCSkillEmitResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSkillEmitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSkillEmitResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasSkillId = input.ReadInt64(ref result.skillId_);
            break;
          }
          case 24: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasSkillId {
      get { return result.hasSkillId; }
    }
    public long SkillId {
      get { return result.SkillId; }
      set { SetSkillId(value); }
    }
    public Builder SetSkillId(long value) {
      PrepareBuilder();
      result.hasSkillId = true;
      result.skillId_ = value;
      return this;
    }
    public Builder ClearSkillId() {
      PrepareBuilder();
      result.hasSkillId = false;
      result.skillId_ = 0L;
      return this;
    }
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
  }
  static SCSkillEmitResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSkillTimerEmitReq : pb::GeneratedMessage<CSSkillTimerEmitReq, CSSkillTimerEmitReq.Builder> {
  private CSSkillTimerEmitReq() { }
  private static readonly CSSkillTimerEmitReq defaultInstance = new CSSkillTimerEmitReq().MakeReadOnly();
  private static readonly string[] _cSSkillTimerEmitReqFieldNames = new string[] {  };
  private static readonly uint[] _cSSkillTimerEmitReqFieldTags = new uint[] {  };
  public static CSSkillTimerEmitReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSkillTimerEmitReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSkillTimerEmitReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSkillTimerEmitReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSkillTimerEmitReq, CSSkillTimerEmitReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSkillTimerEmitReq__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSkillTimerEmitReqFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSkillTimerEmitReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkillTimerEmitReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSkillTimerEmitReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSkillTimerEmitReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSkillTimerEmitReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSkillTimerEmitReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSkillTimerEmitReq result;
    
    private CSSkillTimerEmitReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSkillTimerEmitReq original = result;
        result = new CSSkillTimerEmitReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSkillTimerEmitReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSkillTimerEmitReq.Descriptor; }
    }
    
    public override CSSkillTimerEmitReq DefaultInstanceForType {
      get { return global::CSSkillTimerEmitReq.DefaultInstance; }
    }
    
    public override CSSkillTimerEmitReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSkillTimerEmitReq) {
        return MergeFrom((CSSkillTimerEmitReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSkillTimerEmitReq other) {
      if (other == global::CSSkillTimerEmitReq.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSkillTimerEmitReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSkillTimerEmitReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSSkillTimerEmitReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSkillTimerEmitResp : pb::GeneratedMessage<SCSkillTimerEmitResp, SCSkillTimerEmitResp.Builder> {
  private SCSkillTimerEmitResp() { }
  private static readonly SCSkillTimerEmitResp defaultInstance = new SCSkillTimerEmitResp().MakeReadOnly();
  private static readonly string[] _sCSkillTimerEmitRespFieldNames = new string[] { "playerOfficerId", "result", "skillId" };
  private static readonly uint[] _sCSkillTimerEmitRespFieldTags = new uint[] { 24, 8, 16 };
  public static SCSkillTimerEmitResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSkillTimerEmitResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSkillTimerEmitResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSkillTimerEmitResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSkillTimerEmitResp, SCSkillTimerEmitResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSkillTimerEmitResp__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int SkillIdFieldNumber = 2;
  private bool hasSkillId;
  private long skillId_;
  public bool HasSkillId {
    get { return hasSkillId; }
  }
  public long SkillId {
    get { return skillId_; }
  }
  
  public const int PlayerOfficerIdFieldNumber = 3;
  private bool hasPlayerOfficerId;
  private long playerOfficerId_;
  public bool HasPlayerOfficerId {
    get { return hasPlayerOfficerId; }
  }
  public long PlayerOfficerId {
    get { return playerOfficerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSkillTimerEmitRespFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[1], Result);
    }
    if (hasSkillId) {
      output.WriteInt64(2, field_names[2], SkillId);
    }
    if (hasPlayerOfficerId) {
      output.WriteInt64(3, field_names[0], PlayerOfficerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasSkillId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SkillId);
    }
    if (hasPlayerOfficerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, PlayerOfficerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSkillTimerEmitResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkillTimerEmitResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSkillTimerEmitResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSkillTimerEmitResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSkillTimerEmitResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSkillTimerEmitResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSkillTimerEmitResp result;
    
    private SCSkillTimerEmitResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSkillTimerEmitResp original = result;
        result = new SCSkillTimerEmitResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSkillTimerEmitResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSkillTimerEmitResp.Descriptor; }
    }
    
    public override SCSkillTimerEmitResp DefaultInstanceForType {
      get { return global::SCSkillTimerEmitResp.DefaultInstance; }
    }
    
    public override SCSkillTimerEmitResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSkillTimerEmitResp) {
        return MergeFrom((SCSkillTimerEmitResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSkillTimerEmitResp other) {
      if (other == global::SCSkillTimerEmitResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasSkillId) {
        SkillId = other.SkillId;
      }
      if (other.HasPlayerOfficerId) {
        PlayerOfficerId = other.PlayerOfficerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSkillTimerEmitRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSkillTimerEmitRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasSkillId = input.ReadInt64(ref result.skillId_);
            break;
          }
          case 24: {
            result.hasPlayerOfficerId = input.ReadInt64(ref result.playerOfficerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasSkillId {
      get { return result.hasSkillId; }
    }
    public long SkillId {
      get { return result.SkillId; }
      set { SetSkillId(value); }
    }
    public Builder SetSkillId(long value) {
      PrepareBuilder();
      result.hasSkillId = true;
      result.skillId_ = value;
      return this;
    }
    public Builder ClearSkillId() {
      PrepareBuilder();
      result.hasSkillId = false;
      result.skillId_ = 0L;
      return this;
    }
    
    public bool HasPlayerOfficerId {
      get { return result.hasPlayerOfficerId; }
    }
    public long PlayerOfficerId {
      get { return result.PlayerOfficerId; }
      set { SetPlayerOfficerId(value); }
    }
    public Builder SetPlayerOfficerId(long value) {
      PrepareBuilder();
      result.hasPlayerOfficerId = true;
      result.playerOfficerId_ = value;
      return this;
    }
    public Builder ClearPlayerOfficerId() {
      PrepareBuilder();
      result.hasPlayerOfficerId = false;
      result.playerOfficerId_ = 0L;
      return this;
    }
  }
  static SCSkillTimerEmitResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSReasoningRewardReq : pb::GeneratedMessage<CSReasoningRewardReq, CSReasoningRewardReq.Builder> {
  private CSReasoningRewardReq() { }
  private static readonly CSReasoningRewardReq defaultInstance = new CSReasoningRewardReq().MakeReadOnly();
  private static readonly string[] _cSReasoningRewardReqFieldNames = new string[] { "reasoningId" };
  private static readonly uint[] _cSReasoningRewardReqFieldTags = new uint[] { 8 };
  public static CSReasoningRewardReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSReasoningRewardReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSReasoningRewardReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSReasoningRewardReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSReasoningRewardReq, CSReasoningRewardReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSReasoningRewardReq__FieldAccessorTable; }
  }
  
  public const int ReasoningIdFieldNumber = 1;
  private bool hasReasoningId;
  private long reasoningId_;
  public bool HasReasoningId {
    get { return hasReasoningId; }
  }
  public long ReasoningId {
    get { return reasoningId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSReasoningRewardReqFieldNames;
    if (hasReasoningId) {
      output.WriteInt64(1, field_names[0], ReasoningId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasReasoningId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, ReasoningId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSReasoningRewardReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSReasoningRewardReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSReasoningRewardReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSReasoningRewardReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSReasoningRewardReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSReasoningRewardReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSReasoningRewardReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSReasoningRewardReq result;
    
    private CSReasoningRewardReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSReasoningRewardReq original = result;
        result = new CSReasoningRewardReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSReasoningRewardReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSReasoningRewardReq.Descriptor; }
    }
    
    public override CSReasoningRewardReq DefaultInstanceForType {
      get { return global::CSReasoningRewardReq.DefaultInstance; }
    }
    
    public override CSReasoningRewardReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSReasoningRewardReq) {
        return MergeFrom((CSReasoningRewardReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSReasoningRewardReq other) {
      if (other == global::CSReasoningRewardReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasReasoningId) {
        ReasoningId = other.ReasoningId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSReasoningRewardReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSReasoningRewardReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasReasoningId = input.ReadInt64(ref result.reasoningId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasReasoningId {
      get { return result.hasReasoningId; }
    }
    public long ReasoningId {
      get { return result.ReasoningId; }
      set { SetReasoningId(value); }
    }
    public Builder SetReasoningId(long value) {
      PrepareBuilder();
      result.hasReasoningId = true;
      result.reasoningId_ = value;
      return this;
    }
    public Builder ClearReasoningId() {
      PrepareBuilder();
      result.hasReasoningId = false;
      result.reasoningId_ = 0L;
      return this;
    }
  }
  static CSReasoningRewardReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFindEnterReq : pb::GeneratedMessage<CSFindEnterReq, CSFindEnterReq.Builder> {
  private CSFindEnterReq() { }
  private static readonly CSFindEnterReq defaultInstance = new CSFindEnterReq().MakeReadOnly();
  private static readonly string[] _cSFindEnterReqFieldNames = new string[] { "findId" };
  private static readonly uint[] _cSFindEnterReqFieldTags = new uint[] { 8 };
  public static CSFindEnterReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFindEnterReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFindEnterReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFindEnterReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFindEnterReq, CSFindEnterReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFindEnterReq__FieldAccessorTable; }
  }
  
  public const int FindIdFieldNumber = 1;
  private bool hasFindId;
  private long findId_;
  public bool HasFindId {
    get { return hasFindId; }
  }
  public long FindId {
    get { return findId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFindEnterReqFieldNames;
    if (hasFindId) {
      output.WriteInt64(1, field_names[0], FindId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFindId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, FindId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFindEnterReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFindEnterReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFindEnterReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFindEnterReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFindEnterReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFindEnterReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFindEnterReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFindEnterReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFindEnterReq result;
    
    private CSFindEnterReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFindEnterReq original = result;
        result = new CSFindEnterReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFindEnterReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFindEnterReq.Descriptor; }
    }
    
    public override CSFindEnterReq DefaultInstanceForType {
      get { return global::CSFindEnterReq.DefaultInstance; }
    }
    
    public override CSFindEnterReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFindEnterReq) {
        return MergeFrom((CSFindEnterReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFindEnterReq other) {
      if (other == global::CSFindEnterReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFindId) {
        FindId = other.FindId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFindEnterReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFindEnterReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFindId = input.ReadInt64(ref result.findId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFindId {
      get { return result.hasFindId; }
    }
    public long FindId {
      get { return result.FindId; }
      set { SetFindId(value); }
    }
    public Builder SetFindId(long value) {
      PrepareBuilder();
      result.hasFindId = true;
      result.findId_ = value;
      return this;
    }
    public Builder ClearFindId() {
      PrepareBuilder();
      result.hasFindId = false;
      result.findId_ = 0L;
      return this;
    }
  }
  static CSFindEnterReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFindEnterResp : pb::GeneratedMessage<SCFindEnterResp, SCFindEnterResp.Builder> {
  private SCFindEnterResp() { }
  private static readonly SCFindEnterResp defaultInstance = new SCFindEnterResp().MakeReadOnly();
  private static readonly string[] _sCFindEnterRespFieldNames = new string[] { "result" };
  private static readonly uint[] _sCFindEnterRespFieldTags = new uint[] { 8 };
  public static SCFindEnterResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFindEnterResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFindEnterResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFindEnterResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFindEnterResp, SCFindEnterResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFindEnterResp__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFindEnterRespFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFindEnterResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFindEnterResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFindEnterResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFindEnterResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFindEnterResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFindEnterResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFindEnterResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFindEnterResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFindEnterResp result;
    
    private SCFindEnterResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFindEnterResp original = result;
        result = new SCFindEnterResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFindEnterResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFindEnterResp.Descriptor; }
    }
    
    public override SCFindEnterResp DefaultInstanceForType {
      get { return global::SCFindEnterResp.DefaultInstance; }
    }
    
    public override SCFindEnterResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFindEnterResp) {
        return MergeFrom((SCFindEnterResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFindEnterResp other) {
      if (other == global::SCFindEnterResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFindEnterRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFindEnterRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCFindEnterResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFindRewardReq : pb::GeneratedMessage<CSFindRewardReq, CSFindRewardReq.Builder> {
  private CSFindRewardReq() { }
  private static readonly CSFindRewardReq defaultInstance = new CSFindRewardReq().MakeReadOnly();
  private static readonly string[] _cSFindRewardReqFieldNames = new string[] { "findId", "foundNum", "result", "totalNum" };
  private static readonly uint[] _cSFindRewardReqFieldTags = new uint[] { 8, 24, 16, 32 };
  public static CSFindRewardReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFindRewardReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFindRewardReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFindRewardReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFindRewardReq, CSFindRewardReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFindRewardReq__FieldAccessorTable; }
  }
  
  public const int FindIdFieldNumber = 1;
  private bool hasFindId;
  private long findId_;
  public bool HasFindId {
    get { return hasFindId; }
  }
  public long FindId {
    get { return findId_; }
  }
  
  public const int ResultFieldNumber = 2;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int FoundNumFieldNumber = 3;
  private bool hasFoundNum;
  private int foundNum_;
  public bool HasFoundNum {
    get { return hasFoundNum; }
  }
  public int FoundNum {
    get { return foundNum_; }
  }
  
  public const int TotalNumFieldNumber = 4;
  private bool hasTotalNum;
  private int totalNum_;
  public bool HasTotalNum {
    get { return hasTotalNum; }
  }
  public int TotalNum {
    get { return totalNum_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFindRewardReqFieldNames;
    if (hasFindId) {
      output.WriteInt64(1, field_names[0], FindId);
    }
    if (hasResult) {
      output.WriteInt32(2, field_names[2], Result);
    }
    if (hasFoundNum) {
      output.WriteInt32(3, field_names[1], FoundNum);
    }
    if (hasTotalNum) {
      output.WriteInt32(4, field_names[3], TotalNum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFindId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, FindId);
    }
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Result);
    }
    if (hasFoundNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, FoundNum);
    }
    if (hasTotalNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, TotalNum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFindRewardReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFindRewardReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFindRewardReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFindRewardReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFindRewardReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFindRewardReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFindRewardReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFindRewardReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFindRewardReq result;
    
    private CSFindRewardReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFindRewardReq original = result;
        result = new CSFindRewardReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFindRewardReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFindRewardReq.Descriptor; }
    }
    
    public override CSFindRewardReq DefaultInstanceForType {
      get { return global::CSFindRewardReq.DefaultInstance; }
    }
    
    public override CSFindRewardReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFindRewardReq) {
        return MergeFrom((CSFindRewardReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFindRewardReq other) {
      if (other == global::CSFindRewardReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFindId) {
        FindId = other.FindId;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasFoundNum) {
        FoundNum = other.FoundNum;
      }
      if (other.HasTotalNum) {
        TotalNum = other.TotalNum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFindRewardReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFindRewardReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFindId = input.ReadInt64(ref result.findId_);
            break;
          }
          case 16: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 24: {
            result.hasFoundNum = input.ReadInt32(ref result.foundNum_);
            break;
          }
          case 32: {
            result.hasTotalNum = input.ReadInt32(ref result.totalNum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFindId {
      get { return result.hasFindId; }
    }
    public long FindId {
      get { return result.FindId; }
      set { SetFindId(value); }
    }
    public Builder SetFindId(long value) {
      PrepareBuilder();
      result.hasFindId = true;
      result.findId_ = value;
      return this;
    }
    public Builder ClearFindId() {
      PrepareBuilder();
      result.hasFindId = false;
      result.findId_ = 0L;
      return this;
    }
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasFoundNum {
      get { return result.hasFoundNum; }
    }
    public int FoundNum {
      get { return result.FoundNum; }
      set { SetFoundNum(value); }
    }
    public Builder SetFoundNum(int value) {
      PrepareBuilder();
      result.hasFoundNum = true;
      result.foundNum_ = value;
      return this;
    }
    public Builder ClearFoundNum() {
      PrepareBuilder();
      result.hasFoundNum = false;
      result.foundNum_ = 0;
      return this;
    }
    
    public bool HasTotalNum {
      get { return result.hasTotalNum; }
    }
    public int TotalNum {
      get { return result.TotalNum; }
      set { SetTotalNum(value); }
    }
    public Builder SetTotalNum(int value) {
      PrepareBuilder();
      result.hasTotalNum = true;
      result.totalNum_ = value;
      return this;
    }
    public Builder ClearTotalNum() {
      PrepareBuilder();
      result.hasTotalNum = false;
      result.totalNum_ = 0;
      return this;
    }
  }
  static CSFindRewardReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFindRewardResp : pb::GeneratedMessage<SCFindRewardResp, SCFindRewardResp.Builder> {
  private SCFindRewardResp() { }
  private static readonly SCFindRewardResp defaultInstance = new SCFindRewardResp().MakeReadOnly();
  private static readonly string[] _sCFindRewardRespFieldNames = new string[] { "ResponseStatus", "sceneRewardComprise", "vit" };
  private static readonly uint[] _sCFindRewardRespFieldTags = new uint[] { 10, 26, 16 };
  public static SCFindRewardResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFindRewardResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFindRewardResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFindRewardResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFindRewardResp, SCFindRewardResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFindRewardResp__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int VitFieldNumber = 2;
  private bool hasVit;
  private int vit_;
  public bool HasVit {
    get { return hasVit; }
  }
  public int Vit {
    get { return vit_; }
  }
  
  public const int SceneRewardCompriseFieldNumber = 3;
  private pbc::PopsicleList<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::PopsicleList<global::SceneRewardComprise>();
  public scg::IList<global::SceneRewardComprise> SceneRewardCompriseList {
    get { return sceneRewardComprise_; }
  }
  public int SceneRewardCompriseCount {
    get { return sceneRewardComprise_.Count; }
  }
  public global::SceneRewardComprise GetSceneRewardComprise(int index) {
    return sceneRewardComprise_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFindRewardRespFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[0], ResponseStatus);
    }
    if (hasVit) {
      output.WriteInt32(2, field_names[2], Vit);
    }
    if (sceneRewardComprise_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], sceneRewardComprise_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Vit);
    }
    foreach (global::SceneRewardComprise element in SceneRewardCompriseList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFindRewardResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFindRewardResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFindRewardResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFindRewardResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFindRewardResp MakeReadOnly() {
    sceneRewardComprise_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFindRewardResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFindRewardResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFindRewardResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFindRewardResp result;
    
    private SCFindRewardResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFindRewardResp original = result;
        result = new SCFindRewardResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFindRewardResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFindRewardResp.Descriptor; }
    }
    
    public override SCFindRewardResp DefaultInstanceForType {
      get { return global::SCFindRewardResp.DefaultInstance; }
    }
    
    public override SCFindRewardResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFindRewardResp) {
        return MergeFrom((SCFindRewardResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFindRewardResp other) {
      if (other == global::SCFindRewardResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasVit) {
        Vit = other.Vit;
      }
      if (other.sceneRewardComprise_.Count != 0) {
        result.sceneRewardComprise_.Add(other.sceneRewardComprise_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFindRewardRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFindRewardRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasVit = input.ReadInt32(ref result.vit_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.sceneRewardComprise_, global::SceneRewardComprise.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasVit {
      get { return result.hasVit; }
    }
    public int Vit {
      get { return result.Vit; }
      set { SetVit(value); }
    }
    public Builder SetVit(int value) {
      PrepareBuilder();
      result.hasVit = true;
      result.vit_ = value;
      return this;
    }
    public Builder ClearVit() {
      PrepareBuilder();
      result.hasVit = false;
      result.vit_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::SceneRewardComprise> SceneRewardCompriseList {
      get { return PrepareBuilder().sceneRewardComprise_; }
    }
    public int SceneRewardCompriseCount {
      get { return result.SceneRewardCompriseCount; }
    }
    public global::SceneRewardComprise GetSceneRewardComprise(int index) {
      return result.GetSceneRewardComprise(index);
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = value;
      return this;
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(value);
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSceneRewardComprise(scg::IEnumerable<global::SceneRewardComprise> values) {
      PrepareBuilder();
      result.sceneRewardComprise_.Add(values);
      return this;
    }
    public Builder ClearSceneRewardComprise() {
      PrepareBuilder();
      result.sceneRewardComprise_.Clear();
      return this;
    }
  }
  static SCFindRewardResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSkyEyeRewardReq : pb::GeneratedMessage<CSSkyEyeRewardReq, CSSkyEyeRewardReq.Builder> {
  private CSSkyEyeRewardReq() { }
  private static readonly CSSkyEyeRewardReq defaultInstance = new CSSkyEyeRewardReq().MakeReadOnly();
  private static readonly string[] _cSSkyEyeRewardReqFieldNames = new string[] { "skyEyeId" };
  private static readonly uint[] _cSSkyEyeRewardReqFieldTags = new uint[] { 8 };
  public static CSSkyEyeRewardReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSkyEyeRewardReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSkyEyeRewardReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSkyEyeRewardReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSkyEyeRewardReq, CSSkyEyeRewardReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSkyEyeRewardReq__FieldAccessorTable; }
  }
  
  public const int SkyEyeIdFieldNumber = 1;
  private bool hasSkyEyeId;
  private long skyEyeId_;
  public bool HasSkyEyeId {
    get { return hasSkyEyeId; }
  }
  public long SkyEyeId {
    get { return skyEyeId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSkyEyeRewardReqFieldNames;
    if (hasSkyEyeId) {
      output.WriteInt64(1, field_names[0], SkyEyeId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSkyEyeId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SkyEyeId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSkyEyeRewardReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkyEyeRewardReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSkyEyeRewardReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSkyEyeRewardReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSkyEyeRewardReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSkyEyeRewardReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSkyEyeRewardReq result;
    
    private CSSkyEyeRewardReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSkyEyeRewardReq original = result;
        result = new CSSkyEyeRewardReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSkyEyeRewardReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSkyEyeRewardReq.Descriptor; }
    }
    
    public override CSSkyEyeRewardReq DefaultInstanceForType {
      get { return global::CSSkyEyeRewardReq.DefaultInstance; }
    }
    
    public override CSSkyEyeRewardReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSkyEyeRewardReq) {
        return MergeFrom((CSSkyEyeRewardReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSkyEyeRewardReq other) {
      if (other == global::CSSkyEyeRewardReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSkyEyeId) {
        SkyEyeId = other.SkyEyeId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSkyEyeRewardReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSkyEyeRewardReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSkyEyeId = input.ReadInt64(ref result.skyEyeId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSkyEyeId {
      get { return result.hasSkyEyeId; }
    }
    public long SkyEyeId {
      get { return result.SkyEyeId; }
      set { SetSkyEyeId(value); }
    }
    public Builder SetSkyEyeId(long value) {
      PrepareBuilder();
      result.hasSkyEyeId = true;
      result.skyEyeId_ = value;
      return this;
    }
    public Builder ClearSkyEyeId() {
      PrepareBuilder();
      result.hasSkyEyeId = false;
      result.skyEyeId_ = 0L;
      return this;
    }
  }
  static CSSkyEyeRewardReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSkyEyeRewardReq : pb::GeneratedMessage<SCSkyEyeRewardReq, SCSkyEyeRewardReq.Builder> {
  private SCSkyEyeRewardReq() { }
  private static readonly SCSkyEyeRewardReq defaultInstance = new SCSkyEyeRewardReq().MakeReadOnly();
  private static readonly string[] _sCSkyEyeRewardReqFieldNames = new string[] { "ResponseStatus", "items", "skyEyeId" };
  private static readonly uint[] _sCSkyEyeRewardReqFieldTags = new uint[] { 18, 26, 8 };
  public static SCSkyEyeRewardReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSkyEyeRewardReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSkyEyeRewardReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSkyEyeRewardReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSkyEyeRewardReq, SCSkyEyeRewardReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSkyEyeRewardReq__FieldAccessorTable; }
  }
  
  public const int SkyEyeIdFieldNumber = 1;
  private bool hasSkyEyeId;
  private long skyEyeId_;
  public bool HasSkyEyeId {
    get { return hasSkyEyeId; }
  }
  public long SkyEyeId {
    get { return skyEyeId_; }
  }
  
  public const int ResponseStatusFieldNumber = 2;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int ItemsFieldNumber = 3;
  private pbc::PopsicleList<global::RewardItem> items_ = new pbc::PopsicleList<global::RewardItem>();
  public scg::IList<global::RewardItem> ItemsList {
    get { return items_; }
  }
  public int ItemsCount {
    get { return items_.Count; }
  }
  public global::RewardItem GetItems(int index) {
    return items_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSkyEyeRewardReqFieldNames;
    if (hasSkyEyeId) {
      output.WriteInt64(1, field_names[2], SkyEyeId);
    }
    if (hasResponseStatus) {
      output.WriteMessage(2, field_names[0], ResponseStatus);
    }
    if (items_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], items_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSkyEyeId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SkyEyeId);
    }
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ResponseStatus);
    }
    foreach (global::RewardItem element in ItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSkyEyeRewardReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkyEyeRewardReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSkyEyeRewardReq MakeReadOnly() {
    items_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSkyEyeRewardReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSkyEyeRewardReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSkyEyeRewardReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSkyEyeRewardReq result;
    
    private SCSkyEyeRewardReq PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSkyEyeRewardReq original = result;
        result = new SCSkyEyeRewardReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSkyEyeRewardReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSkyEyeRewardReq.Descriptor; }
    }
    
    public override SCSkyEyeRewardReq DefaultInstanceForType {
      get { return global::SCSkyEyeRewardReq.DefaultInstance; }
    }
    
    public override SCSkyEyeRewardReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSkyEyeRewardReq) {
        return MergeFrom((SCSkyEyeRewardReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSkyEyeRewardReq other) {
      if (other == global::SCSkyEyeRewardReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSkyEyeId) {
        SkyEyeId = other.SkyEyeId;
      }
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.items_.Count != 0) {
        result.items_.Add(other.items_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSkyEyeRewardReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSkyEyeRewardReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSkyEyeId = input.ReadInt64(ref result.skyEyeId_);
            break;
          }
          case 18: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.items_, global::RewardItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSkyEyeId {
      get { return result.hasSkyEyeId; }
    }
    public long SkyEyeId {
      get { return result.SkyEyeId; }
      set { SetSkyEyeId(value); }
    }
    public Builder SetSkyEyeId(long value) {
      PrepareBuilder();
      result.hasSkyEyeId = true;
      result.skyEyeId_ = value;
      return this;
    }
    public Builder ClearSkyEyeId() {
      PrepareBuilder();
      result.hasSkyEyeId = false;
      result.skyEyeId_ = 0L;
      return this;
    }
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::RewardItem> ItemsList {
      get { return PrepareBuilder().items_; }
    }
    public int ItemsCount {
      get { return result.ItemsCount; }
    }
    public global::RewardItem GetItems(int index) {
      return result.GetItems(index);
    }
    public Builder SetItems(int index, global::RewardItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_[index] = value;
      return this;
    }
    public Builder SetItems(int index, global::RewardItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddItems(global::RewardItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_.Add(value);
      return this;
    }
    public Builder AddItems(global::RewardItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeItems(scg::IEnumerable<global::RewardItem> values) {
      PrepareBuilder();
      result.items_.Add(values);
      return this;
    }
    public Builder ClearItems() {
      PrepareBuilder();
      result.items_.Clear();
      return this;
    }
  }
  static SCSkyEyeRewardReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSkyEyeReq : pb::GeneratedMessage<CSSkyEyeReq, CSSkyEyeReq.Builder> {
  private CSSkyEyeReq() { }
  private static readonly CSSkyEyeReq defaultInstance = new CSSkyEyeReq().MakeReadOnly();
  private static readonly string[] _cSSkyEyeReqFieldNames = new string[] {  };
  private static readonly uint[] _cSSkyEyeReqFieldTags = new uint[] {  };
  public static CSSkyEyeReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSkyEyeReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSkyEyeReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSkyEyeReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSkyEyeReq, CSSkyEyeReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSkyEyeReq__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSkyEyeReqFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSkyEyeReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSkyEyeReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSkyEyeReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSkyEyeReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSkyEyeReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSkyEyeReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSkyEyeReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSkyEyeReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSkyEyeReq result;
    
    private CSSkyEyeReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSkyEyeReq original = result;
        result = new CSSkyEyeReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSkyEyeReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSkyEyeReq.Descriptor; }
    }
    
    public override CSSkyEyeReq DefaultInstanceForType {
      get { return global::CSSkyEyeReq.DefaultInstance; }
    }
    
    public override CSSkyEyeReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSkyEyeReq) {
        return MergeFrom((CSSkyEyeReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSkyEyeReq other) {
      if (other == global::CSSkyEyeReq.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSkyEyeReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSkyEyeReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSSkyEyeReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSkyEyeReq : pb::GeneratedMessage<SCSkyEyeReq, SCSkyEyeReq.Builder> {
  private SCSkyEyeReq() { }
  private static readonly SCSkyEyeReq defaultInstance = new SCSkyEyeReq().MakeReadOnly();
  private static readonly string[] _sCSkyEyeReqFieldNames = new string[] { "hasRewarded" };
  private static readonly uint[] _sCSkyEyeReqFieldTags = new uint[] { 8 };
  public static SCSkyEyeReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSkyEyeReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSkyEyeReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSkyEyeReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSkyEyeReq, SCSkyEyeReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSkyEyeReq__FieldAccessorTable; }
  }
  
  public const int HasRewardedFieldNumber = 1;
  private pbc::PopsicleList<long> hasRewarded_ = new pbc::PopsicleList<long>();
  public scg::IList<long> HasRewardedList {
    get { return pbc::Lists.AsReadOnly(hasRewarded_); }
  }
  public int HasRewardedCount {
    get { return hasRewarded_.Count; }
  }
  public long GetHasRewarded(int index) {
    return hasRewarded_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSkyEyeReqFieldNames;
    if (hasRewarded_.Count > 0) {
      output.WriteInt64Array(1, field_names[0], hasRewarded_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (long element in HasRewardedList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * hasRewarded_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSkyEyeReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSkyEyeReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSkyEyeReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSkyEyeReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSkyEyeReq MakeReadOnly() {
    hasRewarded_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSkyEyeReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSkyEyeReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSkyEyeReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSkyEyeReq result;
    
    private SCSkyEyeReq PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSkyEyeReq original = result;
        result = new SCSkyEyeReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSkyEyeReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSkyEyeReq.Descriptor; }
    }
    
    public override SCSkyEyeReq DefaultInstanceForType {
      get { return global::SCSkyEyeReq.DefaultInstance; }
    }
    
    public override SCSkyEyeReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSkyEyeReq) {
        return MergeFrom((SCSkyEyeReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSkyEyeReq other) {
      if (other == global::SCSkyEyeReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.hasRewarded_.Count != 0) {
        result.hasRewarded_.Add(other.hasRewarded_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSkyEyeReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSkyEyeReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt64Array(tag, field_name, result.hasRewarded_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<long> HasRewardedList {
      get { return PrepareBuilder().hasRewarded_; }
    }
    public int HasRewardedCount {
      get { return result.HasRewardedCount; }
    }
    public long GetHasRewarded(int index) {
      return result.GetHasRewarded(index);
    }
    public Builder SetHasRewarded(int index, long value) {
      PrepareBuilder();
      result.hasRewarded_[index] = value;
      return this;
    }
    public Builder AddHasRewarded(long value) {
      PrepareBuilder();
      result.hasRewarded_.Add(value);
      return this;
    }
    public Builder AddRangeHasRewarded(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.hasRewarded_.Add(values);
      return this;
    }
    public Builder ClearHasRewarded() {
      PrepareBuilder();
      result.hasRewarded_.Clear();
      return this;
    }
  }
  static SCSkyEyeReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DiscountInfo : pb::GeneratedMessage<DiscountInfo, DiscountInfo.Builder> {
  private DiscountInfo() { }
  private static readonly DiscountInfo defaultInstance = new DiscountInfo().MakeReadOnly();
  private static readonly string[] _discountInfoFieldNames = new string[] { "discount", "discountCost", "discountEnd", "discountIcon", "discountStart" };
  private static readonly uint[] _discountInfoFieldTags = new uint[] { 16, 8, 32, 42, 24 };
  public static DiscountInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DiscountInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DiscountInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_DiscountInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DiscountInfo, DiscountInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_DiscountInfo__FieldAccessorTable; }
  }
  
  public const int DiscountCostFieldNumber = 1;
  private bool hasDiscountCost;
  private int discountCost_;
  public bool HasDiscountCost {
    get { return hasDiscountCost; }
  }
  public int DiscountCost {
    get { return discountCost_; }
  }
  
  public const int DiscountFieldNumber = 2;
  private bool hasDiscount;
  private int discount_;
  public bool HasDiscount {
    get { return hasDiscount; }
  }
  public int Discount {
    get { return discount_; }
  }
  
  public const int DiscountStartFieldNumber = 3;
  private bool hasDiscountStart;
  private long discountStart_;
  public bool HasDiscountStart {
    get { return hasDiscountStart; }
  }
  public long DiscountStart {
    get { return discountStart_; }
  }
  
  public const int DiscountEndFieldNumber = 4;
  private bool hasDiscountEnd;
  private long discountEnd_;
  public bool HasDiscountEnd {
    get { return hasDiscountEnd; }
  }
  public long DiscountEnd {
    get { return discountEnd_; }
  }
  
  public const int DiscountIconFieldNumber = 5;
  private bool hasDiscountIcon;
  private string discountIcon_ = "";
  public bool HasDiscountIcon {
    get { return hasDiscountIcon; }
  }
  public string DiscountIcon {
    get { return discountIcon_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _discountInfoFieldNames;
    if (hasDiscountCost) {
      output.WriteInt32(1, field_names[1], DiscountCost);
    }
    if (hasDiscount) {
      output.WriteInt32(2, field_names[0], Discount);
    }
    if (hasDiscountStart) {
      output.WriteInt64(3, field_names[4], DiscountStart);
    }
    if (hasDiscountEnd) {
      output.WriteInt64(4, field_names[2], DiscountEnd);
    }
    if (hasDiscountIcon) {
      output.WriteString(5, field_names[3], DiscountIcon);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDiscountCost) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, DiscountCost);
    }
    if (hasDiscount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Discount);
    }
    if (hasDiscountStart) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, DiscountStart);
    }
    if (hasDiscountEnd) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, DiscountEnd);
    }
    if (hasDiscountIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(5, DiscountIcon);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DiscountInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DiscountInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DiscountInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DiscountInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DiscountInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DiscountInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DiscountInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DiscountInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DiscountInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DiscountInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DiscountInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DiscountInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DiscountInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DiscountInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DiscountInfo result;
    
    private DiscountInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        DiscountInfo original = result;
        result = new DiscountInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DiscountInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DiscountInfo.Descriptor; }
    }
    
    public override DiscountInfo DefaultInstanceForType {
      get { return global::DiscountInfo.DefaultInstance; }
    }
    
    public override DiscountInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DiscountInfo) {
        return MergeFrom((DiscountInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DiscountInfo other) {
      if (other == global::DiscountInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDiscountCost) {
        DiscountCost = other.DiscountCost;
      }
      if (other.HasDiscount) {
        Discount = other.Discount;
      }
      if (other.HasDiscountStart) {
        DiscountStart = other.DiscountStart;
      }
      if (other.HasDiscountEnd) {
        DiscountEnd = other.DiscountEnd;
      }
      if (other.HasDiscountIcon) {
        DiscountIcon = other.DiscountIcon;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_discountInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _discountInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasDiscountCost = input.ReadInt32(ref result.discountCost_);
            break;
          }
          case 16: {
            result.hasDiscount = input.ReadInt32(ref result.discount_);
            break;
          }
          case 24: {
            result.hasDiscountStart = input.ReadInt64(ref result.discountStart_);
            break;
          }
          case 32: {
            result.hasDiscountEnd = input.ReadInt64(ref result.discountEnd_);
            break;
          }
          case 42: {
            result.hasDiscountIcon = input.ReadString(ref result.discountIcon_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDiscountCost {
      get { return result.hasDiscountCost; }
    }
    public int DiscountCost {
      get { return result.DiscountCost; }
      set { SetDiscountCost(value); }
    }
    public Builder SetDiscountCost(int value) {
      PrepareBuilder();
      result.hasDiscountCost = true;
      result.discountCost_ = value;
      return this;
    }
    public Builder ClearDiscountCost() {
      PrepareBuilder();
      result.hasDiscountCost = false;
      result.discountCost_ = 0;
      return this;
    }
    
    public bool HasDiscount {
      get { return result.hasDiscount; }
    }
    public int Discount {
      get { return result.Discount; }
      set { SetDiscount(value); }
    }
    public Builder SetDiscount(int value) {
      PrepareBuilder();
      result.hasDiscount = true;
      result.discount_ = value;
      return this;
    }
    public Builder ClearDiscount() {
      PrepareBuilder();
      result.hasDiscount = false;
      result.discount_ = 0;
      return this;
    }
    
    public bool HasDiscountStart {
      get { return result.hasDiscountStart; }
    }
    public long DiscountStart {
      get { return result.DiscountStart; }
      set { SetDiscountStart(value); }
    }
    public Builder SetDiscountStart(long value) {
      PrepareBuilder();
      result.hasDiscountStart = true;
      result.discountStart_ = value;
      return this;
    }
    public Builder ClearDiscountStart() {
      PrepareBuilder();
      result.hasDiscountStart = false;
      result.discountStart_ = 0L;
      return this;
    }
    
    public bool HasDiscountEnd {
      get { return result.hasDiscountEnd; }
    }
    public long DiscountEnd {
      get { return result.DiscountEnd; }
      set { SetDiscountEnd(value); }
    }
    public Builder SetDiscountEnd(long value) {
      PrepareBuilder();
      result.hasDiscountEnd = true;
      result.discountEnd_ = value;
      return this;
    }
    public Builder ClearDiscountEnd() {
      PrepareBuilder();
      result.hasDiscountEnd = false;
      result.discountEnd_ = 0L;
      return this;
    }
    
    public bool HasDiscountIcon {
      get { return result.hasDiscountIcon; }
    }
    public string DiscountIcon {
      get { return result.DiscountIcon; }
      set { SetDiscountIcon(value); }
    }
    public Builder SetDiscountIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDiscountIcon = true;
      result.discountIcon_ = value;
      return this;
    }
    public Builder ClearDiscountIcon() {
      PrepareBuilder();
      result.hasDiscountIcon = false;
      result.discountIcon_ = "";
      return this;
    }
  }
  static DiscountInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarketItemMsg : pb::GeneratedMessage<MarketItemMsg, MarketItemMsg.Builder> {
  private MarketItemMsg() { }
  private static readonly MarketItemMsg defaultInstance = new MarketItemMsg().MakeReadOnly();
  private static readonly string[] _marketItemMsgFieldNames = new string[] { "buyLimit", "cost", "costType", "discountInfo", "id", "maxLimit", "sellCount", "sellId" };
  private static readonly uint[] _marketItemMsgFieldTags = new uint[] { 48, 40, 32, 58, 8, 64, 24, 16 };
  public static MarketItemMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarketItemMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarketItemMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarketItemMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarketItemMsg, MarketItemMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarketItemMsg__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int SellIdFieldNumber = 2;
  private bool hasSellId;
  private long sellId_;
  public bool HasSellId {
    get { return hasSellId; }
  }
  public long SellId {
    get { return sellId_; }
  }
  
  public const int SellCountFieldNumber = 3;
  private bool hasSellCount;
  private int sellCount_;
  public bool HasSellCount {
    get { return hasSellCount; }
  }
  public int SellCount {
    get { return sellCount_; }
  }
  
  public const int CostTypeFieldNumber = 4;
  private bool hasCostType;
  private global::CostType costType_ = global::CostType.COST_CASH;
  public bool HasCostType {
    get { return hasCostType; }
  }
  public global::CostType CostType {
    get { return costType_; }
  }
  
  public const int CostFieldNumber = 5;
  private bool hasCost;
  private int cost_;
  public bool HasCost {
    get { return hasCost; }
  }
  public int Cost {
    get { return cost_; }
  }
  
  public const int BuyLimitFieldNumber = 6;
  private bool hasBuyLimit;
  private int buyLimit_;
  public bool HasBuyLimit {
    get { return hasBuyLimit; }
  }
  public int BuyLimit {
    get { return buyLimit_; }
  }
  
  public const int DiscountInfoFieldNumber = 7;
  private bool hasDiscountInfo;
  private global::DiscountInfo discountInfo_;
  public bool HasDiscountInfo {
    get { return hasDiscountInfo; }
  }
  public global::DiscountInfo DiscountInfo {
    get { return discountInfo_ ?? global::DiscountInfo.DefaultInstance; }
  }
  
  public const int MaxLimitFieldNumber = 8;
  private bool hasMaxLimit;
  private int maxLimit_;
  public bool HasMaxLimit {
    get { return hasMaxLimit; }
  }
  public int MaxLimit {
    get { return maxLimit_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _marketItemMsgFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[4], Id);
    }
    if (hasSellId) {
      output.WriteInt64(2, field_names[7], SellId);
    }
    if (hasSellCount) {
      output.WriteInt32(3, field_names[6], SellCount);
    }
    if (hasCostType) {
      output.WriteEnum(4, field_names[2], (int) CostType, CostType);
    }
    if (hasCost) {
      output.WriteInt32(5, field_names[1], Cost);
    }
    if (hasBuyLimit) {
      output.WriteInt32(6, field_names[0], BuyLimit);
    }
    if (hasDiscountInfo) {
      output.WriteMessage(7, field_names[3], DiscountInfo);
    }
    if (hasMaxLimit) {
      output.WriteInt32(8, field_names[5], MaxLimit);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasSellId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, SellId);
    }
    if (hasSellCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SellCount);
    }
    if (hasCostType) {
      size += pb::CodedOutputStream.ComputeEnumSize(4, (int) CostType);
    }
    if (hasCost) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Cost);
    }
    if (hasBuyLimit) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, BuyLimit);
    }
    if (hasDiscountInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, DiscountInfo);
    }
    if (hasMaxLimit) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, MaxLimit);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarketItemMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarketItemMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarketItemMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketItemMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarketItemMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarketItemMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarketItemMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarketItemMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarketItemMsg result;
    
    private MarketItemMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        MarketItemMsg original = result;
        result = new MarketItemMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarketItemMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarketItemMsg.Descriptor; }
    }
    
    public override MarketItemMsg DefaultInstanceForType {
      get { return global::MarketItemMsg.DefaultInstance; }
    }
    
    public override MarketItemMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarketItemMsg) {
        return MergeFrom((MarketItemMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarketItemMsg other) {
      if (other == global::MarketItemMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasSellId) {
        SellId = other.SellId;
      }
      if (other.HasSellCount) {
        SellCount = other.SellCount;
      }
      if (other.HasCostType) {
        CostType = other.CostType;
      }
      if (other.HasCost) {
        Cost = other.Cost;
      }
      if (other.HasBuyLimit) {
        BuyLimit = other.BuyLimit;
      }
      if (other.HasDiscountInfo) {
        MergeDiscountInfo(other.DiscountInfo);
      }
      if (other.HasMaxLimit) {
        MaxLimit = other.MaxLimit;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_marketItemMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _marketItemMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasSellId = input.ReadInt64(ref result.sellId_);
            break;
          }
          case 24: {
            result.hasSellCount = input.ReadInt32(ref result.sellCount_);
            break;
          }
          case 32: {
            object unknown;
            if(input.ReadEnum(ref result.costType_, out unknown)) {
              result.hasCostType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(4, (ulong)(int)unknown);
            }
            break;
          }
          case 40: {
            result.hasCost = input.ReadInt32(ref result.cost_);
            break;
          }
          case 48: {
            result.hasBuyLimit = input.ReadInt32(ref result.buyLimit_);
            break;
          }
          case 58: {
            global::DiscountInfo.Builder subBuilder = global::DiscountInfo.CreateBuilder();
            if (result.hasDiscountInfo) {
              subBuilder.MergeFrom(DiscountInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            DiscountInfo = subBuilder.BuildPartial();
            break;
          }
          case 64: {
            result.hasMaxLimit = input.ReadInt32(ref result.maxLimit_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasSellId {
      get { return result.hasSellId; }
    }
    public long SellId {
      get { return result.SellId; }
      set { SetSellId(value); }
    }
    public Builder SetSellId(long value) {
      PrepareBuilder();
      result.hasSellId = true;
      result.sellId_ = value;
      return this;
    }
    public Builder ClearSellId() {
      PrepareBuilder();
      result.hasSellId = false;
      result.sellId_ = 0L;
      return this;
    }
    
    public bool HasSellCount {
      get { return result.hasSellCount; }
    }
    public int SellCount {
      get { return result.SellCount; }
      set { SetSellCount(value); }
    }
    public Builder SetSellCount(int value) {
      PrepareBuilder();
      result.hasSellCount = true;
      result.sellCount_ = value;
      return this;
    }
    public Builder ClearSellCount() {
      PrepareBuilder();
      result.hasSellCount = false;
      result.sellCount_ = 0;
      return this;
    }
    
    public bool HasCostType {
     get { return result.hasCostType; }
    }
    public global::CostType CostType {
      get { return result.CostType; }
      set { SetCostType(value); }
    }
    public Builder SetCostType(global::CostType value) {
      PrepareBuilder();
      result.hasCostType = true;
      result.costType_ = value;
      return this;
    }
    public Builder ClearCostType() {
      PrepareBuilder();
      result.hasCostType = false;
      result.costType_ = global::CostType.COST_CASH;
      return this;
    }
    
    public bool HasCost {
      get { return result.hasCost; }
    }
    public int Cost {
      get { return result.Cost; }
      set { SetCost(value); }
    }
    public Builder SetCost(int value) {
      PrepareBuilder();
      result.hasCost = true;
      result.cost_ = value;
      return this;
    }
    public Builder ClearCost() {
      PrepareBuilder();
      result.hasCost = false;
      result.cost_ = 0;
      return this;
    }
    
    public bool HasBuyLimit {
      get { return result.hasBuyLimit; }
    }
    public int BuyLimit {
      get { return result.BuyLimit; }
      set { SetBuyLimit(value); }
    }
    public Builder SetBuyLimit(int value) {
      PrepareBuilder();
      result.hasBuyLimit = true;
      result.buyLimit_ = value;
      return this;
    }
    public Builder ClearBuyLimit() {
      PrepareBuilder();
      result.hasBuyLimit = false;
      result.buyLimit_ = 0;
      return this;
    }
    
    public bool HasDiscountInfo {
     get { return result.hasDiscountInfo; }
    }
    public global::DiscountInfo DiscountInfo {
      get { return result.DiscountInfo; }
      set { SetDiscountInfo(value); }
    }
    public Builder SetDiscountInfo(global::DiscountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDiscountInfo = true;
      result.discountInfo_ = value;
      return this;
    }
    public Builder SetDiscountInfo(global::DiscountInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasDiscountInfo = true;
      result.discountInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeDiscountInfo(global::DiscountInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasDiscountInfo &&
          result.discountInfo_ != global::DiscountInfo.DefaultInstance) {
          result.discountInfo_ = global::DiscountInfo.CreateBuilder(result.discountInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.discountInfo_ = value;
      }
      result.hasDiscountInfo = true;
      return this;
    }
    public Builder ClearDiscountInfo() {
      PrepareBuilder();
      result.hasDiscountInfo = false;
      result.discountInfo_ = null;
      return this;
    }
    
    public bool HasMaxLimit {
      get { return result.hasMaxLimit; }
    }
    public int MaxLimit {
      get { return result.MaxLimit; }
      set { SetMaxLimit(value); }
    }
    public Builder SetMaxLimit(int value) {
      PrepareBuilder();
      result.hasMaxLimit = true;
      result.maxLimit_ = value;
      return this;
    }
    public Builder ClearMaxLimit() {
      PrepareBuilder();
      result.hasMaxLimit = false;
      result.maxLimit_ = 0;
      return this;
    }
  }
  static MarketItemMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarketBlack : pb::GeneratedMessage<MarketBlack, MarketBlack.Builder> {
  private MarketBlack() { }
  private static readonly MarketBlack defaultInstance = new MarketBlack().MakeReadOnly();
  private static readonly string[] _marketBlackFieldNames = new string[] { "freshCost", "freshLimit", "id", "lastUpdateTime", "nextUpdateTime" };
  private static readonly uint[] _marketBlackFieldTags = new uint[] { 32, 40, 8, 16, 24 };
  public static MarketBlack DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarketBlack DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarketBlack ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarketBlack__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarketBlack, MarketBlack.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarketBlack__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int LastUpdateTimeFieldNumber = 2;
  private bool hasLastUpdateTime;
  private long lastUpdateTime_;
  public bool HasLastUpdateTime {
    get { return hasLastUpdateTime; }
  }
  public long LastUpdateTime {
    get { return lastUpdateTime_; }
  }
  
  public const int NextUpdateTimeFieldNumber = 3;
  private bool hasNextUpdateTime;
  private long nextUpdateTime_;
  public bool HasNextUpdateTime {
    get { return hasNextUpdateTime; }
  }
  public long NextUpdateTime {
    get { return nextUpdateTime_; }
  }
  
  public const int FreshCostFieldNumber = 4;
  private bool hasFreshCost;
  private int freshCost_;
  public bool HasFreshCost {
    get { return hasFreshCost; }
  }
  public int FreshCost {
    get { return freshCost_; }
  }
  
  public const int FreshLimitFieldNumber = 5;
  private bool hasFreshLimit;
  private int freshLimit_;
  public bool HasFreshLimit {
    get { return hasFreshLimit; }
  }
  public int FreshLimit {
    get { return freshLimit_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _marketBlackFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[2], Id);
    }
    if (hasLastUpdateTime) {
      output.WriteInt64(2, field_names[3], LastUpdateTime);
    }
    if (hasNextUpdateTime) {
      output.WriteInt64(3, field_names[4], NextUpdateTime);
    }
    if (hasFreshCost) {
      output.WriteInt32(4, field_names[0], FreshCost);
    }
    if (hasFreshLimit) {
      output.WriteInt32(5, field_names[1], FreshLimit);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasLastUpdateTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, LastUpdateTime);
    }
    if (hasNextUpdateTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, NextUpdateTime);
    }
    if (hasFreshCost) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, FreshCost);
    }
    if (hasFreshLimit) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, FreshLimit);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarketBlack ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketBlack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketBlack ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketBlack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketBlack ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketBlack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarketBlack ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarketBlack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarketBlack ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketBlack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarketBlack MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarketBlack prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarketBlack, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarketBlack cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarketBlack result;
    
    private MarketBlack PrepareBuilder() {
      if (resultIsReadOnly) {
        MarketBlack original = result;
        result = new MarketBlack();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarketBlack MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarketBlack.Descriptor; }
    }
    
    public override MarketBlack DefaultInstanceForType {
      get { return global::MarketBlack.DefaultInstance; }
    }
    
    public override MarketBlack BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarketBlack) {
        return MergeFrom((MarketBlack) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarketBlack other) {
      if (other == global::MarketBlack.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLastUpdateTime) {
        LastUpdateTime = other.LastUpdateTime;
      }
      if (other.HasNextUpdateTime) {
        NextUpdateTime = other.NextUpdateTime;
      }
      if (other.HasFreshCost) {
        FreshCost = other.FreshCost;
      }
      if (other.HasFreshLimit) {
        FreshLimit = other.FreshLimit;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_marketBlackFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _marketBlackFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasLastUpdateTime = input.ReadInt64(ref result.lastUpdateTime_);
            break;
          }
          case 24: {
            result.hasNextUpdateTime = input.ReadInt64(ref result.nextUpdateTime_);
            break;
          }
          case 32: {
            result.hasFreshCost = input.ReadInt32(ref result.freshCost_);
            break;
          }
          case 40: {
            result.hasFreshLimit = input.ReadInt32(ref result.freshLimit_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasLastUpdateTime {
      get { return result.hasLastUpdateTime; }
    }
    public long LastUpdateTime {
      get { return result.LastUpdateTime; }
      set { SetLastUpdateTime(value); }
    }
    public Builder SetLastUpdateTime(long value) {
      PrepareBuilder();
      result.hasLastUpdateTime = true;
      result.lastUpdateTime_ = value;
      return this;
    }
    public Builder ClearLastUpdateTime() {
      PrepareBuilder();
      result.hasLastUpdateTime = false;
      result.lastUpdateTime_ = 0L;
      return this;
    }
    
    public bool HasNextUpdateTime {
      get { return result.hasNextUpdateTime; }
    }
    public long NextUpdateTime {
      get { return result.NextUpdateTime; }
      set { SetNextUpdateTime(value); }
    }
    public Builder SetNextUpdateTime(long value) {
      PrepareBuilder();
      result.hasNextUpdateTime = true;
      result.nextUpdateTime_ = value;
      return this;
    }
    public Builder ClearNextUpdateTime() {
      PrepareBuilder();
      result.hasNextUpdateTime = false;
      result.nextUpdateTime_ = 0L;
      return this;
    }
    
    public bool HasFreshCost {
      get { return result.hasFreshCost; }
    }
    public int FreshCost {
      get { return result.FreshCost; }
      set { SetFreshCost(value); }
    }
    public Builder SetFreshCost(int value) {
      PrepareBuilder();
      result.hasFreshCost = true;
      result.freshCost_ = value;
      return this;
    }
    public Builder ClearFreshCost() {
      PrepareBuilder();
      result.hasFreshCost = false;
      result.freshCost_ = 0;
      return this;
    }
    
    public bool HasFreshLimit {
      get { return result.hasFreshLimit; }
    }
    public int FreshLimit {
      get { return result.FreshLimit; }
      set { SetFreshLimit(value); }
    }
    public Builder SetFreshLimit(int value) {
      PrepareBuilder();
      result.hasFreshLimit = true;
      result.freshLimit_ = value;
      return this;
    }
    public Builder ClearFreshLimit() {
      PrepareBuilder();
      result.hasFreshLimit = false;
      result.freshLimit_ = 0;
      return this;
    }
  }
  static MarketBlack() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarketRequest : pb::GeneratedMessage<MarketRequest, MarketRequest.Builder> {
  private MarketRequest() { }
  private static readonly MarketRequest defaultInstance = new MarketRequest().MakeReadOnly();
  private static readonly string[] _marketRequestFieldNames = new string[] { "category" };
  private static readonly uint[] _marketRequestFieldTags = new uint[] { 8 };
  public static MarketRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarketRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarketRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarketRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarketRequest, MarketRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarketRequest__FieldAccessorTable; }
  }
  
  public const int CategoryFieldNumber = 1;
  private bool hasCategory;
  private global::Category category_ = global::Category.CASH;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public global::Category Category {
    get { return category_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _marketRequestFieldNames;
    if (hasCategory) {
      output.WriteEnum(1, field_names[0], (int) Category, Category);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Category);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarketRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarketRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarketRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarketRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarketRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarketRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarketRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarketRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarketRequest result;
    
    private MarketRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        MarketRequest original = result;
        result = new MarketRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarketRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarketRequest.Descriptor; }
    }
    
    public override MarketRequest DefaultInstanceForType {
      get { return global::MarketRequest.DefaultInstance; }
    }
    
    public override MarketRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarketRequest) {
        return MergeFrom((MarketRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarketRequest other) {
      if (other == global::MarketRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCategory) {
        Category = other.Category;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_marketRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _marketRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.category_, out unknown)) {
              result.hasCategory = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCategory {
     get { return result.hasCategory; }
    }
    public global::Category Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(global::Category value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = global::Category.CASH;
      return this;
    }
  }
  static MarketRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarketResponse : pb::GeneratedMessage<MarketResponse, MarketResponse.Builder> {
  private MarketResponse() { }
  private static readonly MarketResponse defaultInstance = new MarketResponse().MakeReadOnly();
  private static readonly string[] _marketResponseFieldNames = new string[] { "category", "marketBlack", "marketItems", "responseStatus" };
  private static readonly uint[] _marketResponseFieldTags = new uint[] { 32, 26, 18, 10 };
  public static MarketResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarketResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarketResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarketResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarketResponse, MarketResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarketResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int MarketItemsFieldNumber = 2;
  private pbc::PopsicleList<global::MarketItemMsg> marketItems_ = new pbc::PopsicleList<global::MarketItemMsg>();
  public scg::IList<global::MarketItemMsg> MarketItemsList {
    get { return marketItems_; }
  }
  public int MarketItemsCount {
    get { return marketItems_.Count; }
  }
  public global::MarketItemMsg GetMarketItems(int index) {
    return marketItems_[index];
  }
  
  public const int MarketBlackFieldNumber = 3;
  private bool hasMarketBlack;
  private global::MarketBlack marketBlack_;
  public bool HasMarketBlack {
    get { return hasMarketBlack; }
  }
  public global::MarketBlack MarketBlack {
    get { return marketBlack_ ?? global::MarketBlack.DefaultInstance; }
  }
  
  public const int CategoryFieldNumber = 4;
  private bool hasCategory;
  private global::Category category_ = global::Category.CASH;
  public bool HasCategory {
    get { return hasCategory; }
  }
  public global::Category Category {
    get { return category_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _marketResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[3], ResponseStatus);
    }
    if (marketItems_.Count > 0) {
      output.WriteMessageArray(2, field_names[2], marketItems_);
    }
    if (hasMarketBlack) {
      output.WriteMessage(3, field_names[1], MarketBlack);
    }
    if (hasCategory) {
      output.WriteEnum(4, field_names[0], (int) Category, Category);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    foreach (global::MarketItemMsg element in MarketItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasMarketBlack) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, MarketBlack);
    }
    if (hasCategory) {
      size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Category);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarketResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarketResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarketResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarketResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarketResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarketResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarketResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarketResponse MakeReadOnly() {
    marketItems_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarketResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarketResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarketResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarketResponse result;
    
    private MarketResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        MarketResponse original = result;
        result = new MarketResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarketResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarketResponse.Descriptor; }
    }
    
    public override MarketResponse DefaultInstanceForType {
      get { return global::MarketResponse.DefaultInstance; }
    }
    
    public override MarketResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarketResponse) {
        return MergeFrom((MarketResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarketResponse other) {
      if (other == global::MarketResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.marketItems_.Count != 0) {
        result.marketItems_.Add(other.marketItems_);
      }
      if (other.HasMarketBlack) {
        MergeMarketBlack(other.MarketBlack);
      }
      if (other.HasCategory) {
        Category = other.Category;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_marketResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _marketResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.marketItems_, global::MarketItemMsg.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            global::MarketBlack.Builder subBuilder = global::MarketBlack.CreateBuilder();
            if (result.hasMarketBlack) {
              subBuilder.MergeFrom(MarketBlack);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MarketBlack = subBuilder.BuildPartial();
            break;
          }
          case 32: {
            object unknown;
            if(input.ReadEnum(ref result.category_, out unknown)) {
              result.hasCategory = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(4, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::MarketItemMsg> MarketItemsList {
      get { return PrepareBuilder().marketItems_; }
    }
    public int MarketItemsCount {
      get { return result.MarketItemsCount; }
    }
    public global::MarketItemMsg GetMarketItems(int index) {
      return result.GetMarketItems(index);
    }
    public Builder SetMarketItems(int index, global::MarketItemMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.marketItems_[index] = value;
      return this;
    }
    public Builder SetMarketItems(int index, global::MarketItemMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.marketItems_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMarketItems(global::MarketItemMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.marketItems_.Add(value);
      return this;
    }
    public Builder AddMarketItems(global::MarketItemMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.marketItems_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMarketItems(scg::IEnumerable<global::MarketItemMsg> values) {
      PrepareBuilder();
      result.marketItems_.Add(values);
      return this;
    }
    public Builder ClearMarketItems() {
      PrepareBuilder();
      result.marketItems_.Clear();
      return this;
    }
    
    public bool HasMarketBlack {
     get { return result.hasMarketBlack; }
    }
    public global::MarketBlack MarketBlack {
      get { return result.MarketBlack; }
      set { SetMarketBlack(value); }
    }
    public Builder SetMarketBlack(global::MarketBlack value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMarketBlack = true;
      result.marketBlack_ = value;
      return this;
    }
    public Builder SetMarketBlack(global::MarketBlack.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMarketBlack = true;
      result.marketBlack_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMarketBlack(global::MarketBlack value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMarketBlack &&
          result.marketBlack_ != global::MarketBlack.DefaultInstance) {
          result.marketBlack_ = global::MarketBlack.CreateBuilder(result.marketBlack_).MergeFrom(value).BuildPartial();
      } else {
        result.marketBlack_ = value;
      }
      result.hasMarketBlack = true;
      return this;
    }
    public Builder ClearMarketBlack() {
      PrepareBuilder();
      result.hasMarketBlack = false;
      result.marketBlack_ = null;
      return this;
    }
    
    public bool HasCategory {
     get { return result.hasCategory; }
    }
    public global::Category Category {
      get { return result.Category; }
      set { SetCategory(value); }
    }
    public Builder SetCategory(global::Category value) {
      PrepareBuilder();
      result.hasCategory = true;
      result.category_ = value;
      return this;
    }
    public Builder ClearCategory() {
      PrepareBuilder();
      result.hasCategory = false;
      result.category_ = global::Category.CASH;
      return this;
    }
  }
  static MarketResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarkeBuyRequest : pb::GeneratedMessage<MarkeBuyRequest, MarkeBuyRequest.Builder> {
  private MarkeBuyRequest() { }
  private static readonly MarkeBuyRequest defaultInstance = new MarkeBuyRequest().MakeReadOnly();
  private static readonly string[] _markeBuyRequestFieldNames = new string[] { "count", "marketItemId" };
  private static readonly uint[] _markeBuyRequestFieldTags = new uint[] { 16, 8 };
  public static MarkeBuyRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarkeBuyRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarkeBuyRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarkeBuyRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarkeBuyRequest, MarkeBuyRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarkeBuyRequest__FieldAccessorTable; }
  }
  
  public const int MarketItemIdFieldNumber = 1;
  private bool hasMarketItemId;
  private long marketItemId_;
  public bool HasMarketItemId {
    get { return hasMarketItemId; }
  }
  public long MarketItemId {
    get { return marketItemId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _markeBuyRequestFieldNames;
    if (hasMarketItemId) {
      output.WriteInt64(1, field_names[1], MarketItemId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMarketItemId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, MarketItemId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarkeBuyRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarkeBuyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarkeBuyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeBuyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarkeBuyRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarkeBuyRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarkeBuyRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarkeBuyRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarkeBuyRequest result;
    
    private MarkeBuyRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        MarkeBuyRequest original = result;
        result = new MarkeBuyRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarkeBuyRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarkeBuyRequest.Descriptor; }
    }
    
    public override MarkeBuyRequest DefaultInstanceForType {
      get { return global::MarkeBuyRequest.DefaultInstance; }
    }
    
    public override MarkeBuyRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarkeBuyRequest) {
        return MergeFrom((MarkeBuyRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarkeBuyRequest other) {
      if (other == global::MarkeBuyRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMarketItemId) {
        MarketItemId = other.MarketItemId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_markeBuyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _markeBuyRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMarketItemId = input.ReadInt64(ref result.marketItemId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMarketItemId {
      get { return result.hasMarketItemId; }
    }
    public long MarketItemId {
      get { return result.MarketItemId; }
      set { SetMarketItemId(value); }
    }
    public Builder SetMarketItemId(long value) {
      PrepareBuilder();
      result.hasMarketItemId = true;
      result.marketItemId_ = value;
      return this;
    }
    public Builder ClearMarketItemId() {
      PrepareBuilder();
      result.hasMarketItemId = false;
      result.marketItemId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static MarkeBuyRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarkeBuyResponse : pb::GeneratedMessage<MarkeBuyResponse, MarkeBuyResponse.Builder> {
  private MarkeBuyResponse() { }
  private static readonly MarkeBuyResponse defaultInstance = new MarkeBuyResponse().MakeReadOnly();
  private static readonly string[] _markeBuyResponseFieldNames = new string[] { "props", "responseStatus" };
  private static readonly uint[] _markeBuyResponseFieldTags = new uint[] { 18, 10 };
  public static MarkeBuyResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarkeBuyResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarkeBuyResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarkeBuyResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarkeBuyResponse, MarkeBuyResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarkeBuyResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int PropsFieldNumber = 2;
  private bool hasProps;
  private global::PlayerPropMsg props_;
  public bool HasProps {
    get { return hasProps; }
  }
  public global::PlayerPropMsg Props {
    get { return props_ ?? global::PlayerPropMsg.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _markeBuyResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[1], ResponseStatus);
    }
    if (hasProps) {
      output.WriteMessage(2, field_names[0], Props);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasProps) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Props);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarkeBuyResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarkeBuyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarkeBuyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeBuyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarkeBuyResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarkeBuyResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarkeBuyResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarkeBuyResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarkeBuyResponse result;
    
    private MarkeBuyResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        MarkeBuyResponse original = result;
        result = new MarkeBuyResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarkeBuyResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarkeBuyResponse.Descriptor; }
    }
    
    public override MarkeBuyResponse DefaultInstanceForType {
      get { return global::MarkeBuyResponse.DefaultInstance; }
    }
    
    public override MarkeBuyResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarkeBuyResponse) {
        return MergeFrom((MarkeBuyResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarkeBuyResponse other) {
      if (other == global::MarkeBuyResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasProps) {
        MergeProps(other.Props);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_markeBuyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _markeBuyResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::PlayerPropMsg.Builder subBuilder = global::PlayerPropMsg.CreateBuilder();
            if (result.hasProps) {
              subBuilder.MergeFrom(Props);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Props = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasProps {
     get { return result.hasProps; }
    }
    public global::PlayerPropMsg Props {
      get { return result.Props; }
      set { SetProps(value); }
    }
    public Builder SetProps(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProps = true;
      result.props_ = value;
      return this;
    }
    public Builder SetProps(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasProps = true;
      result.props_ = builderForValue.Build();
      return this;
    }
    public Builder MergeProps(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasProps &&
          result.props_ != global::PlayerPropMsg.DefaultInstance) {
          result.props_ = global::PlayerPropMsg.CreateBuilder(result.props_).MergeFrom(value).BuildPartial();
      } else {
        result.props_ = value;
      }
      result.hasProps = true;
      return this;
    }
    public Builder ClearProps() {
      PrepareBuilder();
      result.hasProps = false;
      result.props_ = null;
      return this;
    }
  }
  static MarkeBuyResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMarketItemRequest : pb::GeneratedMessage<CSMarketItemRequest, CSMarketItemRequest.Builder> {
  private CSMarketItemRequest() { }
  private static readonly CSMarketItemRequest defaultInstance = new CSMarketItemRequest().MakeReadOnly();
  private static readonly string[] _cSMarketItemRequestFieldNames = new string[] { "propId" };
  private static readonly uint[] _cSMarketItemRequestFieldTags = new uint[] { 8 };
  public static CSMarketItemRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMarketItemRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMarketItemRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSMarketItemRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMarketItemRequest, CSMarketItemRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSMarketItemRequest__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMarketItemRequestFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[0], PropId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMarketItemRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMarketItemRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMarketItemRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMarketItemRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMarketItemRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMarketItemRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMarketItemRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMarketItemRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMarketItemRequest result;
    
    private CSMarketItemRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMarketItemRequest original = result;
        result = new CSMarketItemRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMarketItemRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMarketItemRequest.Descriptor; }
    }
    
    public override CSMarketItemRequest DefaultInstanceForType {
      get { return global::CSMarketItemRequest.DefaultInstance; }
    }
    
    public override CSMarketItemRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMarketItemRequest) {
        return MergeFrom((CSMarketItemRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMarketItemRequest other) {
      if (other == global::CSMarketItemRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMarketItemRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMarketItemRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
  }
  static CSMarketItemRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCMarketItemResponse : pb::GeneratedMessage<SCMarketItemResponse, SCMarketItemResponse.Builder> {
  private SCMarketItemResponse() { }
  private static readonly SCMarketItemResponse defaultInstance = new SCMarketItemResponse().MakeReadOnly();
  private static readonly string[] _sCMarketItemResponseFieldNames = new string[] { "marketItems", "responseStatus" };
  private static readonly uint[] _sCMarketItemResponseFieldTags = new uint[] { 18, 10 };
  public static SCMarketItemResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCMarketItemResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCMarketItemResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCMarketItemResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCMarketItemResponse, SCMarketItemResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCMarketItemResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int MarketItemsFieldNumber = 2;
  private bool hasMarketItems;
  private global::MarketItemMsg marketItems_;
  public bool HasMarketItems {
    get { return hasMarketItems; }
  }
  public global::MarketItemMsg MarketItems {
    get { return marketItems_ ?? global::MarketItemMsg.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCMarketItemResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[1], ResponseStatus);
    }
    if (hasMarketItems) {
      output.WriteMessage(2, field_names[0], MarketItems);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasMarketItems) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, MarketItems);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCMarketItemResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCMarketItemResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCMarketItemResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCMarketItemResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCMarketItemResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCMarketItemResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCMarketItemResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCMarketItemResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCMarketItemResponse result;
    
    private SCMarketItemResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCMarketItemResponse original = result;
        result = new SCMarketItemResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCMarketItemResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCMarketItemResponse.Descriptor; }
    }
    
    public override SCMarketItemResponse DefaultInstanceForType {
      get { return global::SCMarketItemResponse.DefaultInstance; }
    }
    
    public override SCMarketItemResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCMarketItemResponse) {
        return MergeFrom((SCMarketItemResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCMarketItemResponse other) {
      if (other == global::SCMarketItemResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasMarketItems) {
        MergeMarketItems(other.MarketItems);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCMarketItemResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCMarketItemResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::MarketItemMsg.Builder subBuilder = global::MarketItemMsg.CreateBuilder();
            if (result.hasMarketItems) {
              subBuilder.MergeFrom(MarketItems);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MarketItems = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasMarketItems {
     get { return result.hasMarketItems; }
    }
    public global::MarketItemMsg MarketItems {
      get { return result.MarketItems; }
      set { SetMarketItems(value); }
    }
    public Builder SetMarketItems(global::MarketItemMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMarketItems = true;
      result.marketItems_ = value;
      return this;
    }
    public Builder SetMarketItems(global::MarketItemMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMarketItems = true;
      result.marketItems_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMarketItems(global::MarketItemMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMarketItems &&
          result.marketItems_ != global::MarketItemMsg.DefaultInstance) {
          result.marketItems_ = global::MarketItemMsg.CreateBuilder(result.marketItems_).MergeFrom(value).BuildPartial();
      } else {
        result.marketItems_ = value;
      }
      result.hasMarketItems = true;
      return this;
    }
    public Builder ClearMarketItems() {
      PrepareBuilder();
      result.hasMarketItems = false;
      result.marketItems_ = null;
      return this;
    }
  }
  static SCMarketItemResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarkeFreshRequest : pb::GeneratedMessage<MarkeFreshRequest, MarkeFreshRequest.Builder> {
  private MarkeFreshRequest() { }
  private static readonly MarkeFreshRequest defaultInstance = new MarkeFreshRequest().MakeReadOnly();
  private static readonly string[] _markeFreshRequestFieldNames = new string[] {  };
  private static readonly uint[] _markeFreshRequestFieldTags = new uint[] {  };
  public static MarkeFreshRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarkeFreshRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarkeFreshRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarkeFreshRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarkeFreshRequest, MarkeFreshRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarkeFreshRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _markeFreshRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarkeFreshRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarkeFreshRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarkeFreshRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeFreshRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarkeFreshRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarkeFreshRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarkeFreshRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarkeFreshRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarkeFreshRequest result;
    
    private MarkeFreshRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        MarkeFreshRequest original = result;
        result = new MarkeFreshRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarkeFreshRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarkeFreshRequest.Descriptor; }
    }
    
    public override MarkeFreshRequest DefaultInstanceForType {
      get { return global::MarkeFreshRequest.DefaultInstance; }
    }
    
    public override MarkeFreshRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarkeFreshRequest) {
        return MergeFrom((MarkeFreshRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarkeFreshRequest other) {
      if (other == global::MarkeFreshRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_markeFreshRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _markeFreshRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static MarkeFreshRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MarkeFreshResponse : pb::GeneratedMessage<MarkeFreshResponse, MarkeFreshResponse.Builder> {
  private MarkeFreshResponse() { }
  private static readonly MarkeFreshResponse defaultInstance = new MarkeFreshResponse().MakeReadOnly();
  private static readonly string[] _markeFreshResponseFieldNames = new string[] { "MarketBlack", "marketItems", "playerBaseInfo", "responseStatus" };
  private static readonly uint[] _markeFreshResponseFieldTags = new uint[] { 26, 34, 18, 10 };
  public static MarkeFreshResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MarkeFreshResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MarkeFreshResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_MarkeFreshResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MarkeFreshResponse, MarkeFreshResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_MarkeFreshResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int PlayerBaseInfoFieldNumber = 2;
  private bool hasPlayerBaseInfo;
  private global::PlayerBaseInfo playerBaseInfo_;
  public bool HasPlayerBaseInfo {
    get { return hasPlayerBaseInfo; }
  }
  public global::PlayerBaseInfo PlayerBaseInfo {
    get { return playerBaseInfo_ ?? global::PlayerBaseInfo.DefaultInstance; }
  }
  
  public const int MarketBlackFieldNumber = 3;
  private bool hasMarketBlack;
  private global::MarketBlack marketBlack_;
  public bool HasMarketBlack {
    get { return hasMarketBlack; }
  }
  public global::MarketBlack MarketBlack {
    get { return marketBlack_ ?? global::MarketBlack.DefaultInstance; }
  }
  
  public const int MarketItemsFieldNumber = 4;
  private pbc::PopsicleList<global::MarketItemMsg> marketItems_ = new pbc::PopsicleList<global::MarketItemMsg>();
  public scg::IList<global::MarketItemMsg> MarketItemsList {
    get { return marketItems_; }
  }
  public int MarketItemsCount {
    get { return marketItems_.Count; }
  }
  public global::MarketItemMsg GetMarketItems(int index) {
    return marketItems_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _markeFreshResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[3], ResponseStatus);
    }
    if (hasPlayerBaseInfo) {
      output.WriteMessage(2, field_names[2], PlayerBaseInfo);
    }
    if (hasMarketBlack) {
      output.WriteMessage(3, field_names[0], MarketBlack);
    }
    if (marketItems_.Count > 0) {
      output.WriteMessageArray(4, field_names[1], marketItems_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasPlayerBaseInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, PlayerBaseInfo);
    }
    if (hasMarketBlack) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, MarketBlack);
    }
    foreach (global::MarketItemMsg element in MarketItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static MarkeFreshResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MarkeFreshResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MarkeFreshResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MarkeFreshResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MarkeFreshResponse MakeReadOnly() {
    marketItems_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MarkeFreshResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MarkeFreshResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MarkeFreshResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MarkeFreshResponse result;
    
    private MarkeFreshResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        MarkeFreshResponse original = result;
        result = new MarkeFreshResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MarkeFreshResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MarkeFreshResponse.Descriptor; }
    }
    
    public override MarkeFreshResponse DefaultInstanceForType {
      get { return global::MarkeFreshResponse.DefaultInstance; }
    }
    
    public override MarkeFreshResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MarkeFreshResponse) {
        return MergeFrom((MarkeFreshResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MarkeFreshResponse other) {
      if (other == global::MarkeFreshResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasPlayerBaseInfo) {
        MergePlayerBaseInfo(other.PlayerBaseInfo);
      }
      if (other.HasMarketBlack) {
        MergeMarketBlack(other.MarketBlack);
      }
      if (other.marketItems_.Count != 0) {
        result.marketItems_.Add(other.marketItems_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_markeFreshResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _markeFreshResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::PlayerBaseInfo.Builder subBuilder = global::PlayerBaseInfo.CreateBuilder();
            if (result.hasPlayerBaseInfo) {
              subBuilder.MergeFrom(PlayerBaseInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerBaseInfo = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::MarketBlack.Builder subBuilder = global::MarketBlack.CreateBuilder();
            if (result.hasMarketBlack) {
              subBuilder.MergeFrom(MarketBlack);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MarketBlack = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.marketItems_, global::MarketItemMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasPlayerBaseInfo {
     get { return result.hasPlayerBaseInfo; }
    }
    public global::PlayerBaseInfo PlayerBaseInfo {
      get { return result.PlayerBaseInfo; }
      set { SetPlayerBaseInfo(value); }
    }
    public Builder SetPlayerBaseInfo(global::PlayerBaseInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerBaseInfo = true;
      result.playerBaseInfo_ = value;
      return this;
    }
    public Builder SetPlayerBaseInfo(global::PlayerBaseInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerBaseInfo = true;
      result.playerBaseInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerBaseInfo(global::PlayerBaseInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerBaseInfo &&
          result.playerBaseInfo_ != global::PlayerBaseInfo.DefaultInstance) {
          result.playerBaseInfo_ = global::PlayerBaseInfo.CreateBuilder(result.playerBaseInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.playerBaseInfo_ = value;
      }
      result.hasPlayerBaseInfo = true;
      return this;
    }
    public Builder ClearPlayerBaseInfo() {
      PrepareBuilder();
      result.hasPlayerBaseInfo = false;
      result.playerBaseInfo_ = null;
      return this;
    }
    
    public bool HasMarketBlack {
     get { return result.hasMarketBlack; }
    }
    public global::MarketBlack MarketBlack {
      get { return result.MarketBlack; }
      set { SetMarketBlack(value); }
    }
    public Builder SetMarketBlack(global::MarketBlack value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMarketBlack = true;
      result.marketBlack_ = value;
      return this;
    }
    public Builder SetMarketBlack(global::MarketBlack.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMarketBlack = true;
      result.marketBlack_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMarketBlack(global::MarketBlack value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMarketBlack &&
          result.marketBlack_ != global::MarketBlack.DefaultInstance) {
          result.marketBlack_ = global::MarketBlack.CreateBuilder(result.marketBlack_).MergeFrom(value).BuildPartial();
      } else {
        result.marketBlack_ = value;
      }
      result.hasMarketBlack = true;
      return this;
    }
    public Builder ClearMarketBlack() {
      PrepareBuilder();
      result.hasMarketBlack = false;
      result.marketBlack_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::MarketItemMsg> MarketItemsList {
      get { return PrepareBuilder().marketItems_; }
    }
    public int MarketItemsCount {
      get { return result.MarketItemsCount; }
    }
    public global::MarketItemMsg GetMarketItems(int index) {
      return result.GetMarketItems(index);
    }
    public Builder SetMarketItems(int index, global::MarketItemMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.marketItems_[index] = value;
      return this;
    }
    public Builder SetMarketItems(int index, global::MarketItemMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.marketItems_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMarketItems(global::MarketItemMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.marketItems_.Add(value);
      return this;
    }
    public Builder AddMarketItems(global::MarketItemMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.marketItems_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMarketItems(scg::IEnumerable<global::MarketItemMsg> values) {
      PrepareBuilder();
      result.marketItems_.Add(values);
      return this;
    }
    public Builder ClearMarketItems() {
      PrepareBuilder();
      result.marketItems_.Clear();
      return this;
    }
  }
  static MarkeFreshResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerBaseInfo : pb::GeneratedMessage<PlayerBaseInfo, PlayerBaseInfo.Builder> {
  private PlayerBaseInfo() { }
  private static readonly PlayerBaseInfo defaultInstance = new PlayerBaseInfo().MakeReadOnly();
  private static readonly string[] _playerBaseInfoFieldNames = new string[] { "cash", "coin" };
  private static readonly uint[] _playerBaseInfoFieldTags = new uint[] { 16, 8 };
  public static PlayerBaseInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerBaseInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerBaseInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PlayerBaseInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerBaseInfo, PlayerBaseInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PlayerBaseInfo__FieldAccessorTable; }
  }
  
  public const int CoinFieldNumber = 1;
  private bool hasCoin;
  private int coin_;
  public bool HasCoin {
    get { return hasCoin; }
  }
  public int Coin {
    get { return coin_; }
  }
  
  public const int CashFieldNumber = 2;
  private bool hasCash;
  private int cash_;
  public bool HasCash {
    get { return hasCash; }
  }
  public int Cash {
    get { return cash_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerBaseInfoFieldNames;
    if (hasCoin) {
      output.WriteInt32(1, field_names[1], Coin);
    }
    if (hasCash) {
      output.WriteInt32(2, field_names[0], Cash);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Coin);
    }
    if (hasCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Cash);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerBaseInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerBaseInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerBaseInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerBaseInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerBaseInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerBaseInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerBaseInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerBaseInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerBaseInfo result;
    
    private PlayerBaseInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerBaseInfo original = result;
        result = new PlayerBaseInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerBaseInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerBaseInfo.Descriptor; }
    }
    
    public override PlayerBaseInfo DefaultInstanceForType {
      get { return global::PlayerBaseInfo.DefaultInstance; }
    }
    
    public override PlayerBaseInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerBaseInfo) {
        return MergeFrom((PlayerBaseInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerBaseInfo other) {
      if (other == global::PlayerBaseInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerBaseInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerBaseInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCoin = input.ReadInt32(ref result.coin_);
            break;
          }
          case 16: {
            result.hasCash = input.ReadInt32(ref result.cash_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCoin {
      get { return result.hasCoin; }
    }
    public int Coin {
      get { return result.Coin; }
      set { SetCoin(value); }
    }
    public Builder SetCoin(int value) {
      PrepareBuilder();
      result.hasCoin = true;
      result.coin_ = value;
      return this;
    }
    public Builder ClearCoin() {
      PrepareBuilder();
      result.hasCoin = false;
      result.coin_ = 0;
      return this;
    }
    
    public bool HasCash {
      get { return result.hasCash; }
    }
    public int Cash {
      get { return result.Cash; }
      set { SetCash(value); }
    }
    public Builder SetCash(int value) {
      PrepareBuilder();
      result.hasCash = true;
      result.cash_ = value;
      return this;
    }
    public Builder ClearCash() {
      PrepareBuilder();
      result.hasCash = false;
      result.cash_ = 0;
      return this;
    }
  }
  static PlayerBaseInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSNoticeListRequest : pb::GeneratedMessage<CSNoticeListRequest, CSNoticeListRequest.Builder> {
  private CSNoticeListRequest() { }
  private static readonly CSNoticeListRequest defaultInstance = new CSNoticeListRequest().MakeReadOnly();
  private static readonly string[] _cSNoticeListRequestFieldNames = new string[] { "id", "type" };
  private static readonly uint[] _cSNoticeListRequestFieldTags = new uint[] { 8, 16 };
  public static CSNoticeListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSNoticeListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSNoticeListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSNoticeListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSNoticeListRequest, CSNoticeListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSNoticeListRequest__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSNoticeListRequestFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[1], Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSNoticeListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSNoticeListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSNoticeListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSNoticeListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSNoticeListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSNoticeListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSNoticeListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSNoticeListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSNoticeListRequest result;
    
    private CSNoticeListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSNoticeListRequest original = result;
        result = new CSNoticeListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSNoticeListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSNoticeListRequest.Descriptor; }
    }
    
    public override CSNoticeListRequest DefaultInstanceForType {
      get { return global::CSNoticeListRequest.DefaultInstance; }
    }
    
    public override CSNoticeListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSNoticeListRequest) {
        return MergeFrom((CSNoticeListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSNoticeListRequest other) {
      if (other == global::CSNoticeListRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSNoticeListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSNoticeListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
  }
  static CSNoticeListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCNoticeListResponse : pb::GeneratedMessage<SCNoticeListResponse, SCNoticeListResponse.Builder> {
  private SCNoticeListResponse() { }
  private static readonly SCNoticeListResponse defaultInstance = new SCNoticeListResponse().MakeReadOnly();
  private static readonly string[] _sCNoticeListResponseFieldNames = new string[] { "notices" };
  private static readonly uint[] _sCNoticeListResponseFieldTags = new uint[] { 10 };
  public static SCNoticeListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCNoticeListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCNoticeListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCNoticeListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCNoticeListResponse, SCNoticeListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCNoticeListResponse__FieldAccessorTable; }
  }
  
  public const int NoticesFieldNumber = 1;
  private pbc::PopsicleList<global::NoticeInfo> notices_ = new pbc::PopsicleList<global::NoticeInfo>();
  public scg::IList<global::NoticeInfo> NoticesList {
    get { return notices_; }
  }
  public int NoticesCount {
    get { return notices_.Count; }
  }
  public global::NoticeInfo GetNotices(int index) {
    return notices_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCNoticeListResponseFieldNames;
    if (notices_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], notices_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::NoticeInfo element in NoticesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCNoticeListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCNoticeListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCNoticeListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCNoticeListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCNoticeListResponse MakeReadOnly() {
    notices_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCNoticeListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCNoticeListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCNoticeListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCNoticeListResponse result;
    
    private SCNoticeListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCNoticeListResponse original = result;
        result = new SCNoticeListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCNoticeListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCNoticeListResponse.Descriptor; }
    }
    
    public override SCNoticeListResponse DefaultInstanceForType {
      get { return global::SCNoticeListResponse.DefaultInstance; }
    }
    
    public override SCNoticeListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCNoticeListResponse) {
        return MergeFrom((SCNoticeListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCNoticeListResponse other) {
      if (other == global::SCNoticeListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.notices_.Count != 0) {
        result.notices_.Add(other.notices_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCNoticeListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCNoticeListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.notices_, global::NoticeInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::NoticeInfo> NoticesList {
      get { return PrepareBuilder().notices_; }
    }
    public int NoticesCount {
      get { return result.NoticesCount; }
    }
    public global::NoticeInfo GetNotices(int index) {
      return result.GetNotices(index);
    }
    public Builder SetNotices(int index, global::NoticeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.notices_[index] = value;
      return this;
    }
    public Builder SetNotices(int index, global::NoticeInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.notices_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddNotices(global::NoticeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.notices_.Add(value);
      return this;
    }
    public Builder AddNotices(global::NoticeInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.notices_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeNotices(scg::IEnumerable<global::NoticeInfo> values) {
      PrepareBuilder();
      result.notices_.Add(values);
      return this;
    }
    public Builder ClearNotices() {
      PrepareBuilder();
      result.notices_.Clear();
      return this;
    }
  }
  static SCNoticeListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class NoticeInfo : pb::GeneratedMessage<NoticeInfo, NoticeInfo.Builder> {
  private NoticeInfo() { }
  private static readonly NoticeInfo defaultInstance = new NoticeInfo().MakeReadOnly();
  private static readonly string[] _noticeInfoFieldNames = new string[] { "content", "endTime", "id", "levelLimit", "picture", "startTime", "title", "type", "updateTime" };
  private static readonly uint[] _noticeInfoFieldTags = new uint[] { 42, 64, 8, 48, 26, 56, 34, 16, 72 };
  public static NoticeInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override NoticeInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override NoticeInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_NoticeInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<NoticeInfo, NoticeInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_NoticeInfo__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int PictureFieldNumber = 3;
  private bool hasPicture;
  private string picture_ = "";
  public bool HasPicture {
    get { return hasPicture; }
  }
  public string Picture {
    get { return picture_; }
  }
  
  public const int TitleFieldNumber = 4;
  private bool hasTitle;
  private string title_ = "";
  public bool HasTitle {
    get { return hasTitle; }
  }
  public string Title {
    get { return title_; }
  }
  
  public const int ContentFieldNumber = 5;
  private bool hasContent;
  private string content_ = "";
  public bool HasContent {
    get { return hasContent; }
  }
  public string Content {
    get { return content_; }
  }
  
  public const int LevelLimitFieldNumber = 6;
  private bool hasLevelLimit;
  private int levelLimit_;
  public bool HasLevelLimit {
    get { return hasLevelLimit; }
  }
  public int LevelLimit {
    get { return levelLimit_; }
  }
  
  public const int StartTimeFieldNumber = 7;
  private bool hasStartTime;
  private long startTime_;
  public bool HasStartTime {
    get { return hasStartTime; }
  }
  public long StartTime {
    get { return startTime_; }
  }
  
  public const int EndTimeFieldNumber = 8;
  private bool hasEndTime;
  private long endTime_;
  public bool HasEndTime {
    get { return hasEndTime; }
  }
  public long EndTime {
    get { return endTime_; }
  }
  
  public const int UpdateTimeFieldNumber = 9;
  private bool hasUpdateTime;
  private long updateTime_;
  public bool HasUpdateTime {
    get { return hasUpdateTime; }
  }
  public long UpdateTime {
    get { return updateTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _noticeInfoFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[2], Id);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[7], Type);
    }
    if (hasPicture) {
      output.WriteString(3, field_names[4], Picture);
    }
    if (hasTitle) {
      output.WriteString(4, field_names[6], Title);
    }
    if (hasContent) {
      output.WriteString(5, field_names[0], Content);
    }
    if (hasLevelLimit) {
      output.WriteInt32(6, field_names[3], LevelLimit);
    }
    if (hasStartTime) {
      output.WriteInt64(7, field_names[5], StartTime);
    }
    if (hasEndTime) {
      output.WriteInt64(8, field_names[1], EndTime);
    }
    if (hasUpdateTime) {
      output.WriteInt64(9, field_names[8], UpdateTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasPicture) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Picture);
    }
    if (hasTitle) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Title);
    }
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Content);
    }
    if (hasLevelLimit) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, LevelLimit);
    }
    if (hasStartTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(7, StartTime);
    }
    if (hasEndTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(8, EndTime);
    }
    if (hasUpdateTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(9, UpdateTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static NoticeInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static NoticeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static NoticeInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static NoticeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static NoticeInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static NoticeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static NoticeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static NoticeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static NoticeInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static NoticeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private NoticeInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(NoticeInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<NoticeInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(NoticeInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private NoticeInfo result;
    
    private NoticeInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        NoticeInfo original = result;
        result = new NoticeInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override NoticeInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::NoticeInfo.Descriptor; }
    }
    
    public override NoticeInfo DefaultInstanceForType {
      get { return global::NoticeInfo.DefaultInstance; }
    }
    
    public override NoticeInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is NoticeInfo) {
        return MergeFrom((NoticeInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(NoticeInfo other) {
      if (other == global::NoticeInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasPicture) {
        Picture = other.Picture;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasLevelLimit) {
        LevelLimit = other.LevelLimit;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasUpdateTime) {
        UpdateTime = other.UpdateTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_noticeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _noticeInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 26: {
            result.hasPicture = input.ReadString(ref result.picture_);
            break;
          }
          case 34: {
            result.hasTitle = input.ReadString(ref result.title_);
            break;
          }
          case 42: {
            result.hasContent = input.ReadString(ref result.content_);
            break;
          }
          case 48: {
            result.hasLevelLimit = input.ReadInt32(ref result.levelLimit_);
            break;
          }
          case 56: {
            result.hasStartTime = input.ReadInt64(ref result.startTime_);
            break;
          }
          case 64: {
            result.hasEndTime = input.ReadInt64(ref result.endTime_);
            break;
          }
          case 72: {
            result.hasUpdateTime = input.ReadInt64(ref result.updateTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasPicture {
      get { return result.hasPicture; }
    }
    public string Picture {
      get { return result.Picture; }
      set { SetPicture(value); }
    }
    public Builder SetPicture(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPicture = true;
      result.picture_ = value;
      return this;
    }
    public Builder ClearPicture() {
      PrepareBuilder();
      result.hasPicture = false;
      result.picture_ = "";
      return this;
    }
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public string Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = "";
      return this;
    }
    
    public bool HasContent {
      get { return result.hasContent; }
    }
    public string Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = "";
      return this;
    }
    
    public bool HasLevelLimit {
      get { return result.hasLevelLimit; }
    }
    public int LevelLimit {
      get { return result.LevelLimit; }
      set { SetLevelLimit(value); }
    }
    public Builder SetLevelLimit(int value) {
      PrepareBuilder();
      result.hasLevelLimit = true;
      result.levelLimit_ = value;
      return this;
    }
    public Builder ClearLevelLimit() {
      PrepareBuilder();
      result.hasLevelLimit = false;
      result.levelLimit_ = 0;
      return this;
    }
    
    public bool HasStartTime {
      get { return result.hasStartTime; }
    }
    public long StartTime {
      get { return result.StartTime; }
      set { SetStartTime(value); }
    }
    public Builder SetStartTime(long value) {
      PrepareBuilder();
      result.hasStartTime = true;
      result.startTime_ = value;
      return this;
    }
    public Builder ClearStartTime() {
      PrepareBuilder();
      result.hasStartTime = false;
      result.startTime_ = 0L;
      return this;
    }
    
    public bool HasEndTime {
      get { return result.hasEndTime; }
    }
    public long EndTime {
      get { return result.EndTime; }
      set { SetEndTime(value); }
    }
    public Builder SetEndTime(long value) {
      PrepareBuilder();
      result.hasEndTime = true;
      result.endTime_ = value;
      return this;
    }
    public Builder ClearEndTime() {
      PrepareBuilder();
      result.hasEndTime = false;
      result.endTime_ = 0L;
      return this;
    }
    
    public bool HasUpdateTime {
      get { return result.hasUpdateTime; }
    }
    public long UpdateTime {
      get { return result.UpdateTime; }
      set { SetUpdateTime(value); }
    }
    public Builder SetUpdateTime(long value) {
      PrepareBuilder();
      result.hasUpdateTime = true;
      result.updateTime_ = value;
      return this;
    }
    public Builder ClearUpdateTime() {
      PrepareBuilder();
      result.hasUpdateTime = false;
      result.updateTime_ = 0L;
      return this;
    }
  }
  static NoticeInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPingRequest : pb::GeneratedMessage<CSPingRequest, CSPingRequest.Builder> {
  private CSPingRequest() { }
  private static readonly CSPingRequest defaultInstance = new CSPingRequest().MakeReadOnly();
  private static readonly string[] _cSPingRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSPingRequestFieldTags = new uint[] {  };
  public static CSPingRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPingRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPingRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPingRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPingRequest, CSPingRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPingRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPingRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPingRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPingRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPingRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPingRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPingRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPingRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPingRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPingRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPingRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPingRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPingRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPingRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPingRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPingRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPingRequest result;
    
    private CSPingRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPingRequest original = result;
        result = new CSPingRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPingRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPingRequest.Descriptor; }
    }
    
    public override CSPingRequest DefaultInstanceForType {
      get { return global::CSPingRequest.DefaultInstance; }
    }
    
    public override CSPingRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPingRequest) {
        return MergeFrom((CSPingRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPingRequest other) {
      if (other == global::CSPingRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPingRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPingRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSPingRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPingResponse : pb::GeneratedMessage<SCPingResponse, SCPingResponse.Builder> {
  private SCPingResponse() { }
  private static readonly SCPingResponse defaultInstance = new SCPingResponse().MakeReadOnly();
  private static readonly string[] _sCPingResponseFieldNames = new string[] { "content", "count" };
  private static readonly uint[] _sCPingResponseFieldTags = new uint[] { 18, 8 };
  public static SCPingResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPingResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPingResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPingResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPingResponse, SCPingResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPingResponse__FieldAccessorTable; }
  }
  
  public const int CountFieldNumber = 1;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int ContentFieldNumber = 2;
  private pbc::PopsicleList<global::PingResponseContent> content_ = new pbc::PopsicleList<global::PingResponseContent>();
  public scg::IList<global::PingResponseContent> ContentList {
    get { return content_; }
  }
  public int ContentCount {
    get { return content_.Count; }
  }
  public global::PingResponseContent GetContent(int index) {
    return content_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPingResponseFieldNames;
    if (hasCount) {
      output.WriteInt32(1, field_names[1], Count);
    }
    if (content_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], content_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Count);
    }
    foreach (global::PingResponseContent element in ContentList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPingResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPingResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPingResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPingResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPingResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPingResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPingResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPingResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPingResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPingResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPingResponse MakeReadOnly() {
    content_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPingResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPingResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPingResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPingResponse result;
    
    private SCPingResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPingResponse original = result;
        result = new SCPingResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPingResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPingResponse.Descriptor; }
    }
    
    public override SCPingResponse DefaultInstanceForType {
      get { return global::SCPingResponse.DefaultInstance; }
    }
    
    public override SCPingResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPingResponse) {
        return MergeFrom((SCPingResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPingResponse other) {
      if (other == global::SCPingResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.content_.Count != 0) {
        result.content_.Add(other.content_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPingResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPingResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.content_, global::PingResponseContent.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::PingResponseContent> ContentList {
      get { return PrepareBuilder().content_; }
    }
    public int ContentCount {
      get { return result.ContentCount; }
    }
    public global::PingResponseContent GetContent(int index) {
      return result.GetContent(index);
    }
    public Builder SetContent(int index, global::PingResponseContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.content_[index] = value;
      return this;
    }
    public Builder SetContent(int index, global::PingResponseContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.content_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddContent(global::PingResponseContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.content_.Add(value);
      return this;
    }
    public Builder AddContent(global::PingResponseContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.content_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeContent(scg::IEnumerable<global::PingResponseContent> values) {
      PrepareBuilder();
      result.content_.Add(values);
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.content_.Clear();
      return this;
    }
  }
  static SCPingResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PingResponseContent : pb::GeneratedMessage<PingResponseContent, PingResponseContent.Builder> {
  private PingResponseContent() { }
  private static readonly PingResponseContent defaultInstance = new PingResponseContent().MakeReadOnly();
  private static readonly string[] _pingResponseContentFieldNames = new string[] { "data", "isEmpty", "msgId" };
  private static readonly uint[] _pingResponseContentFieldTags = new uint[] { 18, 24, 8 };
  public static PingResponseContent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PingResponseContent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PingResponseContent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PingResponseContent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PingResponseContent, PingResponseContent.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PingResponseContent__FieldAccessorTable; }
  }
  
  public const int MsgIdFieldNumber = 1;
  private bool hasMsgId;
  private int msgId_;
  public bool HasMsgId {
    get { return hasMsgId; }
  }
  public int MsgId {
    get { return msgId_; }
  }
  
  public const int DataFieldNumber = 2;
  private bool hasData;
  private string data_ = "";
  public bool HasData {
    get { return hasData; }
  }
  public string Data {
    get { return data_; }
  }
  
  public const int IsEmptyFieldNumber = 3;
  private bool hasIsEmpty;
  private bool isEmpty_;
  public bool HasIsEmpty {
    get { return hasIsEmpty; }
  }
  public bool IsEmpty {
    get { return isEmpty_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _pingResponseContentFieldNames;
    if (hasMsgId) {
      output.WriteInt32(1, field_names[2], MsgId);
    }
    if (hasData) {
      output.WriteString(2, field_names[0], Data);
    }
    if (hasIsEmpty) {
      output.WriteBool(3, field_names[1], IsEmpty);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMsgId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MsgId);
    }
    if (hasData) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Data);
    }
    if (hasIsEmpty) {
      size += pb::CodedOutputStream.ComputeBoolSize(3, IsEmpty);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PingResponseContent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PingResponseContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PingResponseContent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PingResponseContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PingResponseContent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PingResponseContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PingResponseContent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PingResponseContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PingResponseContent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PingResponseContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PingResponseContent MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PingResponseContent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PingResponseContent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PingResponseContent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PingResponseContent result;
    
    private PingResponseContent PrepareBuilder() {
      if (resultIsReadOnly) {
        PingResponseContent original = result;
        result = new PingResponseContent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PingResponseContent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PingResponseContent.Descriptor; }
    }
    
    public override PingResponseContent DefaultInstanceForType {
      get { return global::PingResponseContent.DefaultInstance; }
    }
    
    public override PingResponseContent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PingResponseContent) {
        return MergeFrom((PingResponseContent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PingResponseContent other) {
      if (other == global::PingResponseContent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMsgId) {
        MsgId = other.MsgId;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      if (other.HasIsEmpty) {
        IsEmpty = other.IsEmpty;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_pingResponseContentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _pingResponseContentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMsgId = input.ReadInt32(ref result.msgId_);
            break;
          }
          case 18: {
            result.hasData = input.ReadString(ref result.data_);
            break;
          }
          case 24: {
            result.hasIsEmpty = input.ReadBool(ref result.isEmpty_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMsgId {
      get { return result.hasMsgId; }
    }
    public int MsgId {
      get { return result.MsgId; }
      set { SetMsgId(value); }
    }
    public Builder SetMsgId(int value) {
      PrepareBuilder();
      result.hasMsgId = true;
      result.msgId_ = value;
      return this;
    }
    public Builder ClearMsgId() {
      PrepareBuilder();
      result.hasMsgId = false;
      result.msgId_ = 0;
      return this;
    }
    
    public bool HasData {
      get { return result.hasData; }
    }
    public string Data {
      get { return result.Data; }
      set { SetData(value); }
    }
    public Builder SetData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasData = true;
      result.data_ = value;
      return this;
    }
    public Builder ClearData() {
      PrepareBuilder();
      result.hasData = false;
      result.data_ = "";
      return this;
    }
    
    public bool HasIsEmpty {
      get { return result.hasIsEmpty; }
    }
    public bool IsEmpty {
      get { return result.IsEmpty; }
      set { SetIsEmpty(value); }
    }
    public Builder SetIsEmpty(bool value) {
      PrepareBuilder();
      result.hasIsEmpty = true;
      result.isEmpty_ = value;
      return this;
    }
    public Builder ClearIsEmpty() {
      PrepareBuilder();
      result.hasIsEmpty = false;
      result.isEmpty_ = false;
      return this;
    }
  }
  static PingResponseContent() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSMessageRequest : pb::GeneratedMessage<CSMessageRequest, CSMessageRequest.Builder> {
  private CSMessageRequest() { }
  private static readonly CSMessageRequest defaultInstance = new CSMessageRequest().MakeReadOnly();
  private static readonly string[] _cSMessageRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSMessageRequestFieldTags = new uint[] {  };
  public static CSMessageRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSMessageRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSMessageRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSMessageRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSMessageRequest, CSMessageRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSMessageRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSMessageRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSMessageRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSMessageRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSMessageRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSMessageRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSMessageRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSMessageRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSMessageRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSMessageRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSMessageRequest result;
    
    private CSMessageRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSMessageRequest original = result;
        result = new CSMessageRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSMessageRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSMessageRequest.Descriptor; }
    }
    
    public override CSMessageRequest DefaultInstanceForType {
      get { return global::CSMessageRequest.DefaultInstance; }
    }
    
    public override CSMessageRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSMessageRequest) {
        return MergeFrom((CSMessageRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSMessageRequest other) {
      if (other == global::CSMessageRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSMessageRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSMessageRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSMessageRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LottoItemProto : pb::GeneratedMessage<LottoItemProto, LottoItemProto.Builder> {
  private LottoItemProto() { }
  private static readonly LottoItemProto defaultInstance = new LottoItemProto().MakeReadOnly();
  private static readonly string[] _lottoItemProtoFieldNames = new string[] { "count", "id", "lucky", "propId", "special" };
  private static readonly uint[] _lottoItemProtoFieldTags = new uint[] { 16, 40, 32, 8, 24 };
  public static LottoItemProto DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LottoItemProto DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LottoItemProto ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_LottoItemProto__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LottoItemProto, LottoItemProto.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_LottoItemProto__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public const int SpecialFieldNumber = 3;
  private bool hasSpecial;
  private bool special_;
  public bool HasSpecial {
    get { return hasSpecial; }
  }
  public bool Special {
    get { return special_; }
  }
  
  public const int LuckyFieldNumber = 4;
  private bool hasLucky;
  private int lucky_;
  public bool HasLucky {
    get { return hasLucky; }
  }
  public int Lucky {
    get { return lucky_; }
  }
  
  public const int IdFieldNumber = 5;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _lottoItemProtoFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[3], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    if (hasSpecial) {
      output.WriteBool(3, field_names[4], Special);
    }
    if (hasLucky) {
      output.WriteInt32(4, field_names[2], Lucky);
    }
    if (hasId) {
      output.WriteInt64(5, field_names[1], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    if (hasSpecial) {
      size += pb::CodedOutputStream.ComputeBoolSize(3, Special);
    }
    if (hasLucky) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Lucky);
    }
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(5, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LottoItemProto ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoItemProto ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoItemProto ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoItemProto ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoItemProto ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoItemProto ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LottoItemProto ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LottoItemProto ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LottoItemProto ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoItemProto ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LottoItemProto MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LottoItemProto prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LottoItemProto, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LottoItemProto cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LottoItemProto result;
    
    private LottoItemProto PrepareBuilder() {
      if (resultIsReadOnly) {
        LottoItemProto original = result;
        result = new LottoItemProto();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LottoItemProto MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LottoItemProto.Descriptor; }
    }
    
    public override LottoItemProto DefaultInstanceForType {
      get { return global::LottoItemProto.DefaultInstance; }
    }
    
    public override LottoItemProto BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LottoItemProto) {
        return MergeFrom((LottoItemProto) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LottoItemProto other) {
      if (other == global::LottoItemProto.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      if (other.HasSpecial) {
        Special = other.Special;
      }
      if (other.HasLucky) {
        Lucky = other.Lucky;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_lottoItemProtoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _lottoItemProtoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
          case 24: {
            result.hasSpecial = input.ReadBool(ref result.special_);
            break;
          }
          case 32: {
            result.hasLucky = input.ReadInt32(ref result.lucky_);
            break;
          }
          case 40: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
    
    public bool HasSpecial {
      get { return result.hasSpecial; }
    }
    public bool Special {
      get { return result.Special; }
      set { SetSpecial(value); }
    }
    public Builder SetSpecial(bool value) {
      PrepareBuilder();
      result.hasSpecial = true;
      result.special_ = value;
      return this;
    }
    public Builder ClearSpecial() {
      PrepareBuilder();
      result.hasSpecial = false;
      result.special_ = false;
      return this;
    }
    
    public bool HasLucky {
      get { return result.hasLucky; }
    }
    public int Lucky {
      get { return result.Lucky; }
      set { SetLucky(value); }
    }
    public Builder SetLucky(int value) {
      PrepareBuilder();
      result.hasLucky = true;
      result.lucky_ = value;
      return this;
    }
    public Builder ClearLucky() {
      PrepareBuilder();
      result.hasLucky = false;
      result.lucky_ = 0;
      return this;
    }
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static LottoItemProto() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LottoRequest : pb::GeneratedMessage<LottoRequest, LottoRequest.Builder> {
  private LottoRequest() { }
  private static readonly LottoRequest defaultInstance = new LottoRequest().MakeReadOnly();
  private static readonly string[] _lottoRequestFieldNames = new string[] { "costType" };
  private static readonly uint[] _lottoRequestFieldTags = new uint[] { 8 };
  public static LottoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LottoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LottoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_LottoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LottoRequest, LottoRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_LottoRequest__FieldAccessorTable; }
  }
  
  public const int CostTypeFieldNumber = 1;
  private bool hasCostType;
  private global::CostType costType_ = global::CostType.COST_CASH;
  public bool HasCostType {
    get { return hasCostType; }
  }
  public global::CostType CostType {
    get { return costType_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _lottoRequestFieldNames;
    if (hasCostType) {
      output.WriteEnum(1, field_names[0], (int) CostType, CostType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCostType) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) CostType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LottoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LottoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LottoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LottoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LottoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LottoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LottoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LottoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LottoRequest result;
    
    private LottoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        LottoRequest original = result;
        result = new LottoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LottoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LottoRequest.Descriptor; }
    }
    
    public override LottoRequest DefaultInstanceForType {
      get { return global::LottoRequest.DefaultInstance; }
    }
    
    public override LottoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LottoRequest) {
        return MergeFrom((LottoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LottoRequest other) {
      if (other == global::LottoRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCostType) {
        CostType = other.CostType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_lottoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _lottoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.costType_, out unknown)) {
              result.hasCostType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCostType {
     get { return result.hasCostType; }
    }
    public global::CostType CostType {
      get { return result.CostType; }
      set { SetCostType(value); }
    }
    public Builder SetCostType(global::CostType value) {
      PrepareBuilder();
      result.hasCostType = true;
      result.costType_ = value;
      return this;
    }
    public Builder ClearCostType() {
      PrepareBuilder();
      result.hasCostType = false;
      result.costType_ = global::CostType.COST_CASH;
      return this;
    }
  }
  static LottoRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LottoResponse : pb::GeneratedMessage<LottoResponse, LottoResponse.Builder> {
  private LottoResponse() { }
  private static readonly LottoResponse defaultInstance = new LottoResponse().MakeReadOnly();
  private static readonly string[] _lottoResponseFieldNames = new string[] { "costType", "costValue", "items", "lottoId", "lucky", "responseStatus" };
  private static readonly uint[] _lottoResponseFieldTags = new uint[] { 16, 24, 42, 32, 48, 10 };
  public static LottoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LottoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LottoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_LottoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LottoResponse, LottoResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_LottoResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int CostTypeFieldNumber = 2;
  private bool hasCostType;
  private global::CostType costType_ = global::CostType.COST_CASH;
  public bool HasCostType {
    get { return hasCostType; }
  }
  public global::CostType CostType {
    get { return costType_; }
  }
  
  public const int CostValueFieldNumber = 3;
  private bool hasCostValue;
  private int costValue_;
  public bool HasCostValue {
    get { return hasCostValue; }
  }
  public int CostValue {
    get { return costValue_; }
  }
  
  public const int LottoIdFieldNumber = 4;
  private bool hasLottoId;
  private long lottoId_;
  public bool HasLottoId {
    get { return hasLottoId; }
  }
  public long LottoId {
    get { return lottoId_; }
  }
  
  public const int ItemsFieldNumber = 5;
  private pbc::PopsicleList<global::LottoItemProto> items_ = new pbc::PopsicleList<global::LottoItemProto>();
  public scg::IList<global::LottoItemProto> ItemsList {
    get { return items_; }
  }
  public int ItemsCount {
    get { return items_.Count; }
  }
  public global::LottoItemProto GetItems(int index) {
    return items_[index];
  }
  
  public const int LuckyFieldNumber = 6;
  private bool hasLucky;
  private int lucky_;
  public bool HasLucky {
    get { return hasLucky; }
  }
  public int Lucky {
    get { return lucky_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _lottoResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[5], ResponseStatus);
    }
    if (hasCostType) {
      output.WriteEnum(2, field_names[0], (int) CostType, CostType);
    }
    if (hasCostValue) {
      output.WriteInt32(3, field_names[1], CostValue);
    }
    if (hasLottoId) {
      output.WriteInt64(4, field_names[3], LottoId);
    }
    if (items_.Count > 0) {
      output.WriteMessageArray(5, field_names[2], items_);
    }
    if (hasLucky) {
      output.WriteInt32(6, field_names[4], Lucky);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasCostType) {
      size += pb::CodedOutputStream.ComputeEnumSize(2, (int) CostType);
    }
    if (hasCostValue) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, CostValue);
    }
    if (hasLottoId) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, LottoId);
    }
    foreach (global::LottoItemProto element in ItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, element);
    }
    if (hasLucky) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, Lucky);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LottoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LottoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LottoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LottoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LottoResponse MakeReadOnly() {
    items_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LottoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LottoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LottoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LottoResponse result;
    
    private LottoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        LottoResponse original = result;
        result = new LottoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LottoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LottoResponse.Descriptor; }
    }
    
    public override LottoResponse DefaultInstanceForType {
      get { return global::LottoResponse.DefaultInstance; }
    }
    
    public override LottoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LottoResponse) {
        return MergeFrom((LottoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LottoResponse other) {
      if (other == global::LottoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasCostType) {
        CostType = other.CostType;
      }
      if (other.HasCostValue) {
        CostValue = other.CostValue;
      }
      if (other.HasLottoId) {
        LottoId = other.LottoId;
      }
      if (other.items_.Count != 0) {
        result.items_.Add(other.items_);
      }
      if (other.HasLucky) {
        Lucky = other.Lucky;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_lottoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _lottoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            object unknown;
            if(input.ReadEnum(ref result.costType_, out unknown)) {
              result.hasCostType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(2, (ulong)(int)unknown);
            }
            break;
          }
          case 24: {
            result.hasCostValue = input.ReadInt32(ref result.costValue_);
            break;
          }
          case 32: {
            result.hasLottoId = input.ReadInt64(ref result.lottoId_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.items_, global::LottoItemProto.DefaultInstance, extensionRegistry);
            break;
          }
          case 48: {
            result.hasLucky = input.ReadInt32(ref result.lucky_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasCostType {
     get { return result.hasCostType; }
    }
    public global::CostType CostType {
      get { return result.CostType; }
      set { SetCostType(value); }
    }
    public Builder SetCostType(global::CostType value) {
      PrepareBuilder();
      result.hasCostType = true;
      result.costType_ = value;
      return this;
    }
    public Builder ClearCostType() {
      PrepareBuilder();
      result.hasCostType = false;
      result.costType_ = global::CostType.COST_CASH;
      return this;
    }
    
    public bool HasCostValue {
      get { return result.hasCostValue; }
    }
    public int CostValue {
      get { return result.CostValue; }
      set { SetCostValue(value); }
    }
    public Builder SetCostValue(int value) {
      PrepareBuilder();
      result.hasCostValue = true;
      result.costValue_ = value;
      return this;
    }
    public Builder ClearCostValue() {
      PrepareBuilder();
      result.hasCostValue = false;
      result.costValue_ = 0;
      return this;
    }
    
    public bool HasLottoId {
      get { return result.hasLottoId; }
    }
    public long LottoId {
      get { return result.LottoId; }
      set { SetLottoId(value); }
    }
    public Builder SetLottoId(long value) {
      PrepareBuilder();
      result.hasLottoId = true;
      result.lottoId_ = value;
      return this;
    }
    public Builder ClearLottoId() {
      PrepareBuilder();
      result.hasLottoId = false;
      result.lottoId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::LottoItemProto> ItemsList {
      get { return PrepareBuilder().items_; }
    }
    public int ItemsCount {
      get { return result.ItemsCount; }
    }
    public global::LottoItemProto GetItems(int index) {
      return result.GetItems(index);
    }
    public Builder SetItems(int index, global::LottoItemProto value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_[index] = value;
      return this;
    }
    public Builder SetItems(int index, global::LottoItemProto.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddItems(global::LottoItemProto value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_.Add(value);
      return this;
    }
    public Builder AddItems(global::LottoItemProto.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeItems(scg::IEnumerable<global::LottoItemProto> values) {
      PrepareBuilder();
      result.items_.Add(values);
      return this;
    }
    public Builder ClearItems() {
      PrepareBuilder();
      result.items_.Clear();
      return this;
    }
    
    public bool HasLucky {
      get { return result.hasLucky; }
    }
    public int Lucky {
      get { return result.Lucky; }
      set { SetLucky(value); }
    }
    public Builder SetLucky(int value) {
      PrepareBuilder();
      result.hasLucky = true;
      result.lucky_ = value;
      return this;
    }
    public Builder ClearLucky() {
      PrepareBuilder();
      result.hasLucky = false;
      result.lucky_ = 0;
      return this;
    }
  }
  static LottoResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LottoBuyRequest : pb::GeneratedMessage<LottoBuyRequest, LottoBuyRequest.Builder> {
  private LottoBuyRequest() { }
  private static readonly LottoBuyRequest defaultInstance = new LottoBuyRequest().MakeReadOnly();
  private static readonly string[] _lottoBuyRequestFieldNames = new string[] { "lottoId" };
  private static readonly uint[] _lottoBuyRequestFieldTags = new uint[] { 8 };
  public static LottoBuyRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LottoBuyRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LottoBuyRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_LottoBuyRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LottoBuyRequest, LottoBuyRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_LottoBuyRequest__FieldAccessorTable; }
  }
  
  public const int LottoIdFieldNumber = 1;
  private bool hasLottoId;
  private long lottoId_;
  public bool HasLottoId {
    get { return hasLottoId; }
  }
  public long LottoId {
    get { return lottoId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _lottoBuyRequestFieldNames;
    if (hasLottoId) {
      output.WriteInt64(1, field_names[0], LottoId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasLottoId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, LottoId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LottoBuyRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LottoBuyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LottoBuyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoBuyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LottoBuyRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LottoBuyRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LottoBuyRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LottoBuyRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LottoBuyRequest result;
    
    private LottoBuyRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        LottoBuyRequest original = result;
        result = new LottoBuyRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LottoBuyRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LottoBuyRequest.Descriptor; }
    }
    
    public override LottoBuyRequest DefaultInstanceForType {
      get { return global::LottoBuyRequest.DefaultInstance; }
    }
    
    public override LottoBuyRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LottoBuyRequest) {
        return MergeFrom((LottoBuyRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LottoBuyRequest other) {
      if (other == global::LottoBuyRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasLottoId) {
        LottoId = other.LottoId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_lottoBuyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _lottoBuyRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasLottoId = input.ReadInt64(ref result.lottoId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasLottoId {
      get { return result.hasLottoId; }
    }
    public long LottoId {
      get { return result.LottoId; }
      set { SetLottoId(value); }
    }
    public Builder SetLottoId(long value) {
      PrepareBuilder();
      result.hasLottoId = true;
      result.lottoId_ = value;
      return this;
    }
    public Builder ClearLottoId() {
      PrepareBuilder();
      result.hasLottoId = false;
      result.lottoId_ = 0L;
      return this;
    }
  }
  static LottoBuyRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class LottoBuyResponse : pb::GeneratedMessage<LottoBuyResponse, LottoBuyResponse.Builder> {
  private LottoBuyResponse() { }
  private static readonly LottoBuyResponse defaultInstance = new LottoBuyResponse().MakeReadOnly();
  private static readonly string[] _lottoBuyResponseFieldNames = new string[] { "id", "lottoCount", "props", "responseStatus" };
  private static readonly uint[] _lottoBuyResponseFieldTags = new uint[] { 24, 32, 18, 10 };
  public static LottoBuyResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override LottoBuyResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override LottoBuyResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_LottoBuyResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<LottoBuyResponse, LottoBuyResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_LottoBuyResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int PropsFieldNumber = 2;
  private pbc::PopsicleList<global::PlayerPropMsg> props_ = new pbc::PopsicleList<global::PlayerPropMsg>();
  public scg::IList<global::PlayerPropMsg> PropsList {
    get { return props_; }
  }
  public int PropsCount {
    get { return props_.Count; }
  }
  public global::PlayerPropMsg GetProps(int index) {
    return props_[index];
  }
  
  public const int IdFieldNumber = 3;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int LottoCountFieldNumber = 4;
  private bool hasLottoCount;
  private int lottoCount_;
  public bool HasLottoCount {
    get { return hasLottoCount; }
  }
  public int LottoCount {
    get { return lottoCount_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _lottoBuyResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[3], ResponseStatus);
    }
    if (props_.Count > 0) {
      output.WriteMessageArray(2, field_names[2], props_);
    }
    if (hasId) {
      output.WriteInt64(3, field_names[0], Id);
    }
    if (hasLottoCount) {
      output.WriteInt32(4, field_names[1], LottoCount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    foreach (global::PlayerPropMsg element in PropsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, Id);
    }
    if (hasLottoCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, LottoCount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static LottoBuyResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static LottoBuyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static LottoBuyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static LottoBuyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private LottoBuyResponse MakeReadOnly() {
    props_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(LottoBuyResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<LottoBuyResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(LottoBuyResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private LottoBuyResponse result;
    
    private LottoBuyResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        LottoBuyResponse original = result;
        result = new LottoBuyResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override LottoBuyResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::LottoBuyResponse.Descriptor; }
    }
    
    public override LottoBuyResponse DefaultInstanceForType {
      get { return global::LottoBuyResponse.DefaultInstance; }
    }
    
    public override LottoBuyResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is LottoBuyResponse) {
        return MergeFrom((LottoBuyResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(LottoBuyResponse other) {
      if (other == global::LottoBuyResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.props_.Count != 0) {
        result.props_.Add(other.props_);
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLottoCount) {
        LottoCount = other.LottoCount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_lottoBuyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _lottoBuyResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.props_, global::PlayerPropMsg.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 32: {
            result.hasLottoCount = input.ReadInt32(ref result.lottoCount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerPropMsg> PropsList {
      get { return PrepareBuilder().props_; }
    }
    public int PropsCount {
      get { return result.PropsCount; }
    }
    public global::PlayerPropMsg GetProps(int index) {
      return result.GetProps(index);
    }
    public Builder SetProps(int index, global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.props_[index] = value;
      return this;
    }
    public Builder SetProps(int index, global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.props_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddProps(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.props_.Add(value);
      return this;
    }
    public Builder AddProps(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.props_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeProps(scg::IEnumerable<global::PlayerPropMsg> values) {
      PrepareBuilder();
      result.props_.Add(values);
      return this;
    }
    public Builder ClearProps() {
      PrepareBuilder();
      result.props_.Clear();
      return this;
    }
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasLottoCount {
      get { return result.hasLottoCount; }
    }
    public int LottoCount {
      get { return result.LottoCount; }
      set { SetLottoCount(value); }
    }
    public Builder SetLottoCount(int value) {
      PrepareBuilder();
      result.hasLottoCount = true;
      result.lottoCount_ = value;
      return this;
    }
    public Builder ClearLottoCount() {
      PrepareBuilder();
      result.hasLottoCount = false;
      result.lottoCount_ = 0;
      return this;
    }
  }
  static LottoBuyResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGooglePayChargeRequest : pb::GeneratedMessage<CSGooglePayChargeRequest, CSGooglePayChargeRequest.Builder> {
  private CSGooglePayChargeRequest() { }
  private static readonly CSGooglePayChargeRequest defaultInstance = new CSGooglePayChargeRequest().MakeReadOnly();
  private static readonly string[] _cSGooglePayChargeRequestFieldNames = new string[] { "jsonData", "productId", "signature" };
  private static readonly uint[] _cSGooglePayChargeRequestFieldTags = new uint[] { 10, 26, 18 };
  public static CSGooglePayChargeRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGooglePayChargeRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGooglePayChargeRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSGooglePayChargeRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGooglePayChargeRequest, CSGooglePayChargeRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSGooglePayChargeRequest__FieldAccessorTable; }
  }
  
  public const int JsonDataFieldNumber = 1;
  private bool hasJsonData;
  private string jsonData_ = "";
  public bool HasJsonData {
    get { return hasJsonData; }
  }
  public string JsonData {
    get { return jsonData_; }
  }
  
  public const int SignatureFieldNumber = 2;
  private bool hasSignature;
  private string signature_ = "";
  public bool HasSignature {
    get { return hasSignature; }
  }
  public string Signature {
    get { return signature_; }
  }
  
  public const int ProductIdFieldNumber = 3;
  private bool hasProductId;
  private string productId_ = "";
  public bool HasProductId {
    get { return hasProductId; }
  }
  public string ProductId {
    get { return productId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGooglePayChargeRequestFieldNames;
    if (hasJsonData) {
      output.WriteString(1, field_names[0], JsonData);
    }
    if (hasSignature) {
      output.WriteString(2, field_names[2], Signature);
    }
    if (hasProductId) {
      output.WriteString(3, field_names[1], ProductId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasJsonData) {
      size += pb::CodedOutputStream.ComputeStringSize(1, JsonData);
    }
    if (hasSignature) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Signature);
    }
    if (hasProductId) {
      size += pb::CodedOutputStream.ComputeStringSize(3, ProductId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGooglePayChargeRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGooglePayChargeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGooglePayChargeRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGooglePayChargeRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGooglePayChargeRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGooglePayChargeRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGooglePayChargeRequest result;
    
    private CSGooglePayChargeRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGooglePayChargeRequest original = result;
        result = new CSGooglePayChargeRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGooglePayChargeRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGooglePayChargeRequest.Descriptor; }
    }
    
    public override CSGooglePayChargeRequest DefaultInstanceForType {
      get { return global::CSGooglePayChargeRequest.DefaultInstance; }
    }
    
    public override CSGooglePayChargeRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGooglePayChargeRequest) {
        return MergeFrom((CSGooglePayChargeRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGooglePayChargeRequest other) {
      if (other == global::CSGooglePayChargeRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasJsonData) {
        JsonData = other.JsonData;
      }
      if (other.HasSignature) {
        Signature = other.Signature;
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGooglePayChargeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGooglePayChargeRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasJsonData = input.ReadString(ref result.jsonData_);
            break;
          }
          case 18: {
            result.hasSignature = input.ReadString(ref result.signature_);
            break;
          }
          case 26: {
            result.hasProductId = input.ReadString(ref result.productId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasJsonData {
      get { return result.hasJsonData; }
    }
    public string JsonData {
      get { return result.JsonData; }
      set { SetJsonData(value); }
    }
    public Builder SetJsonData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasJsonData = true;
      result.jsonData_ = value;
      return this;
    }
    public Builder ClearJsonData() {
      PrepareBuilder();
      result.hasJsonData = false;
      result.jsonData_ = "";
      return this;
    }
    
    public bool HasSignature {
      get { return result.hasSignature; }
    }
    public string Signature {
      get { return result.Signature; }
      set { SetSignature(value); }
    }
    public Builder SetSignature(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSignature = true;
      result.signature_ = value;
      return this;
    }
    public Builder ClearSignature() {
      PrepareBuilder();
      result.hasSignature = false;
      result.signature_ = "";
      return this;
    }
    
    public bool HasProductId {
      get { return result.hasProductId; }
    }
    public string ProductId {
      get { return result.ProductId; }
      set { SetProductId(value); }
    }
    public Builder SetProductId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProductId = true;
      result.productId_ = value;
      return this;
    }
    public Builder ClearProductId() {
      PrepareBuilder();
      result.hasProductId = false;
      result.productId_ = "";
      return this;
    }
  }
  static CSGooglePayChargeRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGooglePayChargeResponse : pb::GeneratedMessage<SCGooglePayChargeResponse, SCGooglePayChargeResponse.Builder> {
  private SCGooglePayChargeResponse() { }
  private static readonly SCGooglePayChargeResponse defaultInstance = new SCGooglePayChargeResponse().MakeReadOnly();
  private static readonly string[] _sCGooglePayChargeResponseFieldNames = new string[] { "productId", "responseStatus" };
  private static readonly uint[] _sCGooglePayChargeResponseFieldTags = new uint[] { 18, 10 };
  public static SCGooglePayChargeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGooglePayChargeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGooglePayChargeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCGooglePayChargeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGooglePayChargeResponse, SCGooglePayChargeResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCGooglePayChargeResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int ProductIdFieldNumber = 2;
  private bool hasProductId;
  private string productId_ = "";
  public bool HasProductId {
    get { return hasProductId; }
  }
  public string ProductId {
    get { return productId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGooglePayChargeResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[1], ResponseStatus);
    }
    if (hasProductId) {
      output.WriteString(2, field_names[0], ProductId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasProductId) {
      size += pb::CodedOutputStream.ComputeStringSize(2, ProductId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGooglePayChargeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGooglePayChargeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGooglePayChargeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGooglePayChargeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGooglePayChargeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGooglePayChargeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGooglePayChargeResponse result;
    
    private SCGooglePayChargeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGooglePayChargeResponse original = result;
        result = new SCGooglePayChargeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGooglePayChargeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGooglePayChargeResponse.Descriptor; }
    }
    
    public override SCGooglePayChargeResponse DefaultInstanceForType {
      get { return global::SCGooglePayChargeResponse.DefaultInstance; }
    }
    
    public override SCGooglePayChargeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGooglePayChargeResponse) {
        return MergeFrom((SCGooglePayChargeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGooglePayChargeResponse other) {
      if (other == global::SCGooglePayChargeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGooglePayChargeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGooglePayChargeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasProductId = input.ReadString(ref result.productId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasProductId {
      get { return result.hasProductId; }
    }
    public string ProductId {
      get { return result.ProductId; }
      set { SetProductId(value); }
    }
    public Builder SetProductId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProductId = true;
      result.productId_ = value;
      return this;
    }
    public Builder ClearProductId() {
      PrepareBuilder();
      result.hasProductId = false;
      result.productId_ = "";
      return this;
    }
  }
  static SCGooglePayChargeResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSIOSPayChargeRequest : pb::GeneratedMessage<CSIOSPayChargeRequest, CSIOSPayChargeRequest.Builder> {
  private CSIOSPayChargeRequest() { }
  private static readonly CSIOSPayChargeRequest defaultInstance = new CSIOSPayChargeRequest().MakeReadOnly();
  private static readonly string[] _cSIOSPayChargeRequestFieldNames = new string[] { "jsonData", "productId" };
  private static readonly uint[] _cSIOSPayChargeRequestFieldTags = new uint[] { 10, 18 };
  public static CSIOSPayChargeRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSIOSPayChargeRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSIOSPayChargeRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSIOSPayChargeRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSIOSPayChargeRequest, CSIOSPayChargeRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSIOSPayChargeRequest__FieldAccessorTable; }
  }
  
  public const int JsonDataFieldNumber = 1;
  private bool hasJsonData;
  private string jsonData_ = "";
  public bool HasJsonData {
    get { return hasJsonData; }
  }
  public string JsonData {
    get { return jsonData_; }
  }
  
  public const int ProductIdFieldNumber = 2;
  private bool hasProductId;
  private string productId_ = "";
  public bool HasProductId {
    get { return hasProductId; }
  }
  public string ProductId {
    get { return productId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSIOSPayChargeRequestFieldNames;
    if (hasJsonData) {
      output.WriteString(1, field_names[0], JsonData);
    }
    if (hasProductId) {
      output.WriteString(2, field_names[1], ProductId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasJsonData) {
      size += pb::CodedOutputStream.ComputeStringSize(1, JsonData);
    }
    if (hasProductId) {
      size += pb::CodedOutputStream.ComputeStringSize(2, ProductId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSIOSPayChargeRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSIOSPayChargeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSIOSPayChargeRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSIOSPayChargeRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSIOSPayChargeRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSIOSPayChargeRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSIOSPayChargeRequest result;
    
    private CSIOSPayChargeRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSIOSPayChargeRequest original = result;
        result = new CSIOSPayChargeRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSIOSPayChargeRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSIOSPayChargeRequest.Descriptor; }
    }
    
    public override CSIOSPayChargeRequest DefaultInstanceForType {
      get { return global::CSIOSPayChargeRequest.DefaultInstance; }
    }
    
    public override CSIOSPayChargeRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSIOSPayChargeRequest) {
        return MergeFrom((CSIOSPayChargeRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSIOSPayChargeRequest other) {
      if (other == global::CSIOSPayChargeRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasJsonData) {
        JsonData = other.JsonData;
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSIOSPayChargeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSIOSPayChargeRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasJsonData = input.ReadString(ref result.jsonData_);
            break;
          }
          case 18: {
            result.hasProductId = input.ReadString(ref result.productId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasJsonData {
      get { return result.hasJsonData; }
    }
    public string JsonData {
      get { return result.JsonData; }
      set { SetJsonData(value); }
    }
    public Builder SetJsonData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasJsonData = true;
      result.jsonData_ = value;
      return this;
    }
    public Builder ClearJsonData() {
      PrepareBuilder();
      result.hasJsonData = false;
      result.jsonData_ = "";
      return this;
    }
    
    public bool HasProductId {
      get { return result.hasProductId; }
    }
    public string ProductId {
      get { return result.ProductId; }
      set { SetProductId(value); }
    }
    public Builder SetProductId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProductId = true;
      result.productId_ = value;
      return this;
    }
    public Builder ClearProductId() {
      PrepareBuilder();
      result.hasProductId = false;
      result.productId_ = "";
      return this;
    }
  }
  static CSIOSPayChargeRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCIOSPayChargeResponse : pb::GeneratedMessage<SCIOSPayChargeResponse, SCIOSPayChargeResponse.Builder> {
  private SCIOSPayChargeResponse() { }
  private static readonly SCIOSPayChargeResponse defaultInstance = new SCIOSPayChargeResponse().MakeReadOnly();
  private static readonly string[] _sCIOSPayChargeResponseFieldNames = new string[] { "jsonData", "productId", "responseStatus" };
  private static readonly uint[] _sCIOSPayChargeResponseFieldTags = new uint[] { 26, 18, 10 };
  public static SCIOSPayChargeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCIOSPayChargeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCIOSPayChargeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCIOSPayChargeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCIOSPayChargeResponse, SCIOSPayChargeResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCIOSPayChargeResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int ProductIdFieldNumber = 2;
  private bool hasProductId;
  private string productId_ = "";
  public bool HasProductId {
    get { return hasProductId; }
  }
  public string ProductId {
    get { return productId_; }
  }
  
  public const int JsonDataFieldNumber = 3;
  private bool hasJsonData;
  private string jsonData_ = "";
  public bool HasJsonData {
    get { return hasJsonData; }
  }
  public string JsonData {
    get { return jsonData_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCIOSPayChargeResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[2], ResponseStatus);
    }
    if (hasProductId) {
      output.WriteString(2, field_names[1], ProductId);
    }
    if (hasJsonData) {
      output.WriteString(3, field_names[0], JsonData);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasProductId) {
      size += pb::CodedOutputStream.ComputeStringSize(2, ProductId);
    }
    if (hasJsonData) {
      size += pb::CodedOutputStream.ComputeStringSize(3, JsonData);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCIOSPayChargeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCIOSPayChargeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCIOSPayChargeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCIOSPayChargeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCIOSPayChargeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCIOSPayChargeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCIOSPayChargeResponse result;
    
    private SCIOSPayChargeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCIOSPayChargeResponse original = result;
        result = new SCIOSPayChargeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCIOSPayChargeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCIOSPayChargeResponse.Descriptor; }
    }
    
    public override SCIOSPayChargeResponse DefaultInstanceForType {
      get { return global::SCIOSPayChargeResponse.DefaultInstance; }
    }
    
    public override SCIOSPayChargeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCIOSPayChargeResponse) {
        return MergeFrom((SCIOSPayChargeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCIOSPayChargeResponse other) {
      if (other == global::SCIOSPayChargeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasProductId) {
        ProductId = other.ProductId;
      }
      if (other.HasJsonData) {
        JsonData = other.JsonData;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCIOSPayChargeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCIOSPayChargeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasProductId = input.ReadString(ref result.productId_);
            break;
          }
          case 26: {
            result.hasJsonData = input.ReadString(ref result.jsonData_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasProductId {
      get { return result.hasProductId; }
    }
    public string ProductId {
      get { return result.ProductId; }
      set { SetProductId(value); }
    }
    public Builder SetProductId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProductId = true;
      result.productId_ = value;
      return this;
    }
    public Builder ClearProductId() {
      PrepareBuilder();
      result.hasProductId = false;
      result.productId_ = "";
      return this;
    }
    
    public bool HasJsonData {
      get { return result.hasJsonData; }
    }
    public string JsonData {
      get { return result.JsonData; }
      set { SetJsonData(value); }
    }
    public Builder SetJsonData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasJsonData = true;
      result.jsonData_ = value;
      return this;
    }
    public Builder ClearJsonData() {
      PrepareBuilder();
      result.hasJsonData = false;
      result.jsonData_ = "";
      return this;
    }
  }
  static SCIOSPayChargeResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAcceptTaskNotice : pb::GeneratedMessage<SCAcceptTaskNotice, SCAcceptTaskNotice.Builder> {
  private SCAcceptTaskNotice() { }
  private static readonly SCAcceptTaskNotice defaultInstance = new SCAcceptTaskNotice().MakeReadOnly();
  private static readonly string[] _sCAcceptTaskNoticeFieldNames = new string[] { "acceptTasks" };
  private static readonly uint[] _sCAcceptTaskNoticeFieldTags = new uint[] { 10 };
  public static SCAcceptTaskNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAcceptTaskNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAcceptTaskNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCAcceptTaskNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAcceptTaskNotice, SCAcceptTaskNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCAcceptTaskNotice__FieldAccessorTable; }
  }
  
  public const int AcceptTasksFieldNumber = 1;
  private pbc::PopsicleList<global::AcceptTaskInfo> acceptTasks_ = new pbc::PopsicleList<global::AcceptTaskInfo>();
  public scg::IList<global::AcceptTaskInfo> AcceptTasksList {
    get { return acceptTasks_; }
  }
  public int AcceptTasksCount {
    get { return acceptTasks_.Count; }
  }
  public global::AcceptTaskInfo GetAcceptTasks(int index) {
    return acceptTasks_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAcceptTaskNoticeFieldNames;
    if (acceptTasks_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], acceptTasks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::AcceptTaskInfo element in AcceptTasksList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAcceptTaskNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAcceptTaskNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAcceptTaskNotice MakeReadOnly() {
    acceptTasks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAcceptTaskNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAcceptTaskNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAcceptTaskNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAcceptTaskNotice result;
    
    private SCAcceptTaskNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAcceptTaskNotice original = result;
        result = new SCAcceptTaskNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAcceptTaskNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAcceptTaskNotice.Descriptor; }
    }
    
    public override SCAcceptTaskNotice DefaultInstanceForType {
      get { return global::SCAcceptTaskNotice.DefaultInstance; }
    }
    
    public override SCAcceptTaskNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAcceptTaskNotice) {
        return MergeFrom((SCAcceptTaskNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAcceptTaskNotice other) {
      if (other == global::SCAcceptTaskNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.acceptTasks_.Count != 0) {
        result.acceptTasks_.Add(other.acceptTasks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAcceptTaskNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAcceptTaskNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.acceptTasks_, global::AcceptTaskInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::AcceptTaskInfo> AcceptTasksList {
      get { return PrepareBuilder().acceptTasks_; }
    }
    public int AcceptTasksCount {
      get { return result.AcceptTasksCount; }
    }
    public global::AcceptTaskInfo GetAcceptTasks(int index) {
      return result.GetAcceptTasks(index);
    }
    public Builder SetAcceptTasks(int index, global::AcceptTaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.acceptTasks_[index] = value;
      return this;
    }
    public Builder SetAcceptTasks(int index, global::AcceptTaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.acceptTasks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAcceptTasks(global::AcceptTaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.acceptTasks_.Add(value);
      return this;
    }
    public Builder AddAcceptTasks(global::AcceptTaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.acceptTasks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAcceptTasks(scg::IEnumerable<global::AcceptTaskInfo> values) {
      PrepareBuilder();
      result.acceptTasks_.Add(values);
      return this;
    }
    public Builder ClearAcceptTasks() {
      PrepareBuilder();
      result.acceptTasks_.Clear();
      return this;
    }
  }
  static SCAcceptTaskNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AcceptTaskInfo : pb::GeneratedMessage<AcceptTaskInfo, AcceptTaskInfo.Builder> {
  private AcceptTaskInfo() { }
  private static readonly AcceptTaskInfo defaultInstance = new AcceptTaskInfo().MakeReadOnly();
  private static readonly string[] _acceptTaskInfoFieldNames = new string[] { "playerTaskId", "status", "taskId" };
  private static readonly uint[] _acceptTaskInfoFieldTags = new uint[] { 16, 24, 8 };
  public static AcceptTaskInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AcceptTaskInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AcceptTaskInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_AcceptTaskInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AcceptTaskInfo, AcceptTaskInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_AcceptTaskInfo__FieldAccessorTable; }
  }
  
  public const int TaskIdFieldNumber = 1;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public const int PlayerTaskIdFieldNumber = 2;
  private bool hasPlayerTaskId;
  private long playerTaskId_;
  public bool HasPlayerTaskId {
    get { return hasPlayerTaskId; }
  }
  public long PlayerTaskId {
    get { return playerTaskId_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _acceptTaskInfoFieldNames;
    if (hasTaskId) {
      output.WriteInt64(1, field_names[2], TaskId);
    }
    if (hasPlayerTaskId) {
      output.WriteInt64(2, field_names[0], PlayerTaskId);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[1], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TaskId);
    }
    if (hasPlayerTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PlayerTaskId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static AcceptTaskInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AcceptTaskInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AcceptTaskInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AcceptTaskInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AcceptTaskInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AcceptTaskInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AcceptTaskInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AcceptTaskInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AcceptTaskInfo result;
    
    private AcceptTaskInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        AcceptTaskInfo original = result;
        result = new AcceptTaskInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AcceptTaskInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AcceptTaskInfo.Descriptor; }
    }
    
    public override AcceptTaskInfo DefaultInstanceForType {
      get { return global::AcceptTaskInfo.DefaultInstance; }
    }
    
    public override AcceptTaskInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AcceptTaskInfo) {
        return MergeFrom((AcceptTaskInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AcceptTaskInfo other) {
      if (other == global::AcceptTaskInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasPlayerTaskId) {
        PlayerTaskId = other.PlayerTaskId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_acceptTaskInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _acceptTaskInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
          case 16: {
            result.hasPlayerTaskId = input.ReadInt64(ref result.playerTaskId_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
    
    public bool HasPlayerTaskId {
      get { return result.hasPlayerTaskId; }
    }
    public long PlayerTaskId {
      get { return result.PlayerTaskId; }
      set { SetPlayerTaskId(value); }
    }
    public Builder SetPlayerTaskId(long value) {
      PrepareBuilder();
      result.hasPlayerTaskId = true;
      result.playerTaskId_ = value;
      return this;
    }
    public Builder ClearPlayerTaskId() {
      PrepareBuilder();
      result.hasPlayerTaskId = false;
      result.playerTaskId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static AcceptTaskInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTaskListRequest : pb::GeneratedMessage<CSTaskListRequest, CSTaskListRequest.Builder> {
  private CSTaskListRequest() { }
  private static readonly CSTaskListRequest defaultInstance = new CSTaskListRequest().MakeReadOnly();
  private static readonly string[] _cSTaskListRequestFieldNames = new string[] { "taskIds", "type" };
  private static readonly uint[] _cSTaskListRequestFieldTags = new uint[] { 16, 8 };
  public static CSTaskListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTaskListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTaskListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTaskListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTaskListRequest, CSTaskListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTaskListRequest__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int TaskIdsFieldNumber = 2;
  private pbc::PopsicleList<long> taskIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> TaskIdsList {
    get { return pbc::Lists.AsReadOnly(taskIds_); }
  }
  public int TaskIdsCount {
    get { return taskIds_.Count; }
  }
  public long GetTaskIds(int index) {
    return taskIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTaskListRequestFieldNames;
    if (hasType) {
      output.WriteInt32(1, field_names[1], Type);
    }
    if (taskIds_.Count > 0) {
      output.WriteInt64Array(2, field_names[0], taskIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
    }
    {
      int dataSize = 0;
      foreach (long element in TaskIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * taskIds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTaskListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTaskListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTaskListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTaskListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTaskListRequest MakeReadOnly() {
    taskIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTaskListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTaskListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTaskListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTaskListRequest result;
    
    private CSTaskListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTaskListRequest original = result;
        result = new CSTaskListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTaskListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTaskListRequest.Descriptor; }
    }
    
    public override CSTaskListRequest DefaultInstanceForType {
      get { return global::CSTaskListRequest.DefaultInstance; }
    }
    
    public override CSTaskListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTaskListRequest) {
        return MergeFrom((CSTaskListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTaskListRequest other) {
      if (other == global::CSTaskListRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.taskIds_.Count != 0) {
        result.taskIds_.Add(other.taskIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTaskListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTaskListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 18:
          case 16: {
            input.ReadInt64Array(tag, field_name, result.taskIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<long> TaskIdsList {
      get { return PrepareBuilder().taskIds_; }
    }
    public int TaskIdsCount {
      get { return result.TaskIdsCount; }
    }
    public long GetTaskIds(int index) {
      return result.GetTaskIds(index);
    }
    public Builder SetTaskIds(int index, long value) {
      PrepareBuilder();
      result.taskIds_[index] = value;
      return this;
    }
    public Builder AddTaskIds(long value) {
      PrepareBuilder();
      result.taskIds_.Add(value);
      return this;
    }
    public Builder AddRangeTaskIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.taskIds_.Add(values);
      return this;
    }
    public Builder ClearTaskIds() {
      PrepareBuilder();
      result.taskIds_.Clear();
      return this;
    }
  }
  static CSTaskListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTaskListResponse : pb::GeneratedMessage<SCTaskListResponse, SCTaskListResponse.Builder> {
  private SCTaskListResponse() { }
  private static readonly SCTaskListResponse defaultInstance = new SCTaskListResponse().MakeReadOnly();
  private static readonly string[] _sCTaskListResponseFieldNames = new string[] { "taskInfos" };
  private static readonly uint[] _sCTaskListResponseFieldTags = new uint[] { 10 };
  public static SCTaskListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTaskListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTaskListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTaskListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTaskListResponse, SCTaskListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTaskListResponse__FieldAccessorTable; }
  }
  
  public const int TaskInfosFieldNumber = 1;
  private pbc::PopsicleList<global::TaskInfo> taskInfos_ = new pbc::PopsicleList<global::TaskInfo>();
  public scg::IList<global::TaskInfo> TaskInfosList {
    get { return taskInfos_; }
  }
  public int TaskInfosCount {
    get { return taskInfos_.Count; }
  }
  public global::TaskInfo GetTaskInfos(int index) {
    return taskInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTaskListResponseFieldNames;
    if (taskInfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], taskInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::TaskInfo element in TaskInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTaskListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTaskListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTaskListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTaskListResponse MakeReadOnly() {
    taskInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTaskListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTaskListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTaskListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTaskListResponse result;
    
    private SCTaskListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTaskListResponse original = result;
        result = new SCTaskListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTaskListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTaskListResponse.Descriptor; }
    }
    
    public override SCTaskListResponse DefaultInstanceForType {
      get { return global::SCTaskListResponse.DefaultInstance; }
    }
    
    public override SCTaskListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTaskListResponse) {
        return MergeFrom((SCTaskListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTaskListResponse other) {
      if (other == global::SCTaskListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.taskInfos_.Count != 0) {
        result.taskInfos_.Add(other.taskInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTaskListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTaskListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.taskInfos_, global::TaskInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::TaskInfo> TaskInfosList {
      get { return PrepareBuilder().taskInfos_; }
    }
    public int TaskInfosCount {
      get { return result.TaskInfosCount; }
    }
    public global::TaskInfo GetTaskInfos(int index) {
      return result.GetTaskInfos(index);
    }
    public Builder SetTaskInfos(int index, global::TaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.taskInfos_[index] = value;
      return this;
    }
    public Builder SetTaskInfos(int index, global::TaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.taskInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTaskInfos(global::TaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.taskInfos_.Add(value);
      return this;
    }
    public Builder AddTaskInfos(global::TaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.taskInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTaskInfos(scg::IEnumerable<global::TaskInfo> values) {
      PrepareBuilder();
      result.taskInfos_.Add(values);
      return this;
    }
    public Builder ClearTaskInfos() {
      PrepareBuilder();
      result.taskInfos_.Clear();
      return this;
    }
  }
  static SCTaskListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TaskInfo : pb::GeneratedMessage<TaskInfo, TaskInfo.Builder> {
  private TaskInfo() { }
  private static readonly TaskInfo defaultInstance = new TaskInfo().MakeReadOnly();
  private static readonly string[] _taskInfoFieldNames = new string[] { "dialogueProgress", "eventProgress", "exhibitProgress", "level", "playerTaskId", "propProgresss", "sceneProgress", "status", "taskId" };
  private static readonly uint[] _taskInfoFieldTags = new uint[] { 48, 56, 74, 32, 8, 42, 64, 24, 16 };
  public static TaskInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TaskInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TaskInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TaskInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TaskInfo, TaskInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TaskInfo__FieldAccessorTable; }
  }
  
  public const int PlayerTaskIdFieldNumber = 1;
  private bool hasPlayerTaskId;
  private long playerTaskId_;
  public bool HasPlayerTaskId {
    get { return hasPlayerTaskId; }
  }
  public long PlayerTaskId {
    get { return playerTaskId_; }
  }
  
  public const int TaskIdFieldNumber = 2;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int LevelFieldNumber = 4;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int PropProgresssFieldNumber = 5;
  private pbc::PopsicleList<global::TaskPropProgress> propProgresss_ = new pbc::PopsicleList<global::TaskPropProgress>();
  public scg::IList<global::TaskPropProgress> PropProgresssList {
    get { return propProgresss_; }
  }
  public int PropProgresssCount {
    get { return propProgresss_.Count; }
  }
  public global::TaskPropProgress GetPropProgresss(int index) {
    return propProgresss_[index];
  }
  
  public const int DialogueProgressFieldNumber = 6;
  private bool hasDialogueProgress;
  private int dialogueProgress_;
  public bool HasDialogueProgress {
    get { return hasDialogueProgress; }
  }
  public int DialogueProgress {
    get { return dialogueProgress_; }
  }
  
  public const int EventProgressFieldNumber = 7;
  private bool hasEventProgress;
  private int eventProgress_;
  public bool HasEventProgress {
    get { return hasEventProgress; }
  }
  public int EventProgress {
    get { return eventProgress_; }
  }
  
  public const int SceneProgressFieldNumber = 8;
  private bool hasSceneProgress;
  private int sceneProgress_;
  public bool HasSceneProgress {
    get { return hasSceneProgress; }
  }
  public int SceneProgress {
    get { return sceneProgress_; }
  }
  
  public const int ExhibitProgressFieldNumber = 9;
  private pbc::PopsicleList<global::TaskExhibitProgress> exhibitProgress_ = new pbc::PopsicleList<global::TaskExhibitProgress>();
  public scg::IList<global::TaskExhibitProgress> ExhibitProgressList {
    get { return exhibitProgress_; }
  }
  public int ExhibitProgressCount {
    get { return exhibitProgress_.Count; }
  }
  public global::TaskExhibitProgress GetExhibitProgress(int index) {
    return exhibitProgress_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _taskInfoFieldNames;
    if (hasPlayerTaskId) {
      output.WriteInt64(1, field_names[4], PlayerTaskId);
    }
    if (hasTaskId) {
      output.WriteInt64(2, field_names[8], TaskId);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[7], Status);
    }
    if (hasLevel) {
      output.WriteInt32(4, field_names[3], Level);
    }
    if (propProgresss_.Count > 0) {
      output.WriteMessageArray(5, field_names[5], propProgresss_);
    }
    if (hasDialogueProgress) {
      output.WriteInt32(6, field_names[0], DialogueProgress);
    }
    if (hasEventProgress) {
      output.WriteInt32(7, field_names[1], EventProgress);
    }
    if (hasSceneProgress) {
      output.WriteInt32(8, field_names[6], SceneProgress);
    }
    if (exhibitProgress_.Count > 0) {
      output.WriteMessageArray(9, field_names[2], exhibitProgress_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerTaskId);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, TaskId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Level);
    }
    foreach (global::TaskPropProgress element in PropProgresssList) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, element);
    }
    if (hasDialogueProgress) {
      size += pb::CodedOutputStream.ComputeInt32Size(6, DialogueProgress);
    }
    if (hasEventProgress) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, EventProgress);
    }
    if (hasSceneProgress) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, SceneProgress);
    }
    foreach (global::TaskExhibitProgress element in ExhibitProgressList) {
      size += pb::CodedOutputStream.ComputeMessageSize(9, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TaskInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TaskInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TaskInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TaskInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TaskInfo MakeReadOnly() {
    propProgresss_.MakeReadOnly();
    exhibitProgress_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TaskInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TaskInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TaskInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TaskInfo result;
    
    private TaskInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        TaskInfo original = result;
        result = new TaskInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TaskInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TaskInfo.Descriptor; }
    }
    
    public override TaskInfo DefaultInstanceForType {
      get { return global::TaskInfo.DefaultInstance; }
    }
    
    public override TaskInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TaskInfo) {
        return MergeFrom((TaskInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TaskInfo other) {
      if (other == global::TaskInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerTaskId) {
        PlayerTaskId = other.PlayerTaskId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.propProgresss_.Count != 0) {
        result.propProgresss_.Add(other.propProgresss_);
      }
      if (other.HasDialogueProgress) {
        DialogueProgress = other.DialogueProgress;
      }
      if (other.HasEventProgress) {
        EventProgress = other.EventProgress;
      }
      if (other.HasSceneProgress) {
        SceneProgress = other.SceneProgress;
      }
      if (other.exhibitProgress_.Count != 0) {
        result.exhibitProgress_.Add(other.exhibitProgress_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_taskInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _taskInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerTaskId = input.ReadInt64(ref result.playerTaskId_);
            break;
          }
          case 16: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 32: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.propProgresss_, global::TaskPropProgress.DefaultInstance, extensionRegistry);
            break;
          }
          case 48: {
            result.hasDialogueProgress = input.ReadInt32(ref result.dialogueProgress_);
            break;
          }
          case 56: {
            result.hasEventProgress = input.ReadInt32(ref result.eventProgress_);
            break;
          }
          case 64: {
            result.hasSceneProgress = input.ReadInt32(ref result.sceneProgress_);
            break;
          }
          case 74: {
            input.ReadMessageArray(tag, field_name, result.exhibitProgress_, global::TaskExhibitProgress.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerTaskId {
      get { return result.hasPlayerTaskId; }
    }
    public long PlayerTaskId {
      get { return result.PlayerTaskId; }
      set { SetPlayerTaskId(value); }
    }
    public Builder SetPlayerTaskId(long value) {
      PrepareBuilder();
      result.hasPlayerTaskId = true;
      result.playerTaskId_ = value;
      return this;
    }
    public Builder ClearPlayerTaskId() {
      PrepareBuilder();
      result.hasPlayerTaskId = false;
      result.playerTaskId_ = 0L;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::TaskPropProgress> PropProgresssList {
      get { return PrepareBuilder().propProgresss_; }
    }
    public int PropProgresssCount {
      get { return result.PropProgresssCount; }
    }
    public global::TaskPropProgress GetPropProgresss(int index) {
      return result.GetPropProgresss(index);
    }
    public Builder SetPropProgresss(int index, global::TaskPropProgress value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.propProgresss_[index] = value;
      return this;
    }
    public Builder SetPropProgresss(int index, global::TaskPropProgress.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.propProgresss_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPropProgresss(global::TaskPropProgress value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.propProgresss_.Add(value);
      return this;
    }
    public Builder AddPropProgresss(global::TaskPropProgress.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.propProgresss_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePropProgresss(scg::IEnumerable<global::TaskPropProgress> values) {
      PrepareBuilder();
      result.propProgresss_.Add(values);
      return this;
    }
    public Builder ClearPropProgresss() {
      PrepareBuilder();
      result.propProgresss_.Clear();
      return this;
    }
    
    public bool HasDialogueProgress {
      get { return result.hasDialogueProgress; }
    }
    public int DialogueProgress {
      get { return result.DialogueProgress; }
      set { SetDialogueProgress(value); }
    }
    public Builder SetDialogueProgress(int value) {
      PrepareBuilder();
      result.hasDialogueProgress = true;
      result.dialogueProgress_ = value;
      return this;
    }
    public Builder ClearDialogueProgress() {
      PrepareBuilder();
      result.hasDialogueProgress = false;
      result.dialogueProgress_ = 0;
      return this;
    }
    
    public bool HasEventProgress {
      get { return result.hasEventProgress; }
    }
    public int EventProgress {
      get { return result.EventProgress; }
      set { SetEventProgress(value); }
    }
    public Builder SetEventProgress(int value) {
      PrepareBuilder();
      result.hasEventProgress = true;
      result.eventProgress_ = value;
      return this;
    }
    public Builder ClearEventProgress() {
      PrepareBuilder();
      result.hasEventProgress = false;
      result.eventProgress_ = 0;
      return this;
    }
    
    public bool HasSceneProgress {
      get { return result.hasSceneProgress; }
    }
    public int SceneProgress {
      get { return result.SceneProgress; }
      set { SetSceneProgress(value); }
    }
    public Builder SetSceneProgress(int value) {
      PrepareBuilder();
      result.hasSceneProgress = true;
      result.sceneProgress_ = value;
      return this;
    }
    public Builder ClearSceneProgress() {
      PrepareBuilder();
      result.hasSceneProgress = false;
      result.sceneProgress_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::TaskExhibitProgress> ExhibitProgressList {
      get { return PrepareBuilder().exhibitProgress_; }
    }
    public int ExhibitProgressCount {
      get { return result.ExhibitProgressCount; }
    }
    public global::TaskExhibitProgress GetExhibitProgress(int index) {
      return result.GetExhibitProgress(index);
    }
    public Builder SetExhibitProgress(int index, global::TaskExhibitProgress value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.exhibitProgress_[index] = value;
      return this;
    }
    public Builder SetExhibitProgress(int index, global::TaskExhibitProgress.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.exhibitProgress_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddExhibitProgress(global::TaskExhibitProgress value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.exhibitProgress_.Add(value);
      return this;
    }
    public Builder AddExhibitProgress(global::TaskExhibitProgress.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.exhibitProgress_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeExhibitProgress(scg::IEnumerable<global::TaskExhibitProgress> values) {
      PrepareBuilder();
      result.exhibitProgress_.Add(values);
      return this;
    }
    public Builder ClearExhibitProgress() {
      PrepareBuilder();
      result.exhibitProgress_.Clear();
      return this;
    }
  }
  static TaskInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TaskPropProgress : pb::GeneratedMessage<TaskPropProgress, TaskPropProgress.Builder> {
  private TaskPropProgress() { }
  private static readonly TaskPropProgress defaultInstance = new TaskPropProgress().MakeReadOnly();
  private static readonly string[] _taskPropProgressFieldNames = new string[] { "count", "propId" };
  private static readonly uint[] _taskPropProgressFieldTags = new uint[] { 16, 8 };
  public static TaskPropProgress DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TaskPropProgress DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TaskPropProgress ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TaskPropProgress__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TaskPropProgress, TaskPropProgress.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TaskPropProgress__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _taskPropProgressFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TaskPropProgress ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TaskPropProgress ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TaskPropProgress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskPropProgress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TaskPropProgress MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TaskPropProgress prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TaskPropProgress, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TaskPropProgress cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TaskPropProgress result;
    
    private TaskPropProgress PrepareBuilder() {
      if (resultIsReadOnly) {
        TaskPropProgress original = result;
        result = new TaskPropProgress();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TaskPropProgress MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TaskPropProgress.Descriptor; }
    }
    
    public override TaskPropProgress DefaultInstanceForType {
      get { return global::TaskPropProgress.DefaultInstance; }
    }
    
    public override TaskPropProgress BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TaskPropProgress) {
        return MergeFrom((TaskPropProgress) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TaskPropProgress other) {
      if (other == global::TaskPropProgress.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_taskPropProgressFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _taskPropProgressFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static TaskPropProgress() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TaskExhibitProgress : pb::GeneratedMessage<TaskExhibitProgress, TaskExhibitProgress.Builder> {
  private TaskExhibitProgress() { }
  private static readonly TaskExhibitProgress defaultInstance = new TaskExhibitProgress().MakeReadOnly();
  private static readonly string[] _taskExhibitProgressFieldNames = new string[] { "count", "exhibitId" };
  private static readonly uint[] _taskExhibitProgressFieldTags = new uint[] { 16, 8 };
  public static TaskExhibitProgress DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TaskExhibitProgress DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TaskExhibitProgress ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TaskExhibitProgress__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TaskExhibitProgress, TaskExhibitProgress.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TaskExhibitProgress__FieldAccessorTable; }
  }
  
  public const int ExhibitIdFieldNumber = 1;
  private bool hasExhibitId;
  private long exhibitId_;
  public bool HasExhibitId {
    get { return hasExhibitId; }
  }
  public long ExhibitId {
    get { return exhibitId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _taskExhibitProgressFieldNames;
    if (hasExhibitId) {
      output.WriteInt64(1, field_names[1], ExhibitId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasExhibitId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, ExhibitId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TaskExhibitProgress ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TaskExhibitProgress ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TaskExhibitProgress ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskExhibitProgress ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TaskExhibitProgress MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TaskExhibitProgress prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TaskExhibitProgress, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TaskExhibitProgress cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TaskExhibitProgress result;
    
    private TaskExhibitProgress PrepareBuilder() {
      if (resultIsReadOnly) {
        TaskExhibitProgress original = result;
        result = new TaskExhibitProgress();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TaskExhibitProgress MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TaskExhibitProgress.Descriptor; }
    }
    
    public override TaskExhibitProgress DefaultInstanceForType {
      get { return global::TaskExhibitProgress.DefaultInstance; }
    }
    
    public override TaskExhibitProgress BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TaskExhibitProgress) {
        return MergeFrom((TaskExhibitProgress) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TaskExhibitProgress other) {
      if (other == global::TaskExhibitProgress.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasExhibitId) {
        ExhibitId = other.ExhibitId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_taskExhibitProgressFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _taskExhibitProgressFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasExhibitId = input.ReadInt64(ref result.exhibitId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasExhibitId {
      get { return result.hasExhibitId; }
    }
    public long ExhibitId {
      get { return result.ExhibitId; }
      set { SetExhibitId(value); }
    }
    public Builder SetExhibitId(long value) {
      PrepareBuilder();
      result.hasExhibitId = true;
      result.exhibitId_ = value;
      return this;
    }
    public Builder ClearExhibitId() {
      PrepareBuilder();
      result.hasExhibitId = false;
      result.exhibitId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static TaskExhibitProgress() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTaskCommitRequest : pb::GeneratedMessage<CSTaskCommitRequest, CSTaskCommitRequest.Builder> {
  private CSTaskCommitRequest() { }
  private static readonly CSTaskCommitRequest defaultInstance = new CSTaskCommitRequest().MakeReadOnly();
  private static readonly string[] _cSTaskCommitRequestFieldNames = new string[] { "playerTaskId" };
  private static readonly uint[] _cSTaskCommitRequestFieldTags = new uint[] { 8 };
  public static CSTaskCommitRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTaskCommitRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTaskCommitRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTaskCommitRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTaskCommitRequest, CSTaskCommitRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTaskCommitRequest__FieldAccessorTable; }
  }
  
  public const int PlayerTaskIdFieldNumber = 1;
  private bool hasPlayerTaskId;
  private long playerTaskId_;
  public bool HasPlayerTaskId {
    get { return hasPlayerTaskId; }
  }
  public long PlayerTaskId {
    get { return playerTaskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTaskCommitRequestFieldNames;
    if (hasPlayerTaskId) {
      output.WriteInt64(1, field_names[0], PlayerTaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerTaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTaskCommitRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTaskCommitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTaskCommitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTaskCommitRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTaskCommitRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTaskCommitRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTaskCommitRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTaskCommitRequest result;
    
    private CSTaskCommitRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTaskCommitRequest original = result;
        result = new CSTaskCommitRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTaskCommitRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTaskCommitRequest.Descriptor; }
    }
    
    public override CSTaskCommitRequest DefaultInstanceForType {
      get { return global::CSTaskCommitRequest.DefaultInstance; }
    }
    
    public override CSTaskCommitRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTaskCommitRequest) {
        return MergeFrom((CSTaskCommitRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTaskCommitRequest other) {
      if (other == global::CSTaskCommitRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerTaskId) {
        PlayerTaskId = other.PlayerTaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTaskCommitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTaskCommitRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerTaskId = input.ReadInt64(ref result.playerTaskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerTaskId {
      get { return result.hasPlayerTaskId; }
    }
    public long PlayerTaskId {
      get { return result.PlayerTaskId; }
      set { SetPlayerTaskId(value); }
    }
    public Builder SetPlayerTaskId(long value) {
      PrepareBuilder();
      result.hasPlayerTaskId = true;
      result.playerTaskId_ = value;
      return this;
    }
    public Builder ClearPlayerTaskId() {
      PrepareBuilder();
      result.hasPlayerTaskId = false;
      result.playerTaskId_ = 0L;
      return this;
    }
  }
  static CSTaskCommitRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTaskCommitResponse : pb::GeneratedMessage<SCTaskCommitResponse, SCTaskCommitResponse.Builder> {
  private SCTaskCommitResponse() { }
  private static readonly SCTaskCommitResponse defaultInstance = new SCTaskCommitResponse().MakeReadOnly();
  private static readonly string[] _sCTaskCommitResponseFieldNames = new string[] { "cash", "coin", "exp", "propRewards", "result", "taskId", "titleId", "vit" };
  private static readonly uint[] _sCTaskCommitResponseFieldTags = new uint[] { 24, 16, 40, 58, 8, 64, 48, 32 };
  public static SCTaskCommitResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTaskCommitResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTaskCommitResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTaskCommitResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTaskCommitResponse, SCTaskCommitResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTaskCommitResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int CoinFieldNumber = 2;
  private bool hasCoin;
  private int coin_;
  public bool HasCoin {
    get { return hasCoin; }
  }
  public int Coin {
    get { return coin_; }
  }
  
  public const int CashFieldNumber = 3;
  private bool hasCash;
  private int cash_;
  public bool HasCash {
    get { return hasCash; }
  }
  public int Cash {
    get { return cash_; }
  }
  
  public const int VitFieldNumber = 4;
  private bool hasVit;
  private int vit_;
  public bool HasVit {
    get { return hasVit; }
  }
  public int Vit {
    get { return vit_; }
  }
  
  public const int ExpFieldNumber = 5;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int TitleIdFieldNumber = 6;
  private bool hasTitleId;
  private long titleId_;
  public bool HasTitleId {
    get { return hasTitleId; }
  }
  public long TitleId {
    get { return titleId_; }
  }
  
  public const int PropRewardsFieldNumber = 7;
  private pbc::PopsicleList<global::TaskPropReward> propRewards_ = new pbc::PopsicleList<global::TaskPropReward>();
  public scg::IList<global::TaskPropReward> PropRewardsList {
    get { return propRewards_; }
  }
  public int PropRewardsCount {
    get { return propRewards_.Count; }
  }
  public global::TaskPropReward GetPropRewards(int index) {
    return propRewards_[index];
  }
  
  public const int TaskIdFieldNumber = 8;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTaskCommitResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[4], Result);
    }
    if (hasCoin) {
      output.WriteInt32(2, field_names[1], Coin);
    }
    if (hasCash) {
      output.WriteInt32(3, field_names[0], Cash);
    }
    if (hasVit) {
      output.WriteInt32(4, field_names[7], Vit);
    }
    if (hasExp) {
      output.WriteInt32(5, field_names[2], Exp);
    }
    if (hasTitleId) {
      output.WriteInt64(6, field_names[6], TitleId);
    }
    if (propRewards_.Count > 0) {
      output.WriteMessageArray(7, field_names[3], propRewards_);
    }
    if (hasTaskId) {
      output.WriteInt64(8, field_names[5], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Coin);
    }
    if (hasCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Cash);
    }
    if (hasVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Vit);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, Exp);
    }
    if (hasTitleId) {
      size += pb::CodedOutputStream.ComputeInt64Size(6, TitleId);
    }
    foreach (global::TaskPropReward element in PropRewardsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(7, element);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(8, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTaskCommitResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTaskCommitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskCommitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTaskCommitResponse MakeReadOnly() {
    propRewards_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTaskCommitResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTaskCommitResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTaskCommitResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTaskCommitResponse result;
    
    private SCTaskCommitResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTaskCommitResponse original = result;
        result = new SCTaskCommitResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTaskCommitResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTaskCommitResponse.Descriptor; }
    }
    
    public override SCTaskCommitResponse DefaultInstanceForType {
      get { return global::SCTaskCommitResponse.DefaultInstance; }
    }
    
    public override SCTaskCommitResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTaskCommitResponse) {
        return MergeFrom((SCTaskCommitResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTaskCommitResponse other) {
      if (other == global::SCTaskCommitResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasVit) {
        Vit = other.Vit;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      if (other.propRewards_.Count != 0) {
        result.propRewards_.Add(other.propRewards_);
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTaskCommitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTaskCommitResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasCoin = input.ReadInt32(ref result.coin_);
            break;
          }
          case 24: {
            result.hasCash = input.ReadInt32(ref result.cash_);
            break;
          }
          case 32: {
            result.hasVit = input.ReadInt32(ref result.vit_);
            break;
          }
          case 40: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
          case 48: {
            result.hasTitleId = input.ReadInt64(ref result.titleId_);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, field_name, result.propRewards_, global::TaskPropReward.DefaultInstance, extensionRegistry);
            break;
          }
          case 64: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasCoin {
      get { return result.hasCoin; }
    }
    public int Coin {
      get { return result.Coin; }
      set { SetCoin(value); }
    }
    public Builder SetCoin(int value) {
      PrepareBuilder();
      result.hasCoin = true;
      result.coin_ = value;
      return this;
    }
    public Builder ClearCoin() {
      PrepareBuilder();
      result.hasCoin = false;
      result.coin_ = 0;
      return this;
    }
    
    public bool HasCash {
      get { return result.hasCash; }
    }
    public int Cash {
      get { return result.Cash; }
      set { SetCash(value); }
    }
    public Builder SetCash(int value) {
      PrepareBuilder();
      result.hasCash = true;
      result.cash_ = value;
      return this;
    }
    public Builder ClearCash() {
      PrepareBuilder();
      result.hasCash = false;
      result.cash_ = 0;
      return this;
    }
    
    public bool HasVit {
      get { return result.hasVit; }
    }
    public int Vit {
      get { return result.Vit; }
      set { SetVit(value); }
    }
    public Builder SetVit(int value) {
      PrepareBuilder();
      result.hasVit = true;
      result.vit_ = value;
      return this;
    }
    public Builder ClearVit() {
      PrepareBuilder();
      result.hasVit = false;
      result.vit_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasTitleId {
      get { return result.hasTitleId; }
    }
    public long TitleId {
      get { return result.TitleId; }
      set { SetTitleId(value); }
    }
    public Builder SetTitleId(long value) {
      PrepareBuilder();
      result.hasTitleId = true;
      result.titleId_ = value;
      return this;
    }
    public Builder ClearTitleId() {
      PrepareBuilder();
      result.hasTitleId = false;
      result.titleId_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::TaskPropReward> PropRewardsList {
      get { return PrepareBuilder().propRewards_; }
    }
    public int PropRewardsCount {
      get { return result.PropRewardsCount; }
    }
    public global::TaskPropReward GetPropRewards(int index) {
      return result.GetPropRewards(index);
    }
    public Builder SetPropRewards(int index, global::TaskPropReward value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.propRewards_[index] = value;
      return this;
    }
    public Builder SetPropRewards(int index, global::TaskPropReward.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.propRewards_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPropRewards(global::TaskPropReward value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.propRewards_.Add(value);
      return this;
    }
    public Builder AddPropRewards(global::TaskPropReward.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.propRewards_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePropRewards(scg::IEnumerable<global::TaskPropReward> values) {
      PrepareBuilder();
      result.propRewards_.Add(values);
      return this;
    }
    public Builder ClearPropRewards() {
      PrepareBuilder();
      result.propRewards_.Clear();
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static SCTaskCommitResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TaskPropReward : pb::GeneratedMessage<TaskPropReward, TaskPropReward.Builder> {
  private TaskPropReward() { }
  private static readonly TaskPropReward defaultInstance = new TaskPropReward().MakeReadOnly();
  private static readonly string[] _taskPropRewardFieldNames = new string[] { "count", "propId" };
  private static readonly uint[] _taskPropRewardFieldTags = new uint[] { 16, 8 };
  public static TaskPropReward DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TaskPropReward DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TaskPropReward ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TaskPropReward__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TaskPropReward, TaskPropReward.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TaskPropReward__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _taskPropRewardFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TaskPropReward ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskPropReward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskPropReward ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskPropReward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskPropReward ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskPropReward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TaskPropReward ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TaskPropReward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TaskPropReward ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskPropReward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TaskPropReward MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TaskPropReward prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TaskPropReward, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TaskPropReward cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TaskPropReward result;
    
    private TaskPropReward PrepareBuilder() {
      if (resultIsReadOnly) {
        TaskPropReward original = result;
        result = new TaskPropReward();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TaskPropReward MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TaskPropReward.Descriptor; }
    }
    
    public override TaskPropReward DefaultInstanceForType {
      get { return global::TaskPropReward.DefaultInstance; }
    }
    
    public override TaskPropReward BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TaskPropReward) {
        return MergeFrom((TaskPropReward) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TaskPropReward other) {
      if (other == global::TaskPropReward.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_taskPropRewardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _taskPropRewardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static TaskPropReward() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTaskStatusChangeNotice : pb::GeneratedMessage<SCTaskStatusChangeNotice, SCTaskStatusChangeNotice.Builder> {
  private SCTaskStatusChangeNotice() { }
  private static readonly SCTaskStatusChangeNotice defaultInstance = new SCTaskStatusChangeNotice().MakeReadOnly();
  private static readonly string[] _sCTaskStatusChangeNoticeFieldNames = new string[] { "playerTaskId", "status", "taskId", "taskInfo" };
  private static readonly uint[] _sCTaskStatusChangeNoticeFieldTags = new uint[] { 8, 24, 16, 34 };
  public static SCTaskStatusChangeNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTaskStatusChangeNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTaskStatusChangeNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTaskStatusChangeNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTaskStatusChangeNotice, SCTaskStatusChangeNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTaskStatusChangeNotice__FieldAccessorTable; }
  }
  
  public const int PlayerTaskIdFieldNumber = 1;
  private bool hasPlayerTaskId;
  private long playerTaskId_;
  public bool HasPlayerTaskId {
    get { return hasPlayerTaskId; }
  }
  public long PlayerTaskId {
    get { return playerTaskId_; }
  }
  
  public const int TaskIdFieldNumber = 2;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int TaskInfoFieldNumber = 4;
  private bool hasTaskInfo;
  private global::TaskInfo taskInfo_;
  public bool HasTaskInfo {
    get { return hasTaskInfo; }
  }
  public global::TaskInfo TaskInfo {
    get { return taskInfo_ ?? global::TaskInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTaskStatusChangeNoticeFieldNames;
    if (hasPlayerTaskId) {
      output.WriteInt64(1, field_names[0], PlayerTaskId);
    }
    if (hasTaskId) {
      output.WriteInt64(2, field_names[2], TaskId);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[1], Status);
    }
    if (hasTaskInfo) {
      output.WriteMessage(4, field_names[3], TaskInfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerTaskId);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, TaskId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    if (hasTaskInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(4, TaskInfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTaskStatusChangeNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskStatusChangeNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTaskStatusChangeNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTaskStatusChangeNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTaskStatusChangeNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTaskStatusChangeNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTaskStatusChangeNotice result;
    
    private SCTaskStatusChangeNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTaskStatusChangeNotice original = result;
        result = new SCTaskStatusChangeNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTaskStatusChangeNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTaskStatusChangeNotice.Descriptor; }
    }
    
    public override SCTaskStatusChangeNotice DefaultInstanceForType {
      get { return global::SCTaskStatusChangeNotice.DefaultInstance; }
    }
    
    public override SCTaskStatusChangeNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTaskStatusChangeNotice) {
        return MergeFrom((SCTaskStatusChangeNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTaskStatusChangeNotice other) {
      if (other == global::SCTaskStatusChangeNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerTaskId) {
        PlayerTaskId = other.PlayerTaskId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasTaskInfo) {
        MergeTaskInfo(other.TaskInfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTaskStatusChangeNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTaskStatusChangeNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerTaskId = input.ReadInt64(ref result.playerTaskId_);
            break;
          }
          case 16: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 34: {
            global::TaskInfo.Builder subBuilder = global::TaskInfo.CreateBuilder();
            if (result.hasTaskInfo) {
              subBuilder.MergeFrom(TaskInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TaskInfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerTaskId {
      get { return result.hasPlayerTaskId; }
    }
    public long PlayerTaskId {
      get { return result.PlayerTaskId; }
      set { SetPlayerTaskId(value); }
    }
    public Builder SetPlayerTaskId(long value) {
      PrepareBuilder();
      result.hasPlayerTaskId = true;
      result.playerTaskId_ = value;
      return this;
    }
    public Builder ClearPlayerTaskId() {
      PrepareBuilder();
      result.hasPlayerTaskId = false;
      result.playerTaskId_ = 0L;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasTaskInfo {
     get { return result.hasTaskInfo; }
    }
    public global::TaskInfo TaskInfo {
      get { return result.TaskInfo; }
      set { SetTaskInfo(value); }
    }
    public Builder SetTaskInfo(global::TaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTaskInfo = true;
      result.taskInfo_ = value;
      return this;
    }
    public Builder SetTaskInfo(global::TaskInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTaskInfo = true;
      result.taskInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTaskInfo(global::TaskInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTaskInfo &&
          result.taskInfo_ != global::TaskInfo.DefaultInstance) {
          result.taskInfo_ = global::TaskInfo.CreateBuilder(result.taskInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.taskInfo_ = value;
      }
      result.hasTaskInfo = true;
      return this;
    }
    public Builder ClearTaskInfo() {
      PrepareBuilder();
      result.hasTaskInfo = false;
      result.taskInfo_ = null;
      return this;
    }
  }
  static SCTaskStatusChangeNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTriggerTaskActiveRequest : pb::GeneratedMessage<CSTriggerTaskActiveRequest, CSTriggerTaskActiveRequest.Builder> {
  private CSTriggerTaskActiveRequest() { }
  private static readonly CSTriggerTaskActiveRequest defaultInstance = new CSTriggerTaskActiveRequest().MakeReadOnly();
  private static readonly string[] _cSTriggerTaskActiveRequestFieldNames = new string[] { "taskId" };
  private static readonly uint[] _cSTriggerTaskActiveRequestFieldTags = new uint[] { 8 };
  public static CSTriggerTaskActiveRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTriggerTaskActiveRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTriggerTaskActiveRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTriggerTaskActiveRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTriggerTaskActiveRequest, CSTriggerTaskActiveRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTriggerTaskActiveRequest__FieldAccessorTable; }
  }
  
  public const int TaskIdFieldNumber = 1;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTriggerTaskActiveRequestFieldNames;
    if (hasTaskId) {
      output.WriteInt64(1, field_names[0], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTriggerTaskActiveRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTriggerTaskActiveRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTriggerTaskActiveRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTriggerTaskActiveRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTriggerTaskActiveRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTriggerTaskActiveRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTriggerTaskActiveRequest result;
    
    private CSTriggerTaskActiveRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTriggerTaskActiveRequest original = result;
        result = new CSTriggerTaskActiveRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTriggerTaskActiveRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTriggerTaskActiveRequest.Descriptor; }
    }
    
    public override CSTriggerTaskActiveRequest DefaultInstanceForType {
      get { return global::CSTriggerTaskActiveRequest.DefaultInstance; }
    }
    
    public override CSTriggerTaskActiveRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTriggerTaskActiveRequest) {
        return MergeFrom((CSTriggerTaskActiveRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTriggerTaskActiveRequest other) {
      if (other == global::CSTriggerTaskActiveRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTriggerTaskActiveRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTriggerTaskActiveRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static CSTriggerTaskActiveRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTriggerTaskActiveResponse : pb::GeneratedMessage<SCTriggerTaskActiveResponse, SCTriggerTaskActiveResponse.Builder> {
  private SCTriggerTaskActiveResponse() { }
  private static readonly SCTriggerTaskActiveResponse defaultInstance = new SCTriggerTaskActiveResponse().MakeReadOnly();
  private static readonly string[] _sCTriggerTaskActiveResponseFieldNames = new string[] { "result", "taskId" };
  private static readonly uint[] _sCTriggerTaskActiveResponseFieldTags = new uint[] { 8, 16 };
  public static SCTriggerTaskActiveResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTriggerTaskActiveResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTriggerTaskActiveResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTriggerTaskActiveResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTriggerTaskActiveResponse, SCTriggerTaskActiveResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTriggerTaskActiveResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int TaskIdFieldNumber = 2;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTriggerTaskActiveResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    if (hasTaskId) {
      output.WriteInt64(2, field_names[1], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTriggerTaskActiveResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTriggerTaskActiveResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTriggerTaskActiveResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTriggerTaskActiveResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTriggerTaskActiveResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTriggerTaskActiveResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTriggerTaskActiveResponse result;
    
    private SCTriggerTaskActiveResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTriggerTaskActiveResponse original = result;
        result = new SCTriggerTaskActiveResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTriggerTaskActiveResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTriggerTaskActiveResponse.Descriptor; }
    }
    
    public override SCTriggerTaskActiveResponse DefaultInstanceForType {
      get { return global::SCTriggerTaskActiveResponse.DefaultInstance; }
    }
    
    public override SCTriggerTaskActiveResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTriggerTaskActiveResponse) {
        return MergeFrom((SCTriggerTaskActiveResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTriggerTaskActiveResponse other) {
      if (other == global::SCTriggerTaskActiveResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTriggerTaskActiveResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTriggerTaskActiveResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static SCTriggerTaskActiveResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTaskIdListRequest : pb::GeneratedMessage<CSTaskIdListRequest, CSTaskIdListRequest.Builder> {
  private CSTaskIdListRequest() { }
  private static readonly CSTaskIdListRequest defaultInstance = new CSTaskIdListRequest().MakeReadOnly();
  private static readonly string[] _cSTaskIdListRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSTaskIdListRequestFieldTags = new uint[] {  };
  public static CSTaskIdListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTaskIdListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTaskIdListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTaskIdListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTaskIdListRequest, CSTaskIdListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTaskIdListRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTaskIdListRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTaskIdListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTaskIdListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTaskIdListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTaskIdListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTaskIdListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTaskIdListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTaskIdListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTaskIdListRequest result;
    
    private CSTaskIdListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTaskIdListRequest original = result;
        result = new CSTaskIdListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTaskIdListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTaskIdListRequest.Descriptor; }
    }
    
    public override CSTaskIdListRequest DefaultInstanceForType {
      get { return global::CSTaskIdListRequest.DefaultInstance; }
    }
    
    public override CSTaskIdListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTaskIdListRequest) {
        return MergeFrom((CSTaskIdListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTaskIdListRequest other) {
      if (other == global::CSTaskIdListRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTaskIdListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTaskIdListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSTaskIdListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTaskIdListResponse : pb::GeneratedMessage<SCTaskIdListResponse, SCTaskIdListResponse.Builder> {
  private SCTaskIdListResponse() { }
  private static readonly SCTaskIdListResponse defaultInstance = new SCTaskIdListResponse().MakeReadOnly();
  private static readonly string[] _sCTaskIdListResponseFieldNames = new string[] { "taskIdInfos" };
  private static readonly uint[] _sCTaskIdListResponseFieldTags = new uint[] { 10 };
  public static SCTaskIdListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTaskIdListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTaskIdListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTaskIdListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTaskIdListResponse, SCTaskIdListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTaskIdListResponse__FieldAccessorTable; }
  }
  
  public const int TaskIdInfosFieldNumber = 1;
  private pbc::PopsicleList<global::TaskIdInfo> taskIdInfos_ = new pbc::PopsicleList<global::TaskIdInfo>();
  public scg::IList<global::TaskIdInfo> TaskIdInfosList {
    get { return taskIdInfos_; }
  }
  public int TaskIdInfosCount {
    get { return taskIdInfos_.Count; }
  }
  public global::TaskIdInfo GetTaskIdInfos(int index) {
    return taskIdInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTaskIdListResponseFieldNames;
    if (taskIdInfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], taskIdInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::TaskIdInfo element in TaskIdInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTaskIdListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTaskIdListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTaskIdListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTaskIdListResponse MakeReadOnly() {
    taskIdInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTaskIdListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTaskIdListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTaskIdListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTaskIdListResponse result;
    
    private SCTaskIdListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTaskIdListResponse original = result;
        result = new SCTaskIdListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTaskIdListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTaskIdListResponse.Descriptor; }
    }
    
    public override SCTaskIdListResponse DefaultInstanceForType {
      get { return global::SCTaskIdListResponse.DefaultInstance; }
    }
    
    public override SCTaskIdListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTaskIdListResponse) {
        return MergeFrom((SCTaskIdListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTaskIdListResponse other) {
      if (other == global::SCTaskIdListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.taskIdInfos_.Count != 0) {
        result.taskIdInfos_.Add(other.taskIdInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTaskIdListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTaskIdListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.taskIdInfos_, global::TaskIdInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::TaskIdInfo> TaskIdInfosList {
      get { return PrepareBuilder().taskIdInfos_; }
    }
    public int TaskIdInfosCount {
      get { return result.TaskIdInfosCount; }
    }
    public global::TaskIdInfo GetTaskIdInfos(int index) {
      return result.GetTaskIdInfos(index);
    }
    public Builder SetTaskIdInfos(int index, global::TaskIdInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.taskIdInfos_[index] = value;
      return this;
    }
    public Builder SetTaskIdInfos(int index, global::TaskIdInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.taskIdInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTaskIdInfos(global::TaskIdInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.taskIdInfos_.Add(value);
      return this;
    }
    public Builder AddTaskIdInfos(global::TaskIdInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.taskIdInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTaskIdInfos(scg::IEnumerable<global::TaskIdInfo> values) {
      PrepareBuilder();
      result.taskIdInfos_.Add(values);
      return this;
    }
    public Builder ClearTaskIdInfos() {
      PrepareBuilder();
      result.taskIdInfos_.Clear();
      return this;
    }
  }
  static SCTaskIdListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TaskIdInfo : pb::GeneratedMessage<TaskIdInfo, TaskIdInfo.Builder> {
  private TaskIdInfo() { }
  private static readonly TaskIdInfo defaultInstance = new TaskIdInfo().MakeReadOnly();
  private static readonly string[] _taskIdInfoFieldNames = new string[] { "playerTaskId", "taskId" };
  private static readonly uint[] _taskIdInfoFieldTags = new uint[] { 8, 16 };
  public static TaskIdInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TaskIdInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TaskIdInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TaskIdInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TaskIdInfo, TaskIdInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TaskIdInfo__FieldAccessorTable; }
  }
  
  public const int PlayerTaskIdFieldNumber = 1;
  private bool hasPlayerTaskId;
  private long playerTaskId_;
  public bool HasPlayerTaskId {
    get { return hasPlayerTaskId; }
  }
  public long PlayerTaskId {
    get { return playerTaskId_; }
  }
  
  public const int TaskIdFieldNumber = 2;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _taskIdInfoFieldNames;
    if (hasPlayerTaskId) {
      output.WriteInt64(1, field_names[0], PlayerTaskId);
    }
    if (hasTaskId) {
      output.WriteInt64(2, field_names[1], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerTaskId);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TaskIdInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TaskIdInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TaskIdInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskIdInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TaskIdInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TaskIdInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TaskIdInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TaskIdInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TaskIdInfo result;
    
    private TaskIdInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        TaskIdInfo original = result;
        result = new TaskIdInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TaskIdInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TaskIdInfo.Descriptor; }
    }
    
    public override TaskIdInfo DefaultInstanceForType {
      get { return global::TaskIdInfo.DefaultInstance; }
    }
    
    public override TaskIdInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TaskIdInfo) {
        return MergeFrom((TaskIdInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TaskIdInfo other) {
      if (other == global::TaskIdInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerTaskId) {
        PlayerTaskId = other.PlayerTaskId;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_taskIdInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _taskIdInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerTaskId = input.ReadInt64(ref result.playerTaskId_);
            break;
          }
          case 16: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerTaskId {
      get { return result.hasPlayerTaskId; }
    }
    public long PlayerTaskId {
      get { return result.PlayerTaskId; }
      set { SetPlayerTaskId(value); }
    }
    public Builder SetPlayerTaskId(long value) {
      PrepareBuilder();
      result.hasPlayerTaskId = true;
      result.playerTaskId_ = value;
      return this;
    }
    public Builder ClearPlayerTaskId() {
      PrepareBuilder();
      result.hasPlayerTaskId = false;
      result.playerTaskId_ = 0L;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static TaskIdInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAchievementRequest : pb::GeneratedMessage<CSAchievementRequest, CSAchievementRequest.Builder> {
  private CSAchievementRequest() { }
  private static readonly CSAchievementRequest defaultInstance = new CSAchievementRequest().MakeReadOnly();
  private static readonly string[] _cSAchievementRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSAchievementRequestFieldTags = new uint[] {  };
  public static CSAchievementRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAchievementRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAchievementRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSAchievementRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAchievementRequest, CSAchievementRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSAchievementRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAchievementRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAchievementRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAchievementRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAchievementRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAchievementRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAchievementRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAchievementRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAchievementRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAchievementRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAchievementRequest result;
    
    private CSAchievementRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAchievementRequest original = result;
        result = new CSAchievementRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAchievementRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAchievementRequest.Descriptor; }
    }
    
    public override CSAchievementRequest DefaultInstanceForType {
      get { return global::CSAchievementRequest.DefaultInstance; }
    }
    
    public override CSAchievementRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAchievementRequest) {
        return MergeFrom((CSAchievementRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAchievementRequest other) {
      if (other == global::CSAchievementRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAchievementRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAchievementRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSAchievementRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AchievementMsg : pb::GeneratedMessage<AchievementMsg, AchievementMsg.Builder> {
  private AchievementMsg() { }
  private static readonly AchievementMsg defaultInstance = new AchievementMsg().MakeReadOnly();
  private static readonly string[] _achievementMsgFieldNames = new string[] { "finishTime", "finishTime1", "finishTime2", "id", "progress", "submitStatus" };
  private static readonly uint[] _achievementMsgFieldTags = new uint[] { 32, 40, 48, 8, 16, 24 };
  public static AchievementMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AchievementMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AchievementMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_AchievementMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AchievementMsg, AchievementMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_AchievementMsg__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int ProgressFieldNumber = 2;
  private bool hasProgress;
  private int progress_;
  public bool HasProgress {
    get { return hasProgress; }
  }
  public int Progress {
    get { return progress_; }
  }
  
  public const int SubmitStatusFieldNumber = 3;
  private bool hasSubmitStatus;
  private int submitStatus_;
  public bool HasSubmitStatus {
    get { return hasSubmitStatus; }
  }
  public int SubmitStatus {
    get { return submitStatus_; }
  }
  
  public const int FinishTimeFieldNumber = 4;
  private bool hasFinishTime;
  private long finishTime_;
  public bool HasFinishTime {
    get { return hasFinishTime; }
  }
  public long FinishTime {
    get { return finishTime_; }
  }
  
  public const int FinishTime1FieldNumber = 5;
  private bool hasFinishTime1;
  private long finishTime1_;
  public bool HasFinishTime1 {
    get { return hasFinishTime1; }
  }
  public long FinishTime1 {
    get { return finishTime1_; }
  }
  
  public const int FinishTime2FieldNumber = 6;
  private bool hasFinishTime2;
  private long finishTime2_;
  public bool HasFinishTime2 {
    get { return hasFinishTime2; }
  }
  public long FinishTime2 {
    get { return finishTime2_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _achievementMsgFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[3], Id);
    }
    if (hasProgress) {
      output.WriteInt32(2, field_names[4], Progress);
    }
    if (hasSubmitStatus) {
      output.WriteInt32(3, field_names[5], SubmitStatus);
    }
    if (hasFinishTime) {
      output.WriteInt64(4, field_names[0], FinishTime);
    }
    if (hasFinishTime1) {
      output.WriteInt64(5, field_names[1], FinishTime1);
    }
    if (hasFinishTime2) {
      output.WriteInt64(6, field_names[2], FinishTime2);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasProgress) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Progress);
    }
    if (hasSubmitStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SubmitStatus);
    }
    if (hasFinishTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, FinishTime);
    }
    if (hasFinishTime1) {
      size += pb::CodedOutputStream.ComputeInt64Size(5, FinishTime1);
    }
    if (hasFinishTime2) {
      size += pb::CodedOutputStream.ComputeInt64Size(6, FinishTime2);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static AchievementMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AchievementMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AchievementMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AchievementMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AchievementMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AchievementMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AchievementMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AchievementMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AchievementMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AchievementMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AchievementMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AchievementMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AchievementMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AchievementMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AchievementMsg result;
    
    private AchievementMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        AchievementMsg original = result;
        result = new AchievementMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AchievementMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AchievementMsg.Descriptor; }
    }
    
    public override AchievementMsg DefaultInstanceForType {
      get { return global::AchievementMsg.DefaultInstance; }
    }
    
    public override AchievementMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AchievementMsg) {
        return MergeFrom((AchievementMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AchievementMsg other) {
      if (other == global::AchievementMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasProgress) {
        Progress = other.Progress;
      }
      if (other.HasSubmitStatus) {
        SubmitStatus = other.SubmitStatus;
      }
      if (other.HasFinishTime) {
        FinishTime = other.FinishTime;
      }
      if (other.HasFinishTime1) {
        FinishTime1 = other.FinishTime1;
      }
      if (other.HasFinishTime2) {
        FinishTime2 = other.FinishTime2;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_achievementMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _achievementMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasProgress = input.ReadInt32(ref result.progress_);
            break;
          }
          case 24: {
            result.hasSubmitStatus = input.ReadInt32(ref result.submitStatus_);
            break;
          }
          case 32: {
            result.hasFinishTime = input.ReadInt64(ref result.finishTime_);
            break;
          }
          case 40: {
            result.hasFinishTime1 = input.ReadInt64(ref result.finishTime1_);
            break;
          }
          case 48: {
            result.hasFinishTime2 = input.ReadInt64(ref result.finishTime2_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasProgress {
      get { return result.hasProgress; }
    }
    public int Progress {
      get { return result.Progress; }
      set { SetProgress(value); }
    }
    public Builder SetProgress(int value) {
      PrepareBuilder();
      result.hasProgress = true;
      result.progress_ = value;
      return this;
    }
    public Builder ClearProgress() {
      PrepareBuilder();
      result.hasProgress = false;
      result.progress_ = 0;
      return this;
    }
    
    public bool HasSubmitStatus {
      get { return result.hasSubmitStatus; }
    }
    public int SubmitStatus {
      get { return result.SubmitStatus; }
      set { SetSubmitStatus(value); }
    }
    public Builder SetSubmitStatus(int value) {
      PrepareBuilder();
      result.hasSubmitStatus = true;
      result.submitStatus_ = value;
      return this;
    }
    public Builder ClearSubmitStatus() {
      PrepareBuilder();
      result.hasSubmitStatus = false;
      result.submitStatus_ = 0;
      return this;
    }
    
    public bool HasFinishTime {
      get { return result.hasFinishTime; }
    }
    public long FinishTime {
      get { return result.FinishTime; }
      set { SetFinishTime(value); }
    }
    public Builder SetFinishTime(long value) {
      PrepareBuilder();
      result.hasFinishTime = true;
      result.finishTime_ = value;
      return this;
    }
    public Builder ClearFinishTime() {
      PrepareBuilder();
      result.hasFinishTime = false;
      result.finishTime_ = 0L;
      return this;
    }
    
    public bool HasFinishTime1 {
      get { return result.hasFinishTime1; }
    }
    public long FinishTime1 {
      get { return result.FinishTime1; }
      set { SetFinishTime1(value); }
    }
    public Builder SetFinishTime1(long value) {
      PrepareBuilder();
      result.hasFinishTime1 = true;
      result.finishTime1_ = value;
      return this;
    }
    public Builder ClearFinishTime1() {
      PrepareBuilder();
      result.hasFinishTime1 = false;
      result.finishTime1_ = 0L;
      return this;
    }
    
    public bool HasFinishTime2 {
      get { return result.hasFinishTime2; }
    }
    public long FinishTime2 {
      get { return result.FinishTime2; }
      set { SetFinishTime2(value); }
    }
    public Builder SetFinishTime2(long value) {
      PrepareBuilder();
      result.hasFinishTime2 = true;
      result.finishTime2_ = value;
      return this;
    }
    public Builder ClearFinishTime2() {
      PrepareBuilder();
      result.hasFinishTime2 = false;
      result.finishTime2_ = 0L;
      return this;
    }
  }
  static AchievementMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAchievementResponse : pb::GeneratedMessage<SCAchievementResponse, SCAchievementResponse.Builder> {
  private SCAchievementResponse() { }
  private static readonly SCAchievementResponse defaultInstance = new SCAchievementResponse().MakeReadOnly();
  private static readonly string[] _sCAchievementResponseFieldNames = new string[] { "Achievements", "status", "totalCount" };
  private static readonly uint[] _sCAchievementResponseFieldTags = new uint[] { 18, 10, 24 };
  public static SCAchievementResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAchievementResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAchievementResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCAchievementResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAchievementResponse, SCAchievementResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCAchievementResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int AchievementsFieldNumber = 2;
  private pbc::PopsicleList<global::AchievementMsg> achievements_ = new pbc::PopsicleList<global::AchievementMsg>();
  public scg::IList<global::AchievementMsg> AchievementsList {
    get { return achievements_; }
  }
  public int AchievementsCount {
    get { return achievements_.Count; }
  }
  public global::AchievementMsg GetAchievements(int index) {
    return achievements_[index];
  }
  
  public const int TotalCountFieldNumber = 3;
  private bool hasTotalCount;
  private int totalCount_;
  public bool HasTotalCount {
    get { return hasTotalCount; }
  }
  public int TotalCount {
    get { return totalCount_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAchievementResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[1], Status);
    }
    if (achievements_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], achievements_);
    }
    if (hasTotalCount) {
      output.WriteInt32(3, field_names[2], TotalCount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    foreach (global::AchievementMsg element in AchievementsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasTotalCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, TotalCount);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAchievementResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAchievementResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAchievementResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAchievementResponse MakeReadOnly() {
    achievements_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAchievementResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAchievementResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAchievementResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAchievementResponse result;
    
    private SCAchievementResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAchievementResponse original = result;
        result = new SCAchievementResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAchievementResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAchievementResponse.Descriptor; }
    }
    
    public override SCAchievementResponse DefaultInstanceForType {
      get { return global::SCAchievementResponse.DefaultInstance; }
    }
    
    public override SCAchievementResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAchievementResponse) {
        return MergeFrom((SCAchievementResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAchievementResponse other) {
      if (other == global::SCAchievementResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.achievements_.Count != 0) {
        result.achievements_.Add(other.achievements_);
      }
      if (other.HasTotalCount) {
        TotalCount = other.TotalCount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAchievementResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAchievementResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.achievements_, global::AchievementMsg.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasTotalCount = input.ReadInt32(ref result.totalCount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::AchievementMsg> AchievementsList {
      get { return PrepareBuilder().achievements_; }
    }
    public int AchievementsCount {
      get { return result.AchievementsCount; }
    }
    public global::AchievementMsg GetAchievements(int index) {
      return result.GetAchievements(index);
    }
    public Builder SetAchievements(int index, global::AchievementMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.achievements_[index] = value;
      return this;
    }
    public Builder SetAchievements(int index, global::AchievementMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.achievements_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAchievements(global::AchievementMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.achievements_.Add(value);
      return this;
    }
    public Builder AddAchievements(global::AchievementMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.achievements_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAchievements(scg::IEnumerable<global::AchievementMsg> values) {
      PrepareBuilder();
      result.achievements_.Add(values);
      return this;
    }
    public Builder ClearAchievements() {
      PrepareBuilder();
      result.achievements_.Clear();
      return this;
    }
    
    public bool HasTotalCount {
      get { return result.hasTotalCount; }
    }
    public int TotalCount {
      get { return result.TotalCount; }
      set { SetTotalCount(value); }
    }
    public Builder SetTotalCount(int value) {
      PrepareBuilder();
      result.hasTotalCount = true;
      result.totalCount_ = value;
      return this;
    }
    public Builder ClearTotalCount() {
      PrepareBuilder();
      result.hasTotalCount = false;
      result.totalCount_ = 0;
      return this;
    }
  }
  static SCAchievementResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSAchievementSubmitRequest : pb::GeneratedMessage<CSAchievementSubmitRequest, CSAchievementSubmitRequest.Builder> {
  private CSAchievementSubmitRequest() { }
  private static readonly CSAchievementSubmitRequest defaultInstance = new CSAchievementSubmitRequest().MakeReadOnly();
  private static readonly string[] _cSAchievementSubmitRequestFieldNames = new string[] { "id", "stage" };
  private static readonly uint[] _cSAchievementSubmitRequestFieldTags = new uint[] { 8, 16 };
  public static CSAchievementSubmitRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSAchievementSubmitRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSAchievementSubmitRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSAchievementSubmitRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSAchievementSubmitRequest, CSAchievementSubmitRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSAchievementSubmitRequest__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int StageFieldNumber = 2;
  private bool hasStage;
  private int stage_;
  public bool HasStage {
    get { return hasStage; }
  }
  public int Stage {
    get { return stage_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSAchievementSubmitRequestFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    if (hasStage) {
      output.WriteInt32(2, field_names[1], Stage);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasStage) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Stage);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSAchievementSubmitRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSAchievementSubmitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSAchievementSubmitRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSAchievementSubmitRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSAchievementSubmitRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSAchievementSubmitRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSAchievementSubmitRequest result;
    
    private CSAchievementSubmitRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSAchievementSubmitRequest original = result;
        result = new CSAchievementSubmitRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSAchievementSubmitRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSAchievementSubmitRequest.Descriptor; }
    }
    
    public override CSAchievementSubmitRequest DefaultInstanceForType {
      get { return global::CSAchievementSubmitRequest.DefaultInstance; }
    }
    
    public override CSAchievementSubmitRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSAchievementSubmitRequest) {
        return MergeFrom((CSAchievementSubmitRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSAchievementSubmitRequest other) {
      if (other == global::CSAchievementSubmitRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasStage) {
        Stage = other.Stage;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSAchievementSubmitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSAchievementSubmitRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasStage = input.ReadInt32(ref result.stage_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasStage {
      get { return result.hasStage; }
    }
    public int Stage {
      get { return result.Stage; }
      set { SetStage(value); }
    }
    public Builder SetStage(int value) {
      PrepareBuilder();
      result.hasStage = true;
      result.stage_ = value;
      return this;
    }
    public Builder ClearStage() {
      PrepareBuilder();
      result.hasStage = false;
      result.stage_ = 0;
      return this;
    }
  }
  static CSAchievementSubmitRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAchievementSubmitResponse : pb::GeneratedMessage<SCAchievementSubmitResponse, SCAchievementSubmitResponse.Builder> {
  private SCAchievementSubmitResponse() { }
  private static readonly SCAchievementSubmitResponse defaultInstance = new SCAchievementSubmitResponse().MakeReadOnly();
  private static readonly string[] _sCAchievementSubmitResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCAchievementSubmitResponseFieldTags = new uint[] { 10 };
  public static SCAchievementSubmitResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAchievementSubmitResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAchievementSubmitResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCAchievementSubmitResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAchievementSubmitResponse, SCAchievementSubmitResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCAchievementSubmitResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAchievementSubmitResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAchievementSubmitResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAchievementSubmitResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAchievementSubmitResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAchievementSubmitResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAchievementSubmitResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAchievementSubmitResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAchievementSubmitResponse result;
    
    private SCAchievementSubmitResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAchievementSubmitResponse original = result;
        result = new SCAchievementSubmitResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAchievementSubmitResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAchievementSubmitResponse.Descriptor; }
    }
    
    public override SCAchievementSubmitResponse DefaultInstanceForType {
      get { return global::SCAchievementSubmitResponse.DefaultInstance; }
    }
    
    public override SCAchievementSubmitResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAchievementSubmitResponse) {
        return MergeFrom((SCAchievementSubmitResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAchievementSubmitResponse other) {
      if (other == global::SCAchievementSubmitResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAchievementSubmitResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAchievementSubmitResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCAchievementSubmitResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSActivityBaseListRequest : pb::GeneratedMessage<CSActivityBaseListRequest, CSActivityBaseListRequest.Builder> {
  private CSActivityBaseListRequest() { }
  private static readonly CSActivityBaseListRequest defaultInstance = new CSActivityBaseListRequest().MakeReadOnly();
  private static readonly string[] _cSActivityBaseListRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSActivityBaseListRequestFieldTags = new uint[] {  };
  public static CSActivityBaseListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSActivityBaseListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSActivityBaseListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSActivityBaseListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSActivityBaseListRequest, CSActivityBaseListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSActivityBaseListRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSActivityBaseListRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSActivityBaseListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSActivityBaseListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSActivityBaseListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSActivityBaseListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSActivityBaseListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSActivityBaseListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSActivityBaseListRequest result;
    
    private CSActivityBaseListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSActivityBaseListRequest original = result;
        result = new CSActivityBaseListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSActivityBaseListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSActivityBaseListRequest.Descriptor; }
    }
    
    public override CSActivityBaseListRequest DefaultInstanceForType {
      get { return global::CSActivityBaseListRequest.DefaultInstance; }
    }
    
    public override CSActivityBaseListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSActivityBaseListRequest) {
        return MergeFrom((CSActivityBaseListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSActivityBaseListRequest other) {
      if (other == global::CSActivityBaseListRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSActivityBaseListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSActivityBaseListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSActivityBaseListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCActivityBaseListResponse : pb::GeneratedMessage<SCActivityBaseListResponse, SCActivityBaseListResponse.Builder> {
  private SCActivityBaseListResponse() { }
  private static readonly SCActivityBaseListResponse defaultInstance = new SCActivityBaseListResponse().MakeReadOnly();
  private static readonly string[] _sCActivityBaseListResponseFieldNames = new string[] { "baseInfos" };
  private static readonly uint[] _sCActivityBaseListResponseFieldTags = new uint[] { 10 };
  public static SCActivityBaseListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCActivityBaseListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCActivityBaseListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCActivityBaseListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCActivityBaseListResponse, SCActivityBaseListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCActivityBaseListResponse__FieldAccessorTable; }
  }
  
  public const int BaseInfosFieldNumber = 1;
  private pbc::PopsicleList<global::ActivityBaseInfo> baseInfos_ = new pbc::PopsicleList<global::ActivityBaseInfo>();
  public scg::IList<global::ActivityBaseInfo> BaseInfosList {
    get { return baseInfos_; }
  }
  public int BaseInfosCount {
    get { return baseInfos_.Count; }
  }
  public global::ActivityBaseInfo GetBaseInfos(int index) {
    return baseInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCActivityBaseListResponseFieldNames;
    if (baseInfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], baseInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::ActivityBaseInfo element in BaseInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCActivityBaseListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityBaseListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCActivityBaseListResponse MakeReadOnly() {
    baseInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCActivityBaseListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCActivityBaseListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCActivityBaseListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCActivityBaseListResponse result;
    
    private SCActivityBaseListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCActivityBaseListResponse original = result;
        result = new SCActivityBaseListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCActivityBaseListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCActivityBaseListResponse.Descriptor; }
    }
    
    public override SCActivityBaseListResponse DefaultInstanceForType {
      get { return global::SCActivityBaseListResponse.DefaultInstance; }
    }
    
    public override SCActivityBaseListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCActivityBaseListResponse) {
        return MergeFrom((SCActivityBaseListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCActivityBaseListResponse other) {
      if (other == global::SCActivityBaseListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.baseInfos_.Count != 0) {
        result.baseInfos_.Add(other.baseInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCActivityBaseListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCActivityBaseListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.baseInfos_, global::ActivityBaseInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ActivityBaseInfo> BaseInfosList {
      get { return PrepareBuilder().baseInfos_; }
    }
    public int BaseInfosCount {
      get { return result.BaseInfosCount; }
    }
    public global::ActivityBaseInfo GetBaseInfos(int index) {
      return result.GetBaseInfos(index);
    }
    public Builder SetBaseInfos(int index, global::ActivityBaseInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.baseInfos_[index] = value;
      return this;
    }
    public Builder SetBaseInfos(int index, global::ActivityBaseInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.baseInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddBaseInfos(global::ActivityBaseInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.baseInfos_.Add(value);
      return this;
    }
    public Builder AddBaseInfos(global::ActivityBaseInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.baseInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeBaseInfos(scg::IEnumerable<global::ActivityBaseInfo> values) {
      PrepareBuilder();
      result.baseInfos_.Add(values);
      return this;
    }
    public Builder ClearBaseInfos() {
      PrepareBuilder();
      result.baseInfos_.Clear();
      return this;
    }
  }
  static SCActivityBaseListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ActivityBaseInfo : pb::GeneratedMessage<ActivityBaseInfo, ActivityBaseInfo.Builder> {
  private ActivityBaseInfo() { }
  private static readonly ActivityBaseInfo defaultInstance = new ActivityBaseInfo().MakeReadOnly();
  private static readonly string[] _activityBaseInfoFieldNames = new string[] { "days", "descs", "endTime", "icon", "id", "personalBeginTime", "personalEndTime", "stage", "startTime", "targetPrefab", "targetType", "timeType", "type", "warmupTime" };
  private static readonly uint[] _activityBaseInfoFieldTags = new uint[] { 96, 34, 72, 26, 8, 104, 112, 80, 64, 50, 40, 88, 16, 56 };
  public static ActivityBaseInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ActivityBaseInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ActivityBaseInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ActivityBaseInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ActivityBaseInfo, ActivityBaseInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ActivityBaseInfo__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int IconFieldNumber = 3;
  private bool hasIcon;
  private string icon_ = "";
  public bool HasIcon {
    get { return hasIcon; }
  }
  public string Icon {
    get { return icon_; }
  }
  
  public const int DescsFieldNumber = 4;
  private bool hasDescs;
  private string descs_ = "";
  public bool HasDescs {
    get { return hasDescs; }
  }
  public string Descs {
    get { return descs_; }
  }
  
  public const int TargetTypeFieldNumber = 5;
  private bool hasTargetType;
  private int targetType_;
  public bool HasTargetType {
    get { return hasTargetType; }
  }
  public int TargetType {
    get { return targetType_; }
  }
  
  public const int TargetPrefabFieldNumber = 6;
  private bool hasTargetPrefab;
  private string targetPrefab_ = "";
  public bool HasTargetPrefab {
    get { return hasTargetPrefab; }
  }
  public string TargetPrefab {
    get { return targetPrefab_; }
  }
  
  public const int WarmupTimeFieldNumber = 7;
  private bool hasWarmupTime;
  private long warmupTime_;
  public bool HasWarmupTime {
    get { return hasWarmupTime; }
  }
  public long WarmupTime {
    get { return warmupTime_; }
  }
  
  public const int StartTimeFieldNumber = 8;
  private bool hasStartTime;
  private long startTime_;
  public bool HasStartTime {
    get { return hasStartTime; }
  }
  public long StartTime {
    get { return startTime_; }
  }
  
  public const int EndTimeFieldNumber = 9;
  private bool hasEndTime;
  private long endTime_;
  public bool HasEndTime {
    get { return hasEndTime; }
  }
  public long EndTime {
    get { return endTime_; }
  }
  
  public const int StageFieldNumber = 10;
  private bool hasStage;
  private int stage_;
  public bool HasStage {
    get { return hasStage; }
  }
  public int Stage {
    get { return stage_; }
  }
  
  public const int TimeTypeFieldNumber = 11;
  private bool hasTimeType;
  private int timeType_;
  public bool HasTimeType {
    get { return hasTimeType; }
  }
  public int TimeType {
    get { return timeType_; }
  }
  
  public const int DaysFieldNumber = 12;
  private bool hasDays;
  private int days_;
  public bool HasDays {
    get { return hasDays; }
  }
  public int Days {
    get { return days_; }
  }
  
  public const int PersonalBeginTimeFieldNumber = 13;
  private bool hasPersonalBeginTime;
  private long personalBeginTime_;
  public bool HasPersonalBeginTime {
    get { return hasPersonalBeginTime; }
  }
  public long PersonalBeginTime {
    get { return personalBeginTime_; }
  }
  
  public const int PersonalEndTimeFieldNumber = 14;
  private bool hasPersonalEndTime;
  private long personalEndTime_;
  public bool HasPersonalEndTime {
    get { return hasPersonalEndTime; }
  }
  public long PersonalEndTime {
    get { return personalEndTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _activityBaseInfoFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[4], Id);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[12], Type);
    }
    if (hasIcon) {
      output.WriteString(3, field_names[3], Icon);
    }
    if (hasDescs) {
      output.WriteString(4, field_names[1], Descs);
    }
    if (hasTargetType) {
      output.WriteInt32(5, field_names[10], TargetType);
    }
    if (hasTargetPrefab) {
      output.WriteString(6, field_names[9], TargetPrefab);
    }
    if (hasWarmupTime) {
      output.WriteInt64(7, field_names[13], WarmupTime);
    }
    if (hasStartTime) {
      output.WriteInt64(8, field_names[8], StartTime);
    }
    if (hasEndTime) {
      output.WriteInt64(9, field_names[2], EndTime);
    }
    if (hasStage) {
      output.WriteInt32(10, field_names[7], Stage);
    }
    if (hasTimeType) {
      output.WriteInt32(11, field_names[11], TimeType);
    }
    if (hasDays) {
      output.WriteInt32(12, field_names[0], Days);
    }
    if (hasPersonalBeginTime) {
      output.WriteInt64(13, field_names[5], PersonalBeginTime);
    }
    if (hasPersonalEndTime) {
      output.WriteInt64(14, field_names[6], PersonalEndTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Icon);
    }
    if (hasDescs) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Descs);
    }
    if (hasTargetType) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, TargetType);
    }
    if (hasTargetPrefab) {
      size += pb::CodedOutputStream.ComputeStringSize(6, TargetPrefab);
    }
    if (hasWarmupTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(7, WarmupTime);
    }
    if (hasStartTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(8, StartTime);
    }
    if (hasEndTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(9, EndTime);
    }
    if (hasStage) {
      size += pb::CodedOutputStream.ComputeInt32Size(10, Stage);
    }
    if (hasTimeType) {
      size += pb::CodedOutputStream.ComputeInt32Size(11, TimeType);
    }
    if (hasDays) {
      size += pb::CodedOutputStream.ComputeInt32Size(12, Days);
    }
    if (hasPersonalBeginTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(13, PersonalBeginTime);
    }
    if (hasPersonalEndTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(14, PersonalEndTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ActivityBaseInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ActivityBaseInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ActivityBaseInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ActivityBaseInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ActivityBaseInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ActivityBaseInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ActivityBaseInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ActivityBaseInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ActivityBaseInfo result;
    
    private ActivityBaseInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ActivityBaseInfo original = result;
        result = new ActivityBaseInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ActivityBaseInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ActivityBaseInfo.Descriptor; }
    }
    
    public override ActivityBaseInfo DefaultInstanceForType {
      get { return global::ActivityBaseInfo.DefaultInstance; }
    }
    
    public override ActivityBaseInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ActivityBaseInfo) {
        return MergeFrom((ActivityBaseInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ActivityBaseInfo other) {
      if (other == global::ActivityBaseInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      if (other.HasDescs) {
        Descs = other.Descs;
      }
      if (other.HasTargetType) {
        TargetType = other.TargetType;
      }
      if (other.HasTargetPrefab) {
        TargetPrefab = other.TargetPrefab;
      }
      if (other.HasWarmupTime) {
        WarmupTime = other.WarmupTime;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasStage) {
        Stage = other.Stage;
      }
      if (other.HasTimeType) {
        TimeType = other.TimeType;
      }
      if (other.HasDays) {
        Days = other.Days;
      }
      if (other.HasPersonalBeginTime) {
        PersonalBeginTime = other.PersonalBeginTime;
      }
      if (other.HasPersonalEndTime) {
        PersonalEndTime = other.PersonalEndTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_activityBaseInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _activityBaseInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 26: {
            result.hasIcon = input.ReadString(ref result.icon_);
            break;
          }
          case 34: {
            result.hasDescs = input.ReadString(ref result.descs_);
            break;
          }
          case 40: {
            result.hasTargetType = input.ReadInt32(ref result.targetType_);
            break;
          }
          case 50: {
            result.hasTargetPrefab = input.ReadString(ref result.targetPrefab_);
            break;
          }
          case 56: {
            result.hasWarmupTime = input.ReadInt64(ref result.warmupTime_);
            break;
          }
          case 64: {
            result.hasStartTime = input.ReadInt64(ref result.startTime_);
            break;
          }
          case 72: {
            result.hasEndTime = input.ReadInt64(ref result.endTime_);
            break;
          }
          case 80: {
            result.hasStage = input.ReadInt32(ref result.stage_);
            break;
          }
          case 88: {
            result.hasTimeType = input.ReadInt32(ref result.timeType_);
            break;
          }
          case 96: {
            result.hasDays = input.ReadInt32(ref result.days_);
            break;
          }
          case 104: {
            result.hasPersonalBeginTime = input.ReadInt64(ref result.personalBeginTime_);
            break;
          }
          case 112: {
            result.hasPersonalEndTime = input.ReadInt64(ref result.personalEndTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasIcon {
      get { return result.hasIcon; }
    }
    public string Icon {
      get { return result.Icon; }
      set { SetIcon(value); }
    }
    public Builder SetIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIcon = true;
      result.icon_ = value;
      return this;
    }
    public Builder ClearIcon() {
      PrepareBuilder();
      result.hasIcon = false;
      result.icon_ = "";
      return this;
    }
    
    public bool HasDescs {
      get { return result.hasDescs; }
    }
    public string Descs {
      get { return result.Descs; }
      set { SetDescs(value); }
    }
    public Builder SetDescs(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDescs = true;
      result.descs_ = value;
      return this;
    }
    public Builder ClearDescs() {
      PrepareBuilder();
      result.hasDescs = false;
      result.descs_ = "";
      return this;
    }
    
    public bool HasTargetType {
      get { return result.hasTargetType; }
    }
    public int TargetType {
      get { return result.TargetType; }
      set { SetTargetType(value); }
    }
    public Builder SetTargetType(int value) {
      PrepareBuilder();
      result.hasTargetType = true;
      result.targetType_ = value;
      return this;
    }
    public Builder ClearTargetType() {
      PrepareBuilder();
      result.hasTargetType = false;
      result.targetType_ = 0;
      return this;
    }
    
    public bool HasTargetPrefab {
      get { return result.hasTargetPrefab; }
    }
    public string TargetPrefab {
      get { return result.TargetPrefab; }
      set { SetTargetPrefab(value); }
    }
    public Builder SetTargetPrefab(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTargetPrefab = true;
      result.targetPrefab_ = value;
      return this;
    }
    public Builder ClearTargetPrefab() {
      PrepareBuilder();
      result.hasTargetPrefab = false;
      result.targetPrefab_ = "";
      return this;
    }
    
    public bool HasWarmupTime {
      get { return result.hasWarmupTime; }
    }
    public long WarmupTime {
      get { return result.WarmupTime; }
      set { SetWarmupTime(value); }
    }
    public Builder SetWarmupTime(long value) {
      PrepareBuilder();
      result.hasWarmupTime = true;
      result.warmupTime_ = value;
      return this;
    }
    public Builder ClearWarmupTime() {
      PrepareBuilder();
      result.hasWarmupTime = false;
      result.warmupTime_ = 0L;
      return this;
    }
    
    public bool HasStartTime {
      get { return result.hasStartTime; }
    }
    public long StartTime {
      get { return result.StartTime; }
      set { SetStartTime(value); }
    }
    public Builder SetStartTime(long value) {
      PrepareBuilder();
      result.hasStartTime = true;
      result.startTime_ = value;
      return this;
    }
    public Builder ClearStartTime() {
      PrepareBuilder();
      result.hasStartTime = false;
      result.startTime_ = 0L;
      return this;
    }
    
    public bool HasEndTime {
      get { return result.hasEndTime; }
    }
    public long EndTime {
      get { return result.EndTime; }
      set { SetEndTime(value); }
    }
    public Builder SetEndTime(long value) {
      PrepareBuilder();
      result.hasEndTime = true;
      result.endTime_ = value;
      return this;
    }
    public Builder ClearEndTime() {
      PrepareBuilder();
      result.hasEndTime = false;
      result.endTime_ = 0L;
      return this;
    }
    
    public bool HasStage {
      get { return result.hasStage; }
    }
    public int Stage {
      get { return result.Stage; }
      set { SetStage(value); }
    }
    public Builder SetStage(int value) {
      PrepareBuilder();
      result.hasStage = true;
      result.stage_ = value;
      return this;
    }
    public Builder ClearStage() {
      PrepareBuilder();
      result.hasStage = false;
      result.stage_ = 0;
      return this;
    }
    
    public bool HasTimeType {
      get { return result.hasTimeType; }
    }
    public int TimeType {
      get { return result.TimeType; }
      set { SetTimeType(value); }
    }
    public Builder SetTimeType(int value) {
      PrepareBuilder();
      result.hasTimeType = true;
      result.timeType_ = value;
      return this;
    }
    public Builder ClearTimeType() {
      PrepareBuilder();
      result.hasTimeType = false;
      result.timeType_ = 0;
      return this;
    }
    
    public bool HasDays {
      get { return result.hasDays; }
    }
    public int Days {
      get { return result.Days; }
      set { SetDays(value); }
    }
    public Builder SetDays(int value) {
      PrepareBuilder();
      result.hasDays = true;
      result.days_ = value;
      return this;
    }
    public Builder ClearDays() {
      PrepareBuilder();
      result.hasDays = false;
      result.days_ = 0;
      return this;
    }
    
    public bool HasPersonalBeginTime {
      get { return result.hasPersonalBeginTime; }
    }
    public long PersonalBeginTime {
      get { return result.PersonalBeginTime; }
      set { SetPersonalBeginTime(value); }
    }
    public Builder SetPersonalBeginTime(long value) {
      PrepareBuilder();
      result.hasPersonalBeginTime = true;
      result.personalBeginTime_ = value;
      return this;
    }
    public Builder ClearPersonalBeginTime() {
      PrepareBuilder();
      result.hasPersonalBeginTime = false;
      result.personalBeginTime_ = 0L;
      return this;
    }
    
    public bool HasPersonalEndTime {
      get { return result.hasPersonalEndTime; }
    }
    public long PersonalEndTime {
      get { return result.PersonalEndTime; }
      set { SetPersonalEndTime(value); }
    }
    public Builder SetPersonalEndTime(long value) {
      PrepareBuilder();
      result.hasPersonalEndTime = true;
      result.personalEndTime_ = value;
      return this;
    }
    public Builder ClearPersonalEndTime() {
      PrepareBuilder();
      result.hasPersonalEndTime = false;
      result.personalEndTime_ = 0L;
      return this;
    }
  }
  static ActivityBaseInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PropItem : pb::GeneratedMessage<PropItem, PropItem.Builder> {
  private PropItem() { }
  private static readonly PropItem defaultInstance = new PropItem().MakeReadOnly();
  private static readonly string[] _propItemFieldNames = new string[] { "hasNum", "id", "num" };
  private static readonly uint[] _propItemFieldTags = new uint[] { 24, 8, 16 };
  public static PropItem DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PropItem DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PropItem ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PropItem__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PropItem, PropItem.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PropItem__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int NumFieldNumber = 2;
  private bool hasNum;
  private int num_;
  public bool HasNum {
    get { return hasNum; }
  }
  public int Num {
    get { return num_; }
  }
  
  public const int HasNumFieldNumber = 3;
  private bool hasHasNum;
  private int hasNum_;
  public bool HasHasNum {
    get { return hasHasNum; }
  }
  public int HasNum {
    get { return hasNum_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _propItemFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[1], Id);
    }
    if (hasNum) {
      output.WriteInt32(2, field_names[2], Num);
    }
    if (hasHasNum) {
      output.WriteInt32(3, field_names[0], HasNum);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Num);
    }
    if (hasHasNum) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, HasNum);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PropItem ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PropItem ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PropItem ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PropItem ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PropItem ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PropItem ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PropItem ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PropItem ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PropItem ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PropItem ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PropItem MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PropItem prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PropItem, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PropItem cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PropItem result;
    
    private PropItem PrepareBuilder() {
      if (resultIsReadOnly) {
        PropItem original = result;
        result = new PropItem();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PropItem MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PropItem.Descriptor; }
    }
    
    public override PropItem DefaultInstanceForType {
      get { return global::PropItem.DefaultInstance; }
    }
    
    public override PropItem BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PropItem) {
        return MergeFrom((PropItem) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PropItem other) {
      if (other == global::PropItem.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasNum) {
        Num = other.Num;
      }
      if (other.HasHasNum) {
        HasNum = other.HasNum;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_propItemFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _propItemFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasNum = input.ReadInt32(ref result.num_);
            break;
          }
          case 24: {
            result.hasHasNum = input.ReadInt32(ref result.hasNum_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasNum {
      get { return result.hasNum; }
    }
    public int Num {
      get { return result.Num; }
      set { SetNum(value); }
    }
    public Builder SetNum(int value) {
      PrepareBuilder();
      result.hasNum = true;
      result.num_ = value;
      return this;
    }
    public Builder ClearNum() {
      PrepareBuilder();
      result.hasNum = false;
      result.num_ = 0;
      return this;
    }
    
    public bool HasHasNum {
      get { return result.hasHasNum; }
    }
    public int HasNum {
      get { return result.HasNum; }
      set { SetHasNum(value); }
    }
    public Builder SetHasNum(int value) {
      PrepareBuilder();
      result.hasHasNum = true;
      result.hasNum_ = value;
      return this;
    }
    public Builder ClearHasNum() {
      PrepareBuilder();
      result.hasHasNum = false;
      result.hasNum_ = 0;
      return this;
    }
  }
  static PropItem() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSActivityRequest : pb::GeneratedMessage<CSActivityRequest, CSActivityRequest.Builder> {
  private CSActivityRequest() { }
  private static readonly CSActivityRequest defaultInstance = new CSActivityRequest().MakeReadOnly();
  private static readonly string[] _cSActivityRequestFieldNames = new string[] { "id" };
  private static readonly uint[] _cSActivityRequestFieldTags = new uint[] { 8 };
  public static CSActivityRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSActivityRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSActivityRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSActivityRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSActivityRequest, CSActivityRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSActivityRequest__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSActivityRequestFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSActivityRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSActivityRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSActivityRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSActivityRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSActivityRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSActivityRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSActivityRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSActivityRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSActivityRequest result;
    
    private CSActivityRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSActivityRequest original = result;
        result = new CSActivityRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSActivityRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSActivityRequest.Descriptor; }
    }
    
    public override CSActivityRequest DefaultInstanceForType {
      get { return global::CSActivityRequest.DefaultInstance; }
    }
    
    public override CSActivityRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSActivityRequest) {
        return MergeFrom((CSActivityRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSActivityRequest other) {
      if (other == global::CSActivityRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSActivityRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSActivityRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static CSActivityRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCActivityDropResponse : pb::GeneratedMessage<SCActivityDropResponse, SCActivityDropResponse.Builder> {
  private SCActivityDropResponse() { }
  private static readonly SCActivityDropResponse defaultInstance = new SCActivityDropResponse().MakeReadOnly();
  private static readonly string[] _sCActivityDropResponseFieldNames = new string[] { "backgroundSource", "collectDes", "description", "hasReward", "id", "items", "name", "rewardSource", "rewardid", "sceneDes", "sceneId", "stage", "tips", "warmupSource" };
  private static readonly uint[] _sCActivityDropResponseFieldTags = new uint[] { 26, 90, 18, 72, 8, 50, 82, 106, 40, 98, 56, 64, 114, 34 };
  public static SCActivityDropResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCActivityDropResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCActivityDropResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCActivityDropResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCActivityDropResponse, SCActivityDropResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCActivityDropResponse__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int DescriptionFieldNumber = 2;
  private bool hasDescription;
  private string description_ = "";
  public bool HasDescription {
    get { return hasDescription; }
  }
  public string Description {
    get { return description_; }
  }
  
  public const int BackgroundSourceFieldNumber = 3;
  private bool hasBackgroundSource;
  private string backgroundSource_ = "";
  public bool HasBackgroundSource {
    get { return hasBackgroundSource; }
  }
  public string BackgroundSource {
    get { return backgroundSource_; }
  }
  
  public const int WarmupSourceFieldNumber = 4;
  private bool hasWarmupSource;
  private string warmupSource_ = "";
  public bool HasWarmupSource {
    get { return hasWarmupSource; }
  }
  public string WarmupSource {
    get { return warmupSource_; }
  }
  
  public const int RewardidFieldNumber = 5;
  private bool hasRewardid;
  private long rewardid_;
  public bool HasRewardid {
    get { return hasRewardid; }
  }
  public long Rewardid {
    get { return rewardid_; }
  }
  
  public const int ItemsFieldNumber = 6;
  private pbc::PopsicleList<global::PropItem> items_ = new pbc::PopsicleList<global::PropItem>();
  public scg::IList<global::PropItem> ItemsList {
    get { return items_; }
  }
  public int ItemsCount {
    get { return items_.Count; }
  }
  public global::PropItem GetItems(int index) {
    return items_[index];
  }
  
  public const int SceneIdFieldNumber = 7;
  private pbc::PopsicleList<long> sceneId_ = new pbc::PopsicleList<long>();
  public scg::IList<long> SceneIdList {
    get { return pbc::Lists.AsReadOnly(sceneId_); }
  }
  public int SceneIdCount {
    get { return sceneId_.Count; }
  }
  public long GetSceneId(int index) {
    return sceneId_[index];
  }
  
  public const int StageFieldNumber = 8;
  private bool hasStage;
  private int stage_;
  public bool HasStage {
    get { return hasStage; }
  }
  public int Stage {
    get { return stage_; }
  }
  
  public const int HasRewardFieldNumber = 9;
  private bool hasHasReward;
  private bool hasReward_;
  public bool HasHasReward {
    get { return hasHasReward; }
  }
  public bool HasReward {
    get { return hasReward_; }
  }
  
  public const int NameFieldNumber = 10;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CollectDesFieldNumber = 11;
  private bool hasCollectDes;
  private string collectDes_ = "";
  public bool HasCollectDes {
    get { return hasCollectDes; }
  }
  public string CollectDes {
    get { return collectDes_; }
  }
  
  public const int SceneDesFieldNumber = 12;
  private bool hasSceneDes;
  private string sceneDes_ = "";
  public bool HasSceneDes {
    get { return hasSceneDes; }
  }
  public string SceneDes {
    get { return sceneDes_; }
  }
  
  public const int RewardSourceFieldNumber = 13;
  private bool hasRewardSource;
  private string rewardSource_ = "";
  public bool HasRewardSource {
    get { return hasRewardSource; }
  }
  public string RewardSource {
    get { return rewardSource_; }
  }
  
  public const int TipsFieldNumber = 14;
  private bool hasTips;
  private string tips_ = "";
  public bool HasTips {
    get { return hasTips; }
  }
  public string Tips {
    get { return tips_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCActivityDropResponseFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[4], Id);
    }
    if (hasDescription) {
      output.WriteString(2, field_names[2], Description);
    }
    if (hasBackgroundSource) {
      output.WriteString(3, field_names[0], BackgroundSource);
    }
    if (hasWarmupSource) {
      output.WriteString(4, field_names[13], WarmupSource);
    }
    if (hasRewardid) {
      output.WriteInt64(5, field_names[8], Rewardid);
    }
    if (items_.Count > 0) {
      output.WriteMessageArray(6, field_names[5], items_);
    }
    if (sceneId_.Count > 0) {
      output.WriteInt64Array(7, field_names[10], sceneId_);
    }
    if (hasStage) {
      output.WriteInt32(8, field_names[11], Stage);
    }
    if (hasHasReward) {
      output.WriteBool(9, field_names[3], HasReward);
    }
    if (hasName) {
      output.WriteString(10, field_names[6], Name);
    }
    if (hasCollectDes) {
      output.WriteString(11, field_names[1], CollectDes);
    }
    if (hasSceneDes) {
      output.WriteString(12, field_names[9], SceneDes);
    }
    if (hasRewardSource) {
      output.WriteString(13, field_names[7], RewardSource);
    }
    if (hasTips) {
      output.WriteString(14, field_names[12], Tips);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasDescription) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Description);
    }
    if (hasBackgroundSource) {
      size += pb::CodedOutputStream.ComputeStringSize(3, BackgroundSource);
    }
    if (hasWarmupSource) {
      size += pb::CodedOutputStream.ComputeStringSize(4, WarmupSource);
    }
    if (hasRewardid) {
      size += pb::CodedOutputStream.ComputeInt64Size(5, Rewardid);
    }
    foreach (global::PropItem element in ItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(6, element);
    }
    {
      int dataSize = 0;
      foreach (long element in SceneIdList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * sceneId_.Count;
    }
    if (hasStage) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, Stage);
    }
    if (hasHasReward) {
      size += pb::CodedOutputStream.ComputeBoolSize(9, HasReward);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(10, Name);
    }
    if (hasCollectDes) {
      size += pb::CodedOutputStream.ComputeStringSize(11, CollectDes);
    }
    if (hasSceneDes) {
      size += pb::CodedOutputStream.ComputeStringSize(12, SceneDes);
    }
    if (hasRewardSource) {
      size += pb::CodedOutputStream.ComputeStringSize(13, RewardSource);
    }
    if (hasTips) {
      size += pb::CodedOutputStream.ComputeStringSize(14, Tips);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCActivityDropResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCActivityDropResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCActivityDropResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityDropResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCActivityDropResponse MakeReadOnly() {
    items_.MakeReadOnly();
    sceneId_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCActivityDropResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCActivityDropResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCActivityDropResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCActivityDropResponse result;
    
    private SCActivityDropResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCActivityDropResponse original = result;
        result = new SCActivityDropResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCActivityDropResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCActivityDropResponse.Descriptor; }
    }
    
    public override SCActivityDropResponse DefaultInstanceForType {
      get { return global::SCActivityDropResponse.DefaultInstance; }
    }
    
    public override SCActivityDropResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCActivityDropResponse) {
        return MergeFrom((SCActivityDropResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCActivityDropResponse other) {
      if (other == global::SCActivityDropResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasBackgroundSource) {
        BackgroundSource = other.BackgroundSource;
      }
      if (other.HasWarmupSource) {
        WarmupSource = other.WarmupSource;
      }
      if (other.HasRewardid) {
        Rewardid = other.Rewardid;
      }
      if (other.items_.Count != 0) {
        result.items_.Add(other.items_);
      }
      if (other.sceneId_.Count != 0) {
        result.sceneId_.Add(other.sceneId_);
      }
      if (other.HasStage) {
        Stage = other.Stage;
      }
      if (other.HasHasReward) {
        HasReward = other.HasReward;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCollectDes) {
        CollectDes = other.CollectDes;
      }
      if (other.HasSceneDes) {
        SceneDes = other.SceneDes;
      }
      if (other.HasRewardSource) {
        RewardSource = other.RewardSource;
      }
      if (other.HasTips) {
        Tips = other.Tips;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCActivityDropResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCActivityDropResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 18: {
            result.hasDescription = input.ReadString(ref result.description_);
            break;
          }
          case 26: {
            result.hasBackgroundSource = input.ReadString(ref result.backgroundSource_);
            break;
          }
          case 34: {
            result.hasWarmupSource = input.ReadString(ref result.warmupSource_);
            break;
          }
          case 40: {
            result.hasRewardid = input.ReadInt64(ref result.rewardid_);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, field_name, result.items_, global::PropItem.DefaultInstance, extensionRegistry);
            break;
          }
          case 58:
          case 56: {
            input.ReadInt64Array(tag, field_name, result.sceneId_);
            break;
          }
          case 64: {
            result.hasStage = input.ReadInt32(ref result.stage_);
            break;
          }
          case 72: {
            result.hasHasReward = input.ReadBool(ref result.hasReward_);
            break;
          }
          case 82: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 90: {
            result.hasCollectDes = input.ReadString(ref result.collectDes_);
            break;
          }
          case 98: {
            result.hasSceneDes = input.ReadString(ref result.sceneDes_);
            break;
          }
          case 106: {
            result.hasRewardSource = input.ReadString(ref result.rewardSource_);
            break;
          }
          case 114: {
            result.hasTips = input.ReadString(ref result.tips_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasDescription {
      get { return result.hasDescription; }
    }
    public string Description {
      get { return result.Description; }
      set { SetDescription(value); }
    }
    public Builder SetDescription(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDescription = true;
      result.description_ = value;
      return this;
    }
    public Builder ClearDescription() {
      PrepareBuilder();
      result.hasDescription = false;
      result.description_ = "";
      return this;
    }
    
    public bool HasBackgroundSource {
      get { return result.hasBackgroundSource; }
    }
    public string BackgroundSource {
      get { return result.BackgroundSource; }
      set { SetBackgroundSource(value); }
    }
    public Builder SetBackgroundSource(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBackgroundSource = true;
      result.backgroundSource_ = value;
      return this;
    }
    public Builder ClearBackgroundSource() {
      PrepareBuilder();
      result.hasBackgroundSource = false;
      result.backgroundSource_ = "";
      return this;
    }
    
    public bool HasWarmupSource {
      get { return result.hasWarmupSource; }
    }
    public string WarmupSource {
      get { return result.WarmupSource; }
      set { SetWarmupSource(value); }
    }
    public Builder SetWarmupSource(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasWarmupSource = true;
      result.warmupSource_ = value;
      return this;
    }
    public Builder ClearWarmupSource() {
      PrepareBuilder();
      result.hasWarmupSource = false;
      result.warmupSource_ = "";
      return this;
    }
    
    public bool HasRewardid {
      get { return result.hasRewardid; }
    }
    public long Rewardid {
      get { return result.Rewardid; }
      set { SetRewardid(value); }
    }
    public Builder SetRewardid(long value) {
      PrepareBuilder();
      result.hasRewardid = true;
      result.rewardid_ = value;
      return this;
    }
    public Builder ClearRewardid() {
      PrepareBuilder();
      result.hasRewardid = false;
      result.rewardid_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::PropItem> ItemsList {
      get { return PrepareBuilder().items_; }
    }
    public int ItemsCount {
      get { return result.ItemsCount; }
    }
    public global::PropItem GetItems(int index) {
      return result.GetItems(index);
    }
    public Builder SetItems(int index, global::PropItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_[index] = value;
      return this;
    }
    public Builder SetItems(int index, global::PropItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddItems(global::PropItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_.Add(value);
      return this;
    }
    public Builder AddItems(global::PropItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeItems(scg::IEnumerable<global::PropItem> values) {
      PrepareBuilder();
      result.items_.Add(values);
      return this;
    }
    public Builder ClearItems() {
      PrepareBuilder();
      result.items_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<long> SceneIdList {
      get { return PrepareBuilder().sceneId_; }
    }
    public int SceneIdCount {
      get { return result.SceneIdCount; }
    }
    public long GetSceneId(int index) {
      return result.GetSceneId(index);
    }
    public Builder SetSceneId(int index, long value) {
      PrepareBuilder();
      result.sceneId_[index] = value;
      return this;
    }
    public Builder AddSceneId(long value) {
      PrepareBuilder();
      result.sceneId_.Add(value);
      return this;
    }
    public Builder AddRangeSceneId(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.sceneId_.Add(values);
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.sceneId_.Clear();
      return this;
    }
    
    public bool HasStage {
      get { return result.hasStage; }
    }
    public int Stage {
      get { return result.Stage; }
      set { SetStage(value); }
    }
    public Builder SetStage(int value) {
      PrepareBuilder();
      result.hasStage = true;
      result.stage_ = value;
      return this;
    }
    public Builder ClearStage() {
      PrepareBuilder();
      result.hasStage = false;
      result.stage_ = 0;
      return this;
    }
    
    public bool HasHasReward {
      get { return result.hasHasReward; }
    }
    public bool HasReward {
      get { return result.HasReward; }
      set { SetHasReward(value); }
    }
    public Builder SetHasReward(bool value) {
      PrepareBuilder();
      result.hasHasReward = true;
      result.hasReward_ = value;
      return this;
    }
    public Builder ClearHasReward() {
      PrepareBuilder();
      result.hasHasReward = false;
      result.hasReward_ = false;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCollectDes {
      get { return result.hasCollectDes; }
    }
    public string CollectDes {
      get { return result.CollectDes; }
      set { SetCollectDes(value); }
    }
    public Builder SetCollectDes(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCollectDes = true;
      result.collectDes_ = value;
      return this;
    }
    public Builder ClearCollectDes() {
      PrepareBuilder();
      result.hasCollectDes = false;
      result.collectDes_ = "";
      return this;
    }
    
    public bool HasSceneDes {
      get { return result.hasSceneDes; }
    }
    public string SceneDes {
      get { return result.SceneDes; }
      set { SetSceneDes(value); }
    }
    public Builder SetSceneDes(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSceneDes = true;
      result.sceneDes_ = value;
      return this;
    }
    public Builder ClearSceneDes() {
      PrepareBuilder();
      result.hasSceneDes = false;
      result.sceneDes_ = "";
      return this;
    }
    
    public bool HasRewardSource {
      get { return result.hasRewardSource; }
    }
    public string RewardSource {
      get { return result.RewardSource; }
      set { SetRewardSource(value); }
    }
    public Builder SetRewardSource(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRewardSource = true;
      result.rewardSource_ = value;
      return this;
    }
    public Builder ClearRewardSource() {
      PrepareBuilder();
      result.hasRewardSource = false;
      result.rewardSource_ = "";
      return this;
    }
    
    public bool HasTips {
      get { return result.hasTips; }
    }
    public string Tips {
      get { return result.Tips; }
      set { SetTips(value); }
    }
    public Builder SetTips(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTips = true;
      result.tips_ = value;
      return this;
    }
    public Builder ClearTips() {
      PrepareBuilder();
      result.hasTips = false;
      result.tips_ = "";
      return this;
    }
  }
  static SCActivityDropResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSActivityRewardRequest : pb::GeneratedMessage<CSActivityRewardRequest, CSActivityRewardRequest.Builder> {
  private CSActivityRewardRequest() { }
  private static readonly CSActivityRewardRequest defaultInstance = new CSActivityRewardRequest().MakeReadOnly();
  private static readonly string[] _cSActivityRewardRequestFieldNames = new string[] { "id" };
  private static readonly uint[] _cSActivityRewardRequestFieldTags = new uint[] { 8 };
  public static CSActivityRewardRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSActivityRewardRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSActivityRewardRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSActivityRewardRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSActivityRewardRequest, CSActivityRewardRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSActivityRewardRequest__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSActivityRewardRequestFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSActivityRewardRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSActivityRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSActivityRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSActivityRewardRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSActivityRewardRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSActivityRewardRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSActivityRewardRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSActivityRewardRequest result;
    
    private CSActivityRewardRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSActivityRewardRequest original = result;
        result = new CSActivityRewardRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSActivityRewardRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSActivityRewardRequest.Descriptor; }
    }
    
    public override CSActivityRewardRequest DefaultInstanceForType {
      get { return global::CSActivityRewardRequest.DefaultInstance; }
    }
    
    public override CSActivityRewardRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSActivityRewardRequest) {
        return MergeFrom((CSActivityRewardRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSActivityRewardRequest other) {
      if (other == global::CSActivityRewardRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSActivityRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSActivityRewardRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static CSActivityRewardRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCActivityRewardResponse : pb::GeneratedMessage<SCActivityRewardResponse, SCActivityRewardResponse.Builder> {
  private SCActivityRewardResponse() { }
  private static readonly SCActivityRewardResponse defaultInstance = new SCActivityRewardResponse().MakeReadOnly();
  private static readonly string[] _sCActivityRewardResponseFieldNames = new string[] { "items", "responseStatus" };
  private static readonly uint[] _sCActivityRewardResponseFieldTags = new uint[] { 18, 10 };
  public static SCActivityRewardResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCActivityRewardResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCActivityRewardResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCActivityRewardResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCActivityRewardResponse, SCActivityRewardResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCActivityRewardResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int ItemsFieldNumber = 2;
  private pbc::PopsicleList<global::GiftItem> items_ = new pbc::PopsicleList<global::GiftItem>();
  public scg::IList<global::GiftItem> ItemsList {
    get { return items_; }
  }
  public int ItemsCount {
    get { return items_.Count; }
  }
  public global::GiftItem GetItems(int index) {
    return items_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCActivityRewardResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[1], ResponseStatus);
    }
    if (items_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], items_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    foreach (global::GiftItem element in ItemsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCActivityRewardResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCActivityRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCActivityRewardResponse MakeReadOnly() {
    items_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCActivityRewardResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCActivityRewardResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCActivityRewardResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCActivityRewardResponse result;
    
    private SCActivityRewardResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCActivityRewardResponse original = result;
        result = new SCActivityRewardResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCActivityRewardResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCActivityRewardResponse.Descriptor; }
    }
    
    public override SCActivityRewardResponse DefaultInstanceForType {
      get { return global::SCActivityRewardResponse.DefaultInstance; }
    }
    
    public override SCActivityRewardResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCActivityRewardResponse) {
        return MergeFrom((SCActivityRewardResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCActivityRewardResponse other) {
      if (other == global::SCActivityRewardResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.items_.Count != 0) {
        result.items_.Add(other.items_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCActivityRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCActivityRewardResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.items_, global::GiftItem.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::GiftItem> ItemsList {
      get { return PrepareBuilder().items_; }
    }
    public int ItemsCount {
      get { return result.ItemsCount; }
    }
    public global::GiftItem GetItems(int index) {
      return result.GetItems(index);
    }
    public Builder SetItems(int index, global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_[index] = value;
      return this;
    }
    public Builder SetItems(int index, global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddItems(global::GiftItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.items_.Add(value);
      return this;
    }
    public Builder AddItems(global::GiftItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.items_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeItems(scg::IEnumerable<global::GiftItem> values) {
      PrepareBuilder();
      result.items_.Add(values);
      return this;
    }
    public Builder ClearItems() {
      PrepareBuilder();
      result.items_.Clear();
      return this;
    }
  }
  static SCActivityRewardResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartoonEnterRequest : pb::GeneratedMessage<CSCartoonEnterRequest, CSCartoonEnterRequest.Builder> {
  private CSCartoonEnterRequest() { }
  private static readonly CSCartoonEnterRequest defaultInstance = new CSCartoonEnterRequest().MakeReadOnly();
  private static readonly string[] _cSCartoonEnterRequestFieldNames = new string[] { "sceneId" };
  private static readonly uint[] _cSCartoonEnterRequestFieldTags = new uint[] { 8 };
  public static CSCartoonEnterRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartoonEnterRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartoonEnterRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSCartoonEnterRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartoonEnterRequest, CSCartoonEnterRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSCartoonEnterRequest__FieldAccessorTable; }
  }
  
  public const int SceneIdFieldNumber = 1;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartoonEnterRequestFieldNames;
    if (hasSceneId) {
      output.WriteInt64(1, field_names[0], SceneId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SceneId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartoonEnterRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartoonEnterRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartoonEnterRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartoonEnterRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartoonEnterRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartoonEnterRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartoonEnterRequest result;
    
    private CSCartoonEnterRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartoonEnterRequest original = result;
        result = new CSCartoonEnterRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartoonEnterRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartoonEnterRequest.Descriptor; }
    }
    
    public override CSCartoonEnterRequest DefaultInstanceForType {
      get { return global::CSCartoonEnterRequest.DefaultInstance; }
    }
    
    public override CSCartoonEnterRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartoonEnterRequest) {
        return MergeFrom((CSCartoonEnterRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartoonEnterRequest other) {
      if (other == global::CSCartoonEnterRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartoonEnterRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartoonEnterRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
  }
  static CSCartoonEnterRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCartoonEnterResponse : pb::GeneratedMessage<SCCartoonEnterResponse, SCCartoonEnterResponse.Builder> {
  private SCCartoonEnterResponse() { }
  private static readonly SCCartoonEnterResponse defaultInstance = new SCCartoonEnterResponse().MakeReadOnly();
  private static readonly string[] _sCCartoonEnterResponseFieldNames = new string[] { "result" };
  private static readonly uint[] _sCCartoonEnterResponseFieldTags = new uint[] { 8 };
  public static SCCartoonEnterResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCartoonEnterResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCartoonEnterResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCCartoonEnterResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCartoonEnterResponse, SCCartoonEnterResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCCartoonEnterResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCartoonEnterResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCartoonEnterResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCartoonEnterResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCartoonEnterResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCartoonEnterResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCartoonEnterResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCartoonEnterResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCartoonEnterResponse result;
    
    private SCCartoonEnterResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCartoonEnterResponse original = result;
        result = new SCCartoonEnterResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCartoonEnterResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCartoonEnterResponse.Descriptor; }
    }
    
    public override SCCartoonEnterResponse DefaultInstanceForType {
      get { return global::SCCartoonEnterResponse.DefaultInstance; }
    }
    
    public override SCCartoonEnterResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCartoonEnterResponse) {
        return MergeFrom((SCCartoonEnterResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCartoonEnterResponse other) {
      if (other == global::SCCartoonEnterResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCartoonEnterResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCartoonEnterResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCCartoonEnterResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartoonRewardRequest : pb::GeneratedMessage<CSCartoonRewardRequest, CSCartoonRewardRequest.Builder> {
  private CSCartoonRewardRequest() { }
  private static readonly CSCartoonRewardRequest defaultInstance = new CSCartoonRewardRequest().MakeReadOnly();
  private static readonly string[] _cSCartoonRewardRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSCartoonRewardRequestFieldTags = new uint[] {  };
  public static CSCartoonRewardRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartoonRewardRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartoonRewardRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSCartoonRewardRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartoonRewardRequest, CSCartoonRewardRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSCartoonRewardRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartoonRewardRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartoonRewardRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartoonRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartoonRewardRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartoonRewardRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartoonRewardRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartoonRewardRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartoonRewardRequest result;
    
    private CSCartoonRewardRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartoonRewardRequest original = result;
        result = new CSCartoonRewardRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartoonRewardRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartoonRewardRequest.Descriptor; }
    }
    
    public override CSCartoonRewardRequest DefaultInstanceForType {
      get { return global::CSCartoonRewardRequest.DefaultInstance; }
    }
    
    public override CSCartoonRewardRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartoonRewardRequest) {
        return MergeFrom((CSCartoonRewardRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartoonRewardRequest other) {
      if (other == global::CSCartoonRewardRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartoonRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartoonRewardRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSCartoonRewardRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCartoonRewardReqsponse : pb::GeneratedMessage<SCCartoonRewardReqsponse, SCCartoonRewardReqsponse.Builder> {
  private SCCartoonRewardReqsponse() { }
  private static readonly SCCartoonRewardReqsponse defaultInstance = new SCCartoonRewardReqsponse().MakeReadOnly();
  private static readonly string[] _sCCartoonRewardReqsponseFieldNames = new string[] { "cash", "coin", "exp", "sceneRewardComprise", "vit" };
  private static readonly uint[] _sCCartoonRewardReqsponseFieldTags = new uint[] { 8, 16, 24, 42, 32 };
  public static SCCartoonRewardReqsponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCartoonRewardReqsponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCartoonRewardReqsponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCCartoonRewardReqsponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCartoonRewardReqsponse, SCCartoonRewardReqsponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCCartoonRewardReqsponse__FieldAccessorTable; }
  }
  
  public const int CashFieldNumber = 1;
  private bool hasCash;
  private int cash_;
  public bool HasCash {
    get { return hasCash; }
  }
  public int Cash {
    get { return cash_; }
  }
  
  public const int CoinFieldNumber = 2;
  private bool hasCoin;
  private int coin_;
  public bool HasCoin {
    get { return hasCoin; }
  }
  public int Coin {
    get { return coin_; }
  }
  
  public const int ExpFieldNumber = 3;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public const int VitFieldNumber = 4;
  private bool hasVit;
  private int vit_;
  public bool HasVit {
    get { return hasVit; }
  }
  public int Vit {
    get { return vit_; }
  }
  
  public const int SceneRewardCompriseFieldNumber = 5;
  private pbc::PopsicleList<global::SceneRewardComprise> sceneRewardComprise_ = new pbc::PopsicleList<global::SceneRewardComprise>();
  public scg::IList<global::SceneRewardComprise> SceneRewardCompriseList {
    get { return sceneRewardComprise_; }
  }
  public int SceneRewardCompriseCount {
    get { return sceneRewardComprise_.Count; }
  }
  public global::SceneRewardComprise GetSceneRewardComprise(int index) {
    return sceneRewardComprise_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCartoonRewardReqsponseFieldNames;
    if (hasCash) {
      output.WriteInt32(1, field_names[0], Cash);
    }
    if (hasCoin) {
      output.WriteInt32(2, field_names[1], Coin);
    }
    if (hasExp) {
      output.WriteInt32(3, field_names[2], Exp);
    }
    if (hasVit) {
      output.WriteInt32(4, field_names[4], Vit);
    }
    if (sceneRewardComprise_.Count > 0) {
      output.WriteMessageArray(5, field_names[3], sceneRewardComprise_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Cash);
    }
    if (hasCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Coin);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Exp);
    }
    if (hasVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Vit);
    }
    foreach (global::SceneRewardComprise element in SceneRewardCompriseList) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCartoonRewardReqsponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCartoonRewardReqsponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCartoonRewardReqsponse MakeReadOnly() {
    sceneRewardComprise_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCartoonRewardReqsponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCartoonRewardReqsponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCartoonRewardReqsponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCartoonRewardReqsponse result;
    
    private SCCartoonRewardReqsponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCartoonRewardReqsponse original = result;
        result = new SCCartoonRewardReqsponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCartoonRewardReqsponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCartoonRewardReqsponse.Descriptor; }
    }
    
    public override SCCartoonRewardReqsponse DefaultInstanceForType {
      get { return global::SCCartoonRewardReqsponse.DefaultInstance; }
    }
    
    public override SCCartoonRewardReqsponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCartoonRewardReqsponse) {
        return MergeFrom((SCCartoonRewardReqsponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCartoonRewardReqsponse other) {
      if (other == global::SCCartoonRewardReqsponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCash) {
        Cash = other.Cash;
      }
      if (other.HasCoin) {
        Coin = other.Coin;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      if (other.HasVit) {
        Vit = other.Vit;
      }
      if (other.sceneRewardComprise_.Count != 0) {
        result.sceneRewardComprise_.Add(other.sceneRewardComprise_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCartoonRewardReqsponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCartoonRewardReqsponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCash = input.ReadInt32(ref result.cash_);
            break;
          }
          case 16: {
            result.hasCoin = input.ReadInt32(ref result.coin_);
            break;
          }
          case 24: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
          case 32: {
            result.hasVit = input.ReadInt32(ref result.vit_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.sceneRewardComprise_, global::SceneRewardComprise.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCash {
      get { return result.hasCash; }
    }
    public int Cash {
      get { return result.Cash; }
      set { SetCash(value); }
    }
    public Builder SetCash(int value) {
      PrepareBuilder();
      result.hasCash = true;
      result.cash_ = value;
      return this;
    }
    public Builder ClearCash() {
      PrepareBuilder();
      result.hasCash = false;
      result.cash_ = 0;
      return this;
    }
    
    public bool HasCoin {
      get { return result.hasCoin; }
    }
    public int Coin {
      get { return result.Coin; }
      set { SetCoin(value); }
    }
    public Builder SetCoin(int value) {
      PrepareBuilder();
      result.hasCoin = true;
      result.coin_ = value;
      return this;
    }
    public Builder ClearCoin() {
      PrepareBuilder();
      result.hasCoin = false;
      result.coin_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
    
    public bool HasVit {
      get { return result.hasVit; }
    }
    public int Vit {
      get { return result.Vit; }
      set { SetVit(value); }
    }
    public Builder SetVit(int value) {
      PrepareBuilder();
      result.hasVit = true;
      result.vit_ = value;
      return this;
    }
    public Builder ClearVit() {
      PrepareBuilder();
      result.hasVit = false;
      result.vit_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::SceneRewardComprise> SceneRewardCompriseList {
      get { return PrepareBuilder().sceneRewardComprise_; }
    }
    public int SceneRewardCompriseCount {
      get { return result.SceneRewardCompriseCount; }
    }
    public global::SceneRewardComprise GetSceneRewardComprise(int index) {
      return result.GetSceneRewardComprise(index);
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = value;
      return this;
    }
    public Builder SetSceneRewardComprise(int index, global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(value);
      return this;
    }
    public Builder AddSceneRewardComprise(global::SceneRewardComprise.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sceneRewardComprise_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSceneRewardComprise(scg::IEnumerable<global::SceneRewardComprise> values) {
      PrepareBuilder();
      result.sceneRewardComprise_.Add(values);
      return this;
    }
    public Builder ClearSceneRewardComprise() {
      PrepareBuilder();
      result.sceneRewardComprise_.Clear();
      return this;
    }
  }
  static SCCartoonRewardReqsponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCartoonQuitRequest : pb::GeneratedMessage<CSCartoonQuitRequest, CSCartoonQuitRequest.Builder> {
  private CSCartoonQuitRequest() { }
  private static readonly CSCartoonQuitRequest defaultInstance = new CSCartoonQuitRequest().MakeReadOnly();
  private static readonly string[] _cSCartoonQuitRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSCartoonQuitRequestFieldTags = new uint[] {  };
  public static CSCartoonQuitRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCartoonQuitRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCartoonQuitRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSCartoonQuitRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCartoonQuitRequest, CSCartoonQuitRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSCartoonQuitRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCartoonQuitRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCartoonQuitRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCartoonQuitRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCartoonQuitRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCartoonQuitRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCartoonQuitRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCartoonQuitRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCartoonQuitRequest result;
    
    private CSCartoonQuitRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCartoonQuitRequest original = result;
        result = new CSCartoonQuitRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCartoonQuitRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCartoonQuitRequest.Descriptor; }
    }
    
    public override CSCartoonQuitRequest DefaultInstanceForType {
      get { return global::CSCartoonQuitRequest.DefaultInstance; }
    }
    
    public override CSCartoonQuitRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCartoonQuitRequest) {
        return MergeFrom((CSCartoonQuitRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCartoonQuitRequest other) {
      if (other == global::CSCartoonQuitRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCartoonQuitRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCartoonQuitRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSCartoonQuitRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmailListRequest : pb::GeneratedMessage<CSEmailListRequest, CSEmailListRequest.Builder> {
  private CSEmailListRequest() { }
  private static readonly CSEmailListRequest defaultInstance = new CSEmailListRequest().MakeReadOnly();
  private static readonly string[] _cSEmailListRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSEmailListRequestFieldTags = new uint[] {  };
  public static CSEmailListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmailListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmailListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEmailListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmailListRequest, CSEmailListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEmailListRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmailListRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmailListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmailListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmailListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmailListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmailListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmailListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmailListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmailListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmailListRequest result;
    
    private CSEmailListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmailListRequest original = result;
        result = new CSEmailListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmailListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmailListRequest.Descriptor; }
    }
    
    public override CSEmailListRequest DefaultInstanceForType {
      get { return global::CSEmailListRequest.DefaultInstance; }
    }
    
    public override CSEmailListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmailListRequest) {
        return MergeFrom((CSEmailListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmailListRequest other) {
      if (other == global::CSEmailListRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmailListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmailListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSEmailListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmailListResponse : pb::GeneratedMessage<SCEmailListResponse, SCEmailListResponse.Builder> {
  private SCEmailListResponse() { }
  private static readonly SCEmailListResponse defaultInstance = new SCEmailListResponse().MakeReadOnly();
  private static readonly string[] _sCEmailListResponseFieldNames = new string[] { "emails" };
  private static readonly uint[] _sCEmailListResponseFieldTags = new uint[] { 10 };
  public static SCEmailListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmailListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmailListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEmailListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmailListResponse, SCEmailListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEmailListResponse__FieldAccessorTable; }
  }
  
  public const int EmailsFieldNumber = 1;
  private pbc::PopsicleList<global::EmailInfo> emails_ = new pbc::PopsicleList<global::EmailInfo>();
  public scg::IList<global::EmailInfo> EmailsList {
    get { return emails_; }
  }
  public int EmailsCount {
    get { return emails_.Count; }
  }
  public global::EmailInfo GetEmails(int index) {
    return emails_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmailListResponseFieldNames;
    if (emails_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], emails_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::EmailInfo element in EmailsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmailListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmailListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmailListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmailListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmailListResponse MakeReadOnly() {
    emails_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmailListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmailListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmailListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmailListResponse result;
    
    private SCEmailListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmailListResponse original = result;
        result = new SCEmailListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmailListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmailListResponse.Descriptor; }
    }
    
    public override SCEmailListResponse DefaultInstanceForType {
      get { return global::SCEmailListResponse.DefaultInstance; }
    }
    
    public override SCEmailListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmailListResponse) {
        return MergeFrom((SCEmailListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmailListResponse other) {
      if (other == global::SCEmailListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.emails_.Count != 0) {
        result.emails_.Add(other.emails_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmailListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmailListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.emails_, global::EmailInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::EmailInfo> EmailsList {
      get { return PrepareBuilder().emails_; }
    }
    public int EmailsCount {
      get { return result.EmailsCount; }
    }
    public global::EmailInfo GetEmails(int index) {
      return result.GetEmails(index);
    }
    public Builder SetEmails(int index, global::EmailInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emails_[index] = value;
      return this;
    }
    public Builder SetEmails(int index, global::EmailInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emails_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEmails(global::EmailInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.emails_.Add(value);
      return this;
    }
    public Builder AddEmails(global::EmailInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.emails_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEmails(scg::IEnumerable<global::EmailInfo> values) {
      PrepareBuilder();
      result.emails_.Add(values);
      return this;
    }
    public Builder ClearEmails() {
      PrepareBuilder();
      result.emails_.Clear();
      return this;
    }
  }
  static SCEmailListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EmailInfo : pb::GeneratedMessage<EmailInfo, EmailInfo.Builder> {
  private EmailInfo() { }
  private static readonly EmailInfo defaultInstance = new EmailInfo().MakeReadOnly();
  private static readonly string[] _emailInfoFieldNames = new string[] { "content", "deadline", "id", "receiveTime", "rewards", "status", "title", "type" };
  private static readonly uint[] _emailInfoFieldTags = new uint[] { 42, 56, 8, 48, 66, 24, 34, 16 };
  public static EmailInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override EmailInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override EmailInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_EmailInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<EmailInfo, EmailInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_EmailInfo__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int TitleFieldNumber = 4;
  private bool hasTitle;
  private string title_ = "";
  public bool HasTitle {
    get { return hasTitle; }
  }
  public string Title {
    get { return title_; }
  }
  
  public const int ContentFieldNumber = 5;
  private bool hasContent;
  private string content_ = "";
  public bool HasContent {
    get { return hasContent; }
  }
  public string Content {
    get { return content_; }
  }
  
  public const int ReceiveTimeFieldNumber = 6;
  private bool hasReceiveTime;
  private long receiveTime_;
  public bool HasReceiveTime {
    get { return hasReceiveTime; }
  }
  public long ReceiveTime {
    get { return receiveTime_; }
  }
  
  public const int DeadlineFieldNumber = 7;
  private bool hasDeadline;
  private long deadline_;
  public bool HasDeadline {
    get { return hasDeadline; }
  }
  public long Deadline {
    get { return deadline_; }
  }
  
  public const int RewardsFieldNumber = 8;
  private pbc::PopsicleList<global::EmailReward> rewards_ = new pbc::PopsicleList<global::EmailReward>();
  public scg::IList<global::EmailReward> RewardsList {
    get { return rewards_; }
  }
  public int RewardsCount {
    get { return rewards_.Count; }
  }
  public global::EmailReward GetRewards(int index) {
    return rewards_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _emailInfoFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[2], Id);
    }
    if (hasType) {
      output.WriteInt32(2, field_names[7], Type);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[5], Status);
    }
    if (hasTitle) {
      output.WriteString(4, field_names[6], Title);
    }
    if (hasContent) {
      output.WriteString(5, field_names[0], Content);
    }
    if (hasReceiveTime) {
      output.WriteInt64(6, field_names[3], ReceiveTime);
    }
    if (hasDeadline) {
      output.WriteInt64(7, field_names[1], Deadline);
    }
    if (rewards_.Count > 0) {
      output.WriteMessageArray(8, field_names[4], rewards_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Type);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    if (hasTitle) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Title);
    }
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Content);
    }
    if (hasReceiveTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(6, ReceiveTime);
    }
    if (hasDeadline) {
      size += pb::CodedOutputStream.ComputeInt64Size(7, Deadline);
    }
    foreach (global::EmailReward element in RewardsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(8, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static EmailInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static EmailInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static EmailInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static EmailInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static EmailInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static EmailInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static EmailInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static EmailInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static EmailInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static EmailInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private EmailInfo MakeReadOnly() {
    rewards_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(EmailInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<EmailInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(EmailInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private EmailInfo result;
    
    private EmailInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        EmailInfo original = result;
        result = new EmailInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override EmailInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::EmailInfo.Descriptor; }
    }
    
    public override EmailInfo DefaultInstanceForType {
      get { return global::EmailInfo.DefaultInstance; }
    }
    
    public override EmailInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is EmailInfo) {
        return MergeFrom((EmailInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(EmailInfo other) {
      if (other == global::EmailInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasReceiveTime) {
        ReceiveTime = other.ReceiveTime;
      }
      if (other.HasDeadline) {
        Deadline = other.Deadline;
      }
      if (other.rewards_.Count != 0) {
        result.rewards_.Add(other.rewards_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_emailInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _emailInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 34: {
            result.hasTitle = input.ReadString(ref result.title_);
            break;
          }
          case 42: {
            result.hasContent = input.ReadString(ref result.content_);
            break;
          }
          case 48: {
            result.hasReceiveTime = input.ReadInt64(ref result.receiveTime_);
            break;
          }
          case 56: {
            result.hasDeadline = input.ReadInt64(ref result.deadline_);
            break;
          }
          case 66: {
            input.ReadMessageArray(tag, field_name, result.rewards_, global::EmailReward.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public string Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = "";
      return this;
    }
    
    public bool HasContent {
      get { return result.hasContent; }
    }
    public string Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = "";
      return this;
    }
    
    public bool HasReceiveTime {
      get { return result.hasReceiveTime; }
    }
    public long ReceiveTime {
      get { return result.ReceiveTime; }
      set { SetReceiveTime(value); }
    }
    public Builder SetReceiveTime(long value) {
      PrepareBuilder();
      result.hasReceiveTime = true;
      result.receiveTime_ = value;
      return this;
    }
    public Builder ClearReceiveTime() {
      PrepareBuilder();
      result.hasReceiveTime = false;
      result.receiveTime_ = 0L;
      return this;
    }
    
    public bool HasDeadline {
      get { return result.hasDeadline; }
    }
    public long Deadline {
      get { return result.Deadline; }
      set { SetDeadline(value); }
    }
    public Builder SetDeadline(long value) {
      PrepareBuilder();
      result.hasDeadline = true;
      result.deadline_ = value;
      return this;
    }
    public Builder ClearDeadline() {
      PrepareBuilder();
      result.hasDeadline = false;
      result.deadline_ = 0L;
      return this;
    }
    
    public pbc::IPopsicleList<global::EmailReward> RewardsList {
      get { return PrepareBuilder().rewards_; }
    }
    public int RewardsCount {
      get { return result.RewardsCount; }
    }
    public global::EmailReward GetRewards(int index) {
      return result.GetRewards(index);
    }
    public Builder SetRewards(int index, global::EmailReward value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_[index] = value;
      return this;
    }
    public Builder SetRewards(int index, global::EmailReward.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRewards(global::EmailReward value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_.Add(value);
      return this;
    }
    public Builder AddRewards(global::EmailReward.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRewards(scg::IEnumerable<global::EmailReward> values) {
      PrepareBuilder();
      result.rewards_.Add(values);
      return this;
    }
    public Builder ClearRewards() {
      PrepareBuilder();
      result.rewards_.Clear();
      return this;
    }
  }
  static EmailInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class EmailReward : pb::GeneratedMessage<EmailReward, EmailReward.Builder> {
  private EmailReward() { }
  private static readonly EmailReward defaultInstance = new EmailReward().MakeReadOnly();
  private static readonly string[] _emailRewardFieldNames = new string[] { "count", "propId" };
  private static readonly uint[] _emailRewardFieldTags = new uint[] { 16, 8 };
  public static EmailReward DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override EmailReward DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override EmailReward ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_EmailReward__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<EmailReward, EmailReward.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_EmailReward__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _emailRewardFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static EmailReward ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static EmailReward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static EmailReward ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static EmailReward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static EmailReward ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static EmailReward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static EmailReward ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static EmailReward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static EmailReward ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static EmailReward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private EmailReward MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(EmailReward prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<EmailReward, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(EmailReward cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private EmailReward result;
    
    private EmailReward PrepareBuilder() {
      if (resultIsReadOnly) {
        EmailReward original = result;
        result = new EmailReward();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override EmailReward MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::EmailReward.Descriptor; }
    }
    
    public override EmailReward DefaultInstanceForType {
      get { return global::EmailReward.DefaultInstance; }
    }
    
    public override EmailReward BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is EmailReward) {
        return MergeFrom((EmailReward) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(EmailReward other) {
      if (other == global::EmailReward.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_emailRewardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _emailRewardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static EmailReward() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmailRewardRequest : pb::GeneratedMessage<CSEmailRewardRequest, CSEmailRewardRequest.Builder> {
  private CSEmailRewardRequest() { }
  private static readonly CSEmailRewardRequest defaultInstance = new CSEmailRewardRequest().MakeReadOnly();
  private static readonly string[] _cSEmailRewardRequestFieldNames = new string[] { "id" };
  private static readonly uint[] _cSEmailRewardRequestFieldTags = new uint[] { 8 };
  public static CSEmailRewardRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmailRewardRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmailRewardRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEmailRewardRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmailRewardRequest, CSEmailRewardRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEmailRewardRequest__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmailRewardRequestFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmailRewardRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmailRewardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmailRewardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmailRewardRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmailRewardRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmailRewardRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmailRewardRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmailRewardRequest result;
    
    private CSEmailRewardRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmailRewardRequest original = result;
        result = new CSEmailRewardRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmailRewardRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmailRewardRequest.Descriptor; }
    }
    
    public override CSEmailRewardRequest DefaultInstanceForType {
      get { return global::CSEmailRewardRequest.DefaultInstance; }
    }
    
    public override CSEmailRewardRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmailRewardRequest) {
        return MergeFrom((CSEmailRewardRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmailRewardRequest other) {
      if (other == global::CSEmailRewardRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmailRewardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmailRewardRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static CSEmailRewardRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmailRewardResponse : pb::GeneratedMessage<SCEmailRewardResponse, SCEmailRewardResponse.Builder> {
  private SCEmailRewardResponse() { }
  private static readonly SCEmailRewardResponse defaultInstance = new SCEmailRewardResponse().MakeReadOnly();
  private static readonly string[] _sCEmailRewardResponseFieldNames = new string[] { "id", "result" };
  private static readonly uint[] _sCEmailRewardResponseFieldTags = new uint[] { 16, 8 };
  public static SCEmailRewardResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmailRewardResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmailRewardResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEmailRewardResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmailRewardResponse, SCEmailRewardResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEmailRewardResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int IdFieldNumber = 2;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmailRewardResponseFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[1], Result);
    }
    if (hasId) {
      output.WriteInt64(2, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmailRewardResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmailRewardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmailRewardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmailRewardResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmailRewardResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmailRewardResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmailRewardResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmailRewardResponse result;
    
    private SCEmailRewardResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmailRewardResponse original = result;
        result = new SCEmailRewardResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmailRewardResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmailRewardResponse.Descriptor; }
    }
    
    public override SCEmailRewardResponse DefaultInstanceForType {
      get { return global::SCEmailRewardResponse.DefaultInstance; }
    }
    
    public override SCEmailRewardResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmailRewardResponse) {
        return MergeFrom((SCEmailRewardResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmailRewardResponse other) {
      if (other == global::SCEmailRewardResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmailRewardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmailRewardResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 16: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static SCEmailRewardResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSEmailReadRequest : pb::GeneratedMessage<CSEmailReadRequest, CSEmailReadRequest.Builder> {
  private CSEmailReadRequest() { }
  private static readonly CSEmailReadRequest defaultInstance = new CSEmailReadRequest().MakeReadOnly();
  private static readonly string[] _cSEmailReadRequestFieldNames = new string[] { "id" };
  private static readonly uint[] _cSEmailReadRequestFieldTags = new uint[] { 8 };
  public static CSEmailReadRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSEmailReadRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSEmailReadRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSEmailReadRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSEmailReadRequest, CSEmailReadRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSEmailReadRequest__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSEmailReadRequestFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSEmailReadRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSEmailReadRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSEmailReadRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSEmailReadRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSEmailReadRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSEmailReadRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSEmailReadRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSEmailReadRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSEmailReadRequest result;
    
    private CSEmailReadRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSEmailReadRequest original = result;
        result = new CSEmailReadRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSEmailReadRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSEmailReadRequest.Descriptor; }
    }
    
    public override CSEmailReadRequest DefaultInstanceForType {
      get { return global::CSEmailReadRequest.DefaultInstance; }
    }
    
    public override CSEmailReadRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSEmailReadRequest) {
        return MergeFrom((CSEmailReadRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSEmailReadRequest other) {
      if (other == global::CSEmailReadRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSEmailReadRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSEmailReadRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static CSEmailReadRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCEmailChangeNotice : pb::GeneratedMessage<SCEmailChangeNotice, SCEmailChangeNotice.Builder> {
  private SCEmailChangeNotice() { }
  private static readonly SCEmailChangeNotice defaultInstance = new SCEmailChangeNotice().MakeReadOnly();
  private static readonly string[] _sCEmailChangeNoticeFieldNames = new string[] { "switchTime" };
  private static readonly uint[] _sCEmailChangeNoticeFieldTags = new uint[] { 8 };
  public static SCEmailChangeNotice DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCEmailChangeNotice DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCEmailChangeNotice ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCEmailChangeNotice__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCEmailChangeNotice, SCEmailChangeNotice.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCEmailChangeNotice__FieldAccessorTable; }
  }
  
  public const int SwitchTimeFieldNumber = 1;
  private bool hasSwitchTime;
  private long switchTime_;
  public bool HasSwitchTime {
    get { return hasSwitchTime; }
  }
  public long SwitchTime {
    get { return switchTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCEmailChangeNoticeFieldNames;
    if (hasSwitchTime) {
      output.WriteInt64(1, field_names[0], SwitchTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSwitchTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SwitchTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCEmailChangeNotice ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCEmailChangeNotice ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCEmailChangeNotice ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCEmailChangeNotice MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCEmailChangeNotice prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCEmailChangeNotice, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCEmailChangeNotice cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCEmailChangeNotice result;
    
    private SCEmailChangeNotice PrepareBuilder() {
      if (resultIsReadOnly) {
        SCEmailChangeNotice original = result;
        result = new SCEmailChangeNotice();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCEmailChangeNotice MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCEmailChangeNotice.Descriptor; }
    }
    
    public override SCEmailChangeNotice DefaultInstanceForType {
      get { return global::SCEmailChangeNotice.DefaultInstance; }
    }
    
    public override SCEmailChangeNotice BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCEmailChangeNotice) {
        return MergeFrom((SCEmailChangeNotice) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCEmailChangeNotice other) {
      if (other == global::SCEmailChangeNotice.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSwitchTime) {
        SwitchTime = other.SwitchTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCEmailChangeNoticeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCEmailChangeNoticeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSwitchTime = input.ReadInt64(ref result.switchTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSwitchTime {
      get { return result.hasSwitchTime; }
    }
    public long SwitchTime {
      get { return result.SwitchTime; }
      set { SetSwitchTime(value); }
    }
    public Builder SetSwitchTime(long value) {
      PrepareBuilder();
      result.hasSwitchTime = true;
      result.switchTime_ = value;
      return this;
    }
    public Builder ClearSwitchTime() {
      PrepareBuilder();
      result.hasSwitchTime = false;
      result.switchTime_ = 0L;
      return this;
    }
  }
  static SCEmailChangeNotice() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TitleMsg : pb::GeneratedMessage<TitleMsg, TitleMsg.Builder> {
  private TitleMsg() { }
  private static readonly TitleMsg defaultInstance = new TitleMsg().MakeReadOnly();
  private static readonly string[] _titleMsgFieldNames = new string[] { "active", "deadline", "getTime", "titleId" };
  private static readonly uint[] _titleMsgFieldTags = new uint[] { 32, 16, 24, 8 };
  public static TitleMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TitleMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TitleMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TitleMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TitleMsg, TitleMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TitleMsg__FieldAccessorTable; }
  }
  
  public const int TitleIdFieldNumber = 1;
  private bool hasTitleId;
  private long titleId_;
  public bool HasTitleId {
    get { return hasTitleId; }
  }
  public long TitleId {
    get { return titleId_; }
  }
  
  public const int DeadlineFieldNumber = 2;
  private bool hasDeadline;
  private long deadline_;
  public bool HasDeadline {
    get { return hasDeadline; }
  }
  public long Deadline {
    get { return deadline_; }
  }
  
  public const int GetTimeFieldNumber = 3;
  private bool hasGetTime;
  private long getTime_;
  public bool HasGetTime {
    get { return hasGetTime; }
  }
  public long GetTime {
    get { return getTime_; }
  }
  
  public const int ActiveFieldNumber = 4;
  private bool hasActive;
  private bool active_;
  public bool HasActive {
    get { return hasActive; }
  }
  public bool Active {
    get { return active_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _titleMsgFieldNames;
    if (hasTitleId) {
      output.WriteInt64(1, field_names[3], TitleId);
    }
    if (hasDeadline) {
      output.WriteInt64(2, field_names[1], Deadline);
    }
    if (hasGetTime) {
      output.WriteInt64(3, field_names[2], GetTime);
    }
    if (hasActive) {
      output.WriteBool(4, field_names[0], Active);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTitleId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TitleId);
    }
    if (hasDeadline) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, Deadline);
    }
    if (hasGetTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, GetTime);
    }
    if (hasActive) {
      size += pb::CodedOutputStream.ComputeBoolSize(4, Active);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TitleMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TitleMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TitleMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TitleMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TitleMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TitleMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TitleMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TitleMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TitleMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TitleMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TitleMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TitleMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TitleMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TitleMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TitleMsg result;
    
    private TitleMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        TitleMsg original = result;
        result = new TitleMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TitleMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TitleMsg.Descriptor; }
    }
    
    public override TitleMsg DefaultInstanceForType {
      get { return global::TitleMsg.DefaultInstance; }
    }
    
    public override TitleMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TitleMsg) {
        return MergeFrom((TitleMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TitleMsg other) {
      if (other == global::TitleMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      if (other.HasDeadline) {
        Deadline = other.Deadline;
      }
      if (other.HasGetTime) {
        GetTime = other.GetTime;
      }
      if (other.HasActive) {
        Active = other.Active;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_titleMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _titleMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTitleId = input.ReadInt64(ref result.titleId_);
            break;
          }
          case 16: {
            result.hasDeadline = input.ReadInt64(ref result.deadline_);
            break;
          }
          case 24: {
            result.hasGetTime = input.ReadInt64(ref result.getTime_);
            break;
          }
          case 32: {
            result.hasActive = input.ReadBool(ref result.active_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTitleId {
      get { return result.hasTitleId; }
    }
    public long TitleId {
      get { return result.TitleId; }
      set { SetTitleId(value); }
    }
    public Builder SetTitleId(long value) {
      PrepareBuilder();
      result.hasTitleId = true;
      result.titleId_ = value;
      return this;
    }
    public Builder ClearTitleId() {
      PrepareBuilder();
      result.hasTitleId = false;
      result.titleId_ = 0L;
      return this;
    }
    
    public bool HasDeadline {
      get { return result.hasDeadline; }
    }
    public long Deadline {
      get { return result.Deadline; }
      set { SetDeadline(value); }
    }
    public Builder SetDeadline(long value) {
      PrepareBuilder();
      result.hasDeadline = true;
      result.deadline_ = value;
      return this;
    }
    public Builder ClearDeadline() {
      PrepareBuilder();
      result.hasDeadline = false;
      result.deadline_ = 0L;
      return this;
    }
    
    public bool HasGetTime {
      get { return result.hasGetTime; }
    }
    public long GetTime {
      get { return result.GetTime; }
      set { SetGetTime(value); }
    }
    public Builder SetGetTime(long value) {
      PrepareBuilder();
      result.hasGetTime = true;
      result.getTime_ = value;
      return this;
    }
    public Builder ClearGetTime() {
      PrepareBuilder();
      result.hasGetTime = false;
      result.getTime_ = 0L;
      return this;
    }
    
    public bool HasActive {
      get { return result.hasActive; }
    }
    public bool Active {
      get { return result.Active; }
      set { SetActive(value); }
    }
    public Builder SetActive(bool value) {
      PrepareBuilder();
      result.hasActive = true;
      result.active_ = value;
      return this;
    }
    public Builder ClearActive() {
      PrepareBuilder();
      result.hasActive = false;
      result.active_ = false;
      return this;
    }
  }
  static TitleMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTitleRequest : pb::GeneratedMessage<CSTitleRequest, CSTitleRequest.Builder> {
  private CSTitleRequest() { }
  private static readonly CSTitleRequest defaultInstance = new CSTitleRequest().MakeReadOnly();
  private static readonly string[] _cSTitleRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSTitleRequestFieldTags = new uint[] {  };
  public static CSTitleRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTitleRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTitleRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTitleRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTitleRequest, CSTitleRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTitleRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTitleRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTitleRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTitleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTitleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTitleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTitleRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTitleRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTitleRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTitleRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTitleRequest result;
    
    private CSTitleRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTitleRequest original = result;
        result = new CSTitleRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTitleRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTitleRequest.Descriptor; }
    }
    
    public override CSTitleRequest DefaultInstanceForType {
      get { return global::CSTitleRequest.DefaultInstance; }
    }
    
    public override CSTitleRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTitleRequest) {
        return MergeFrom((CSTitleRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTitleRequest other) {
      if (other == global::CSTitleRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTitleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTitleRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSTitleRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTitleResponse : pb::GeneratedMessage<SCTitleResponse, SCTitleResponse.Builder> {
  private SCTitleResponse() { }
  private static readonly SCTitleResponse defaultInstance = new SCTitleResponse().MakeReadOnly();
  private static readonly string[] _sCTitleResponseFieldNames = new string[] { "status", "titles" };
  private static readonly uint[] _sCTitleResponseFieldTags = new uint[] { 10, 18 };
  public static SCTitleResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTitleResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTitleResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTitleResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTitleResponse, SCTitleResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTitleResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int TitlesFieldNumber = 2;
  private pbc::PopsicleList<global::TitleMsg> titles_ = new pbc::PopsicleList<global::TitleMsg>();
  public scg::IList<global::TitleMsg> TitlesList {
    get { return titles_; }
  }
  public int TitlesCount {
    get { return titles_.Count; }
  }
  public global::TitleMsg GetTitles(int index) {
    return titles_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTitleResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    if (titles_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], titles_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    foreach (global::TitleMsg element in TitlesList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTitleResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTitleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTitleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTitleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTitleResponse MakeReadOnly() {
    titles_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTitleResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTitleResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTitleResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTitleResponse result;
    
    private SCTitleResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTitleResponse original = result;
        result = new SCTitleResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTitleResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTitleResponse.Descriptor; }
    }
    
    public override SCTitleResponse DefaultInstanceForType {
      get { return global::SCTitleResponse.DefaultInstance; }
    }
    
    public override SCTitleResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTitleResponse) {
        return MergeFrom((SCTitleResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTitleResponse other) {
      if (other == global::SCTitleResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.titles_.Count != 0) {
        result.titles_.Add(other.titles_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTitleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTitleResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.titles_, global::TitleMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::TitleMsg> TitlesList {
      get { return PrepareBuilder().titles_; }
    }
    public int TitlesCount {
      get { return result.TitlesCount; }
    }
    public global::TitleMsg GetTitles(int index) {
      return result.GetTitles(index);
    }
    public Builder SetTitles(int index, global::TitleMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.titles_[index] = value;
      return this;
    }
    public Builder SetTitles(int index, global::TitleMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.titles_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTitles(global::TitleMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.titles_.Add(value);
      return this;
    }
    public Builder AddTitles(global::TitleMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.titles_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTitles(scg::IEnumerable<global::TitleMsg> values) {
      PrepareBuilder();
      result.titles_.Add(values);
      return this;
    }
    public Builder ClearTitles() {
      PrepareBuilder();
      result.titles_.Clear();
      return this;
    }
  }
  static SCTitleResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTitleActiveRequest : pb::GeneratedMessage<CSTitleActiveRequest, CSTitleActiveRequest.Builder> {
  private CSTitleActiveRequest() { }
  private static readonly CSTitleActiveRequest defaultInstance = new CSTitleActiveRequest().MakeReadOnly();
  private static readonly string[] _cSTitleActiveRequestFieldNames = new string[] { "titleId" };
  private static readonly uint[] _cSTitleActiveRequestFieldTags = new uint[] { 8 };
  public static CSTitleActiveRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTitleActiveRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTitleActiveRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTitleActiveRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTitleActiveRequest, CSTitleActiveRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTitleActiveRequest__FieldAccessorTable; }
  }
  
  public const int TitleIdFieldNumber = 1;
  private bool hasTitleId;
  private long titleId_;
  public bool HasTitleId {
    get { return hasTitleId; }
  }
  public long TitleId {
    get { return titleId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTitleActiveRequestFieldNames;
    if (hasTitleId) {
      output.WriteInt64(1, field_names[0], TitleId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTitleId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TitleId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTitleActiveRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTitleActiveRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTitleActiveRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTitleActiveRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTitleActiveRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTitleActiveRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTitleActiveRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTitleActiveRequest result;
    
    private CSTitleActiveRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTitleActiveRequest original = result;
        result = new CSTitleActiveRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTitleActiveRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTitleActiveRequest.Descriptor; }
    }
    
    public override CSTitleActiveRequest DefaultInstanceForType {
      get { return global::CSTitleActiveRequest.DefaultInstance; }
    }
    
    public override CSTitleActiveRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTitleActiveRequest) {
        return MergeFrom((CSTitleActiveRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTitleActiveRequest other) {
      if (other == global::CSTitleActiveRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTitleActiveRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTitleActiveRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTitleId = input.ReadInt64(ref result.titleId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTitleId {
      get { return result.hasTitleId; }
    }
    public long TitleId {
      get { return result.TitleId; }
      set { SetTitleId(value); }
    }
    public Builder SetTitleId(long value) {
      PrepareBuilder();
      result.hasTitleId = true;
      result.titleId_ = value;
      return this;
    }
    public Builder ClearTitleId() {
      PrepareBuilder();
      result.hasTitleId = false;
      result.titleId_ = 0L;
      return this;
    }
  }
  static CSTitleActiveRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTitleActiveResponse : pb::GeneratedMessage<SCTitleActiveResponse, SCTitleActiveResponse.Builder> {
  private SCTitleActiveResponse() { }
  private static readonly SCTitleActiveResponse defaultInstance = new SCTitleActiveResponse().MakeReadOnly();
  private static readonly string[] _sCTitleActiveResponseFieldNames = new string[] { "status", "title" };
  private static readonly uint[] _sCTitleActiveResponseFieldTags = new uint[] { 10, 18 };
  public static SCTitleActiveResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTitleActiveResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTitleActiveResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTitleActiveResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTitleActiveResponse, SCTitleActiveResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTitleActiveResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int TitleFieldNumber = 2;
  private bool hasTitle;
  private global::TitleMsg title_;
  public bool HasTitle {
    get { return hasTitle; }
  }
  public global::TitleMsg Title {
    get { return title_ ?? global::TitleMsg.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTitleActiveResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    if (hasTitle) {
      output.WriteMessage(2, field_names[1], Title);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasTitle) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Title);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTitleActiveResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTitleActiveResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTitleActiveResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTitleActiveResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTitleActiveResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTitleActiveResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTitleActiveResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTitleActiveResponse result;
    
    private SCTitleActiveResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTitleActiveResponse original = result;
        result = new SCTitleActiveResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTitleActiveResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTitleActiveResponse.Descriptor; }
    }
    
    public override SCTitleActiveResponse DefaultInstanceForType {
      get { return global::SCTitleActiveResponse.DefaultInstance; }
    }
    
    public override SCTitleActiveResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTitleActiveResponse) {
        return MergeFrom((SCTitleActiveResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTitleActiveResponse other) {
      if (other == global::SCTitleActiveResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasTitle) {
        MergeTitle(other.Title);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTitleActiveResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTitleActiveResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::TitleMsg.Builder subBuilder = global::TitleMsg.CreateBuilder();
            if (result.hasTitle) {
              subBuilder.MergeFrom(Title);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Title = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasTitle {
     get { return result.hasTitle; }
    }
    public global::TitleMsg Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(global::TitleMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder SetTitle(global::TitleMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTitle(global::TitleMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTitle &&
          result.title_ != global::TitleMsg.DefaultInstance) {
          result.title_ = global::TitleMsg.CreateBuilder(result.title_).MergeFrom(value).BuildPartial();
      } else {
        result.title_ = value;
      }
      result.hasTitle = true;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = null;
      return this;
    }
  }
  static SCTitleActiveResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSTitleGetRequest : pb::GeneratedMessage<CSTitleGetRequest, CSTitleGetRequest.Builder> {
  private CSTitleGetRequest() { }
  private static readonly CSTitleGetRequest defaultInstance = new CSTitleGetRequest().MakeReadOnly();
  private static readonly string[] _cSTitleGetRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSTitleGetRequestFieldTags = new uint[] {  };
  public static CSTitleGetRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSTitleGetRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSTitleGetRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSTitleGetRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSTitleGetRequest, CSTitleGetRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSTitleGetRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSTitleGetRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSTitleGetRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSTitleGetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSTitleGetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSTitleGetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSTitleGetRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSTitleGetRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSTitleGetRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSTitleGetRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSTitleGetRequest result;
    
    private CSTitleGetRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSTitleGetRequest original = result;
        result = new CSTitleGetRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSTitleGetRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSTitleGetRequest.Descriptor; }
    }
    
    public override CSTitleGetRequest DefaultInstanceForType {
      get { return global::CSTitleGetRequest.DefaultInstance; }
    }
    
    public override CSTitleGetRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSTitleGetRequest) {
        return MergeFrom((CSTitleGetRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSTitleGetRequest other) {
      if (other == global::CSTitleGetRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSTitleGetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSTitleGetRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSTitleGetRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCTitleGetResponse : pb::GeneratedMessage<SCTitleGetResponse, SCTitleGetResponse.Builder> {
  private SCTitleGetResponse() { }
  private static readonly SCTitleGetResponse defaultInstance = new SCTitleGetResponse().MakeReadOnly();
  private static readonly string[] _sCTitleGetResponseFieldNames = new string[] { "status", "title" };
  private static readonly uint[] _sCTitleGetResponseFieldTags = new uint[] { 10, 18 };
  public static SCTitleGetResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCTitleGetResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCTitleGetResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCTitleGetResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCTitleGetResponse, SCTitleGetResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCTitleGetResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int TitleFieldNumber = 2;
  private bool hasTitle;
  private global::TitleMsg title_;
  public bool HasTitle {
    get { return hasTitle; }
  }
  public global::TitleMsg Title {
    get { return title_ ?? global::TitleMsg.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCTitleGetResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    if (hasTitle) {
      output.WriteMessage(2, field_names[1], Title);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasTitle) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Title);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCTitleGetResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCTitleGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCTitleGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCTitleGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCTitleGetResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCTitleGetResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCTitleGetResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCTitleGetResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCTitleGetResponse result;
    
    private SCTitleGetResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCTitleGetResponse original = result;
        result = new SCTitleGetResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCTitleGetResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCTitleGetResponse.Descriptor; }
    }
    
    public override SCTitleGetResponse DefaultInstanceForType {
      get { return global::SCTitleGetResponse.DefaultInstance; }
    }
    
    public override SCTitleGetResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCTitleGetResponse) {
        return MergeFrom((SCTitleGetResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCTitleGetResponse other) {
      if (other == global::SCTitleGetResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasTitle) {
        MergeTitle(other.Title);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCTitleGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCTitleGetResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::TitleMsg.Builder subBuilder = global::TitleMsg.CreateBuilder();
            if (result.hasTitle) {
              subBuilder.MergeFrom(Title);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Title = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasTitle {
     get { return result.hasTitle; }
    }
    public global::TitleMsg Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(global::TitleMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder SetTitle(global::TitleMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTitle(global::TitleMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTitle &&
          result.title_ != global::TitleMsg.DefaultInstance) {
          result.title_ = global::TitleMsg.CreateBuilder(result.title_).MergeFrom(value).BuildPartial();
      } else {
        result.title_ = value;
      }
      result.hasTitle = true;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = null;
      return this;
    }
  }
  static SCTitleGetResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerFriendMsg : pb::GeneratedMessage<PlayerFriendMsg, PlayerFriendMsg.Builder> {
  private PlayerFriendMsg() { }
  private static readonly PlayerFriendMsg defaultInstance = new PlayerFriendMsg().MakeReadOnly();
  private static readonly string[] _playerFriendMsgFieldNames = new string[] { "gender", "gift", "icon", "level", "name", "playerId", "statusTime", "titleId" };
  private static readonly uint[] _playerFriendMsgFieldTags = new uint[] { 32, 56, 42, 24, 18, 8, 64, 48 };
  public static PlayerFriendMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerFriendMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerFriendMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PlayerFriendMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerFriendMsg, PlayerFriendMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PlayerFriendMsg__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int LevelFieldNumber = 3;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int GenderFieldNumber = 4;
  private bool hasGender;
  private int gender_;
  public bool HasGender {
    get { return hasGender; }
  }
  public int Gender {
    get { return gender_; }
  }
  
  public const int IconFieldNumber = 5;
  private bool hasIcon;
  private string icon_ = "";
  public bool HasIcon {
    get { return hasIcon; }
  }
  public string Icon {
    get { return icon_; }
  }
  
  public const int TitleIdFieldNumber = 6;
  private bool hasTitleId;
  private long titleId_;
  public bool HasTitleId {
    get { return hasTitleId; }
  }
  public long TitleId {
    get { return titleId_; }
  }
  
  public const int GiftFieldNumber = 7;
  private bool hasGift;
  private bool gift_;
  public bool HasGift {
    get { return hasGift; }
  }
  public bool Gift {
    get { return gift_; }
  }
  
  public const int StatusTimeFieldNumber = 8;
  private bool hasStatusTime;
  private long statusTime_;
  public bool HasStatusTime {
    get { return hasStatusTime; }
  }
  public long StatusTime {
    get { return statusTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerFriendMsgFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[5], PlayerId);
    }
    if (hasName) {
      output.WriteString(2, field_names[4], Name);
    }
    if (hasLevel) {
      output.WriteInt32(3, field_names[3], Level);
    }
    if (hasGender) {
      output.WriteInt32(4, field_names[0], Gender);
    }
    if (hasIcon) {
      output.WriteString(5, field_names[2], Icon);
    }
    if (hasTitleId) {
      output.WriteInt64(6, field_names[7], TitleId);
    }
    if (hasGift) {
      output.WriteBool(7, field_names[1], Gift);
    }
    if (hasStatusTime) {
      output.WriteInt64(8, field_names[6], StatusTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Name);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Level);
    }
    if (hasGender) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Gender);
    }
    if (hasIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Icon);
    }
    if (hasTitleId) {
      size += pb::CodedOutputStream.ComputeInt64Size(6, TitleId);
    }
    if (hasGift) {
      size += pb::CodedOutputStream.ComputeBoolSize(7, Gift);
    }
    if (hasStatusTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(8, StatusTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerFriendMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerFriendMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerFriendMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerFriendMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerFriendMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerFriendMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerFriendMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerFriendMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerFriendMsg result;
    
    private PlayerFriendMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerFriendMsg original = result;
        result = new PlayerFriendMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerFriendMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerFriendMsg.Descriptor; }
    }
    
    public override PlayerFriendMsg DefaultInstanceForType {
      get { return global::PlayerFriendMsg.DefaultInstance; }
    }
    
    public override PlayerFriendMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerFriendMsg) {
        return MergeFrom((PlayerFriendMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerFriendMsg other) {
      if (other == global::PlayerFriendMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasGender) {
        Gender = other.Gender;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      if (other.HasTitleId) {
        TitleId = other.TitleId;
      }
      if (other.HasGift) {
        Gift = other.Gift;
      }
      if (other.HasStatusTime) {
        StatusTime = other.StatusTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerFriendMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerFriendMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 24: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 32: {
            result.hasGender = input.ReadInt32(ref result.gender_);
            break;
          }
          case 42: {
            result.hasIcon = input.ReadString(ref result.icon_);
            break;
          }
          case 48: {
            result.hasTitleId = input.ReadInt64(ref result.titleId_);
            break;
          }
          case 56: {
            result.hasGift = input.ReadBool(ref result.gift_);
            break;
          }
          case 64: {
            result.hasStatusTime = input.ReadInt64(ref result.statusTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasGender {
      get { return result.hasGender; }
    }
    public int Gender {
      get { return result.Gender; }
      set { SetGender(value); }
    }
    public Builder SetGender(int value) {
      PrepareBuilder();
      result.hasGender = true;
      result.gender_ = value;
      return this;
    }
    public Builder ClearGender() {
      PrepareBuilder();
      result.hasGender = false;
      result.gender_ = 0;
      return this;
    }
    
    public bool HasIcon {
      get { return result.hasIcon; }
    }
    public string Icon {
      get { return result.Icon; }
      set { SetIcon(value); }
    }
    public Builder SetIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIcon = true;
      result.icon_ = value;
      return this;
    }
    public Builder ClearIcon() {
      PrepareBuilder();
      result.hasIcon = false;
      result.icon_ = "";
      return this;
    }
    
    public bool HasTitleId {
      get { return result.hasTitleId; }
    }
    public long TitleId {
      get { return result.TitleId; }
      set { SetTitleId(value); }
    }
    public Builder SetTitleId(long value) {
      PrepareBuilder();
      result.hasTitleId = true;
      result.titleId_ = value;
      return this;
    }
    public Builder ClearTitleId() {
      PrepareBuilder();
      result.hasTitleId = false;
      result.titleId_ = 0L;
      return this;
    }
    
    public bool HasGift {
      get { return result.hasGift; }
    }
    public bool Gift {
      get { return result.Gift; }
      set { SetGift(value); }
    }
    public Builder SetGift(bool value) {
      PrepareBuilder();
      result.hasGift = true;
      result.gift_ = value;
      return this;
    }
    public Builder ClearGift() {
      PrepareBuilder();
      result.hasGift = false;
      result.gift_ = false;
      return this;
    }
    
    public bool HasStatusTime {
      get { return result.hasStatusTime; }
    }
    public long StatusTime {
      get { return result.StatusTime; }
      set { SetStatusTime(value); }
    }
    public Builder SetStatusTime(long value) {
      PrepareBuilder();
      result.hasStatusTime = true;
      result.statusTime_ = value;
      return this;
    }
    public Builder ClearStatusTime() {
      PrepareBuilder();
      result.hasStatusTime = false;
      result.statusTime_ = 0L;
      return this;
    }
  }
  static PlayerFriendMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendRequest : pb::GeneratedMessage<CSFriendRequest, CSFriendRequest.Builder> {
  private CSFriendRequest() { }
  private static readonly CSFriendRequest defaultInstance = new CSFriendRequest().MakeReadOnly();
  private static readonly string[] _cSFriendRequestFieldNames = new string[] { "type" };
  private static readonly uint[] _cSFriendRequestFieldTags = new uint[] { 8 };
  public static CSFriendRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendRequest, CSFriendRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendRequest__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private global::FriendReqType type_ = global::FriendReqType.APPLYING;
  public bool HasType {
    get { return hasType; }
  }
  public global::FriendReqType Type {
    get { return type_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendRequestFieldNames;
    if (hasType) {
      output.WriteEnum(1, field_names[0], (int) Type, Type);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendRequest result;
    
    private CSFriendRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendRequest original = result;
        result = new CSFriendRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendRequest.Descriptor; }
    }
    
    public override CSFriendRequest DefaultInstanceForType {
      get { return global::CSFriendRequest.DefaultInstance; }
    }
    
    public override CSFriendRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendRequest) {
        return MergeFrom((CSFriendRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendRequest other) {
      if (other == global::CSFriendRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::FriendReqType Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::FriendReqType value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::FriendReqType.APPLYING;
      return this;
    }
  }
  static CSFriendRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendResponse : pb::GeneratedMessage<SCFriendResponse, SCFriendResponse.Builder> {
  private SCFriendResponse() { }
  private static readonly SCFriendResponse defaultInstance = new SCFriendResponse().MakeReadOnly();
  private static readonly string[] _sCFriendResponseFieldNames = new string[] { "Type", "addSwitch", "friends", "giftCountLeft", "lastAgree", "limit", "status", "total" };
  private static readonly uint[] _sCFriendResponseFieldTags = new uint[] { 48, 64, 18, 40, 56, 24, 10, 32 };
  public static SCFriendResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendResponse, SCFriendResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int FriendsFieldNumber = 2;
  private pbc::PopsicleList<global::PlayerFriendMsg> friends_ = new pbc::PopsicleList<global::PlayerFriendMsg>();
  public scg::IList<global::PlayerFriendMsg> FriendsList {
    get { return friends_; }
  }
  public int FriendsCount {
    get { return friends_.Count; }
  }
  public global::PlayerFriendMsg GetFriends(int index) {
    return friends_[index];
  }
  
  public const int LimitFieldNumber = 3;
  private bool hasLimit;
  private int limit_;
  public bool HasLimit {
    get { return hasLimit; }
  }
  public int Limit {
    get { return limit_; }
  }
  
  public const int TotalFieldNumber = 4;
  private bool hasTotal;
  private int total_;
  public bool HasTotal {
    get { return hasTotal; }
  }
  public int Total {
    get { return total_; }
  }
  
  public const int GiftCountLeftFieldNumber = 5;
  private bool hasGiftCountLeft;
  private int giftCountLeft_;
  public bool HasGiftCountLeft {
    get { return hasGiftCountLeft; }
  }
  public int GiftCountLeft {
    get { return giftCountLeft_; }
  }
  
  public const int TypeFieldNumber = 6;
  private bool hasType;
  private global::FriendReqType type_ = global::FriendReqType.APPLYING;
  public bool HasType {
    get { return hasType; }
  }
  public global::FriendReqType Type {
    get { return type_; }
  }
  
  public const int LastAgreeFieldNumber = 7;
  private bool hasLastAgree;
  private bool lastAgree_;
  public bool HasLastAgree {
    get { return hasLastAgree; }
  }
  public bool LastAgree {
    get { return lastAgree_; }
  }
  
  public const int AddSwitchFieldNumber = 8;
  private bool hasAddSwitch;
  private bool addSwitch_;
  public bool HasAddSwitch {
    get { return hasAddSwitch; }
  }
  public bool AddSwitch {
    get { return addSwitch_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[6], Status);
    }
    if (friends_.Count > 0) {
      output.WriteMessageArray(2, field_names[2], friends_);
    }
    if (hasLimit) {
      output.WriteInt32(3, field_names[5], Limit);
    }
    if (hasTotal) {
      output.WriteInt32(4, field_names[7], Total);
    }
    if (hasGiftCountLeft) {
      output.WriteInt32(5, field_names[3], GiftCountLeft);
    }
    if (hasType) {
      output.WriteEnum(6, field_names[0], (int) Type, Type);
    }
    if (hasLastAgree) {
      output.WriteBool(7, field_names[4], LastAgree);
    }
    if (hasAddSwitch) {
      output.WriteBool(8, field_names[1], AddSwitch);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    foreach (global::PlayerFriendMsg element in FriendsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasLimit) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Limit);
    }
    if (hasTotal) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Total);
    }
    if (hasGiftCountLeft) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, GiftCountLeft);
    }
    if (hasType) {
      size += pb::CodedOutputStream.ComputeEnumSize(6, (int) Type);
    }
    if (hasLastAgree) {
      size += pb::CodedOutputStream.ComputeBoolSize(7, LastAgree);
    }
    if (hasAddSwitch) {
      size += pb::CodedOutputStream.ComputeBoolSize(8, AddSwitch);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendResponse MakeReadOnly() {
    friends_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendResponse result;
    
    private SCFriendResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendResponse original = result;
        result = new SCFriendResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendResponse.Descriptor; }
    }
    
    public override SCFriendResponse DefaultInstanceForType {
      get { return global::SCFriendResponse.DefaultInstance; }
    }
    
    public override SCFriendResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendResponse) {
        return MergeFrom((SCFriendResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendResponse other) {
      if (other == global::SCFriendResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.friends_.Count != 0) {
        result.friends_.Add(other.friends_);
      }
      if (other.HasLimit) {
        Limit = other.Limit;
      }
      if (other.HasTotal) {
        Total = other.Total;
      }
      if (other.HasGiftCountLeft) {
        GiftCountLeft = other.GiftCountLeft;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasLastAgree) {
        LastAgree = other.LastAgree;
      }
      if (other.HasAddSwitch) {
        AddSwitch = other.AddSwitch;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.friends_, global::PlayerFriendMsg.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasLimit = input.ReadInt32(ref result.limit_);
            break;
          }
          case 32: {
            result.hasTotal = input.ReadInt32(ref result.total_);
            break;
          }
          case 40: {
            result.hasGiftCountLeft = input.ReadInt32(ref result.giftCountLeft_);
            break;
          }
          case 48: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(6, (ulong)(int)unknown);
            }
            break;
          }
          case 56: {
            result.hasLastAgree = input.ReadBool(ref result.lastAgree_);
            break;
          }
          case 64: {
            result.hasAddSwitch = input.ReadBool(ref result.addSwitch_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerFriendMsg> FriendsList {
      get { return PrepareBuilder().friends_; }
    }
    public int FriendsCount {
      get { return result.FriendsCount; }
    }
    public global::PlayerFriendMsg GetFriends(int index) {
      return result.GetFriends(index);
    }
    public Builder SetFriends(int index, global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.friends_[index] = value;
      return this;
    }
    public Builder SetFriends(int index, global::PlayerFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.friends_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddFriends(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.friends_.Add(value);
      return this;
    }
    public Builder AddFriends(global::PlayerFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.friends_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeFriends(scg::IEnumerable<global::PlayerFriendMsg> values) {
      PrepareBuilder();
      result.friends_.Add(values);
      return this;
    }
    public Builder ClearFriends() {
      PrepareBuilder();
      result.friends_.Clear();
      return this;
    }
    
    public bool HasLimit {
      get { return result.hasLimit; }
    }
    public int Limit {
      get { return result.Limit; }
      set { SetLimit(value); }
    }
    public Builder SetLimit(int value) {
      PrepareBuilder();
      result.hasLimit = true;
      result.limit_ = value;
      return this;
    }
    public Builder ClearLimit() {
      PrepareBuilder();
      result.hasLimit = false;
      result.limit_ = 0;
      return this;
    }
    
    public bool HasTotal {
      get { return result.hasTotal; }
    }
    public int Total {
      get { return result.Total; }
      set { SetTotal(value); }
    }
    public Builder SetTotal(int value) {
      PrepareBuilder();
      result.hasTotal = true;
      result.total_ = value;
      return this;
    }
    public Builder ClearTotal() {
      PrepareBuilder();
      result.hasTotal = false;
      result.total_ = 0;
      return this;
    }
    
    public bool HasGiftCountLeft {
      get { return result.hasGiftCountLeft; }
    }
    public int GiftCountLeft {
      get { return result.GiftCountLeft; }
      set { SetGiftCountLeft(value); }
    }
    public Builder SetGiftCountLeft(int value) {
      PrepareBuilder();
      result.hasGiftCountLeft = true;
      result.giftCountLeft_ = value;
      return this;
    }
    public Builder ClearGiftCountLeft() {
      PrepareBuilder();
      result.hasGiftCountLeft = false;
      result.giftCountLeft_ = 0;
      return this;
    }
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::FriendReqType Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::FriendReqType value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::FriendReqType.APPLYING;
      return this;
    }
    
    public bool HasLastAgree {
      get { return result.hasLastAgree; }
    }
    public bool LastAgree {
      get { return result.LastAgree; }
      set { SetLastAgree(value); }
    }
    public Builder SetLastAgree(bool value) {
      PrepareBuilder();
      result.hasLastAgree = true;
      result.lastAgree_ = value;
      return this;
    }
    public Builder ClearLastAgree() {
      PrepareBuilder();
      result.hasLastAgree = false;
      result.lastAgree_ = false;
      return this;
    }
    
    public bool HasAddSwitch {
      get { return result.hasAddSwitch; }
    }
    public bool AddSwitch {
      get { return result.AddSwitch; }
      set { SetAddSwitch(value); }
    }
    public Builder SetAddSwitch(bool value) {
      PrepareBuilder();
      result.hasAddSwitch = true;
      result.addSwitch_ = value;
      return this;
    }
    public Builder ClearAddSwitch() {
      PrepareBuilder();
      result.hasAddSwitch = false;
      result.addSwitch_ = false;
      return this;
    }
  }
  static SCFriendResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendAddRequest : pb::GeneratedMessage<CSFriendAddRequest, CSFriendAddRequest.Builder> {
  private CSFriendAddRequest() { }
  private static readonly CSFriendAddRequest defaultInstance = new CSFriendAddRequest().MakeReadOnly();
  private static readonly string[] _cSFriendAddRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSFriendAddRequestFieldTags = new uint[] { 8 };
  public static CSFriendAddRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendAddRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendAddRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendAddRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendAddRequest, CSFriendAddRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendAddRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendAddRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendAddRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendAddRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendAddRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendAddRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendAddRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendAddRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendAddRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendAddRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendAddRequest result;
    
    private CSFriendAddRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendAddRequest original = result;
        result = new CSFriendAddRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendAddRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendAddRequest.Descriptor; }
    }
    
    public override CSFriendAddRequest DefaultInstanceForType {
      get { return global::CSFriendAddRequest.DefaultInstance; }
    }
    
    public override CSFriendAddRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendAddRequest) {
        return MergeFrom((CSFriendAddRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendAddRequest other) {
      if (other == global::CSFriendAddRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendAddRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendAddRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSFriendAddRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendAddResponse : pb::GeneratedMessage<SCFriendAddResponse, SCFriendAddResponse.Builder> {
  private SCFriendAddResponse() { }
  private static readonly SCFriendAddResponse defaultInstance = new SCFriendAddResponse().MakeReadOnly();
  private static readonly string[] _sCFriendAddResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCFriendAddResponseFieldTags = new uint[] { 10 };
  public static SCFriendAddResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendAddResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendAddResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendAddResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendAddResponse, SCFriendAddResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendAddResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendAddResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendAddResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendAddResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendAddResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendAddResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendAddResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendAddResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendAddResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendAddResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendAddResponse result;
    
    private SCFriendAddResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendAddResponse original = result;
        result = new SCFriendAddResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendAddResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendAddResponse.Descriptor; }
    }
    
    public override SCFriendAddResponse DefaultInstanceForType {
      get { return global::SCFriendAddResponse.DefaultInstance; }
    }
    
    public override SCFriendAddResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendAddResponse) {
        return MergeFrom((SCFriendAddResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendAddResponse other) {
      if (other == global::SCFriendAddResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendAddResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendAddResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCFriendAddResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendDelRequest : pb::GeneratedMessage<CSFriendDelRequest, CSFriendDelRequest.Builder> {
  private CSFriendDelRequest() { }
  private static readonly CSFriendDelRequest defaultInstance = new CSFriendDelRequest().MakeReadOnly();
  private static readonly string[] _cSFriendDelRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSFriendDelRequestFieldTags = new uint[] { 8 };
  public static CSFriendDelRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendDelRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendDelRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendDelRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendDelRequest, CSFriendDelRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendDelRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendDelRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendDelRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendDelRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendDelRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendDelRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendDelRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendDelRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendDelRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendDelRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendDelRequest result;
    
    private CSFriendDelRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendDelRequest original = result;
        result = new CSFriendDelRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendDelRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendDelRequest.Descriptor; }
    }
    
    public override CSFriendDelRequest DefaultInstanceForType {
      get { return global::CSFriendDelRequest.DefaultInstance; }
    }
    
    public override CSFriendDelRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendDelRequest) {
        return MergeFrom((CSFriendDelRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendDelRequest other) {
      if (other == global::CSFriendDelRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendDelRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendDelRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSFriendDelRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendDelResponse : pb::GeneratedMessage<SCFriendDelResponse, SCFriendDelResponse.Builder> {
  private SCFriendDelResponse() { }
  private static readonly SCFriendDelResponse defaultInstance = new SCFriendDelResponse().MakeReadOnly();
  private static readonly string[] _sCFriendDelResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCFriendDelResponseFieldTags = new uint[] { 10 };
  public static SCFriendDelResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendDelResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendDelResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendDelResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendDelResponse, SCFriendDelResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendDelResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendDelResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendDelResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendDelResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendDelResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendDelResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendDelResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendDelResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendDelResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendDelResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendDelResponse result;
    
    private SCFriendDelResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendDelResponse original = result;
        result = new SCFriendDelResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendDelResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendDelResponse.Descriptor; }
    }
    
    public override SCFriendDelResponse DefaultInstanceForType {
      get { return global::SCFriendDelResponse.DefaultInstance; }
    }
    
    public override SCFriendDelResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendDelResponse) {
        return MergeFrom((SCFriendDelResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendDelResponse other) {
      if (other == global::SCFriendDelResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendDelResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendDelResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCFriendDelResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendAgreeRequest : pb::GeneratedMessage<CSFriendAgreeRequest, CSFriendAgreeRequest.Builder> {
  private CSFriendAgreeRequest() { }
  private static readonly CSFriendAgreeRequest defaultInstance = new CSFriendAgreeRequest().MakeReadOnly();
  private static readonly string[] _cSFriendAgreeRequestFieldNames = new string[] { "playerId" };
  private static readonly uint[] _cSFriendAgreeRequestFieldTags = new uint[] { 8 };
  public static CSFriendAgreeRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendAgreeRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendAgreeRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendAgreeRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendAgreeRequest, CSFriendAgreeRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendAgreeRequest__FieldAccessorTable; }
  }
  
  public const int PlayerIdFieldNumber = 1;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendAgreeRequestFieldNames;
    if (hasPlayerId) {
      output.WriteInt64(1, field_names[0], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendAgreeRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendAgreeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendAgreeRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendAgreeRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendAgreeRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendAgreeRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendAgreeRequest result;
    
    private CSFriendAgreeRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendAgreeRequest original = result;
        result = new CSFriendAgreeRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendAgreeRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendAgreeRequest.Descriptor; }
    }
    
    public override CSFriendAgreeRequest DefaultInstanceForType {
      get { return global::CSFriendAgreeRequest.DefaultInstance; }
    }
    
    public override CSFriendAgreeRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendAgreeRequest) {
        return MergeFrom((CSFriendAgreeRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendAgreeRequest other) {
      if (other == global::CSFriendAgreeRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendAgreeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendAgreeRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSFriendAgreeRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendAgreeResponse : pb::GeneratedMessage<SCFriendAgreeResponse, SCFriendAgreeResponse.Builder> {
  private SCFriendAgreeResponse() { }
  private static readonly SCFriendAgreeResponse defaultInstance = new SCFriendAgreeResponse().MakeReadOnly();
  private static readonly string[] _sCFriendAgreeResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCFriendAgreeResponseFieldTags = new uint[] { 10 };
  public static SCFriendAgreeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendAgreeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendAgreeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendAgreeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendAgreeResponse, SCFriendAgreeResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendAgreeResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendAgreeResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendAgreeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendAgreeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendAgreeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendAgreeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendAgreeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendAgreeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendAgreeResponse result;
    
    private SCFriendAgreeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendAgreeResponse original = result;
        result = new SCFriendAgreeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendAgreeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendAgreeResponse.Descriptor; }
    }
    
    public override SCFriendAgreeResponse DefaultInstanceForType {
      get { return global::SCFriendAgreeResponse.DefaultInstance; }
    }
    
    public override SCFriendAgreeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendAgreeResponse) {
        return MergeFrom((SCFriendAgreeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendAgreeResponse other) {
      if (other == global::SCFriendAgreeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendAgreeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendAgreeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCFriendAgreeResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendDelApplyRequest : pb::GeneratedMessage<CSFriendDelApplyRequest, CSFriendDelApplyRequest.Builder> {
  private CSFriendDelApplyRequest() { }
  private static readonly CSFriendDelApplyRequest defaultInstance = new CSFriendDelApplyRequest().MakeReadOnly();
  private static readonly string[] _cSFriendDelApplyRequestFieldNames = new string[] { "friendId" };
  private static readonly uint[] _cSFriendDelApplyRequestFieldTags = new uint[] { 8 };
  public static CSFriendDelApplyRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendDelApplyRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendDelApplyRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendDelApplyRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendDelApplyRequest, CSFriendDelApplyRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendDelApplyRequest__FieldAccessorTable; }
  }
  
  public const int FriendIdFieldNumber = 1;
  private bool hasFriendId;
  private long friendId_;
  public bool HasFriendId {
    get { return hasFriendId; }
  }
  public long FriendId {
    get { return friendId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendDelApplyRequestFieldNames;
    if (hasFriendId) {
      output.WriteInt64(1, field_names[0], FriendId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFriendId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, FriendId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendDelApplyRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendDelApplyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendDelApplyRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendDelApplyRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendDelApplyRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendDelApplyRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendDelApplyRequest result;
    
    private CSFriendDelApplyRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendDelApplyRequest original = result;
        result = new CSFriendDelApplyRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendDelApplyRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendDelApplyRequest.Descriptor; }
    }
    
    public override CSFriendDelApplyRequest DefaultInstanceForType {
      get { return global::CSFriendDelApplyRequest.DefaultInstance; }
    }
    
    public override CSFriendDelApplyRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendDelApplyRequest) {
        return MergeFrom((CSFriendDelApplyRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendDelApplyRequest other) {
      if (other == global::CSFriendDelApplyRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendDelApplyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendDelApplyRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFriendId = input.ReadInt64(ref result.friendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFriendId {
      get { return result.hasFriendId; }
    }
    public long FriendId {
      get { return result.FriendId; }
      set { SetFriendId(value); }
    }
    public Builder SetFriendId(long value) {
      PrepareBuilder();
      result.hasFriendId = true;
      result.friendId_ = value;
      return this;
    }
    public Builder ClearFriendId() {
      PrepareBuilder();
      result.hasFriendId = false;
      result.friendId_ = 0L;
      return this;
    }
  }
  static CSFriendDelApplyRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendDelApplyResponse : pb::GeneratedMessage<SCFriendDelApplyResponse, SCFriendDelApplyResponse.Builder> {
  private SCFriendDelApplyResponse() { }
  private static readonly SCFriendDelApplyResponse defaultInstance = new SCFriendDelApplyResponse().MakeReadOnly();
  private static readonly string[] _sCFriendDelApplyResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCFriendDelApplyResponseFieldTags = new uint[] { 10 };
  public static SCFriendDelApplyResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendDelApplyResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendDelApplyResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendDelApplyResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendDelApplyResponse, SCFriendDelApplyResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendDelApplyResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendDelApplyResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendDelApplyResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendDelApplyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendDelApplyResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendDelApplyResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendDelApplyResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendDelApplyResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendDelApplyResponse result;
    
    private SCFriendDelApplyResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendDelApplyResponse original = result;
        result = new SCFriendDelApplyResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendDelApplyResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendDelApplyResponse.Descriptor; }
    }
    
    public override SCFriendDelApplyResponse DefaultInstanceForType {
      get { return global::SCFriendDelApplyResponse.DefaultInstance; }
    }
    
    public override SCFriendDelApplyResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendDelApplyResponse) {
        return MergeFrom((SCFriendDelApplyResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendDelApplyResponse other) {
      if (other == global::SCFriendDelApplyResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendDelApplyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendDelApplyResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCFriendDelApplyResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendGiftRequest : pb::GeneratedMessage<CSFriendGiftRequest, CSFriendGiftRequest.Builder> {
  private CSFriendGiftRequest() { }
  private static readonly CSFriendGiftRequest defaultInstance = new CSFriendGiftRequest().MakeReadOnly();
  private static readonly string[] _cSFriendGiftRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSFriendGiftRequestFieldTags = new uint[] {  };
  public static CSFriendGiftRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendGiftRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendGiftRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendGiftRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendGiftRequest, CSFriendGiftRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendGiftRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendGiftRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendGiftRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendGiftRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendGiftRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendGiftRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendGiftRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendGiftRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendGiftRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendGiftRequest result;
    
    private CSFriendGiftRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendGiftRequest original = result;
        result = new CSFriendGiftRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendGiftRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendGiftRequest.Descriptor; }
    }
    
    public override CSFriendGiftRequest DefaultInstanceForType {
      get { return global::CSFriendGiftRequest.DefaultInstance; }
    }
    
    public override CSFriendGiftRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendGiftRequest) {
        return MergeFrom((CSFriendGiftRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendGiftRequest other) {
      if (other == global::CSFriendGiftRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendGiftRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendGiftRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSFriendGiftRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class FriendGift : pb::GeneratedMessage<FriendGift, FriendGift.Builder> {
  private FriendGift() { }
  private static readonly FriendGift defaultInstance = new FriendGift().MakeReadOnly();
  private static readonly string[] _friendGiftFieldNames = new string[] { "giftId", "playPropMsg", "playerFriends" };
  private static readonly uint[] _friendGiftFieldTags = new uint[] { 24, 18, 10 };
  public static FriendGift DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override FriendGift DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override FriendGift ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_FriendGift__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<FriendGift, FriendGift.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_FriendGift__FieldAccessorTable; }
  }
  
  public const int PlayerFriendsFieldNumber = 1;
  private bool hasPlayerFriends;
  private global::PlayerFriendMsg playerFriends_;
  public bool HasPlayerFriends {
    get { return hasPlayerFriends; }
  }
  public global::PlayerFriendMsg PlayerFriends {
    get { return playerFriends_ ?? global::PlayerFriendMsg.DefaultInstance; }
  }
  
  public const int PlayPropMsgFieldNumber = 2;
  private bool hasPlayPropMsg;
  private global::PlayerPropMsg playPropMsg_;
  public bool HasPlayPropMsg {
    get { return hasPlayPropMsg; }
  }
  public global::PlayerPropMsg PlayPropMsg {
    get { return playPropMsg_ ?? global::PlayerPropMsg.DefaultInstance; }
  }
  
  public const int GiftIdFieldNumber = 3;
  private bool hasGiftId;
  private long giftId_;
  public bool HasGiftId {
    get { return hasGiftId; }
  }
  public long GiftId {
    get { return giftId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _friendGiftFieldNames;
    if (hasPlayerFriends) {
      output.WriteMessage(1, field_names[2], PlayerFriends);
    }
    if (hasPlayPropMsg) {
      output.WriteMessage(2, field_names[1], PlayPropMsg);
    }
    if (hasGiftId) {
      output.WriteInt64(3, field_names[0], GiftId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlayerFriends) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, PlayerFriends);
    }
    if (hasPlayPropMsg) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, PlayPropMsg);
    }
    if (hasGiftId) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, GiftId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static FriendGift ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static FriendGift ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static FriendGift ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static FriendGift ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static FriendGift ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static FriendGift ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static FriendGift ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static FriendGift ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static FriendGift ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static FriendGift ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private FriendGift MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(FriendGift prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<FriendGift, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(FriendGift cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private FriendGift result;
    
    private FriendGift PrepareBuilder() {
      if (resultIsReadOnly) {
        FriendGift original = result;
        result = new FriendGift();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override FriendGift MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::FriendGift.Descriptor; }
    }
    
    public override FriendGift DefaultInstanceForType {
      get { return global::FriendGift.DefaultInstance; }
    }
    
    public override FriendGift BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is FriendGift) {
        return MergeFrom((FriendGift) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(FriendGift other) {
      if (other == global::FriendGift.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayerFriends) {
        MergePlayerFriends(other.PlayerFriends);
      }
      if (other.HasPlayPropMsg) {
        MergePlayPropMsg(other.PlayPropMsg);
      }
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_friendGiftFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _friendGiftFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::PlayerFriendMsg.Builder subBuilder = global::PlayerFriendMsg.CreateBuilder();
            if (result.hasPlayerFriends) {
              subBuilder.MergeFrom(PlayerFriends);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerFriends = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::PlayerPropMsg.Builder subBuilder = global::PlayerPropMsg.CreateBuilder();
            if (result.hasPlayPropMsg) {
              subBuilder.MergeFrom(PlayPropMsg);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayPropMsg = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasGiftId = input.ReadInt64(ref result.giftId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayerFriends {
     get { return result.hasPlayerFriends; }
    }
    public global::PlayerFriendMsg PlayerFriends {
      get { return result.PlayerFriends; }
      set { SetPlayerFriends(value); }
    }
    public Builder SetPlayerFriends(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerFriends = true;
      result.playerFriends_ = value;
      return this;
    }
    public Builder SetPlayerFriends(global::PlayerFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerFriends = true;
      result.playerFriends_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerFriends(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerFriends &&
          result.playerFriends_ != global::PlayerFriendMsg.DefaultInstance) {
          result.playerFriends_ = global::PlayerFriendMsg.CreateBuilder(result.playerFriends_).MergeFrom(value).BuildPartial();
      } else {
        result.playerFriends_ = value;
      }
      result.hasPlayerFriends = true;
      return this;
    }
    public Builder ClearPlayerFriends() {
      PrepareBuilder();
      result.hasPlayerFriends = false;
      result.playerFriends_ = null;
      return this;
    }
    
    public bool HasPlayPropMsg {
     get { return result.hasPlayPropMsg; }
    }
    public global::PlayerPropMsg PlayPropMsg {
      get { return result.PlayPropMsg; }
      set { SetPlayPropMsg(value); }
    }
    public Builder SetPlayPropMsg(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayPropMsg = true;
      result.playPropMsg_ = value;
      return this;
    }
    public Builder SetPlayPropMsg(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayPropMsg = true;
      result.playPropMsg_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayPropMsg(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayPropMsg &&
          result.playPropMsg_ != global::PlayerPropMsg.DefaultInstance) {
          result.playPropMsg_ = global::PlayerPropMsg.CreateBuilder(result.playPropMsg_).MergeFrom(value).BuildPartial();
      } else {
        result.playPropMsg_ = value;
      }
      result.hasPlayPropMsg = true;
      return this;
    }
    public Builder ClearPlayPropMsg() {
      PrepareBuilder();
      result.hasPlayPropMsg = false;
      result.playPropMsg_ = null;
      return this;
    }
    
    public bool HasGiftId {
      get { return result.hasGiftId; }
    }
    public long GiftId {
      get { return result.GiftId; }
      set { SetGiftId(value); }
    }
    public Builder SetGiftId(long value) {
      PrepareBuilder();
      result.hasGiftId = true;
      result.giftId_ = value;
      return this;
    }
    public Builder ClearGiftId() {
      PrepareBuilder();
      result.hasGiftId = false;
      result.giftId_ = 0L;
      return this;
    }
  }
  static FriendGift() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendGiftResponse : pb::GeneratedMessage<SCFriendGiftResponse, SCFriendGiftResponse.Builder> {
  private SCFriendGiftResponse() { }
  private static readonly SCFriendGiftResponse defaultInstance = new SCFriendGiftResponse().MakeReadOnly();
  private static readonly string[] _sCFriendGiftResponseFieldNames = new string[] { "count", "friendGiftLists", "limit", "status" };
  private static readonly uint[] _sCFriendGiftResponseFieldTags = new uint[] { 32, 18, 24, 10 };
  public static SCFriendGiftResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendGiftResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendGiftResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendGiftResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendGiftResponse, SCFriendGiftResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendGiftResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int FriendGiftListsFieldNumber = 2;
  private pbc::PopsicleList<global::FriendGift> friendGiftLists_ = new pbc::PopsicleList<global::FriendGift>();
  public scg::IList<global::FriendGift> FriendGiftListsList {
    get { return friendGiftLists_; }
  }
  public int FriendGiftListsCount {
    get { return friendGiftLists_.Count; }
  }
  public global::FriendGift GetFriendGiftLists(int index) {
    return friendGiftLists_[index];
  }
  
  public const int LimitFieldNumber = 3;
  private bool hasLimit;
  private int limit_;
  public bool HasLimit {
    get { return hasLimit; }
  }
  public int Limit {
    get { return limit_; }
  }
  
  public const int CountFieldNumber = 4;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendGiftResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[3], Status);
    }
    if (friendGiftLists_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], friendGiftLists_);
    }
    if (hasLimit) {
      output.WriteInt32(3, field_names[2], Limit);
    }
    if (hasCount) {
      output.WriteInt32(4, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    foreach (global::FriendGift element in FriendGiftListsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasLimit) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Limit);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendGiftResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendGiftResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendGiftResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendGiftResponse MakeReadOnly() {
    friendGiftLists_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendGiftResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendGiftResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendGiftResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendGiftResponse result;
    
    private SCFriendGiftResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendGiftResponse original = result;
        result = new SCFriendGiftResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendGiftResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendGiftResponse.Descriptor; }
    }
    
    public override SCFriendGiftResponse DefaultInstanceForType {
      get { return global::SCFriendGiftResponse.DefaultInstance; }
    }
    
    public override SCFriendGiftResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendGiftResponse) {
        return MergeFrom((SCFriendGiftResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendGiftResponse other) {
      if (other == global::SCFriendGiftResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.friendGiftLists_.Count != 0) {
        result.friendGiftLists_.Add(other.friendGiftLists_);
      }
      if (other.HasLimit) {
        Limit = other.Limit;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendGiftResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendGiftResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.friendGiftLists_, global::FriendGift.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasLimit = input.ReadInt32(ref result.limit_);
            break;
          }
          case 32: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::FriendGift> FriendGiftListsList {
      get { return PrepareBuilder().friendGiftLists_; }
    }
    public int FriendGiftListsCount {
      get { return result.FriendGiftListsCount; }
    }
    public global::FriendGift GetFriendGiftLists(int index) {
      return result.GetFriendGiftLists(index);
    }
    public Builder SetFriendGiftLists(int index, global::FriendGift value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.friendGiftLists_[index] = value;
      return this;
    }
    public Builder SetFriendGiftLists(int index, global::FriendGift.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.friendGiftLists_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddFriendGiftLists(global::FriendGift value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.friendGiftLists_.Add(value);
      return this;
    }
    public Builder AddFriendGiftLists(global::FriendGift.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.friendGiftLists_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeFriendGiftLists(scg::IEnumerable<global::FriendGift> values) {
      PrepareBuilder();
      result.friendGiftLists_.Add(values);
      return this;
    }
    public Builder ClearFriendGiftLists() {
      PrepareBuilder();
      result.friendGiftLists_.Clear();
      return this;
    }
    
    public bool HasLimit {
      get { return result.hasLimit; }
    }
    public int Limit {
      get { return result.Limit; }
      set { SetLimit(value); }
    }
    public Builder SetLimit(int value) {
      PrepareBuilder();
      result.hasLimit = true;
      result.limit_ = value;
      return this;
    }
    public Builder ClearLimit() {
      PrepareBuilder();
      result.hasLimit = false;
      result.limit_ = 0;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static SCFriendGiftResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendGiftSendRequest : pb::GeneratedMessage<CSFriendGiftSendRequest, CSFriendGiftSendRequest.Builder> {
  private CSFriendGiftSendRequest() { }
  private static readonly CSFriendGiftSendRequest defaultInstance = new CSFriendGiftSendRequest().MakeReadOnly();
  private static readonly string[] _cSFriendGiftSendRequestFieldNames = new string[] { "friendId" };
  private static readonly uint[] _cSFriendGiftSendRequestFieldTags = new uint[] { 8 };
  public static CSFriendGiftSendRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendGiftSendRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendGiftSendRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendGiftSendRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendGiftSendRequest, CSFriendGiftSendRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendGiftSendRequest__FieldAccessorTable; }
  }
  
  public const int FriendIdFieldNumber = 1;
  private bool hasFriendId;
  private long friendId_;
  public bool HasFriendId {
    get { return hasFriendId; }
  }
  public long FriendId {
    get { return friendId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendGiftSendRequestFieldNames;
    if (hasFriendId) {
      output.WriteInt64(1, field_names[0], FriendId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFriendId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, FriendId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendGiftSendRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendGiftSendRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendGiftSendRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendGiftSendRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendGiftSendRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendGiftSendRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendGiftSendRequest result;
    
    private CSFriendGiftSendRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendGiftSendRequest original = result;
        result = new CSFriendGiftSendRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendGiftSendRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendGiftSendRequest.Descriptor; }
    }
    
    public override CSFriendGiftSendRequest DefaultInstanceForType {
      get { return global::CSFriendGiftSendRequest.DefaultInstance; }
    }
    
    public override CSFriendGiftSendRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendGiftSendRequest) {
        return MergeFrom((CSFriendGiftSendRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendGiftSendRequest other) {
      if (other == global::CSFriendGiftSendRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendGiftSendRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendGiftSendRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFriendId = input.ReadInt64(ref result.friendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFriendId {
      get { return result.hasFriendId; }
    }
    public long FriendId {
      get { return result.FriendId; }
      set { SetFriendId(value); }
    }
    public Builder SetFriendId(long value) {
      PrepareBuilder();
      result.hasFriendId = true;
      result.friendId_ = value;
      return this;
    }
    public Builder ClearFriendId() {
      PrepareBuilder();
      result.hasFriendId = false;
      result.friendId_ = 0L;
      return this;
    }
  }
  static CSFriendGiftSendRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendGiftSendResponse : pb::GeneratedMessage<SCFriendGiftSendResponse, SCFriendGiftSendResponse.Builder> {
  private SCFriendGiftSendResponse() { }
  private static readonly SCFriendGiftSendResponse defaultInstance = new SCFriendGiftSendResponse().MakeReadOnly();
  private static readonly string[] _sCFriendGiftSendResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCFriendGiftSendResponseFieldTags = new uint[] { 10 };
  public static SCFriendGiftSendResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendGiftSendResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendGiftSendResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendGiftSendResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendGiftSendResponse, SCFriendGiftSendResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendGiftSendResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendGiftSendResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendGiftSendResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendGiftSendResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendGiftSendResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendGiftSendResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendGiftSendResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendGiftSendResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendGiftSendResponse result;
    
    private SCFriendGiftSendResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendGiftSendResponse original = result;
        result = new SCFriendGiftSendResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendGiftSendResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendGiftSendResponse.Descriptor; }
    }
    
    public override SCFriendGiftSendResponse DefaultInstanceForType {
      get { return global::SCFriendGiftSendResponse.DefaultInstance; }
    }
    
    public override SCFriendGiftSendResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendGiftSendResponse) {
        return MergeFrom((SCFriendGiftSendResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendGiftSendResponse other) {
      if (other == global::SCFriendGiftSendResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendGiftSendResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendGiftSendResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCFriendGiftSendResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendGiftDrawRequest : pb::GeneratedMessage<CSFriendGiftDrawRequest, CSFriendGiftDrawRequest.Builder> {
  private CSFriendGiftDrawRequest() { }
  private static readonly CSFriendGiftDrawRequest defaultInstance = new CSFriendGiftDrawRequest().MakeReadOnly();
  private static readonly string[] _cSFriendGiftDrawRequestFieldNames = new string[] { "giftId" };
  private static readonly uint[] _cSFriendGiftDrawRequestFieldTags = new uint[] { 8 };
  public static CSFriendGiftDrawRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendGiftDrawRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendGiftDrawRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendGiftDrawRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendGiftDrawRequest, CSFriendGiftDrawRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendGiftDrawRequest__FieldAccessorTable; }
  }
  
  public const int GiftIdFieldNumber = 1;
  private bool hasGiftId;
  private long giftId_;
  public bool HasGiftId {
    get { return hasGiftId; }
  }
  public long GiftId {
    get { return giftId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendGiftDrawRequestFieldNames;
    if (hasGiftId) {
      output.WriteInt64(1, field_names[0], GiftId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGiftId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, GiftId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendGiftDrawRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendGiftDrawRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendGiftDrawRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendGiftDrawRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendGiftDrawRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendGiftDrawRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendGiftDrawRequest result;
    
    private CSFriendGiftDrawRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendGiftDrawRequest original = result;
        result = new CSFriendGiftDrawRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendGiftDrawRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendGiftDrawRequest.Descriptor; }
    }
    
    public override CSFriendGiftDrawRequest DefaultInstanceForType {
      get { return global::CSFriendGiftDrawRequest.DefaultInstance; }
    }
    
    public override CSFriendGiftDrawRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendGiftDrawRequest) {
        return MergeFrom((CSFriendGiftDrawRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendGiftDrawRequest other) {
      if (other == global::CSFriendGiftDrawRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGiftId) {
        GiftId = other.GiftId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendGiftDrawRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendGiftDrawRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGiftId = input.ReadInt64(ref result.giftId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGiftId {
      get { return result.hasGiftId; }
    }
    public long GiftId {
      get { return result.GiftId; }
      set { SetGiftId(value); }
    }
    public Builder SetGiftId(long value) {
      PrepareBuilder();
      result.hasGiftId = true;
      result.giftId_ = value;
      return this;
    }
    public Builder ClearGiftId() {
      PrepareBuilder();
      result.hasGiftId = false;
      result.giftId_ = 0L;
      return this;
    }
  }
  static CSFriendGiftDrawRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendGiftDrawResponse : pb::GeneratedMessage<SCFriendGiftDrawResponse, SCFriendGiftDrawResponse.Builder> {
  private SCFriendGiftDrawResponse() { }
  private static readonly SCFriendGiftDrawResponse defaultInstance = new SCFriendGiftDrawResponse().MakeReadOnly();
  private static readonly string[] _sCFriendGiftDrawResponseFieldNames = new string[] { "playerPropMsg", "status" };
  private static readonly uint[] _sCFriendGiftDrawResponseFieldTags = new uint[] { 18, 10 };
  public static SCFriendGiftDrawResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendGiftDrawResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendGiftDrawResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendGiftDrawResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendGiftDrawResponse, SCFriendGiftDrawResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendGiftDrawResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int PlayerPropMsgFieldNumber = 2;
  private pbc::PopsicleList<global::PlayerPropMsg> playerPropMsg_ = new pbc::PopsicleList<global::PlayerPropMsg>();
  public scg::IList<global::PlayerPropMsg> PlayerPropMsgList {
    get { return playerPropMsg_; }
  }
  public int PlayerPropMsgCount {
    get { return playerPropMsg_.Count; }
  }
  public global::PlayerPropMsg GetPlayerPropMsg(int index) {
    return playerPropMsg_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendGiftDrawResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[1], Status);
    }
    if (playerPropMsg_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], playerPropMsg_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    foreach (global::PlayerPropMsg element in PlayerPropMsgList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendGiftDrawResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendGiftDrawResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendGiftDrawResponse MakeReadOnly() {
    playerPropMsg_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendGiftDrawResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendGiftDrawResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendGiftDrawResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendGiftDrawResponse result;
    
    private SCFriendGiftDrawResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendGiftDrawResponse original = result;
        result = new SCFriendGiftDrawResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendGiftDrawResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendGiftDrawResponse.Descriptor; }
    }
    
    public override SCFriendGiftDrawResponse DefaultInstanceForType {
      get { return global::SCFriendGiftDrawResponse.DefaultInstance; }
    }
    
    public override SCFriendGiftDrawResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendGiftDrawResponse) {
        return MergeFrom((SCFriendGiftDrawResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendGiftDrawResponse other) {
      if (other == global::SCFriendGiftDrawResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.playerPropMsg_.Count != 0) {
        result.playerPropMsg_.Add(other.playerPropMsg_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendGiftDrawResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendGiftDrawResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.playerPropMsg_, global::PlayerPropMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerPropMsg> PlayerPropMsgList {
      get { return PrepareBuilder().playerPropMsg_; }
    }
    public int PlayerPropMsgCount {
      get { return result.PlayerPropMsgCount; }
    }
    public global::PlayerPropMsg GetPlayerPropMsg(int index) {
      return result.GetPlayerPropMsg(index);
    }
    public Builder SetPlayerPropMsg(int index, global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerPropMsg_[index] = value;
      return this;
    }
    public Builder SetPlayerPropMsg(int index, global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerPropMsg_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayerPropMsg(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerPropMsg_.Add(value);
      return this;
    }
    public Builder AddPlayerPropMsg(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerPropMsg_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayerPropMsg(scg::IEnumerable<global::PlayerPropMsg> values) {
      PrepareBuilder();
      result.playerPropMsg_.Add(values);
      return this;
    }
    public Builder ClearPlayerPropMsg() {
      PrepareBuilder();
      result.playerPropMsg_.Clear();
      return this;
    }
  }
  static SCFriendGiftDrawResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendViewRequest : pb::GeneratedMessage<CSFriendViewRequest, CSFriendViewRequest.Builder> {
  private CSFriendViewRequest() { }
  private static readonly CSFriendViewRequest defaultInstance = new CSFriendViewRequest().MakeReadOnly();
  private static readonly string[] _cSFriendViewRequestFieldNames = new string[] { "friendId" };
  private static readonly uint[] _cSFriendViewRequestFieldTags = new uint[] { 8 };
  public static CSFriendViewRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendViewRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendViewRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendViewRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendViewRequest, CSFriendViewRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendViewRequest__FieldAccessorTable; }
  }
  
  public const int FriendIdFieldNumber = 1;
  private bool hasFriendId;
  private long friendId_;
  public bool HasFriendId {
    get { return hasFriendId; }
  }
  public long FriendId {
    get { return friendId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendViewRequestFieldNames;
    if (hasFriendId) {
      output.WriteInt64(1, field_names[0], FriendId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFriendId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, FriendId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendViewRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendViewRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendViewRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendViewRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendViewRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendViewRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendViewRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendViewRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendViewRequest result;
    
    private CSFriendViewRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendViewRequest original = result;
        result = new CSFriendViewRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendViewRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendViewRequest.Descriptor; }
    }
    
    public override CSFriendViewRequest DefaultInstanceForType {
      get { return global::CSFriendViewRequest.DefaultInstance; }
    }
    
    public override CSFriendViewRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendViewRequest) {
        return MergeFrom((CSFriendViewRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendViewRequest other) {
      if (other == global::CSFriendViewRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendViewRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendViewRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFriendId = input.ReadInt64(ref result.friendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFriendId {
      get { return result.hasFriendId; }
    }
    public long FriendId {
      get { return result.FriendId; }
      set { SetFriendId(value); }
    }
    public Builder SetFriendId(long value) {
      PrepareBuilder();
      result.hasFriendId = true;
      result.friendId_ = value;
      return this;
    }
    public Builder ClearFriendId() {
      PrepareBuilder();
      result.hasFriendId = false;
      result.friendId_ = 0L;
      return this;
    }
  }
  static CSFriendViewRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AchievementFriendMsg : pb::GeneratedMessage<AchievementFriendMsg, AchievementFriendMsg.Builder> {
  private AchievementFriendMsg() { }
  private static readonly AchievementFriendMsg defaultInstance = new AchievementFriendMsg().MakeReadOnly();
  private static readonly string[] _achievementFriendMsgFieldNames = new string[] { "finishTime", "finishTime1", "finishTime2", "id", "progress", "submitStatus" };
  private static readonly uint[] _achievementFriendMsgFieldTags = new uint[] { 32, 40, 48, 8, 16, 24 };
  public static AchievementFriendMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AchievementFriendMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AchievementFriendMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_AchievementFriendMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AchievementFriendMsg, AchievementFriendMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_AchievementFriendMsg__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int ProgressFieldNumber = 2;
  private bool hasProgress;
  private int progress_;
  public bool HasProgress {
    get { return hasProgress; }
  }
  public int Progress {
    get { return progress_; }
  }
  
  public const int SubmitStatusFieldNumber = 3;
  private bool hasSubmitStatus;
  private int submitStatus_;
  public bool HasSubmitStatus {
    get { return hasSubmitStatus; }
  }
  public int SubmitStatus {
    get { return submitStatus_; }
  }
  
  public const int FinishTimeFieldNumber = 4;
  private bool hasFinishTime;
  private long finishTime_;
  public bool HasFinishTime {
    get { return hasFinishTime; }
  }
  public long FinishTime {
    get { return finishTime_; }
  }
  
  public const int FinishTime1FieldNumber = 5;
  private bool hasFinishTime1;
  private long finishTime1_;
  public bool HasFinishTime1 {
    get { return hasFinishTime1; }
  }
  public long FinishTime1 {
    get { return finishTime1_; }
  }
  
  public const int FinishTime2FieldNumber = 6;
  private bool hasFinishTime2;
  private long finishTime2_;
  public bool HasFinishTime2 {
    get { return hasFinishTime2; }
  }
  public long FinishTime2 {
    get { return finishTime2_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _achievementFriendMsgFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[3], Id);
    }
    if (hasProgress) {
      output.WriteInt32(2, field_names[4], Progress);
    }
    if (hasSubmitStatus) {
      output.WriteInt32(3, field_names[5], SubmitStatus);
    }
    if (hasFinishTime) {
      output.WriteInt64(4, field_names[0], FinishTime);
    }
    if (hasFinishTime1) {
      output.WriteInt64(5, field_names[1], FinishTime1);
    }
    if (hasFinishTime2) {
      output.WriteInt64(6, field_names[2], FinishTime2);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasProgress) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Progress);
    }
    if (hasSubmitStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, SubmitStatus);
    }
    if (hasFinishTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, FinishTime);
    }
    if (hasFinishTime1) {
      size += pb::CodedOutputStream.ComputeInt64Size(5, FinishTime1);
    }
    if (hasFinishTime2) {
      size += pb::CodedOutputStream.ComputeInt64Size(6, FinishTime2);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static AchievementFriendMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AchievementFriendMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AchievementFriendMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AchievementFriendMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AchievementFriendMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AchievementFriendMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AchievementFriendMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AchievementFriendMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AchievementFriendMsg result;
    
    private AchievementFriendMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        AchievementFriendMsg original = result;
        result = new AchievementFriendMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AchievementFriendMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AchievementFriendMsg.Descriptor; }
    }
    
    public override AchievementFriendMsg DefaultInstanceForType {
      get { return global::AchievementFriendMsg.DefaultInstance; }
    }
    
    public override AchievementFriendMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AchievementFriendMsg) {
        return MergeFrom((AchievementFriendMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AchievementFriendMsg other) {
      if (other == global::AchievementFriendMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasProgress) {
        Progress = other.Progress;
      }
      if (other.HasSubmitStatus) {
        SubmitStatus = other.SubmitStatus;
      }
      if (other.HasFinishTime) {
        FinishTime = other.FinishTime;
      }
      if (other.HasFinishTime1) {
        FinishTime1 = other.FinishTime1;
      }
      if (other.HasFinishTime2) {
        FinishTime2 = other.FinishTime2;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_achievementFriendMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _achievementFriendMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasProgress = input.ReadInt32(ref result.progress_);
            break;
          }
          case 24: {
            result.hasSubmitStatus = input.ReadInt32(ref result.submitStatus_);
            break;
          }
          case 32: {
            result.hasFinishTime = input.ReadInt64(ref result.finishTime_);
            break;
          }
          case 40: {
            result.hasFinishTime1 = input.ReadInt64(ref result.finishTime1_);
            break;
          }
          case 48: {
            result.hasFinishTime2 = input.ReadInt64(ref result.finishTime2_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasProgress {
      get { return result.hasProgress; }
    }
    public int Progress {
      get { return result.Progress; }
      set { SetProgress(value); }
    }
    public Builder SetProgress(int value) {
      PrepareBuilder();
      result.hasProgress = true;
      result.progress_ = value;
      return this;
    }
    public Builder ClearProgress() {
      PrepareBuilder();
      result.hasProgress = false;
      result.progress_ = 0;
      return this;
    }
    
    public bool HasSubmitStatus {
      get { return result.hasSubmitStatus; }
    }
    public int SubmitStatus {
      get { return result.SubmitStatus; }
      set { SetSubmitStatus(value); }
    }
    public Builder SetSubmitStatus(int value) {
      PrepareBuilder();
      result.hasSubmitStatus = true;
      result.submitStatus_ = value;
      return this;
    }
    public Builder ClearSubmitStatus() {
      PrepareBuilder();
      result.hasSubmitStatus = false;
      result.submitStatus_ = 0;
      return this;
    }
    
    public bool HasFinishTime {
      get { return result.hasFinishTime; }
    }
    public long FinishTime {
      get { return result.FinishTime; }
      set { SetFinishTime(value); }
    }
    public Builder SetFinishTime(long value) {
      PrepareBuilder();
      result.hasFinishTime = true;
      result.finishTime_ = value;
      return this;
    }
    public Builder ClearFinishTime() {
      PrepareBuilder();
      result.hasFinishTime = false;
      result.finishTime_ = 0L;
      return this;
    }
    
    public bool HasFinishTime1 {
      get { return result.hasFinishTime1; }
    }
    public long FinishTime1 {
      get { return result.FinishTime1; }
      set { SetFinishTime1(value); }
    }
    public Builder SetFinishTime1(long value) {
      PrepareBuilder();
      result.hasFinishTime1 = true;
      result.finishTime1_ = value;
      return this;
    }
    public Builder ClearFinishTime1() {
      PrepareBuilder();
      result.hasFinishTime1 = false;
      result.finishTime1_ = 0L;
      return this;
    }
    
    public bool HasFinishTime2 {
      get { return result.hasFinishTime2; }
    }
    public long FinishTime2 {
      get { return result.FinishTime2; }
      set { SetFinishTime2(value); }
    }
    public Builder SetFinishTime2(long value) {
      PrepareBuilder();
      result.hasFinishTime2 = true;
      result.finishTime2_ = value;
      return this;
    }
    public Builder ClearFinishTime2() {
      PrepareBuilder();
      result.hasFinishTime2 = false;
      result.finishTime2_ = 0L;
      return this;
    }
  }
  static AchievementFriendMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendViewResponse : pb::GeneratedMessage<SCFriendViewResponse, SCFriendViewResponse.Builder> {
  private SCFriendViewResponse() { }
  private static readonly SCFriendViewResponse defaultInstance = new SCFriendViewResponse().MakeReadOnly();
  private static readonly string[] _sCFriendViewResponseFieldNames = new string[] { "achievementMsgs", "playerFriendMsg", "status" };
  private static readonly uint[] _sCFriendViewResponseFieldTags = new uint[] { 26, 18, 10 };
  public static SCFriendViewResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendViewResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendViewResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendViewResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendViewResponse, SCFriendViewResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendViewResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int PlayerFriendMsgFieldNumber = 2;
  private bool hasPlayerFriendMsg;
  private global::PlayerFriendMsg playerFriendMsg_;
  public bool HasPlayerFriendMsg {
    get { return hasPlayerFriendMsg; }
  }
  public global::PlayerFriendMsg PlayerFriendMsg {
    get { return playerFriendMsg_ ?? global::PlayerFriendMsg.DefaultInstance; }
  }
  
  public const int AchievementMsgsFieldNumber = 3;
  private pbc::PopsicleList<global::AchievementFriendMsg> achievementMsgs_ = new pbc::PopsicleList<global::AchievementFriendMsg>();
  public scg::IList<global::AchievementFriendMsg> AchievementMsgsList {
    get { return achievementMsgs_; }
  }
  public int AchievementMsgsCount {
    get { return achievementMsgs_.Count; }
  }
  public global::AchievementFriendMsg GetAchievementMsgs(int index) {
    return achievementMsgs_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendViewResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[2], Status);
    }
    if (hasPlayerFriendMsg) {
      output.WriteMessage(2, field_names[1], PlayerFriendMsg);
    }
    if (achievementMsgs_.Count > 0) {
      output.WriteMessageArray(3, field_names[0], achievementMsgs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasPlayerFriendMsg) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, PlayerFriendMsg);
    }
    foreach (global::AchievementFriendMsg element in AchievementMsgsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendViewResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendViewResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendViewResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendViewResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendViewResponse MakeReadOnly() {
    achievementMsgs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendViewResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendViewResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendViewResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendViewResponse result;
    
    private SCFriendViewResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendViewResponse original = result;
        result = new SCFriendViewResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendViewResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendViewResponse.Descriptor; }
    }
    
    public override SCFriendViewResponse DefaultInstanceForType {
      get { return global::SCFriendViewResponse.DefaultInstance; }
    }
    
    public override SCFriendViewResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendViewResponse) {
        return MergeFrom((SCFriendViewResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendViewResponse other) {
      if (other == global::SCFriendViewResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasPlayerFriendMsg) {
        MergePlayerFriendMsg(other.PlayerFriendMsg);
      }
      if (other.achievementMsgs_.Count != 0) {
        result.achievementMsgs_.Add(other.achievementMsgs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendViewResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendViewResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::PlayerFriendMsg.Builder subBuilder = global::PlayerFriendMsg.CreateBuilder();
            if (result.hasPlayerFriendMsg) {
              subBuilder.MergeFrom(PlayerFriendMsg);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerFriendMsg = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.achievementMsgs_, global::AchievementFriendMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasPlayerFriendMsg {
     get { return result.hasPlayerFriendMsg; }
    }
    public global::PlayerFriendMsg PlayerFriendMsg {
      get { return result.PlayerFriendMsg; }
      set { SetPlayerFriendMsg(value); }
    }
    public Builder SetPlayerFriendMsg(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerFriendMsg = true;
      result.playerFriendMsg_ = value;
      return this;
    }
    public Builder SetPlayerFriendMsg(global::PlayerFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerFriendMsg = true;
      result.playerFriendMsg_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerFriendMsg(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerFriendMsg &&
          result.playerFriendMsg_ != global::PlayerFriendMsg.DefaultInstance) {
          result.playerFriendMsg_ = global::PlayerFriendMsg.CreateBuilder(result.playerFriendMsg_).MergeFrom(value).BuildPartial();
      } else {
        result.playerFriendMsg_ = value;
      }
      result.hasPlayerFriendMsg = true;
      return this;
    }
    public Builder ClearPlayerFriendMsg() {
      PrepareBuilder();
      result.hasPlayerFriendMsg = false;
      result.playerFriendMsg_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::AchievementFriendMsg> AchievementMsgsList {
      get { return PrepareBuilder().achievementMsgs_; }
    }
    public int AchievementMsgsCount {
      get { return result.AchievementMsgsCount; }
    }
    public global::AchievementFriendMsg GetAchievementMsgs(int index) {
      return result.GetAchievementMsgs(index);
    }
    public Builder SetAchievementMsgs(int index, global::AchievementFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.achievementMsgs_[index] = value;
      return this;
    }
    public Builder SetAchievementMsgs(int index, global::AchievementFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.achievementMsgs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAchievementMsgs(global::AchievementFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.achievementMsgs_.Add(value);
      return this;
    }
    public Builder AddAchievementMsgs(global::AchievementFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.achievementMsgs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAchievementMsgs(scg::IEnumerable<global::AchievementFriendMsg> values) {
      PrepareBuilder();
      result.achievementMsgs_.Add(values);
      return this;
    }
    public Builder ClearAchievementMsgs() {
      PrepareBuilder();
      result.achievementMsgs_.Clear();
      return this;
    }
  }
  static SCFriendViewResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendSwitchRequest : pb::GeneratedMessage<CSFriendSwitchRequest, CSFriendSwitchRequest.Builder> {
  private CSFriendSwitchRequest() { }
  private static readonly CSFriendSwitchRequest defaultInstance = new CSFriendSwitchRequest().MakeReadOnly();
  private static readonly string[] _cSFriendSwitchRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSFriendSwitchRequestFieldTags = new uint[] {  };
  public static CSFriendSwitchRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendSwitchRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendSwitchRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendSwitchRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendSwitchRequest, CSFriendSwitchRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendSwitchRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendSwitchRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendSwitchRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendSwitchRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendSwitchRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendSwitchRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendSwitchRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendSwitchRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendSwitchRequest result;
    
    private CSFriendSwitchRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendSwitchRequest original = result;
        result = new CSFriendSwitchRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendSwitchRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendSwitchRequest.Descriptor; }
    }
    
    public override CSFriendSwitchRequest DefaultInstanceForType {
      get { return global::CSFriendSwitchRequest.DefaultInstance; }
    }
    
    public override CSFriendSwitchRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendSwitchRequest) {
        return MergeFrom((CSFriendSwitchRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendSwitchRequest other) {
      if (other == global::CSFriendSwitchRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendSwitchRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendSwitchRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSFriendSwitchRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendSwitchResponse : pb::GeneratedMessage<SCFriendSwitchResponse, SCFriendSwitchResponse.Builder> {
  private SCFriendSwitchResponse() { }
  private static readonly SCFriendSwitchResponse defaultInstance = new SCFriendSwitchResponse().MakeReadOnly();
  private static readonly string[] _sCFriendSwitchResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCFriendSwitchResponseFieldTags = new uint[] { 10 };
  public static SCFriendSwitchResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendSwitchResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendSwitchResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendSwitchResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendSwitchResponse, SCFriendSwitchResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendSwitchResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendSwitchResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendSwitchResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendSwitchResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendSwitchResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendSwitchResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendSwitchResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendSwitchResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendSwitchResponse result;
    
    private SCFriendSwitchResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendSwitchResponse original = result;
        result = new SCFriendSwitchResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendSwitchResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendSwitchResponse.Descriptor; }
    }
    
    public override SCFriendSwitchResponse DefaultInstanceForType {
      get { return global::SCFriendSwitchResponse.DefaultInstance; }
    }
    
    public override SCFriendSwitchResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendSwitchResponse) {
        return MergeFrom((SCFriendSwitchResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendSwitchResponse other) {
      if (other == global::SCFriendSwitchResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendSwitchResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendSwitchResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCFriendSwitchResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendApplyResponse : pb::GeneratedMessage<SCFriendApplyResponse, SCFriendApplyResponse.Builder> {
  private SCFriendApplyResponse() { }
  private static readonly SCFriendApplyResponse defaultInstance = new SCFriendApplyResponse().MakeReadOnly();
  private static readonly string[] _sCFriendApplyResponseFieldNames = new string[] { "friendId" };
  private static readonly uint[] _sCFriendApplyResponseFieldTags = new uint[] { 8 };
  public static SCFriendApplyResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendApplyResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendApplyResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendApplyResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendApplyResponse, SCFriendApplyResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendApplyResponse__FieldAccessorTable; }
  }
  
  public const int FriendIdFieldNumber = 1;
  private bool hasFriendId;
  private long friendId_;
  public bool HasFriendId {
    get { return hasFriendId; }
  }
  public long FriendId {
    get { return friendId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendApplyResponseFieldNames;
    if (hasFriendId) {
      output.WriteInt64(1, field_names[0], FriendId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasFriendId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, FriendId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendApplyResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendApplyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendApplyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendApplyResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendApplyResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendApplyResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendApplyResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendApplyResponse result;
    
    private SCFriendApplyResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendApplyResponse original = result;
        result = new SCFriendApplyResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendApplyResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendApplyResponse.Descriptor; }
    }
    
    public override SCFriendApplyResponse DefaultInstanceForType {
      get { return global::SCFriendApplyResponse.DefaultInstance; }
    }
    
    public override SCFriendApplyResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendApplyResponse) {
        return MergeFrom((SCFriendApplyResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendApplyResponse other) {
      if (other == global::SCFriendApplyResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasFriendId) {
        FriendId = other.FriendId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendApplyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendApplyResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasFriendId = input.ReadInt64(ref result.friendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasFriendId {
      get { return result.hasFriendId; }
    }
    public long FriendId {
      get { return result.FriendId; }
      set { SetFriendId(value); }
    }
    public Builder SetFriendId(long value) {
      PrepareBuilder();
      result.hasFriendId = true;
      result.friendId_ = value;
      return this;
    }
    public Builder ClearFriendId() {
      PrepareBuilder();
      result.hasFriendId = false;
      result.friendId_ = 0L;
      return this;
    }
  }
  static SCFriendApplyResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendNoticeResponse : pb::GeneratedMessage<SCFriendNoticeResponse, SCFriendNoticeResponse.Builder> {
  private SCFriendNoticeResponse() { }
  private static readonly SCFriendNoticeResponse defaultInstance = new SCFriendNoticeResponse().MakeReadOnly();
  private static readonly string[] _sCFriendNoticeResponseFieldNames = new string[] { "point" };
  private static readonly uint[] _sCFriendNoticeResponseFieldTags = new uint[] { 8 };
  public static SCFriendNoticeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendNoticeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendNoticeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendNoticeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendNoticeResponse, SCFriendNoticeResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendNoticeResponse__FieldAccessorTable; }
  }
  
  public const int PointFieldNumber = 1;
  private bool hasPoint;
  private int point_;
  public bool HasPoint {
    get { return hasPoint; }
  }
  public int Point {
    get { return point_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendNoticeResponseFieldNames;
    if (hasPoint) {
      output.WriteInt32(1, field_names[0], Point);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPoint) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Point);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendNoticeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendNoticeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendNoticeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendNoticeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendNoticeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendNoticeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendNoticeResponse result;
    
    private SCFriendNoticeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendNoticeResponse original = result;
        result = new SCFriendNoticeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendNoticeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendNoticeResponse.Descriptor; }
    }
    
    public override SCFriendNoticeResponse DefaultInstanceForType {
      get { return global::SCFriendNoticeResponse.DefaultInstance; }
    }
    
    public override SCFriendNoticeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendNoticeResponse) {
        return MergeFrom((SCFriendNoticeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendNoticeResponse other) {
      if (other == global::SCFriendNoticeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPoint) {
        Point = other.Point;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendNoticeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendNoticeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPoint = input.ReadInt32(ref result.point_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPoint {
      get { return result.hasPoint; }
    }
    public int Point {
      get { return result.Point; }
      set { SetPoint(value); }
    }
    public Builder SetPoint(int value) {
      PrepareBuilder();
      result.hasPoint = true;
      result.point_ = value;
      return this;
    }
    public Builder ClearPoint() {
      PrepareBuilder();
      result.hasPoint = false;
      result.point_ = 0;
      return this;
    }
  }
  static SCFriendNoticeResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class FriendRecommendMsg : pb::GeneratedMessage<FriendRecommendMsg, FriendRecommendMsg.Builder> {
  private FriendRecommendMsg() { }
  private static readonly FriendRecommendMsg defaultInstance = new FriendRecommendMsg().MakeReadOnly();
  private static readonly string[] _friendRecommendMsgFieldNames = new string[] { "bind", "icon", "level", "name", "recommendId", "status" };
  private static readonly uint[] _friendRecommendMsgFieldTags = new uint[] { 16, 42, 32, 10, 48, 24 };
  public static FriendRecommendMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override FriendRecommendMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override FriendRecommendMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_FriendRecommendMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<FriendRecommendMsg, FriendRecommendMsg.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_FriendRecommendMsg__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int BindFieldNumber = 2;
  private bool hasBind;
  private int bind_;
  public bool HasBind {
    get { return hasBind; }
  }
  public int Bind {
    get { return bind_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int LevelFieldNumber = 4;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int IconFieldNumber = 5;
  private bool hasIcon;
  private string icon_ = "";
  public bool HasIcon {
    get { return hasIcon; }
  }
  public string Icon {
    get { return icon_; }
  }
  
  public const int RecommendIdFieldNumber = 6;
  private bool hasRecommendId;
  private long recommendId_;
  public bool HasRecommendId {
    get { return hasRecommendId; }
  }
  public long RecommendId {
    get { return recommendId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _friendRecommendMsgFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[3], Name);
    }
    if (hasBind) {
      output.WriteInt32(2, field_names[0], Bind);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[5], Status);
    }
    if (hasLevel) {
      output.WriteInt32(4, field_names[2], Level);
    }
    if (hasIcon) {
      output.WriteString(5, field_names[1], Icon);
    }
    if (hasRecommendId) {
      output.WriteInt64(6, field_names[4], RecommendId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Name);
    }
    if (hasBind) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Bind);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, Level);
    }
    if (hasIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Icon);
    }
    if (hasRecommendId) {
      size += pb::CodedOutputStream.ComputeInt64Size(6, RecommendId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static FriendRecommendMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static FriendRecommendMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static FriendRecommendMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static FriendRecommendMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private FriendRecommendMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(FriendRecommendMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<FriendRecommendMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(FriendRecommendMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private FriendRecommendMsg result;
    
    private FriendRecommendMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        FriendRecommendMsg original = result;
        result = new FriendRecommendMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override FriendRecommendMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::FriendRecommendMsg.Descriptor; }
    }
    
    public override FriendRecommendMsg DefaultInstanceForType {
      get { return global::FriendRecommendMsg.DefaultInstance; }
    }
    
    public override FriendRecommendMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is FriendRecommendMsg) {
        return MergeFrom((FriendRecommendMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(FriendRecommendMsg other) {
      if (other == global::FriendRecommendMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasBind) {
        Bind = other.Bind;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      if (other.HasRecommendId) {
        RecommendId = other.RecommendId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_friendRecommendMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _friendRecommendMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 16: {
            result.hasBind = input.ReadInt32(ref result.bind_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 32: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 42: {
            result.hasIcon = input.ReadString(ref result.icon_);
            break;
          }
          case 48: {
            result.hasRecommendId = input.ReadInt64(ref result.recommendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasBind {
      get { return result.hasBind; }
    }
    public int Bind {
      get { return result.Bind; }
      set { SetBind(value); }
    }
    public Builder SetBind(int value) {
      PrepareBuilder();
      result.hasBind = true;
      result.bind_ = value;
      return this;
    }
    public Builder ClearBind() {
      PrepareBuilder();
      result.hasBind = false;
      result.bind_ = 0;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasIcon {
      get { return result.hasIcon; }
    }
    public string Icon {
      get { return result.Icon; }
      set { SetIcon(value); }
    }
    public Builder SetIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIcon = true;
      result.icon_ = value;
      return this;
    }
    public Builder ClearIcon() {
      PrepareBuilder();
      result.hasIcon = false;
      result.icon_ = "";
      return this;
    }
    
    public bool HasRecommendId {
      get { return result.hasRecommendId; }
    }
    public long RecommendId {
      get { return result.RecommendId; }
      set { SetRecommendId(value); }
    }
    public Builder SetRecommendId(long value) {
      PrepareBuilder();
      result.hasRecommendId = true;
      result.recommendId_ = value;
      return this;
    }
    public Builder ClearRecommendId() {
      PrepareBuilder();
      result.hasRecommendId = false;
      result.recommendId_ = 0L;
      return this;
    }
  }
  static FriendRecommendMsg() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendRecommendListRequest : pb::GeneratedMessage<CSFriendRecommendListRequest, CSFriendRecommendListRequest.Builder> {
  private CSFriendRecommendListRequest() { }
  private static readonly CSFriendRecommendListRequest defaultInstance = new CSFriendRecommendListRequest().MakeReadOnly();
  private static readonly string[] _cSFriendRecommendListRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSFriendRecommendListRequestFieldTags = new uint[] {  };
  public static CSFriendRecommendListRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendRecommendListRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendRecommendListRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendRecommendListRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendRecommendListRequest, CSFriendRecommendListRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendRecommendListRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendRecommendListRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendRecommendListRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRecommendListRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendRecommendListRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendRecommendListRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendRecommendListRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendRecommendListRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendRecommendListRequest result;
    
    private CSFriendRecommendListRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendRecommendListRequest original = result;
        result = new CSFriendRecommendListRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendRecommendListRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendRecommendListRequest.Descriptor; }
    }
    
    public override CSFriendRecommendListRequest DefaultInstanceForType {
      get { return global::CSFriendRecommendListRequest.DefaultInstance; }
    }
    
    public override CSFriendRecommendListRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendRecommendListRequest) {
        return MergeFrom((CSFriendRecommendListRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendRecommendListRequest other) {
      if (other == global::CSFriendRecommendListRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendRecommendListRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendRecommendListRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSFriendRecommendListRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendRecommendListResponse : pb::GeneratedMessage<SCFriendRecommendListResponse, SCFriendRecommendListResponse.Builder> {
  private SCFriendRecommendListResponse() { }
  private static readonly SCFriendRecommendListResponse defaultInstance = new SCFriendRecommendListResponse().MakeReadOnly();
  private static readonly string[] _sCFriendRecommendListResponseFieldNames = new string[] { "recommend", "status", "timeDown" };
  private static readonly uint[] _sCFriendRecommendListResponseFieldTags = new uint[] { 18, 10, 24 };
  public static SCFriendRecommendListResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendRecommendListResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendRecommendListResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendRecommendListResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendRecommendListResponse, SCFriendRecommendListResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendRecommendListResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int RecommendFieldNumber = 2;
  private pbc::PopsicleList<global::FriendRecommendMsg> recommend_ = new pbc::PopsicleList<global::FriendRecommendMsg>();
  public scg::IList<global::FriendRecommendMsg> RecommendList {
    get { return recommend_; }
  }
  public int RecommendCount {
    get { return recommend_.Count; }
  }
  public global::FriendRecommendMsg GetRecommend(int index) {
    return recommend_[index];
  }
  
  public const int TimeDownFieldNumber = 3;
  private bool hasTimeDown;
  private int timeDown_;
  public bool HasTimeDown {
    get { return hasTimeDown; }
  }
  public int TimeDown {
    get { return timeDown_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendRecommendListResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[1], Status);
    }
    if (recommend_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], recommend_);
    }
    if (hasTimeDown) {
      output.WriteInt32(3, field_names[2], TimeDown);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    foreach (global::FriendRecommendMsg element in RecommendList) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, element);
    }
    if (hasTimeDown) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, TimeDown);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendRecommendListResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendRecommendListResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendRecommendListResponse MakeReadOnly() {
    recommend_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendRecommendListResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendRecommendListResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendRecommendListResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendRecommendListResponse result;
    
    private SCFriendRecommendListResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendRecommendListResponse original = result;
        result = new SCFriendRecommendListResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendRecommendListResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendRecommendListResponse.Descriptor; }
    }
    
    public override SCFriendRecommendListResponse DefaultInstanceForType {
      get { return global::SCFriendRecommendListResponse.DefaultInstance; }
    }
    
    public override SCFriendRecommendListResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendRecommendListResponse) {
        return MergeFrom((SCFriendRecommendListResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendRecommendListResponse other) {
      if (other == global::SCFriendRecommendListResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.recommend_.Count != 0) {
        result.recommend_.Add(other.recommend_);
      }
      if (other.HasTimeDown) {
        TimeDown = other.TimeDown;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendRecommendListResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendRecommendListResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.recommend_, global::FriendRecommendMsg.DefaultInstance, extensionRegistry);
            break;
          }
          case 24: {
            result.hasTimeDown = input.ReadInt32(ref result.timeDown_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::FriendRecommendMsg> RecommendList {
      get { return PrepareBuilder().recommend_; }
    }
    public int RecommendCount {
      get { return result.RecommendCount; }
    }
    public global::FriendRecommendMsg GetRecommend(int index) {
      return result.GetRecommend(index);
    }
    public Builder SetRecommend(int index, global::FriendRecommendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.recommend_[index] = value;
      return this;
    }
    public Builder SetRecommend(int index, global::FriendRecommendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.recommend_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRecommend(global::FriendRecommendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.recommend_.Add(value);
      return this;
    }
    public Builder AddRecommend(global::FriendRecommendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.recommend_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRecommend(scg::IEnumerable<global::FriendRecommendMsg> values) {
      PrepareBuilder();
      result.recommend_.Add(values);
      return this;
    }
    public Builder ClearRecommend() {
      PrepareBuilder();
      result.recommend_.Clear();
      return this;
    }
    
    public bool HasTimeDown {
      get { return result.hasTimeDown; }
    }
    public int TimeDown {
      get { return result.TimeDown; }
      set { SetTimeDown(value); }
    }
    public Builder SetTimeDown(int value) {
      PrepareBuilder();
      result.hasTimeDown = true;
      result.timeDown_ = value;
      return this;
    }
    public Builder ClearTimeDown() {
      PrepareBuilder();
      result.hasTimeDown = false;
      result.timeDown_ = 0;
      return this;
    }
  }
  static SCFriendRecommendListResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendRecommendGetRequest : pb::GeneratedMessage<CSFriendRecommendGetRequest, CSFriendRecommendGetRequest.Builder> {
  private CSFriendRecommendGetRequest() { }
  private static readonly CSFriendRecommendGetRequest defaultInstance = new CSFriendRecommendGetRequest().MakeReadOnly();
  private static readonly string[] _cSFriendRecommendGetRequestFieldNames = new string[] { "recommendId" };
  private static readonly uint[] _cSFriendRecommendGetRequestFieldTags = new uint[] { 8 };
  public static CSFriendRecommendGetRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendRecommendGetRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendRecommendGetRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendRecommendGetRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendRecommendGetRequest, CSFriendRecommendGetRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendRecommendGetRequest__FieldAccessorTable; }
  }
  
  public const int RecommendIdFieldNumber = 1;
  private bool hasRecommendId;
  private long recommendId_;
  public bool HasRecommendId {
    get { return hasRecommendId; }
  }
  public long RecommendId {
    get { return recommendId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendRecommendGetRequestFieldNames;
    if (hasRecommendId) {
      output.WriteInt64(1, field_names[0], RecommendId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasRecommendId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, RecommendId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendRecommendGetRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRecommendGetRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendRecommendGetRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendRecommendGetRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendRecommendGetRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendRecommendGetRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendRecommendGetRequest result;
    
    private CSFriendRecommendGetRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendRecommendGetRequest original = result;
        result = new CSFriendRecommendGetRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendRecommendGetRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendRecommendGetRequest.Descriptor; }
    }
    
    public override CSFriendRecommendGetRequest DefaultInstanceForType {
      get { return global::CSFriendRecommendGetRequest.DefaultInstance; }
    }
    
    public override CSFriendRecommendGetRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendRecommendGetRequest) {
        return MergeFrom((CSFriendRecommendGetRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendRecommendGetRequest other) {
      if (other == global::CSFriendRecommendGetRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRecommendId) {
        RecommendId = other.RecommendId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendRecommendGetRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendRecommendGetRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRecommendId = input.ReadInt64(ref result.recommendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRecommendId {
      get { return result.hasRecommendId; }
    }
    public long RecommendId {
      get { return result.RecommendId; }
      set { SetRecommendId(value); }
    }
    public Builder SetRecommendId(long value) {
      PrepareBuilder();
      result.hasRecommendId = true;
      result.recommendId_ = value;
      return this;
    }
    public Builder ClearRecommendId() {
      PrepareBuilder();
      result.hasRecommendId = false;
      result.recommendId_ = 0L;
      return this;
    }
  }
  static CSFriendRecommendGetRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendRecommendGetResponse : pb::GeneratedMessage<SCFriendRecommendGetResponse, SCFriendRecommendGetResponse.Builder> {
  private SCFriendRecommendGetResponse() { }
  private static readonly SCFriendRecommendGetResponse defaultInstance = new SCFriendRecommendGetResponse().MakeReadOnly();
  private static readonly string[] _sCFriendRecommendGetResponseFieldNames = new string[] { "achievementMsgs", "playerFriendMsg", "status" };
  private static readonly uint[] _sCFriendRecommendGetResponseFieldTags = new uint[] { 26, 18, 10 };
  public static SCFriendRecommendGetResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendRecommendGetResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendRecommendGetResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendRecommendGetResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendRecommendGetResponse, SCFriendRecommendGetResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendRecommendGetResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int PlayerFriendMsgFieldNumber = 2;
  private bool hasPlayerFriendMsg;
  private global::PlayerFriendMsg playerFriendMsg_;
  public bool HasPlayerFriendMsg {
    get { return hasPlayerFriendMsg; }
  }
  public global::PlayerFriendMsg PlayerFriendMsg {
    get { return playerFriendMsg_ ?? global::PlayerFriendMsg.DefaultInstance; }
  }
  
  public const int AchievementMsgsFieldNumber = 3;
  private pbc::PopsicleList<global::AchievementFriendMsg> achievementMsgs_ = new pbc::PopsicleList<global::AchievementFriendMsg>();
  public scg::IList<global::AchievementFriendMsg> AchievementMsgsList {
    get { return achievementMsgs_; }
  }
  public int AchievementMsgsCount {
    get { return achievementMsgs_.Count; }
  }
  public global::AchievementFriendMsg GetAchievementMsgs(int index) {
    return achievementMsgs_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendRecommendGetResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[2], Status);
    }
    if (hasPlayerFriendMsg) {
      output.WriteMessage(2, field_names[1], PlayerFriendMsg);
    }
    if (achievementMsgs_.Count > 0) {
      output.WriteMessageArray(3, field_names[0], achievementMsgs_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasPlayerFriendMsg) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, PlayerFriendMsg);
    }
    foreach (global::AchievementFriendMsg element in AchievementMsgsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendRecommendGetResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendRecommendGetResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendRecommendGetResponse MakeReadOnly() {
    achievementMsgs_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendRecommendGetResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendRecommendGetResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendRecommendGetResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendRecommendGetResponse result;
    
    private SCFriendRecommendGetResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendRecommendGetResponse original = result;
        result = new SCFriendRecommendGetResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendRecommendGetResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendRecommendGetResponse.Descriptor; }
    }
    
    public override SCFriendRecommendGetResponse DefaultInstanceForType {
      get { return global::SCFriendRecommendGetResponse.DefaultInstance; }
    }
    
    public override SCFriendRecommendGetResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendRecommendGetResponse) {
        return MergeFrom((SCFriendRecommendGetResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendRecommendGetResponse other) {
      if (other == global::SCFriendRecommendGetResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasPlayerFriendMsg) {
        MergePlayerFriendMsg(other.PlayerFriendMsg);
      }
      if (other.achievementMsgs_.Count != 0) {
        result.achievementMsgs_.Add(other.achievementMsgs_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendRecommendGetResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendRecommendGetResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::PlayerFriendMsg.Builder subBuilder = global::PlayerFriendMsg.CreateBuilder();
            if (result.hasPlayerFriendMsg) {
              subBuilder.MergeFrom(PlayerFriendMsg);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PlayerFriendMsg = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.achievementMsgs_, global::AchievementFriendMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasPlayerFriendMsg {
     get { return result.hasPlayerFriendMsg; }
    }
    public global::PlayerFriendMsg PlayerFriendMsg {
      get { return result.PlayerFriendMsg; }
      set { SetPlayerFriendMsg(value); }
    }
    public Builder SetPlayerFriendMsg(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerFriendMsg = true;
      result.playerFriendMsg_ = value;
      return this;
    }
    public Builder SetPlayerFriendMsg(global::PlayerFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPlayerFriendMsg = true;
      result.playerFriendMsg_ = builderForValue.Build();
      return this;
    }
    public Builder MergePlayerFriendMsg(global::PlayerFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPlayerFriendMsg &&
          result.playerFriendMsg_ != global::PlayerFriendMsg.DefaultInstance) {
          result.playerFriendMsg_ = global::PlayerFriendMsg.CreateBuilder(result.playerFriendMsg_).MergeFrom(value).BuildPartial();
      } else {
        result.playerFriendMsg_ = value;
      }
      result.hasPlayerFriendMsg = true;
      return this;
    }
    public Builder ClearPlayerFriendMsg() {
      PrepareBuilder();
      result.hasPlayerFriendMsg = false;
      result.playerFriendMsg_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::AchievementFriendMsg> AchievementMsgsList {
      get { return PrepareBuilder().achievementMsgs_; }
    }
    public int AchievementMsgsCount {
      get { return result.AchievementMsgsCount; }
    }
    public global::AchievementFriendMsg GetAchievementMsgs(int index) {
      return result.GetAchievementMsgs(index);
    }
    public Builder SetAchievementMsgs(int index, global::AchievementFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.achievementMsgs_[index] = value;
      return this;
    }
    public Builder SetAchievementMsgs(int index, global::AchievementFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.achievementMsgs_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAchievementMsgs(global::AchievementFriendMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.achievementMsgs_.Add(value);
      return this;
    }
    public Builder AddAchievementMsgs(global::AchievementFriendMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.achievementMsgs_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAchievementMsgs(scg::IEnumerable<global::AchievementFriendMsg> values) {
      PrepareBuilder();
      result.achievementMsgs_.Add(values);
      return this;
    }
    public Builder ClearAchievementMsgs() {
      PrepareBuilder();
      result.achievementMsgs_.Clear();
      return this;
    }
  }
  static SCFriendRecommendGetResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFriendRecommendApplyRequest : pb::GeneratedMessage<CSFriendRecommendApplyRequest, CSFriendRecommendApplyRequest.Builder> {
  private CSFriendRecommendApplyRequest() { }
  private static readonly CSFriendRecommendApplyRequest defaultInstance = new CSFriendRecommendApplyRequest().MakeReadOnly();
  private static readonly string[] _cSFriendRecommendApplyRequestFieldNames = new string[] { "recommendId" };
  private static readonly uint[] _cSFriendRecommendApplyRequestFieldTags = new uint[] { 8 };
  public static CSFriendRecommendApplyRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFriendRecommendApplyRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFriendRecommendApplyRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFriendRecommendApplyRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFriendRecommendApplyRequest, CSFriendRecommendApplyRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFriendRecommendApplyRequest__FieldAccessorTable; }
  }
  
  public const int RecommendIdFieldNumber = 1;
  private pbc::PopsicleList<long> recommendId_ = new pbc::PopsicleList<long>();
  public scg::IList<long> RecommendIdList {
    get { return pbc::Lists.AsReadOnly(recommendId_); }
  }
  public int RecommendIdCount {
    get { return recommendId_.Count; }
  }
  public long GetRecommendId(int index) {
    return recommendId_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFriendRecommendApplyRequestFieldNames;
    if (recommendId_.Count > 0) {
      output.WriteInt64Array(1, field_names[0], recommendId_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (long element in RecommendIdList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * recommendId_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFriendRecommendApplyRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFriendRecommendApplyRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFriendRecommendApplyRequest MakeReadOnly() {
    recommendId_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFriendRecommendApplyRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFriendRecommendApplyRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFriendRecommendApplyRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFriendRecommendApplyRequest result;
    
    private CSFriendRecommendApplyRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFriendRecommendApplyRequest original = result;
        result = new CSFriendRecommendApplyRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFriendRecommendApplyRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFriendRecommendApplyRequest.Descriptor; }
    }
    
    public override CSFriendRecommendApplyRequest DefaultInstanceForType {
      get { return global::CSFriendRecommendApplyRequest.DefaultInstance; }
    }
    
    public override CSFriendRecommendApplyRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFriendRecommendApplyRequest) {
        return MergeFrom((CSFriendRecommendApplyRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFriendRecommendApplyRequest other) {
      if (other == global::CSFriendRecommendApplyRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.recommendId_.Count != 0) {
        result.recommendId_.Add(other.recommendId_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFriendRecommendApplyRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFriendRecommendApplyRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt64Array(tag, field_name, result.recommendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<long> RecommendIdList {
      get { return PrepareBuilder().recommendId_; }
    }
    public int RecommendIdCount {
      get { return result.RecommendIdCount; }
    }
    public long GetRecommendId(int index) {
      return result.GetRecommendId(index);
    }
    public Builder SetRecommendId(int index, long value) {
      PrepareBuilder();
      result.recommendId_[index] = value;
      return this;
    }
    public Builder AddRecommendId(long value) {
      PrepareBuilder();
      result.recommendId_.Add(value);
      return this;
    }
    public Builder AddRangeRecommendId(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.recommendId_.Add(values);
      return this;
    }
    public Builder ClearRecommendId() {
      PrepareBuilder();
      result.recommendId_.Clear();
      return this;
    }
  }
  static CSFriendRecommendApplyRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFriendRecommendApplyResponse : pb::GeneratedMessage<SCFriendRecommendApplyResponse, SCFriendRecommendApplyResponse.Builder> {
  private SCFriendRecommendApplyResponse() { }
  private static readonly SCFriendRecommendApplyResponse defaultInstance = new SCFriendRecommendApplyResponse().MakeReadOnly();
  private static readonly string[] _sCFriendRecommendApplyResponseFieldNames = new string[] { "recommendId", "status" };
  private static readonly uint[] _sCFriendRecommendApplyResponseFieldTags = new uint[] { 16, 10 };
  public static SCFriendRecommendApplyResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFriendRecommendApplyResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFriendRecommendApplyResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFriendRecommendApplyResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFriendRecommendApplyResponse, SCFriendRecommendApplyResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFriendRecommendApplyResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int RecommendIdFieldNumber = 2;
  private pbc::PopsicleList<long> recommendId_ = new pbc::PopsicleList<long>();
  public scg::IList<long> RecommendIdList {
    get { return pbc::Lists.AsReadOnly(recommendId_); }
  }
  public int RecommendIdCount {
    get { return recommendId_.Count; }
  }
  public long GetRecommendId(int index) {
    return recommendId_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFriendRecommendApplyResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[1], Status);
    }
    if (recommendId_.Count > 0) {
      output.WriteInt64Array(2, field_names[0], recommendId_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    {
      int dataSize = 0;
      foreach (long element in RecommendIdList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * recommendId_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFriendRecommendApplyResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFriendRecommendApplyResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFriendRecommendApplyResponse MakeReadOnly() {
    recommendId_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFriendRecommendApplyResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFriendRecommendApplyResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFriendRecommendApplyResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFriendRecommendApplyResponse result;
    
    private SCFriendRecommendApplyResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFriendRecommendApplyResponse original = result;
        result = new SCFriendRecommendApplyResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFriendRecommendApplyResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFriendRecommendApplyResponse.Descriptor; }
    }
    
    public override SCFriendRecommendApplyResponse DefaultInstanceForType {
      get { return global::SCFriendRecommendApplyResponse.DefaultInstance; }
    }
    
    public override SCFriendRecommendApplyResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFriendRecommendApplyResponse) {
        return MergeFrom((SCFriendRecommendApplyResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFriendRecommendApplyResponse other) {
      if (other == global::SCFriendRecommendApplyResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.recommendId_.Count != 0) {
        result.recommendId_.Add(other.recommendId_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFriendRecommendApplyResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFriendRecommendApplyResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18:
          case 16: {
            input.ReadInt64Array(tag, field_name, result.recommendId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<long> RecommendIdList {
      get { return PrepareBuilder().recommendId_; }
    }
    public int RecommendIdCount {
      get { return result.RecommendIdCount; }
    }
    public long GetRecommendId(int index) {
      return result.GetRecommendId(index);
    }
    public Builder SetRecommendId(int index, long value) {
      PrepareBuilder();
      result.recommendId_[index] = value;
      return this;
    }
    public Builder AddRecommendId(long value) {
      PrepareBuilder();
      result.recommendId_.Add(value);
      return this;
    }
    public Builder AddRangeRecommendId(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.recommendId_.Add(values);
      return this;
    }
    public Builder ClearRecommendId() {
      PrepareBuilder();
      result.recommendId_.Clear();
      return this;
    }
  }
  static SCFriendRecommendApplyResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBuildingListReq : pb::GeneratedMessage<CSBuildingListReq, CSBuildingListReq.Builder> {
  private CSBuildingListReq() { }
  private static readonly CSBuildingListReq defaultInstance = new CSBuildingListReq().MakeReadOnly();
  private static readonly string[] _cSBuildingListReqFieldNames = new string[] {  };
  private static readonly uint[] _cSBuildingListReqFieldTags = new uint[] {  };
  public static CSBuildingListReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBuildingListReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBuildingListReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSBuildingListReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBuildingListReq, CSBuildingListReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSBuildingListReq__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBuildingListReqFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBuildingListReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBuildingListReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBuildingListReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuildingListReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBuildingListReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBuildingListReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBuildingListReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBuildingListReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBuildingListReq result;
    
    private CSBuildingListReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBuildingListReq original = result;
        result = new CSBuildingListReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBuildingListReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBuildingListReq.Descriptor; }
    }
    
    public override CSBuildingListReq DefaultInstanceForType {
      get { return global::CSBuildingListReq.DefaultInstance; }
    }
    
    public override CSBuildingListReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBuildingListReq) {
        return MergeFrom((CSBuildingListReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBuildingListReq other) {
      if (other == global::CSBuildingListReq.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBuildingListReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBuildingListReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSBuildingListReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBuildingListResp : pb::GeneratedMessage<SCBuildingListResp, SCBuildingListResp.Builder> {
  private SCBuildingListResp() { }
  private static readonly SCBuildingListResp defaultInstance = new SCBuildingListResp().MakeReadOnly();
  private static readonly string[] _sCBuildingListRespFieldNames = new string[] { "infos" };
  private static readonly uint[] _sCBuildingListRespFieldTags = new uint[] { 10 };
  public static SCBuildingListResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBuildingListResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBuildingListResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCBuildingListResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBuildingListResp, SCBuildingListResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCBuildingListResp__FieldAccessorTable; }
  }
  
  public const int InfosFieldNumber = 1;
  private pbc::PopsicleList<global::BuildingInfo> infos_ = new pbc::PopsicleList<global::BuildingInfo>();
  public scg::IList<global::BuildingInfo> InfosList {
    get { return infos_; }
  }
  public int InfosCount {
    get { return infos_.Count; }
  }
  public global::BuildingInfo GetInfos(int index) {
    return infos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBuildingListRespFieldNames;
    if (infos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], infos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::BuildingInfo element in InfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBuildingListResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBuildingListResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBuildingListResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuildingListResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBuildingListResp MakeReadOnly() {
    infos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBuildingListResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBuildingListResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBuildingListResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBuildingListResp result;
    
    private SCBuildingListResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBuildingListResp original = result;
        result = new SCBuildingListResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBuildingListResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBuildingListResp.Descriptor; }
    }
    
    public override SCBuildingListResp DefaultInstanceForType {
      get { return global::SCBuildingListResp.DefaultInstance; }
    }
    
    public override SCBuildingListResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBuildingListResp) {
        return MergeFrom((SCBuildingListResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBuildingListResp other) {
      if (other == global::SCBuildingListResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.infos_.Count != 0) {
        result.infos_.Add(other.infos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBuildingListRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBuildingListRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.infos_, global::BuildingInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::BuildingInfo> InfosList {
      get { return PrepareBuilder().infos_; }
    }
    public int InfosCount {
      get { return result.InfosCount; }
    }
    public global::BuildingInfo GetInfos(int index) {
      return result.GetInfos(index);
    }
    public Builder SetInfos(int index, global::BuildingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.infos_[index] = value;
      return this;
    }
    public Builder SetInfos(int index, global::BuildingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.infos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddInfos(global::BuildingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.infos_.Add(value);
      return this;
    }
    public Builder AddInfos(global::BuildingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.infos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeInfos(scg::IEnumerable<global::BuildingInfo> values) {
      PrepareBuilder();
      result.infos_.Add(values);
      return this;
    }
    public Builder ClearInfos() {
      PrepareBuilder();
      result.infos_.Clear();
      return this;
    }
  }
  static SCBuildingListResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BuildingInfo : pb::GeneratedMessage<BuildingInfo, BuildingInfo.Builder> {
  private BuildingInfo() { }
  private static readonly BuildingInfo defaultInstance = new BuildingInfo().MakeReadOnly();
  private static readonly string[] _buildingInfoFieldNames = new string[] { "buildingId", "status" };
  private static readonly uint[] _buildingInfoFieldTags = new uint[] { 8, 16 };
  public static BuildingInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override BuildingInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override BuildingInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_BuildingInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<BuildingInfo, BuildingInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_BuildingInfo__FieldAccessorTable; }
  }
  
  public const int BuildingIdFieldNumber = 1;
  private bool hasBuildingId;
  private long buildingId_;
  public bool HasBuildingId {
    get { return hasBuildingId; }
  }
  public long BuildingId {
    get { return buildingId_; }
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _buildingInfoFieldNames;
    if (hasBuildingId) {
      output.WriteInt64(1, field_names[0], BuildingId);
    }
    if (hasStatus) {
      output.WriteInt32(2, field_names[1], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBuildingId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, BuildingId);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static BuildingInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BuildingInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BuildingInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BuildingInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BuildingInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BuildingInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static BuildingInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static BuildingInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static BuildingInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BuildingInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private BuildingInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(BuildingInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<BuildingInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(BuildingInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private BuildingInfo result;
    
    private BuildingInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        BuildingInfo original = result;
        result = new BuildingInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override BuildingInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::BuildingInfo.Descriptor; }
    }
    
    public override BuildingInfo DefaultInstanceForType {
      get { return global::BuildingInfo.DefaultInstance; }
    }
    
    public override BuildingInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is BuildingInfo) {
        return MergeFrom((BuildingInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(BuildingInfo other) {
      if (other == global::BuildingInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBuildingId) {
        BuildingId = other.BuildingId;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_buildingInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _buildingInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBuildingId = input.ReadInt64(ref result.buildingId_);
            break;
          }
          case 16: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBuildingId {
      get { return result.hasBuildingId; }
    }
    public long BuildingId {
      get { return result.BuildingId; }
      set { SetBuildingId(value); }
    }
    public Builder SetBuildingId(long value) {
      PrepareBuilder();
      result.hasBuildingId = true;
      result.buildingId_ = value;
      return this;
    }
    public Builder ClearBuildingId() {
      PrepareBuilder();
      result.hasBuildingId = false;
      result.buildingId_ = 0L;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static BuildingInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBuildingUnlockReq : pb::GeneratedMessage<CSBuildingUnlockReq, CSBuildingUnlockReq.Builder> {
  private CSBuildingUnlockReq() { }
  private static readonly CSBuildingUnlockReq defaultInstance = new CSBuildingUnlockReq().MakeReadOnly();
  private static readonly string[] _cSBuildingUnlockReqFieldNames = new string[] { "buildingId" };
  private static readonly uint[] _cSBuildingUnlockReqFieldTags = new uint[] { 8 };
  public static CSBuildingUnlockReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBuildingUnlockReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBuildingUnlockReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSBuildingUnlockReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBuildingUnlockReq, CSBuildingUnlockReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSBuildingUnlockReq__FieldAccessorTable; }
  }
  
  public const int BuildingIdFieldNumber = 1;
  private bool hasBuildingId;
  private long buildingId_;
  public bool HasBuildingId {
    get { return hasBuildingId; }
  }
  public long BuildingId {
    get { return buildingId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBuildingUnlockReqFieldNames;
    if (hasBuildingId) {
      output.WriteInt64(1, field_names[0], BuildingId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBuildingId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, BuildingId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBuildingUnlockReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuildingUnlockReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBuildingUnlockReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBuildingUnlockReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBuildingUnlockReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBuildingUnlockReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBuildingUnlockReq result;
    
    private CSBuildingUnlockReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBuildingUnlockReq original = result;
        result = new CSBuildingUnlockReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBuildingUnlockReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBuildingUnlockReq.Descriptor; }
    }
    
    public override CSBuildingUnlockReq DefaultInstanceForType {
      get { return global::CSBuildingUnlockReq.DefaultInstance; }
    }
    
    public override CSBuildingUnlockReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBuildingUnlockReq) {
        return MergeFrom((CSBuildingUnlockReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBuildingUnlockReq other) {
      if (other == global::CSBuildingUnlockReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBuildingId) {
        BuildingId = other.BuildingId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBuildingUnlockReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBuildingUnlockReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBuildingId = input.ReadInt64(ref result.buildingId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBuildingId {
      get { return result.hasBuildingId; }
    }
    public long BuildingId {
      get { return result.BuildingId; }
      set { SetBuildingId(value); }
    }
    public Builder SetBuildingId(long value) {
      PrepareBuilder();
      result.hasBuildingId = true;
      result.buildingId_ = value;
      return this;
    }
    public Builder ClearBuildingId() {
      PrepareBuilder();
      result.hasBuildingId = false;
      result.buildingId_ = 0L;
      return this;
    }
  }
  static CSBuildingUnlockReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBuildingUnlockResp : pb::GeneratedMessage<SCBuildingUnlockResp, SCBuildingUnlockResp.Builder> {
  private SCBuildingUnlockResp() { }
  private static readonly SCBuildingUnlockResp defaultInstance = new SCBuildingUnlockResp().MakeReadOnly();
  private static readonly string[] _sCBuildingUnlockRespFieldNames = new string[] { "buildingId", "responseStatus" };
  private static readonly uint[] _sCBuildingUnlockRespFieldTags = new uint[] { 16, 10 };
  public static SCBuildingUnlockResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBuildingUnlockResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBuildingUnlockResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCBuildingUnlockResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBuildingUnlockResp, SCBuildingUnlockResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCBuildingUnlockResp__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int BuildingIdFieldNumber = 2;
  private bool hasBuildingId;
  private long buildingId_;
  public bool HasBuildingId {
    get { return hasBuildingId; }
  }
  public long BuildingId {
    get { return buildingId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBuildingUnlockRespFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[1], ResponseStatus);
    }
    if (hasBuildingId) {
      output.WriteInt64(2, field_names[0], BuildingId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    if (hasBuildingId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, BuildingId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBuildingUnlockResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuildingUnlockResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBuildingUnlockResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBuildingUnlockResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBuildingUnlockResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBuildingUnlockResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBuildingUnlockResp result;
    
    private SCBuildingUnlockResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBuildingUnlockResp original = result;
        result = new SCBuildingUnlockResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBuildingUnlockResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBuildingUnlockResp.Descriptor; }
    }
    
    public override SCBuildingUnlockResp DefaultInstanceForType {
      get { return global::SCBuildingUnlockResp.DefaultInstance; }
    }
    
    public override SCBuildingUnlockResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBuildingUnlockResp) {
        return MergeFrom((SCBuildingUnlockResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBuildingUnlockResp other) {
      if (other == global::SCBuildingUnlockResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      if (other.HasBuildingId) {
        BuildingId = other.BuildingId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBuildingUnlockRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBuildingUnlockRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasBuildingId = input.ReadInt64(ref result.buildingId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
    
    public bool HasBuildingId {
      get { return result.hasBuildingId; }
    }
    public long BuildingId {
      get { return result.BuildingId; }
      set { SetBuildingId(value); }
    }
    public Builder SetBuildingId(long value) {
      PrepareBuilder();
      result.hasBuildingId = true;
      result.buildingId_ = value;
      return this;
    }
    public Builder ClearBuildingId() {
      PrepareBuilder();
      result.hasBuildingId = false;
      result.buildingId_ = 0L;
      return this;
    }
  }
  static SCBuildingUnlockResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCanTaskRequest : pb::GeneratedMessage<CSCanTaskRequest, CSCanTaskRequest.Builder> {
  private CSCanTaskRequest() { }
  private static readonly CSCanTaskRequest defaultInstance = new CSCanTaskRequest().MakeReadOnly();
  private static readonly string[] _cSCanTaskRequestFieldNames = new string[] { "taskId" };
  private static readonly uint[] _cSCanTaskRequestFieldTags = new uint[] { 8 };
  public static CSCanTaskRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCanTaskRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCanTaskRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSCanTaskRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCanTaskRequest, CSCanTaskRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSCanTaskRequest__FieldAccessorTable; }
  }
  
  public const int TaskIdFieldNumber = 1;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCanTaskRequestFieldNames;
    if (hasTaskId) {
      output.WriteInt64(1, field_names[0], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCanTaskRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCanTaskRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCanTaskRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCanTaskRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCanTaskRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCanTaskRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCanTaskRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCanTaskRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCanTaskRequest result;
    
    private CSCanTaskRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCanTaskRequest original = result;
        result = new CSCanTaskRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCanTaskRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCanTaskRequest.Descriptor; }
    }
    
    public override CSCanTaskRequest DefaultInstanceForType {
      get { return global::CSCanTaskRequest.DefaultInstance; }
    }
    
    public override CSCanTaskRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCanTaskRequest) {
        return MergeFrom((CSCanTaskRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCanTaskRequest other) {
      if (other == global::CSCanTaskRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCanTaskRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCanTaskRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static CSCanTaskRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCanTaskResponse : pb::GeneratedMessage<SCCanTaskResponse, SCCanTaskResponse.Builder> {
  private SCCanTaskResponse() { }
  private static readonly SCCanTaskResponse defaultInstance = new SCCanTaskResponse().MakeReadOnly();
  private static readonly string[] _sCCanTaskResponseFieldNames = new string[] { "canTask", "taskId" };
  private static readonly uint[] _sCCanTaskResponseFieldTags = new uint[] { 8, 16 };
  public static SCCanTaskResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCanTaskResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCanTaskResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCCanTaskResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCanTaskResponse, SCCanTaskResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCCanTaskResponse__FieldAccessorTable; }
  }
  
  public const int CanTaskFieldNumber = 1;
  private bool hasCanTask;
  private bool canTask_;
  public bool HasCanTask {
    get { return hasCanTask; }
  }
  public bool CanTask {
    get { return canTask_; }
  }
  
  public const int TaskIdFieldNumber = 2;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCanTaskResponseFieldNames;
    if (hasCanTask) {
      output.WriteBool(1, field_names[0], CanTask);
    }
    if (hasTaskId) {
      output.WriteInt64(2, field_names[1], TaskId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCanTask) {
      size += pb::CodedOutputStream.ComputeBoolSize(1, CanTask);
    }
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, TaskId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCanTaskResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCanTaskResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCanTaskResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCanTaskResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCanTaskResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCanTaskResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCanTaskResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCanTaskResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCanTaskResponse result;
    
    private SCCanTaskResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCanTaskResponse original = result;
        result = new SCCanTaskResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCanTaskResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCanTaskResponse.Descriptor; }
    }
    
    public override SCCanTaskResponse DefaultInstanceForType {
      get { return global::SCCanTaskResponse.DefaultInstance; }
    }
    
    public override SCCanTaskResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCanTaskResponse) {
        return MergeFrom((SCCanTaskResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCanTaskResponse other) {
      if (other == global::SCCanTaskResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCanTask) {
        CanTask = other.CanTask;
      }
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCanTaskResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCanTaskResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCanTask = input.ReadBool(ref result.canTask_);
            break;
          }
          case 16: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCanTask {
      get { return result.hasCanTask; }
    }
    public bool CanTask {
      get { return result.CanTask; }
      set { SetCanTask(value); }
    }
    public Builder SetCanTask(bool value) {
      PrepareBuilder();
      result.hasCanTask = true;
      result.canTask_ = value;
      return this;
    }
    public Builder ClearCanTask() {
      PrepareBuilder();
      result.hasCanTask = false;
      result.canTask_ = false;
      return this;
    }
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
  }
  static SCCanTaskResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCreceiveNewTitle : pb::GeneratedMessage<SCreceiveNewTitle, SCreceiveNewTitle.Builder> {
  private SCreceiveNewTitle() { }
  private static readonly SCreceiveNewTitle defaultInstance = new SCreceiveNewTitle().MakeReadOnly();
  private static readonly string[] _sCreceiveNewTitleFieldNames = new string[] { "title" };
  private static readonly uint[] _sCreceiveNewTitleFieldTags = new uint[] { 8 };
  public static SCreceiveNewTitle DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCreceiveNewTitle DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCreceiveNewTitle ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCreceiveNewTitle__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCreceiveNewTitle, SCreceiveNewTitle.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCreceiveNewTitle__FieldAccessorTable; }
  }
  
  public const int TitleFieldNumber = 1;
  private bool hasTitle;
  private long title_;
  public bool HasTitle {
    get { return hasTitle; }
  }
  public long Title {
    get { return title_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCreceiveNewTitleFieldNames;
    if (hasTitle) {
      output.WriteInt64(1, field_names[0], Title);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTitle) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Title);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCreceiveNewTitle ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCreceiveNewTitle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCreceiveNewTitle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCreceiveNewTitle MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCreceiveNewTitle prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCreceiveNewTitle, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCreceiveNewTitle cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCreceiveNewTitle result;
    
    private SCreceiveNewTitle PrepareBuilder() {
      if (resultIsReadOnly) {
        SCreceiveNewTitle original = result;
        result = new SCreceiveNewTitle();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCreceiveNewTitle MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCreceiveNewTitle.Descriptor; }
    }
    
    public override SCreceiveNewTitle DefaultInstanceForType {
      get { return global::SCreceiveNewTitle.DefaultInstance; }
    }
    
    public override SCreceiveNewTitle BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCreceiveNewTitle) {
        return MergeFrom((SCreceiveNewTitle) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCreceiveNewTitle other) {
      if (other == global::SCreceiveNewTitle.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTitle) {
        Title = other.Title;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCreceiveNewTitleFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCreceiveNewTitleFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTitle = input.ReadInt64(ref result.title_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public long Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(long value) {
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = 0L;
      return this;
    }
  }
  static SCreceiveNewTitle() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSRegGuestRequest : pb::GeneratedMessage<CSRegGuestRequest, CSRegGuestRequest.Builder> {
  private CSRegGuestRequest() { }
  private static readonly CSRegGuestRequest defaultInstance = new CSRegGuestRequest().MakeReadOnly();
  private static readonly string[] _cSRegGuestRequestFieldNames = new string[] { "ad", "deviceId", "osType" };
  private static readonly uint[] _cSRegGuestRequestFieldTags = new uint[] { 26, 10, 18 };
  public static CSRegGuestRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSRegGuestRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSRegGuestRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSRegGuestRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSRegGuestRequest, CSRegGuestRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSRegGuestRequest__FieldAccessorTable; }
  }
  
  public const int DeviceIdFieldNumber = 1;
  private bool hasDeviceId;
  private string deviceId_ = "";
  public bool HasDeviceId {
    get { return hasDeviceId; }
  }
  public string DeviceId {
    get { return deviceId_; }
  }
  
  public const int OsTypeFieldNumber = 2;
  private bool hasOsType;
  private string osType_ = "";
  public bool HasOsType {
    get { return hasOsType; }
  }
  public string OsType {
    get { return osType_; }
  }
  
  public const int AdFieldNumber = 3;
  private bool hasAd;
  private string ad_ = "";
  public bool HasAd {
    get { return hasAd; }
  }
  public string Ad {
    get { return ad_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSRegGuestRequestFieldNames;
    if (hasDeviceId) {
      output.WriteString(1, field_names[1], DeviceId);
    }
    if (hasOsType) {
      output.WriteString(2, field_names[2], OsType);
    }
    if (hasAd) {
      output.WriteString(3, field_names[0], Ad);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasDeviceId) {
      size += pb::CodedOutputStream.ComputeStringSize(1, DeviceId);
    }
    if (hasOsType) {
      size += pb::CodedOutputStream.ComputeStringSize(2, OsType);
    }
    if (hasAd) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Ad);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSRegGuestRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSRegGuestRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSRegGuestRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSRegGuestRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSRegGuestRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSRegGuestRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSRegGuestRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSRegGuestRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSRegGuestRequest result;
    
    private CSRegGuestRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSRegGuestRequest original = result;
        result = new CSRegGuestRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSRegGuestRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSRegGuestRequest.Descriptor; }
    }
    
    public override CSRegGuestRequest DefaultInstanceForType {
      get { return global::CSRegGuestRequest.DefaultInstance; }
    }
    
    public override CSRegGuestRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSRegGuestRequest) {
        return MergeFrom((CSRegGuestRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSRegGuestRequest other) {
      if (other == global::CSRegGuestRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasDeviceId) {
        DeviceId = other.DeviceId;
      }
      if (other.HasOsType) {
        OsType = other.OsType;
      }
      if (other.HasAd) {
        Ad = other.Ad;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSRegGuestRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSRegGuestRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasDeviceId = input.ReadString(ref result.deviceId_);
            break;
          }
          case 18: {
            result.hasOsType = input.ReadString(ref result.osType_);
            break;
          }
          case 26: {
            result.hasAd = input.ReadString(ref result.ad_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasDeviceId {
      get { return result.hasDeviceId; }
    }
    public string DeviceId {
      get { return result.DeviceId; }
      set { SetDeviceId(value); }
    }
    public Builder SetDeviceId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeviceId = true;
      result.deviceId_ = value;
      return this;
    }
    public Builder ClearDeviceId() {
      PrepareBuilder();
      result.hasDeviceId = false;
      result.deviceId_ = "";
      return this;
    }
    
    public bool HasOsType {
      get { return result.hasOsType; }
    }
    public string OsType {
      get { return result.OsType; }
      set { SetOsType(value); }
    }
    public Builder SetOsType(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOsType = true;
      result.osType_ = value;
      return this;
    }
    public Builder ClearOsType() {
      PrepareBuilder();
      result.hasOsType = false;
      result.osType_ = "";
      return this;
    }
    
    public bool HasAd {
      get { return result.hasAd; }
    }
    public string Ad {
      get { return result.Ad; }
      set { SetAd(value); }
    }
    public Builder SetAd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAd = true;
      result.ad_ = value;
      return this;
    }
    public Builder ClearAd() {
      PrepareBuilder();
      result.hasAd = false;
      result.ad_ = "";
      return this;
    }
  }
  static CSRegGuestRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCRegGuestResponse : pb::GeneratedMessage<SCRegGuestResponse, SCRegGuestResponse.Builder> {
  private SCRegGuestResponse() { }
  private static readonly SCRegGuestResponse defaultInstance = new SCRegGuestResponse().MakeReadOnly();
  private static readonly string[] _sCRegGuestResponseFieldNames = new string[] { "guest_identify", "status" };
  private static readonly uint[] _sCRegGuestResponseFieldTags = new uint[] { 18, 10 };
  public static SCRegGuestResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCRegGuestResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCRegGuestResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCRegGuestResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCRegGuestResponse, SCRegGuestResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCRegGuestResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int GuestIdentifyFieldNumber = 2;
  private bool hasGuestIdentify;
  private string guestIdentify_ = "";
  public bool HasGuestIdentify {
    get { return hasGuestIdentify; }
  }
  public string GuestIdentify {
    get { return guestIdentify_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCRegGuestResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[1], Status);
    }
    if (hasGuestIdentify) {
      output.WriteString(2, field_names[0], GuestIdentify);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasGuestIdentify) {
      size += pb::CodedOutputStream.ComputeStringSize(2, GuestIdentify);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCRegGuestResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCRegGuestResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCRegGuestResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCRegGuestResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCRegGuestResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCRegGuestResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCRegGuestResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCRegGuestResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCRegGuestResponse result;
    
    private SCRegGuestResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCRegGuestResponse original = result;
        result = new SCRegGuestResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCRegGuestResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCRegGuestResponse.Descriptor; }
    }
    
    public override SCRegGuestResponse DefaultInstanceForType {
      get { return global::SCRegGuestResponse.DefaultInstance; }
    }
    
    public override SCRegGuestResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCRegGuestResponse) {
        return MergeFrom((SCRegGuestResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCRegGuestResponse other) {
      if (other == global::SCRegGuestResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasGuestIdentify) {
        GuestIdentify = other.GuestIdentify;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCRegGuestResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCRegGuestResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasGuestIdentify = input.ReadString(ref result.guestIdentify_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasGuestIdentify {
      get { return result.hasGuestIdentify; }
    }
    public string GuestIdentify {
      get { return result.GuestIdentify; }
      set { SetGuestIdentify(value); }
    }
    public Builder SetGuestIdentify(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGuestIdentify = true;
      result.guestIdentify_ = value;
      return this;
    }
    public Builder ClearGuestIdentify() {
      PrepareBuilder();
      result.hasGuestIdentify = false;
      result.guestIdentify_ = "";
      return this;
    }
  }
  static SCRegGuestResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSIdentifyCheckRequest : pb::GeneratedMessage<CSIdentifyCheckRequest, CSIdentifyCheckRequest.Builder> {
  private CSIdentifyCheckRequest() { }
  private static readonly CSIdentifyCheckRequest defaultInstance = new CSIdentifyCheckRequest().MakeReadOnly();
  private static readonly string[] _cSIdentifyCheckRequestFieldNames = new string[] { "identify" };
  private static readonly uint[] _cSIdentifyCheckRequestFieldTags = new uint[] { 10 };
  public static CSIdentifyCheckRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSIdentifyCheckRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSIdentifyCheckRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSIdentifyCheckRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSIdentifyCheckRequest, CSIdentifyCheckRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSIdentifyCheckRequest__FieldAccessorTable; }
  }
  
  public const int IdentifyFieldNumber = 1;
  private bool hasIdentify;
  private string identify_ = "";
  public bool HasIdentify {
    get { return hasIdentify; }
  }
  public string Identify {
    get { return identify_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSIdentifyCheckRequestFieldNames;
    if (hasIdentify) {
      output.WriteString(1, field_names[0], Identify);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIdentify) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Identify);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSIdentifyCheckRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSIdentifyCheckRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSIdentifyCheckRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSIdentifyCheckRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSIdentifyCheckRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSIdentifyCheckRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSIdentifyCheckRequest result;
    
    private CSIdentifyCheckRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSIdentifyCheckRequest original = result;
        result = new CSIdentifyCheckRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSIdentifyCheckRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSIdentifyCheckRequest.Descriptor; }
    }
    
    public override CSIdentifyCheckRequest DefaultInstanceForType {
      get { return global::CSIdentifyCheckRequest.DefaultInstance; }
    }
    
    public override CSIdentifyCheckRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSIdentifyCheckRequest) {
        return MergeFrom((CSIdentifyCheckRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSIdentifyCheckRequest other) {
      if (other == global::CSIdentifyCheckRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIdentify) {
        Identify = other.Identify;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSIdentifyCheckRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSIdentifyCheckRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasIdentify = input.ReadString(ref result.identify_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIdentify {
      get { return result.hasIdentify; }
    }
    public string Identify {
      get { return result.Identify; }
      set { SetIdentify(value); }
    }
    public Builder SetIdentify(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = value;
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.hasIdentify = false;
      result.identify_ = "";
      return this;
    }
  }
  static CSIdentifyCheckRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCIdentifyCheckRepsonse : pb::GeneratedMessage<SCIdentifyCheckRepsonse, SCIdentifyCheckRepsonse.Builder> {
  private SCIdentifyCheckRepsonse() { }
  private static readonly SCIdentifyCheckRepsonse defaultInstance = new SCIdentifyCheckRepsonse().MakeReadOnly();
  private static readonly string[] _sCIdentifyCheckRepsonseFieldNames = new string[] { "accessToken", "deadline", "startTime", "status", "thirdBind" };
  private static readonly uint[] _sCIdentifyCheckRepsonseFieldTags = new uint[] { 18, 32, 24, 10, 40 };
  public static SCIdentifyCheckRepsonse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCIdentifyCheckRepsonse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCIdentifyCheckRepsonse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCIdentifyCheckRepsonse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCIdentifyCheckRepsonse, SCIdentifyCheckRepsonse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCIdentifyCheckRepsonse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int AccessTokenFieldNumber = 2;
  private bool hasAccessToken;
  private string accessToken_ = "";
  public bool HasAccessToken {
    get { return hasAccessToken; }
  }
  public string AccessToken {
    get { return accessToken_; }
  }
  
  public const int StartTimeFieldNumber = 3;
  private bool hasStartTime;
  private long startTime_;
  public bool HasStartTime {
    get { return hasStartTime; }
  }
  public long StartTime {
    get { return startTime_; }
  }
  
  public const int DeadlineFieldNumber = 4;
  private bool hasDeadline;
  private long deadline_;
  public bool HasDeadline {
    get { return hasDeadline; }
  }
  public long Deadline {
    get { return deadline_; }
  }
  
  public const int ThirdBindFieldNumber = 5;
  private bool hasThirdBind;
  private int thirdBind_;
  public bool HasThirdBind {
    get { return hasThirdBind; }
  }
  public int ThirdBind {
    get { return thirdBind_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCIdentifyCheckRepsonseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[3], Status);
    }
    if (hasAccessToken) {
      output.WriteString(2, field_names[0], AccessToken);
    }
    if (hasStartTime) {
      output.WriteInt64(3, field_names[2], StartTime);
    }
    if (hasDeadline) {
      output.WriteInt64(4, field_names[1], Deadline);
    }
    if (hasThirdBind) {
      output.WriteInt32(5, field_names[4], ThirdBind);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasAccessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(2, AccessToken);
    }
    if (hasStartTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, StartTime);
    }
    if (hasDeadline) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, Deadline);
    }
    if (hasThirdBind) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, ThirdBind);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCIdentifyCheckRepsonse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCIdentifyCheckRepsonse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCIdentifyCheckRepsonse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCIdentifyCheckRepsonse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCIdentifyCheckRepsonse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCIdentifyCheckRepsonse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCIdentifyCheckRepsonse result;
    
    private SCIdentifyCheckRepsonse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCIdentifyCheckRepsonse original = result;
        result = new SCIdentifyCheckRepsonse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCIdentifyCheckRepsonse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCIdentifyCheckRepsonse.Descriptor; }
    }
    
    public override SCIdentifyCheckRepsonse DefaultInstanceForType {
      get { return global::SCIdentifyCheckRepsonse.DefaultInstance; }
    }
    
    public override SCIdentifyCheckRepsonse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCIdentifyCheckRepsonse) {
        return MergeFrom((SCIdentifyCheckRepsonse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCIdentifyCheckRepsonse other) {
      if (other == global::SCIdentifyCheckRepsonse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasDeadline) {
        Deadline = other.Deadline;
      }
      if (other.HasThirdBind) {
        ThirdBind = other.ThirdBind;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCIdentifyCheckRepsonseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCIdentifyCheckRepsonseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasAccessToken = input.ReadString(ref result.accessToken_);
            break;
          }
          case 24: {
            result.hasStartTime = input.ReadInt64(ref result.startTime_);
            break;
          }
          case 32: {
            result.hasDeadline = input.ReadInt64(ref result.deadline_);
            break;
          }
          case 40: {
            result.hasThirdBind = input.ReadInt32(ref result.thirdBind_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasAccessToken {
      get { return result.hasAccessToken; }
    }
    public string AccessToken {
      get { return result.AccessToken; }
      set { SetAccessToken(value); }
    }
    public Builder SetAccessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccessToken = true;
      result.accessToken_ = value;
      return this;
    }
    public Builder ClearAccessToken() {
      PrepareBuilder();
      result.hasAccessToken = false;
      result.accessToken_ = "";
      return this;
    }
    
    public bool HasStartTime {
      get { return result.hasStartTime; }
    }
    public long StartTime {
      get { return result.StartTime; }
      set { SetStartTime(value); }
    }
    public Builder SetStartTime(long value) {
      PrepareBuilder();
      result.hasStartTime = true;
      result.startTime_ = value;
      return this;
    }
    public Builder ClearStartTime() {
      PrepareBuilder();
      result.hasStartTime = false;
      result.startTime_ = 0L;
      return this;
    }
    
    public bool HasDeadline {
      get { return result.hasDeadline; }
    }
    public long Deadline {
      get { return result.Deadline; }
      set { SetDeadline(value); }
    }
    public Builder SetDeadline(long value) {
      PrepareBuilder();
      result.hasDeadline = true;
      result.deadline_ = value;
      return this;
    }
    public Builder ClearDeadline() {
      PrepareBuilder();
      result.hasDeadline = false;
      result.deadline_ = 0L;
      return this;
    }
    
    public bool HasThirdBind {
      get { return result.hasThirdBind; }
    }
    public int ThirdBind {
      get { return result.ThirdBind; }
      set { SetThirdBind(value); }
    }
    public Builder SetThirdBind(int value) {
      PrepareBuilder();
      result.hasThirdBind = true;
      result.thirdBind_ = value;
      return this;
    }
    public Builder ClearThirdBind() {
      PrepareBuilder();
      result.hasThirdBind = false;
      result.thirdBind_ = 0;
      return this;
    }
  }
  static SCIdentifyCheckRepsonse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFBLoginRequest : pb::GeneratedMessage<CSFBLoginRequest, CSFBLoginRequest.Builder> {
  private CSFBLoginRequest() { }
  private static readonly CSFBLoginRequest defaultInstance = new CSFBLoginRequest().MakeReadOnly();
  private static readonly string[] _cSFBLoginRequestFieldNames = new string[] { "accessToken", "ad", "deviceId", "expiresIn", "fbId", "osType" };
  private static readonly uint[] _cSFBLoginRequestFieldTags = new uint[] { 10, 50, 34, 24, 18, 40 };
  public static CSFBLoginRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFBLoginRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFBLoginRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFBLoginRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFBLoginRequest, CSFBLoginRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFBLoginRequest__FieldAccessorTable; }
  }
  
  public const int AccessTokenFieldNumber = 1;
  private bool hasAccessToken;
  private string accessToken_ = "";
  public bool HasAccessToken {
    get { return hasAccessToken; }
  }
  public string AccessToken {
    get { return accessToken_; }
  }
  
  public const int FbIdFieldNumber = 2;
  private bool hasFbId;
  private string fbId_ = "";
  public bool HasFbId {
    get { return hasFbId; }
  }
  public string FbId {
    get { return fbId_; }
  }
  
  public const int ExpiresInFieldNumber = 3;
  private bool hasExpiresIn;
  private long expiresIn_;
  public bool HasExpiresIn {
    get { return hasExpiresIn; }
  }
  public long ExpiresIn {
    get { return expiresIn_; }
  }
  
  public const int DeviceIdFieldNumber = 4;
  private bool hasDeviceId;
  private string deviceId_ = "";
  public bool HasDeviceId {
    get { return hasDeviceId; }
  }
  public string DeviceId {
    get { return deviceId_; }
  }
  
  public const int OsTypeFieldNumber = 5;
  private bool hasOsType;
  private global::OsType osType_ = global::OsType.ios;
  public bool HasOsType {
    get { return hasOsType; }
  }
  public global::OsType OsType {
    get { return osType_; }
  }
  
  public const int AdFieldNumber = 6;
  private bool hasAd;
  private string ad_ = "";
  public bool HasAd {
    get { return hasAd; }
  }
  public string Ad {
    get { return ad_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFBLoginRequestFieldNames;
    if (hasAccessToken) {
      output.WriteString(1, field_names[0], AccessToken);
    }
    if (hasFbId) {
      output.WriteString(2, field_names[4], FbId);
    }
    if (hasExpiresIn) {
      output.WriteInt64(3, field_names[3], ExpiresIn);
    }
    if (hasDeviceId) {
      output.WriteString(4, field_names[2], DeviceId);
    }
    if (hasOsType) {
      output.WriteEnum(5, field_names[5], (int) OsType, OsType);
    }
    if (hasAd) {
      output.WriteString(6, field_names[1], Ad);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasAccessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(1, AccessToken);
    }
    if (hasFbId) {
      size += pb::CodedOutputStream.ComputeStringSize(2, FbId);
    }
    if (hasExpiresIn) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, ExpiresIn);
    }
    if (hasDeviceId) {
      size += pb::CodedOutputStream.ComputeStringSize(4, DeviceId);
    }
    if (hasOsType) {
      size += pb::CodedOutputStream.ComputeEnumSize(5, (int) OsType);
    }
    if (hasAd) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Ad);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFBLoginRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFBLoginRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFBLoginRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFBLoginRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFBLoginRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFBLoginRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFBLoginRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFBLoginRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFBLoginRequest result;
    
    private CSFBLoginRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFBLoginRequest original = result;
        result = new CSFBLoginRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFBLoginRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFBLoginRequest.Descriptor; }
    }
    
    public override CSFBLoginRequest DefaultInstanceForType {
      get { return global::CSFBLoginRequest.DefaultInstance; }
    }
    
    public override CSFBLoginRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFBLoginRequest) {
        return MergeFrom((CSFBLoginRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFBLoginRequest other) {
      if (other == global::CSFBLoginRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      if (other.HasFbId) {
        FbId = other.FbId;
      }
      if (other.HasExpiresIn) {
        ExpiresIn = other.ExpiresIn;
      }
      if (other.HasDeviceId) {
        DeviceId = other.DeviceId;
      }
      if (other.HasOsType) {
        OsType = other.OsType;
      }
      if (other.HasAd) {
        Ad = other.Ad;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFBLoginRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFBLoginRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasAccessToken = input.ReadString(ref result.accessToken_);
            break;
          }
          case 18: {
            result.hasFbId = input.ReadString(ref result.fbId_);
            break;
          }
          case 24: {
            result.hasExpiresIn = input.ReadInt64(ref result.expiresIn_);
            break;
          }
          case 34: {
            result.hasDeviceId = input.ReadString(ref result.deviceId_);
            break;
          }
          case 40: {
            object unknown;
            if(input.ReadEnum(ref result.osType_, out unknown)) {
              result.hasOsType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(5, (ulong)(int)unknown);
            }
            break;
          }
          case 50: {
            result.hasAd = input.ReadString(ref result.ad_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccessToken {
      get { return result.hasAccessToken; }
    }
    public string AccessToken {
      get { return result.AccessToken; }
      set { SetAccessToken(value); }
    }
    public Builder SetAccessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccessToken = true;
      result.accessToken_ = value;
      return this;
    }
    public Builder ClearAccessToken() {
      PrepareBuilder();
      result.hasAccessToken = false;
      result.accessToken_ = "";
      return this;
    }
    
    public bool HasFbId {
      get { return result.hasFbId; }
    }
    public string FbId {
      get { return result.FbId; }
      set { SetFbId(value); }
    }
    public Builder SetFbId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFbId = true;
      result.fbId_ = value;
      return this;
    }
    public Builder ClearFbId() {
      PrepareBuilder();
      result.hasFbId = false;
      result.fbId_ = "";
      return this;
    }
    
    public bool HasExpiresIn {
      get { return result.hasExpiresIn; }
    }
    public long ExpiresIn {
      get { return result.ExpiresIn; }
      set { SetExpiresIn(value); }
    }
    public Builder SetExpiresIn(long value) {
      PrepareBuilder();
      result.hasExpiresIn = true;
      result.expiresIn_ = value;
      return this;
    }
    public Builder ClearExpiresIn() {
      PrepareBuilder();
      result.hasExpiresIn = false;
      result.expiresIn_ = 0L;
      return this;
    }
    
    public bool HasDeviceId {
      get { return result.hasDeviceId; }
    }
    public string DeviceId {
      get { return result.DeviceId; }
      set { SetDeviceId(value); }
    }
    public Builder SetDeviceId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDeviceId = true;
      result.deviceId_ = value;
      return this;
    }
    public Builder ClearDeviceId() {
      PrepareBuilder();
      result.hasDeviceId = false;
      result.deviceId_ = "";
      return this;
    }
    
    public bool HasOsType {
     get { return result.hasOsType; }
    }
    public global::OsType OsType {
      get { return result.OsType; }
      set { SetOsType(value); }
    }
    public Builder SetOsType(global::OsType value) {
      PrepareBuilder();
      result.hasOsType = true;
      result.osType_ = value;
      return this;
    }
    public Builder ClearOsType() {
      PrepareBuilder();
      result.hasOsType = false;
      result.osType_ = global::OsType.ios;
      return this;
    }
    
    public bool HasAd {
      get { return result.hasAd; }
    }
    public string Ad {
      get { return result.Ad; }
      set { SetAd(value); }
    }
    public Builder SetAd(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAd = true;
      result.ad_ = value;
      return this;
    }
    public Builder ClearAd() {
      PrepareBuilder();
      result.hasAd = false;
      result.ad_ = "";
      return this;
    }
  }
  static CSFBLoginRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFBLoginResponse : pb::GeneratedMessage<SCFBLoginResponse, SCFBLoginResponse.Builder> {
  private SCFBLoginResponse() { }
  private static readonly SCFBLoginResponse defaultInstance = new SCFBLoginResponse().MakeReadOnly();
  private static readonly string[] _sCFBLoginResponseFieldNames = new string[] { "identify", "longLifeAcessToken", "status" };
  private static readonly uint[] _sCFBLoginResponseFieldTags = new uint[] { 18, 26, 10 };
  public static SCFBLoginResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFBLoginResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFBLoginResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFBLoginResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFBLoginResponse, SCFBLoginResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFBLoginResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int IdentifyFieldNumber = 2;
  private bool hasIdentify;
  private string identify_ = "";
  public bool HasIdentify {
    get { return hasIdentify; }
  }
  public string Identify {
    get { return identify_; }
  }
  
  public const int LongLifeAcessTokenFieldNumber = 3;
  private bool hasLongLifeAcessToken;
  private string longLifeAcessToken_ = "";
  public bool HasLongLifeAcessToken {
    get { return hasLongLifeAcessToken; }
  }
  public string LongLifeAcessToken {
    get { return longLifeAcessToken_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFBLoginResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[2], Status);
    }
    if (hasIdentify) {
      output.WriteString(2, field_names[0], Identify);
    }
    if (hasLongLifeAcessToken) {
      output.WriteString(3, field_names[1], LongLifeAcessToken);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasIdentify) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Identify);
    }
    if (hasLongLifeAcessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(3, LongLifeAcessToken);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFBLoginResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFBLoginResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFBLoginResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFBLoginResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFBLoginResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFBLoginResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFBLoginResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFBLoginResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFBLoginResponse result;
    
    private SCFBLoginResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFBLoginResponse original = result;
        result = new SCFBLoginResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFBLoginResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFBLoginResponse.Descriptor; }
    }
    
    public override SCFBLoginResponse DefaultInstanceForType {
      get { return global::SCFBLoginResponse.DefaultInstance; }
    }
    
    public override SCFBLoginResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFBLoginResponse) {
        return MergeFrom((SCFBLoginResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFBLoginResponse other) {
      if (other == global::SCFBLoginResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasIdentify) {
        Identify = other.Identify;
      }
      if (other.HasLongLifeAcessToken) {
        LongLifeAcessToken = other.LongLifeAcessToken;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFBLoginResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFBLoginResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasIdentify = input.ReadString(ref result.identify_);
            break;
          }
          case 26: {
            result.hasLongLifeAcessToken = input.ReadString(ref result.longLifeAcessToken_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasIdentify {
      get { return result.hasIdentify; }
    }
    public string Identify {
      get { return result.Identify; }
      set { SetIdentify(value); }
    }
    public Builder SetIdentify(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = value;
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.hasIdentify = false;
      result.identify_ = "";
      return this;
    }
    
    public bool HasLongLifeAcessToken {
      get { return result.hasLongLifeAcessToken; }
    }
    public string LongLifeAcessToken {
      get { return result.LongLifeAcessToken; }
      set { SetLongLifeAcessToken(value); }
    }
    public Builder SetLongLifeAcessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLongLifeAcessToken = true;
      result.longLifeAcessToken_ = value;
      return this;
    }
    public Builder ClearLongLifeAcessToken() {
      PrepareBuilder();
      result.hasLongLifeAcessToken = false;
      result.longLifeAcessToken_ = "";
      return this;
    }
  }
  static SCFBLoginResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSFBBindRequest : pb::GeneratedMessage<CSFBBindRequest, CSFBBindRequest.Builder> {
  private CSFBBindRequest() { }
  private static readonly CSFBBindRequest defaultInstance = new CSFBBindRequest().MakeReadOnly();
  private static readonly string[] _cSFBBindRequestFieldNames = new string[] { "accessToken", "expiresIn", "fbId", "identify" };
  private static readonly uint[] _cSFBBindRequestFieldTags = new uint[] { 18, 32, 26, 10 };
  public static CSFBBindRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSFBBindRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSFBBindRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSFBBindRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSFBBindRequest, CSFBBindRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSFBBindRequest__FieldAccessorTable; }
  }
  
  public const int IdentifyFieldNumber = 1;
  private bool hasIdentify;
  private string identify_ = "";
  public bool HasIdentify {
    get { return hasIdentify; }
  }
  public string Identify {
    get { return identify_; }
  }
  
  public const int AccessTokenFieldNumber = 2;
  private bool hasAccessToken;
  private string accessToken_ = "";
  public bool HasAccessToken {
    get { return hasAccessToken; }
  }
  public string AccessToken {
    get { return accessToken_; }
  }
  
  public const int FbIdFieldNumber = 3;
  private bool hasFbId;
  private string fbId_ = "";
  public bool HasFbId {
    get { return hasFbId; }
  }
  public string FbId {
    get { return fbId_; }
  }
  
  public const int ExpiresInFieldNumber = 4;
  private bool hasExpiresIn;
  private long expiresIn_;
  public bool HasExpiresIn {
    get { return hasExpiresIn; }
  }
  public long ExpiresIn {
    get { return expiresIn_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSFBBindRequestFieldNames;
    if (hasIdentify) {
      output.WriteString(1, field_names[3], Identify);
    }
    if (hasAccessToken) {
      output.WriteString(2, field_names[0], AccessToken);
    }
    if (hasFbId) {
      output.WriteString(3, field_names[2], FbId);
    }
    if (hasExpiresIn) {
      output.WriteInt64(4, field_names[1], ExpiresIn);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasIdentify) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Identify);
    }
    if (hasAccessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(2, AccessToken);
    }
    if (hasFbId) {
      size += pb::CodedOutputStream.ComputeStringSize(3, FbId);
    }
    if (hasExpiresIn) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, ExpiresIn);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSFBBindRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSFBBindRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSFBBindRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSFBBindRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSFBBindRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSFBBindRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSFBBindRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSFBBindRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSFBBindRequest result;
    
    private CSFBBindRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSFBBindRequest original = result;
        result = new CSFBBindRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSFBBindRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSFBBindRequest.Descriptor; }
    }
    
    public override CSFBBindRequest DefaultInstanceForType {
      get { return global::CSFBBindRequest.DefaultInstance; }
    }
    
    public override CSFBBindRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSFBBindRequest) {
        return MergeFrom((CSFBBindRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSFBBindRequest other) {
      if (other == global::CSFBBindRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIdentify) {
        Identify = other.Identify;
      }
      if (other.HasAccessToken) {
        AccessToken = other.AccessToken;
      }
      if (other.HasFbId) {
        FbId = other.FbId;
      }
      if (other.HasExpiresIn) {
        ExpiresIn = other.ExpiresIn;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSFBBindRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSFBBindRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasIdentify = input.ReadString(ref result.identify_);
            break;
          }
          case 18: {
            result.hasAccessToken = input.ReadString(ref result.accessToken_);
            break;
          }
          case 26: {
            result.hasFbId = input.ReadString(ref result.fbId_);
            break;
          }
          case 32: {
            result.hasExpiresIn = input.ReadInt64(ref result.expiresIn_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIdentify {
      get { return result.hasIdentify; }
    }
    public string Identify {
      get { return result.Identify; }
      set { SetIdentify(value); }
    }
    public Builder SetIdentify(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = value;
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.hasIdentify = false;
      result.identify_ = "";
      return this;
    }
    
    public bool HasAccessToken {
      get { return result.hasAccessToken; }
    }
    public string AccessToken {
      get { return result.AccessToken; }
      set { SetAccessToken(value); }
    }
    public Builder SetAccessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAccessToken = true;
      result.accessToken_ = value;
      return this;
    }
    public Builder ClearAccessToken() {
      PrepareBuilder();
      result.hasAccessToken = false;
      result.accessToken_ = "";
      return this;
    }
    
    public bool HasFbId {
      get { return result.hasFbId; }
    }
    public string FbId {
      get { return result.FbId; }
      set { SetFbId(value); }
    }
    public Builder SetFbId(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFbId = true;
      result.fbId_ = value;
      return this;
    }
    public Builder ClearFbId() {
      PrepareBuilder();
      result.hasFbId = false;
      result.fbId_ = "";
      return this;
    }
    
    public bool HasExpiresIn {
      get { return result.hasExpiresIn; }
    }
    public long ExpiresIn {
      get { return result.ExpiresIn; }
      set { SetExpiresIn(value); }
    }
    public Builder SetExpiresIn(long value) {
      PrepareBuilder();
      result.hasExpiresIn = true;
      result.expiresIn_ = value;
      return this;
    }
    public Builder ClearExpiresIn() {
      PrepareBuilder();
      result.hasExpiresIn = false;
      result.expiresIn_ = 0L;
      return this;
    }
  }
  static CSFBBindRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCFBBindResponse : pb::GeneratedMessage<SCFBBindResponse, SCFBBindResponse.Builder> {
  private SCFBBindResponse() { }
  private static readonly SCFBBindResponse defaultInstance = new SCFBBindResponse().MakeReadOnly();
  private static readonly string[] _sCFBBindResponseFieldNames = new string[] { "cashCount", "hasBeenBinded", "icon", "id", "identify", "level", "longLifeAcessToken", "name", "status" };
  private static readonly uint[] _sCFBBindResponseFieldTags = new uint[] { 64, 32, 74, 40, 18, 56, 26, 50, 10 };
  public static SCFBBindResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCFBBindResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCFBBindResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCFBBindResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCFBBindResponse, SCFBBindResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCFBBindResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int IdentifyFieldNumber = 2;
  private bool hasIdentify;
  private string identify_ = "";
  public bool HasIdentify {
    get { return hasIdentify; }
  }
  public string Identify {
    get { return identify_; }
  }
  
  public const int LongLifeAcessTokenFieldNumber = 3;
  private bool hasLongLifeAcessToken;
  private string longLifeAcessToken_ = "";
  public bool HasLongLifeAcessToken {
    get { return hasLongLifeAcessToken; }
  }
  public string LongLifeAcessToken {
    get { return longLifeAcessToken_; }
  }
  
  public const int HasBeenBindedFieldNumber = 4;
  private bool hasHasBeenBinded;
  private bool hasBeenBinded_;
  public bool HasHasBeenBinded {
    get { return hasHasBeenBinded; }
  }
  public bool HasBeenBinded {
    get { return hasBeenBinded_; }
  }
  
  public const int IdFieldNumber = 5;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int NameFieldNumber = 6;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int LevelFieldNumber = 7;
  private bool hasLevel;
  private int level_;
  public bool HasLevel {
    get { return hasLevel; }
  }
  public int Level {
    get { return level_; }
  }
  
  public const int CashCountFieldNumber = 8;
  private bool hasCashCount;
  private int cashCount_;
  public bool HasCashCount {
    get { return hasCashCount; }
  }
  public int CashCount {
    get { return cashCount_; }
  }
  
  public const int IconFieldNumber = 9;
  private bool hasIcon;
  private string icon_ = "";
  public bool HasIcon {
    get { return hasIcon; }
  }
  public string Icon {
    get { return icon_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCFBBindResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[8], Status);
    }
    if (hasIdentify) {
      output.WriteString(2, field_names[4], Identify);
    }
    if (hasLongLifeAcessToken) {
      output.WriteString(3, field_names[6], LongLifeAcessToken);
    }
    if (hasHasBeenBinded) {
      output.WriteBool(4, field_names[1], HasBeenBinded);
    }
    if (hasId) {
      output.WriteInt64(5, field_names[3], Id);
    }
    if (hasName) {
      output.WriteString(6, field_names[7], Name);
    }
    if (hasLevel) {
      output.WriteInt32(7, field_names[5], Level);
    }
    if (hasCashCount) {
      output.WriteInt32(8, field_names[0], CashCount);
    }
    if (hasIcon) {
      output.WriteString(9, field_names[2], Icon);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasIdentify) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Identify);
    }
    if (hasLongLifeAcessToken) {
      size += pb::CodedOutputStream.ComputeStringSize(3, LongLifeAcessToken);
    }
    if (hasHasBeenBinded) {
      size += pb::CodedOutputStream.ComputeBoolSize(4, HasBeenBinded);
    }
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(5, Id);
    }
    if (hasName) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Name);
    }
    if (hasLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(7, Level);
    }
    if (hasCashCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(8, CashCount);
    }
    if (hasIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(9, Icon);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCFBBindResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCFBBindResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCFBBindResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCFBBindResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCFBBindResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCFBBindResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCFBBindResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCFBBindResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCFBBindResponse result;
    
    private SCFBBindResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCFBBindResponse original = result;
        result = new SCFBBindResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCFBBindResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCFBBindResponse.Descriptor; }
    }
    
    public override SCFBBindResponse DefaultInstanceForType {
      get { return global::SCFBBindResponse.DefaultInstance; }
    }
    
    public override SCFBBindResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCFBBindResponse) {
        return MergeFrom((SCFBBindResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCFBBindResponse other) {
      if (other == global::SCFBBindResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasIdentify) {
        Identify = other.Identify;
      }
      if (other.HasLongLifeAcessToken) {
        LongLifeAcessToken = other.LongLifeAcessToken;
      }
      if (other.HasHasBeenBinded) {
        HasBeenBinded = other.HasBeenBinded;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasLevel) {
        Level = other.Level;
      }
      if (other.HasCashCount) {
        CashCount = other.CashCount;
      }
      if (other.HasIcon) {
        Icon = other.Icon;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCFBBindResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCFBBindResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            result.hasIdentify = input.ReadString(ref result.identify_);
            break;
          }
          case 26: {
            result.hasLongLifeAcessToken = input.ReadString(ref result.longLifeAcessToken_);
            break;
          }
          case 32: {
            result.hasHasBeenBinded = input.ReadBool(ref result.hasBeenBinded_);
            break;
          }
          case 40: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 50: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 56: {
            result.hasLevel = input.ReadInt32(ref result.level_);
            break;
          }
          case 64: {
            result.hasCashCount = input.ReadInt32(ref result.cashCount_);
            break;
          }
          case 74: {
            result.hasIcon = input.ReadString(ref result.icon_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasIdentify {
      get { return result.hasIdentify; }
    }
    public string Identify {
      get { return result.Identify; }
      set { SetIdentify(value); }
    }
    public Builder SetIdentify(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIdentify = true;
      result.identify_ = value;
      return this;
    }
    public Builder ClearIdentify() {
      PrepareBuilder();
      result.hasIdentify = false;
      result.identify_ = "";
      return this;
    }
    
    public bool HasLongLifeAcessToken {
      get { return result.hasLongLifeAcessToken; }
    }
    public string LongLifeAcessToken {
      get { return result.LongLifeAcessToken; }
      set { SetLongLifeAcessToken(value); }
    }
    public Builder SetLongLifeAcessToken(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLongLifeAcessToken = true;
      result.longLifeAcessToken_ = value;
      return this;
    }
    public Builder ClearLongLifeAcessToken() {
      PrepareBuilder();
      result.hasLongLifeAcessToken = false;
      result.longLifeAcessToken_ = "";
      return this;
    }
    
    public bool HasHasBeenBinded {
      get { return result.hasHasBeenBinded; }
    }
    public bool HasBeenBinded {
      get { return result.HasBeenBinded; }
      set { SetHasBeenBinded(value); }
    }
    public Builder SetHasBeenBinded(bool value) {
      PrepareBuilder();
      result.hasHasBeenBinded = true;
      result.hasBeenBinded_ = value;
      return this;
    }
    public Builder ClearHasBeenBinded() {
      PrepareBuilder();
      result.hasHasBeenBinded = false;
      result.hasBeenBinded_ = false;
      return this;
    }
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasLevel {
      get { return result.hasLevel; }
    }
    public int Level {
      get { return result.Level; }
      set { SetLevel(value); }
    }
    public Builder SetLevel(int value) {
      PrepareBuilder();
      result.hasLevel = true;
      result.level_ = value;
      return this;
    }
    public Builder ClearLevel() {
      PrepareBuilder();
      result.hasLevel = false;
      result.level_ = 0;
      return this;
    }
    
    public bool HasCashCount {
      get { return result.hasCashCount; }
    }
    public int CashCount {
      get { return result.CashCount; }
      set { SetCashCount(value); }
    }
    public Builder SetCashCount(int value) {
      PrepareBuilder();
      result.hasCashCount = true;
      result.cashCount_ = value;
      return this;
    }
    public Builder ClearCashCount() {
      PrepareBuilder();
      result.hasCashCount = false;
      result.cashCount_ = 0;
      return this;
    }
    
    public bool HasIcon {
      get { return result.hasIcon; }
    }
    public string Icon {
      get { return result.Icon; }
      set { SetIcon(value); }
    }
    public Builder SetIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIcon = true;
      result.icon_ = value;
      return this;
    }
    public Builder ClearIcon() {
      PrepareBuilder();
      result.hasIcon = false;
      result.icon_ = "";
      return this;
    }
  }
  static SCFBBindResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCIdentifyCheckMuiltyMessage : pb::GeneratedMessage<SCIdentifyCheckMuiltyMessage, SCIdentifyCheckMuiltyMessage.Builder> {
  private SCIdentifyCheckMuiltyMessage() { }
  private static readonly SCIdentifyCheckMuiltyMessage defaultInstance = new SCIdentifyCheckMuiltyMessage().MakeReadOnly();
  private static readonly string[] _sCIdentifyCheckMuiltyMessageFieldNames = new string[] { "contents", "status" };
  private static readonly uint[] _sCIdentifyCheckMuiltyMessageFieldTags = new uint[] { 10, 18 };
  public static SCIdentifyCheckMuiltyMessage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCIdentifyCheckMuiltyMessage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCIdentifyCheckMuiltyMessage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCIdentifyCheckMuiltyMessage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCIdentifyCheckMuiltyMessage, SCIdentifyCheckMuiltyMessage.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCIdentifyCheckMuiltyMessage__FieldAccessorTable; }
  }
  
  public const int ContentsFieldNumber = 1;
  private pbc::PopsicleList<global::IdentifyCheckResponseContent> contents_ = new pbc::PopsicleList<global::IdentifyCheckResponseContent>();
  public scg::IList<global::IdentifyCheckResponseContent> ContentsList {
    get { return contents_; }
  }
  public int ContentsCount {
    get { return contents_.Count; }
  }
  public global::IdentifyCheckResponseContent GetContents(int index) {
    return contents_[index];
  }
  
  public const int StatusFieldNumber = 2;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCIdentifyCheckMuiltyMessageFieldNames;
    if (contents_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], contents_);
    }
    if (hasStatus) {
      output.WriteMessage(2, field_names[1], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::IdentifyCheckResponseContent element in ContentsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCIdentifyCheckMuiltyMessage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCIdentifyCheckMuiltyMessage MakeReadOnly() {
    contents_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCIdentifyCheckMuiltyMessage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCIdentifyCheckMuiltyMessage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCIdentifyCheckMuiltyMessage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCIdentifyCheckMuiltyMessage result;
    
    private SCIdentifyCheckMuiltyMessage PrepareBuilder() {
      if (resultIsReadOnly) {
        SCIdentifyCheckMuiltyMessage original = result;
        result = new SCIdentifyCheckMuiltyMessage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCIdentifyCheckMuiltyMessage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCIdentifyCheckMuiltyMessage.Descriptor; }
    }
    
    public override SCIdentifyCheckMuiltyMessage DefaultInstanceForType {
      get { return global::SCIdentifyCheckMuiltyMessage.DefaultInstance; }
    }
    
    public override SCIdentifyCheckMuiltyMessage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCIdentifyCheckMuiltyMessage) {
        return MergeFrom((SCIdentifyCheckMuiltyMessage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCIdentifyCheckMuiltyMessage other) {
      if (other == global::SCIdentifyCheckMuiltyMessage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.contents_.Count != 0) {
        result.contents_.Add(other.contents_);
      }
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCIdentifyCheckMuiltyMessageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCIdentifyCheckMuiltyMessageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.contents_, global::IdentifyCheckResponseContent.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::IdentifyCheckResponseContent> ContentsList {
      get { return PrepareBuilder().contents_; }
    }
    public int ContentsCount {
      get { return result.ContentsCount; }
    }
    public global::IdentifyCheckResponseContent GetContents(int index) {
      return result.GetContents(index);
    }
    public Builder SetContents(int index, global::IdentifyCheckResponseContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.contents_[index] = value;
      return this;
    }
    public Builder SetContents(int index, global::IdentifyCheckResponseContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.contents_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddContents(global::IdentifyCheckResponseContent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.contents_.Add(value);
      return this;
    }
    public Builder AddContents(global::IdentifyCheckResponseContent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.contents_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeContents(scg::IEnumerable<global::IdentifyCheckResponseContent> values) {
      PrepareBuilder();
      result.contents_.Add(values);
      return this;
    }
    public Builder ClearContents() {
      PrepareBuilder();
      result.contents_.Clear();
      return this;
    }
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCIdentifyCheckMuiltyMessage() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class IdentifyCheckResponseContent : pb::GeneratedMessage<IdentifyCheckResponseContent, IdentifyCheckResponseContent.Builder> {
  private IdentifyCheckResponseContent() { }
  private static readonly IdentifyCheckResponseContent defaultInstance = new IdentifyCheckResponseContent().MakeReadOnly();
  private static readonly string[] _identifyCheckResponseContentFieldNames = new string[] { "data", "msgId" };
  private static readonly uint[] _identifyCheckResponseContentFieldTags = new uint[] { 18, 8 };
  public static IdentifyCheckResponseContent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override IdentifyCheckResponseContent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override IdentifyCheckResponseContent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_IdentifyCheckResponseContent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<IdentifyCheckResponseContent, IdentifyCheckResponseContent.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_IdentifyCheckResponseContent__FieldAccessorTable; }
  }
  
  public const int MsgIdFieldNumber = 1;
  private bool hasMsgId;
  private int msgId_;
  public bool HasMsgId {
    get { return hasMsgId; }
  }
  public int MsgId {
    get { return msgId_; }
  }
  
  public const int DataFieldNumber = 2;
  private bool hasData;
  private string data_ = "";
  public bool HasData {
    get { return hasData; }
  }
  public string Data {
    get { return data_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _identifyCheckResponseContentFieldNames;
    if (hasMsgId) {
      output.WriteInt32(1, field_names[1], MsgId);
    }
    if (hasData) {
      output.WriteString(2, field_names[0], Data);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasMsgId) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, MsgId);
    }
    if (hasData) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Data);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static IdentifyCheckResponseContent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IdentifyCheckResponseContent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private IdentifyCheckResponseContent MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(IdentifyCheckResponseContent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<IdentifyCheckResponseContent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(IdentifyCheckResponseContent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private IdentifyCheckResponseContent result;
    
    private IdentifyCheckResponseContent PrepareBuilder() {
      if (resultIsReadOnly) {
        IdentifyCheckResponseContent original = result;
        result = new IdentifyCheckResponseContent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override IdentifyCheckResponseContent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::IdentifyCheckResponseContent.Descriptor; }
    }
    
    public override IdentifyCheckResponseContent DefaultInstanceForType {
      get { return global::IdentifyCheckResponseContent.DefaultInstance; }
    }
    
    public override IdentifyCheckResponseContent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is IdentifyCheckResponseContent) {
        return MergeFrom((IdentifyCheckResponseContent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(IdentifyCheckResponseContent other) {
      if (other == global::IdentifyCheckResponseContent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMsgId) {
        MsgId = other.MsgId;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_identifyCheckResponseContentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _identifyCheckResponseContentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMsgId = input.ReadInt32(ref result.msgId_);
            break;
          }
          case 18: {
            result.hasData = input.ReadString(ref result.data_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMsgId {
      get { return result.hasMsgId; }
    }
    public int MsgId {
      get { return result.MsgId; }
      set { SetMsgId(value); }
    }
    public Builder SetMsgId(int value) {
      PrepareBuilder();
      result.hasMsgId = true;
      result.msgId_ = value;
      return this;
    }
    public Builder ClearMsgId() {
      PrepareBuilder();
      result.hasMsgId = false;
      result.msgId_ = 0;
      return this;
    }
    
    public bool HasData {
      get { return result.hasData; }
    }
    public string Data {
      get { return result.Data; }
      set { SetData(value); }
    }
    public Builder SetData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasData = true;
      result.data_ = value;
      return this;
    }
    public Builder ClearData() {
      PrepareBuilder();
      result.hasData = false;
      result.data_ = "";
      return this;
    }
  }
  static IdentifyCheckResponseContent() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerPropSellRequest : pb::GeneratedMessage<PlayerPropSellRequest, PlayerPropSellRequest.Builder> {
  private PlayerPropSellRequest() { }
  private static readonly PlayerPropSellRequest defaultInstance = new PlayerPropSellRequest().MakeReadOnly();
  private static readonly string[] _playerPropSellRequestFieldNames = new string[] { "playerProps" };
  private static readonly uint[] _playerPropSellRequestFieldTags = new uint[] { 10 };
  public static PlayerPropSellRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerPropSellRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerPropSellRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PlayerPropSellRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerPropSellRequest, PlayerPropSellRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PlayerPropSellRequest__FieldAccessorTable; }
  }
  
  public const int PlayerPropsFieldNumber = 1;
  private pbc::PopsicleList<global::PlayerPropMsg> playerProps_ = new pbc::PopsicleList<global::PlayerPropMsg>();
  public scg::IList<global::PlayerPropMsg> PlayerPropsList {
    get { return playerProps_; }
  }
  public int PlayerPropsCount {
    get { return playerProps_.Count; }
  }
  public global::PlayerPropMsg GetPlayerProps(int index) {
    return playerProps_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerPropSellRequestFieldNames;
    if (playerProps_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], playerProps_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::PlayerPropMsg element in PlayerPropsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerPropSellRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerPropSellRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerPropSellRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerPropSellRequest MakeReadOnly() {
    playerProps_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerPropSellRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerPropSellRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerPropSellRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerPropSellRequest result;
    
    private PlayerPropSellRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerPropSellRequest original = result;
        result = new PlayerPropSellRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerPropSellRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerPropSellRequest.Descriptor; }
    }
    
    public override PlayerPropSellRequest DefaultInstanceForType {
      get { return global::PlayerPropSellRequest.DefaultInstance; }
    }
    
    public override PlayerPropSellRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerPropSellRequest) {
        return MergeFrom((PlayerPropSellRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerPropSellRequest other) {
      if (other == global::PlayerPropSellRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.playerProps_.Count != 0) {
        result.playerProps_.Add(other.playerProps_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerPropSellRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerPropSellRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.playerProps_, global::PlayerPropMsg.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::PlayerPropMsg> PlayerPropsList {
      get { return PrepareBuilder().playerProps_; }
    }
    public int PlayerPropsCount {
      get { return result.PlayerPropsCount; }
    }
    public global::PlayerPropMsg GetPlayerProps(int index) {
      return result.GetPlayerProps(index);
    }
    public Builder SetPlayerProps(int index, global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerProps_[index] = value;
      return this;
    }
    public Builder SetPlayerProps(int index, global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerProps_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayerProps(global::PlayerPropMsg value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerProps_.Add(value);
      return this;
    }
    public Builder AddPlayerProps(global::PlayerPropMsg.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerProps_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayerProps(scg::IEnumerable<global::PlayerPropMsg> values) {
      PrepareBuilder();
      result.playerProps_.Add(values);
      return this;
    }
    public Builder ClearPlayerProps() {
      PrepareBuilder();
      result.playerProps_.Clear();
      return this;
    }
  }
  static PlayerPropSellRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerPropSellResposne : pb::GeneratedMessage<PlayerPropSellResposne, PlayerPropSellResposne.Builder> {
  private PlayerPropSellResposne() { }
  private static readonly PlayerPropSellResposne defaultInstance = new PlayerPropSellResposne().MakeReadOnly();
  private static readonly string[] _playerPropSellResposneFieldNames = new string[] { "reponseStatus" };
  private static readonly uint[] _playerPropSellResposneFieldTags = new uint[] { 10 };
  public static PlayerPropSellResposne DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerPropSellResposne DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerPropSellResposne ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_PlayerPropSellResposne__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerPropSellResposne, PlayerPropSellResposne.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_PlayerPropSellResposne__FieldAccessorTable; }
  }
  
  public const int ReponseStatusFieldNumber = 1;
  private bool hasReponseStatus;
  private global::ResponseStatus reponseStatus_;
  public bool HasReponseStatus {
    get { return hasReponseStatus; }
  }
  public global::ResponseStatus ReponseStatus {
    get { return reponseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _playerPropSellResposneFieldNames;
    if (hasReponseStatus) {
      output.WriteMessage(1, field_names[0], ReponseStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasReponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ReponseStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static PlayerPropSellResposne ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerPropSellResposne ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerPropSellResposne ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerPropSellResposne MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerPropSellResposne prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerPropSellResposne, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerPropSellResposne cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerPropSellResposne result;
    
    private PlayerPropSellResposne PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerPropSellResposne original = result;
        result = new PlayerPropSellResposne();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerPropSellResposne MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerPropSellResposne.Descriptor; }
    }
    
    public override PlayerPropSellResposne DefaultInstanceForType {
      get { return global::PlayerPropSellResposne.DefaultInstance; }
    }
    
    public override PlayerPropSellResposne BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerPropSellResposne) {
        return MergeFrom((PlayerPropSellResposne) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerPropSellResposne other) {
      if (other == global::PlayerPropSellResposne.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasReponseStatus) {
        MergeReponseStatus(other.ReponseStatus);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerPropSellResposneFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerPropSellResposneFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasReponseStatus) {
              subBuilder.MergeFrom(ReponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ReponseStatus = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasReponseStatus {
     get { return result.hasReponseStatus; }
    }
    public global::ResponseStatus ReponseStatus {
      get { return result.ReponseStatus; }
      set { SetReponseStatus(value); }
    }
    public Builder SetReponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = value;
      return this;
    }
    public Builder SetReponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReponseStatus &&
          result.reponseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.reponseStatus_ = global::ResponseStatus.CreateBuilder(result.reponseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.reponseStatus_ = value;
      }
      result.hasReponseStatus = true;
      return this;
    }
    public Builder ClearReponseStatus() {
      PrepareBuilder();
      result.hasReponseStatus = false;
      result.reponseStatus_ = null;
      return this;
    }
  }
  static PlayerPropSellResposne() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSDropReq : pb::GeneratedMessage<CSDropReq, CSDropReq.Builder> {
  private CSDropReq() { }
  private static readonly CSDropReq defaultInstance = new CSDropReq().MakeReadOnly();
  private static readonly string[] _cSDropReqFieldNames = new string[] { "count", "propId" };
  private static readonly uint[] _cSDropReqFieldTags = new uint[] { 16, 8 };
  public static CSDropReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSDropReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSDropReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSDropReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSDropReq, CSDropReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSDropReq__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSDropReqFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSDropReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSDropReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSDropReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSDropReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSDropReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSDropReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSDropReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSDropReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSDropReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSDropReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSDropReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSDropReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSDropReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSDropReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSDropReq result;
    
    private CSDropReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSDropReq original = result;
        result = new CSDropReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSDropReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSDropReq.Descriptor; }
    }
    
    public override CSDropReq DefaultInstanceForType {
      get { return global::CSDropReq.DefaultInstance; }
    }
    
    public override CSDropReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSDropReq) {
        return MergeFrom((CSDropReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSDropReq other) {
      if (other == global::CSDropReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSDropReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSDropReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static CSDropReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCDropResp : pb::GeneratedMessage<SCDropResp, SCDropResp.Builder> {
  private SCDropResp() { }
  private static readonly SCDropResp defaultInstance = new SCDropResp().MakeReadOnly();
  private static readonly string[] _sCDropRespFieldNames = new string[] { "dropInfos" };
  private static readonly uint[] _sCDropRespFieldTags = new uint[] { 10 };
  public static SCDropResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCDropResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCDropResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCDropResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCDropResp, SCDropResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCDropResp__FieldAccessorTable; }
  }
  
  public const int DropInfosFieldNumber = 1;
  private pbc::PopsicleList<global::DropInfo> dropInfos_ = new pbc::PopsicleList<global::DropInfo>();
  public scg::IList<global::DropInfo> DropInfosList {
    get { return dropInfos_; }
  }
  public int DropInfosCount {
    get { return dropInfos_.Count; }
  }
  public global::DropInfo GetDropInfos(int index) {
    return dropInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCDropRespFieldNames;
    if (dropInfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], dropInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::DropInfo element in DropInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCDropResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCDropResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCDropResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCDropResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCDropResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCDropResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCDropResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCDropResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCDropResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCDropResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCDropResp MakeReadOnly() {
    dropInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCDropResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCDropResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCDropResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCDropResp result;
    
    private SCDropResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCDropResp original = result;
        result = new SCDropResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCDropResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCDropResp.Descriptor; }
    }
    
    public override SCDropResp DefaultInstanceForType {
      get { return global::SCDropResp.DefaultInstance; }
    }
    
    public override SCDropResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCDropResp) {
        return MergeFrom((SCDropResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCDropResp other) {
      if (other == global::SCDropResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.dropInfos_.Count != 0) {
        result.dropInfos_.Add(other.dropInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCDropRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCDropRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.dropInfos_, global::DropInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::DropInfo> DropInfosList {
      get { return PrepareBuilder().dropInfos_; }
    }
    public int DropInfosCount {
      get { return result.DropInfosCount; }
    }
    public global::DropInfo GetDropInfos(int index) {
      return result.GetDropInfos(index);
    }
    public Builder SetDropInfos(int index, global::DropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dropInfos_[index] = value;
      return this;
    }
    public Builder SetDropInfos(int index, global::DropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dropInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDropInfos(global::DropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dropInfos_.Add(value);
      return this;
    }
    public Builder AddDropInfos(global::DropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dropInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDropInfos(scg::IEnumerable<global::DropInfo> values) {
      PrepareBuilder();
      result.dropInfos_.Add(values);
      return this;
    }
    public Builder ClearDropInfos() {
      PrepareBuilder();
      result.dropInfos_.Clear();
      return this;
    }
  }
  static SCDropResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAutoOpenGiftDropResp : pb::GeneratedMessage<SCAutoOpenGiftDropResp, SCAutoOpenGiftDropResp.Builder> {
  private SCAutoOpenGiftDropResp() { }
  private static readonly SCAutoOpenGiftDropResp defaultInstance = new SCAutoOpenGiftDropResp().MakeReadOnly();
  private static readonly string[] _sCAutoOpenGiftDropRespFieldNames = new string[] { "dropInfos" };
  private static readonly uint[] _sCAutoOpenGiftDropRespFieldTags = new uint[] { 10 };
  public static SCAutoOpenGiftDropResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAutoOpenGiftDropResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAutoOpenGiftDropResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCAutoOpenGiftDropResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAutoOpenGiftDropResp, SCAutoOpenGiftDropResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCAutoOpenGiftDropResp__FieldAccessorTable; }
  }
  
  public const int DropInfosFieldNumber = 1;
  private pbc::PopsicleList<global::DropInfo> dropInfos_ = new pbc::PopsicleList<global::DropInfo>();
  public scg::IList<global::DropInfo> DropInfosList {
    get { return dropInfos_; }
  }
  public int DropInfosCount {
    get { return dropInfos_.Count; }
  }
  public global::DropInfo GetDropInfos(int index) {
    return dropInfos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAutoOpenGiftDropRespFieldNames;
    if (dropInfos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], dropInfos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::DropInfo element in DropInfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAutoOpenGiftDropResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAutoOpenGiftDropResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAutoOpenGiftDropResp MakeReadOnly() {
    dropInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAutoOpenGiftDropResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAutoOpenGiftDropResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAutoOpenGiftDropResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAutoOpenGiftDropResp result;
    
    private SCAutoOpenGiftDropResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAutoOpenGiftDropResp original = result;
        result = new SCAutoOpenGiftDropResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAutoOpenGiftDropResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAutoOpenGiftDropResp.Descriptor; }
    }
    
    public override SCAutoOpenGiftDropResp DefaultInstanceForType {
      get { return global::SCAutoOpenGiftDropResp.DefaultInstance; }
    }
    
    public override SCAutoOpenGiftDropResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAutoOpenGiftDropResp) {
        return MergeFrom((SCAutoOpenGiftDropResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAutoOpenGiftDropResp other) {
      if (other == global::SCAutoOpenGiftDropResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.dropInfos_.Count != 0) {
        result.dropInfos_.Add(other.dropInfos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAutoOpenGiftDropRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAutoOpenGiftDropRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.dropInfos_, global::DropInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::DropInfo> DropInfosList {
      get { return PrepareBuilder().dropInfos_; }
    }
    public int DropInfosCount {
      get { return result.DropInfosCount; }
    }
    public global::DropInfo GetDropInfos(int index) {
      return result.GetDropInfos(index);
    }
    public Builder SetDropInfos(int index, global::DropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dropInfos_[index] = value;
      return this;
    }
    public Builder SetDropInfos(int index, global::DropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dropInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDropInfos(global::DropInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.dropInfos_.Add(value);
      return this;
    }
    public Builder AddDropInfos(global::DropInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.dropInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDropInfos(scg::IEnumerable<global::DropInfo> values) {
      PrepareBuilder();
      result.dropInfos_.Add(values);
      return this;
    }
    public Builder ClearDropInfos() {
      PrepareBuilder();
      result.dropInfos_.Clear();
      return this;
    }
  }
  static SCAutoOpenGiftDropResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DropInfo : pb::GeneratedMessage<DropInfo, DropInfo.Builder> {
  private DropInfo() { }
  private static readonly DropInfo defaultInstance = new DropInfo().MakeReadOnly();
  private static readonly string[] _dropInfoFieldNames = new string[] { "count", "propId" };
  private static readonly uint[] _dropInfoFieldTags = new uint[] { 16, 8 };
  public static DropInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DropInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DropInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_DropInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DropInfo, DropInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_DropInfo__FieldAccessorTable; }
  }
  
  public const int PropIdFieldNumber = 1;
  private bool hasPropId;
  private long propId_;
  public bool HasPropId {
    get { return hasPropId; }
  }
  public long PropId {
    get { return propId_; }
  }
  
  public const int CountFieldNumber = 2;
  private bool hasCount;
  private int count_;
  public bool HasCount {
    get { return hasCount; }
  }
  public int Count {
    get { return count_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _dropInfoFieldNames;
    if (hasPropId) {
      output.WriteInt64(1, field_names[1], PropId);
    }
    if (hasCount) {
      output.WriteInt32(2, field_names[0], Count);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPropId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PropId);
    }
    if (hasCount) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Count);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static DropInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DropInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DropInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DropInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DropInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DropInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DropInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DropInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DropInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DropInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DropInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DropInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DropInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DropInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DropInfo result;
    
    private DropInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        DropInfo original = result;
        result = new DropInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DropInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DropInfo.Descriptor; }
    }
    
    public override DropInfo DefaultInstanceForType {
      get { return global::DropInfo.DefaultInstance; }
    }
    
    public override DropInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DropInfo) {
        return MergeFrom((DropInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DropInfo other) {
      if (other == global::DropInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPropId) {
        PropId = other.PropId;
      }
      if (other.HasCount) {
        Count = other.Count;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_dropInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _dropInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPropId = input.ReadInt64(ref result.propId_);
            break;
          }
          case 16: {
            result.hasCount = input.ReadInt32(ref result.count_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPropId {
      get { return result.hasPropId; }
    }
    public long PropId {
      get { return result.PropId; }
      set { SetPropId(value); }
    }
    public Builder SetPropId(long value) {
      PrepareBuilder();
      result.hasPropId = true;
      result.propId_ = value;
      return this;
    }
    public Builder ClearPropId() {
      PrepareBuilder();
      result.hasPropId = false;
      result.propId_ = 0L;
      return this;
    }
    
    public bool HasCount {
      get { return result.hasCount; }
    }
    public int Count {
      get { return result.Count; }
      set { SetCount(value); }
    }
    public Builder SetCount(int value) {
      PrepareBuilder();
      result.hasCount = true;
      result.count_ = value;
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.hasCount = false;
      result.count_ = 0;
      return this;
    }
  }
  static DropInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSChatFinishRequest : pb::GeneratedMessage<CSChatFinishRequest, CSChatFinishRequest.Builder> {
  private CSChatFinishRequest() { }
  private static readonly CSChatFinishRequest defaultInstance = new CSChatFinishRequest().MakeReadOnly();
  private static readonly string[] _cSChatFinishRequestFieldNames = new string[] { "chatId" };
  private static readonly uint[] _cSChatFinishRequestFieldTags = new uint[] { 8 };
  public static CSChatFinishRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSChatFinishRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSChatFinishRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSChatFinishRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSChatFinishRequest, CSChatFinishRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSChatFinishRequest__FieldAccessorTable; }
  }
  
  public const int ChatIdFieldNumber = 1;
  private bool hasChatId;
  private long chatId_;
  public bool HasChatId {
    get { return hasChatId; }
  }
  public long ChatId {
    get { return chatId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSChatFinishRequestFieldNames;
    if (hasChatId) {
      output.WriteInt64(1, field_names[0], ChatId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasChatId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, ChatId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSChatFinishRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSChatFinishRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSChatFinishRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSChatFinishRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSChatFinishRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSChatFinishRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSChatFinishRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSChatFinishRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSChatFinishRequest result;
    
    private CSChatFinishRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSChatFinishRequest original = result;
        result = new CSChatFinishRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSChatFinishRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSChatFinishRequest.Descriptor; }
    }
    
    public override CSChatFinishRequest DefaultInstanceForType {
      get { return global::CSChatFinishRequest.DefaultInstance; }
    }
    
    public override CSChatFinishRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSChatFinishRequest) {
        return MergeFrom((CSChatFinishRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSChatFinishRequest other) {
      if (other == global::CSChatFinishRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasChatId) {
        ChatId = other.ChatId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSChatFinishRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSChatFinishRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasChatId = input.ReadInt64(ref result.chatId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasChatId {
      get { return result.hasChatId; }
    }
    public long ChatId {
      get { return result.ChatId; }
      set { SetChatId(value); }
    }
    public Builder SetChatId(long value) {
      PrepareBuilder();
      result.hasChatId = true;
      result.chatId_ = value;
      return this;
    }
    public Builder ClearChatId() {
      PrepareBuilder();
      result.hasChatId = false;
      result.chatId_ = 0L;
      return this;
    }
  }
  static CSChatFinishRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCChatFinishResponse : pb::GeneratedMessage<SCChatFinishResponse, SCChatFinishResponse.Builder> {
  private SCChatFinishResponse() { }
  private static readonly SCChatFinishResponse defaultInstance = new SCChatFinishResponse().MakeReadOnly();
  private static readonly string[] _sCChatFinishResponseFieldNames = new string[] { "status" };
  private static readonly uint[] _sCChatFinishResponseFieldTags = new uint[] { 10 };
  public static SCChatFinishResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCChatFinishResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCChatFinishResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCChatFinishResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCChatFinishResponse, SCChatFinishResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCChatFinishResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCChatFinishResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[0], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCChatFinishResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCChatFinishResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCChatFinishResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCChatFinishResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCChatFinishResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCChatFinishResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCChatFinishResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCChatFinishResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCChatFinishResponse result;
    
    private SCChatFinishResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCChatFinishResponse original = result;
        result = new SCChatFinishResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCChatFinishResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCChatFinishResponse.Descriptor; }
    }
    
    public override SCChatFinishResponse DefaultInstanceForType {
      get { return global::SCChatFinishResponse.DefaultInstance; }
    }
    
    public override SCChatFinishResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCChatFinishResponse) {
        return MergeFrom((SCChatFinishResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCChatFinishResponse other) {
      if (other == global::SCChatFinishResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCChatFinishResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCChatFinishResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
  }
  static SCChatFinishResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGetAllRewardedTasksRequest : pb::GeneratedMessage<CSGetAllRewardedTasksRequest, CSGetAllRewardedTasksRequest.Builder> {
  private CSGetAllRewardedTasksRequest() { }
  private static readonly CSGetAllRewardedTasksRequest defaultInstance = new CSGetAllRewardedTasksRequest().MakeReadOnly();
  private static readonly string[] _cSGetAllRewardedTasksRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSGetAllRewardedTasksRequestFieldTags = new uint[] {  };
  public static CSGetAllRewardedTasksRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGetAllRewardedTasksRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGetAllRewardedTasksRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSGetAllRewardedTasksRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGetAllRewardedTasksRequest, CSGetAllRewardedTasksRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSGetAllRewardedTasksRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGetAllRewardedTasksRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetAllRewardedTasksRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGetAllRewardedTasksRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGetAllRewardedTasksRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGetAllRewardedTasksRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGetAllRewardedTasksRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGetAllRewardedTasksRequest result;
    
    private CSGetAllRewardedTasksRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGetAllRewardedTasksRequest original = result;
        result = new CSGetAllRewardedTasksRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGetAllRewardedTasksRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGetAllRewardedTasksRequest.Descriptor; }
    }
    
    public override CSGetAllRewardedTasksRequest DefaultInstanceForType {
      get { return global::CSGetAllRewardedTasksRequest.DefaultInstance; }
    }
    
    public override CSGetAllRewardedTasksRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGetAllRewardedTasksRequest) {
        return MergeFrom((CSGetAllRewardedTasksRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGetAllRewardedTasksRequest other) {
      if (other == global::CSGetAllRewardedTasksRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGetAllRewardedTasksRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGetAllRewardedTasksRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSGetAllRewardedTasksRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGetAllRewardedTasksResponse : pb::GeneratedMessage<SCGetAllRewardedTasksResponse, SCGetAllRewardedTasksResponse.Builder> {
  private SCGetAllRewardedTasksResponse() { }
  private static readonly SCGetAllRewardedTasksResponse defaultInstance = new SCGetAllRewardedTasksResponse().MakeReadOnly();
  private static readonly string[] _sCGetAllRewardedTasksResponseFieldNames = new string[] { "tasks" };
  private static readonly uint[] _sCGetAllRewardedTasksResponseFieldTags = new uint[] { 10 };
  public static SCGetAllRewardedTasksResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGetAllRewardedTasksResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGetAllRewardedTasksResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCGetAllRewardedTasksResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGetAllRewardedTasksResponse, SCGetAllRewardedTasksResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCGetAllRewardedTasksResponse__FieldAccessorTable; }
  }
  
  public const int TasksFieldNumber = 1;
  private pbc::PopsicleList<global::TaskIdTypeInfo> tasks_ = new pbc::PopsicleList<global::TaskIdTypeInfo>();
  public scg::IList<global::TaskIdTypeInfo> TasksList {
    get { return tasks_; }
  }
  public int TasksCount {
    get { return tasks_.Count; }
  }
  public global::TaskIdTypeInfo GetTasks(int index) {
    return tasks_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGetAllRewardedTasksResponseFieldNames;
    if (tasks_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], tasks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::TaskIdTypeInfo element in TasksList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetAllRewardedTasksResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGetAllRewardedTasksResponse MakeReadOnly() {
    tasks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGetAllRewardedTasksResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGetAllRewardedTasksResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGetAllRewardedTasksResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGetAllRewardedTasksResponse result;
    
    private SCGetAllRewardedTasksResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGetAllRewardedTasksResponse original = result;
        result = new SCGetAllRewardedTasksResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGetAllRewardedTasksResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGetAllRewardedTasksResponse.Descriptor; }
    }
    
    public override SCGetAllRewardedTasksResponse DefaultInstanceForType {
      get { return global::SCGetAllRewardedTasksResponse.DefaultInstance; }
    }
    
    public override SCGetAllRewardedTasksResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGetAllRewardedTasksResponse) {
        return MergeFrom((SCGetAllRewardedTasksResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGetAllRewardedTasksResponse other) {
      if (other == global::SCGetAllRewardedTasksResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.tasks_.Count != 0) {
        result.tasks_.Add(other.tasks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGetAllRewardedTasksResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGetAllRewardedTasksResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.tasks_, global::TaskIdTypeInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::TaskIdTypeInfo> TasksList {
      get { return PrepareBuilder().tasks_; }
    }
    public int TasksCount {
      get { return result.TasksCount; }
    }
    public global::TaskIdTypeInfo GetTasks(int index) {
      return result.GetTasks(index);
    }
    public Builder SetTasks(int index, global::TaskIdTypeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tasks_[index] = value;
      return this;
    }
    public Builder SetTasks(int index, global::TaskIdTypeInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tasks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTasks(global::TaskIdTypeInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tasks_.Add(value);
      return this;
    }
    public Builder AddTasks(global::TaskIdTypeInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tasks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTasks(scg::IEnumerable<global::TaskIdTypeInfo> values) {
      PrepareBuilder();
      result.tasks_.Add(values);
      return this;
    }
    public Builder ClearTasks() {
      PrepareBuilder();
      result.tasks_.Clear();
      return this;
    }
  }
  static SCGetAllRewardedTasksResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TaskIdTypeInfo : pb::GeneratedMessage<TaskIdTypeInfo, TaskIdTypeInfo.Builder> {
  private TaskIdTypeInfo() { }
  private static readonly TaskIdTypeInfo defaultInstance = new TaskIdTypeInfo().MakeReadOnly();
  private static readonly string[] _taskIdTypeInfoFieldNames = new string[] { "chapterId", "taskId", "taskType" };
  private static readonly uint[] _taskIdTypeInfoFieldTags = new uint[] { 16, 8, 24 };
  public static TaskIdTypeInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TaskIdTypeInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TaskIdTypeInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_TaskIdTypeInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TaskIdTypeInfo, TaskIdTypeInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_TaskIdTypeInfo__FieldAccessorTable; }
  }
  
  public const int TaskIdFieldNumber = 1;
  private bool hasTaskId;
  private long taskId_;
  public bool HasTaskId {
    get { return hasTaskId; }
  }
  public long TaskId {
    get { return taskId_; }
  }
  
  public const int ChapterIdFieldNumber = 2;
  private bool hasChapterId;
  private long chapterId_;
  public bool HasChapterId {
    get { return hasChapterId; }
  }
  public long ChapterId {
    get { return chapterId_; }
  }
  
  public const int TaskTypeFieldNumber = 3;
  private bool hasTaskType;
  private int taskType_;
  public bool HasTaskType {
    get { return hasTaskType; }
  }
  public int TaskType {
    get { return taskType_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _taskIdTypeInfoFieldNames;
    if (hasTaskId) {
      output.WriteInt64(1, field_names[1], TaskId);
    }
    if (hasChapterId) {
      output.WriteInt64(2, field_names[0], ChapterId);
    }
    if (hasTaskType) {
      output.WriteInt32(3, field_names[2], TaskType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasTaskId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, TaskId);
    }
    if (hasChapterId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, ChapterId);
    }
    if (hasTaskType) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, TaskType);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static TaskIdTypeInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TaskIdTypeInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TaskIdTypeInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TaskIdTypeInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TaskIdTypeInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TaskIdTypeInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TaskIdTypeInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TaskIdTypeInfo result;
    
    private TaskIdTypeInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        TaskIdTypeInfo original = result;
        result = new TaskIdTypeInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TaskIdTypeInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TaskIdTypeInfo.Descriptor; }
    }
    
    public override TaskIdTypeInfo DefaultInstanceForType {
      get { return global::TaskIdTypeInfo.DefaultInstance; }
    }
    
    public override TaskIdTypeInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TaskIdTypeInfo) {
        return MergeFrom((TaskIdTypeInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TaskIdTypeInfo other) {
      if (other == global::TaskIdTypeInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTaskId) {
        TaskId = other.TaskId;
      }
      if (other.HasChapterId) {
        ChapterId = other.ChapterId;
      }
      if (other.HasTaskType) {
        TaskType = other.TaskType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_taskIdTypeInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _taskIdTypeInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTaskId = input.ReadInt64(ref result.taskId_);
            break;
          }
          case 16: {
            result.hasChapterId = input.ReadInt64(ref result.chapterId_);
            break;
          }
          case 24: {
            result.hasTaskType = input.ReadInt32(ref result.taskType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTaskId {
      get { return result.hasTaskId; }
    }
    public long TaskId {
      get { return result.TaskId; }
      set { SetTaskId(value); }
    }
    public Builder SetTaskId(long value) {
      PrepareBuilder();
      result.hasTaskId = true;
      result.taskId_ = value;
      return this;
    }
    public Builder ClearTaskId() {
      PrepareBuilder();
      result.hasTaskId = false;
      result.taskId_ = 0L;
      return this;
    }
    
    public bool HasChapterId {
      get { return result.hasChapterId; }
    }
    public long ChapterId {
      get { return result.ChapterId; }
      set { SetChapterId(value); }
    }
    public Builder SetChapterId(long value) {
      PrepareBuilder();
      result.hasChapterId = true;
      result.chapterId_ = value;
      return this;
    }
    public Builder ClearChapterId() {
      PrepareBuilder();
      result.hasChapterId = false;
      result.chapterId_ = 0L;
      return this;
    }
    
    public bool HasTaskType {
      get { return result.hasTaskType; }
    }
    public int TaskType {
      get { return result.TaskType; }
      set { SetTaskType(value); }
    }
    public Builder SetTaskType(int value) {
      PrepareBuilder();
      result.hasTaskType = true;
      result.taskType_ = value;
      return this;
    }
    public Builder ClearTaskType() {
      PrepareBuilder();
      result.hasTaskType = false;
      result.taskType_ = 0;
      return this;
    }
  }
  static TaskIdTypeInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerCheckInInfoReq : pb::GeneratedMessage<CSPlayerCheckInInfoReq, CSPlayerCheckInInfoReq.Builder> {
  private CSPlayerCheckInInfoReq() { }
  private static readonly CSPlayerCheckInInfoReq defaultInstance = new CSPlayerCheckInInfoReq().MakeReadOnly();
  private static readonly string[] _cSPlayerCheckInInfoReqFieldNames = new string[] {  };
  private static readonly uint[] _cSPlayerCheckInInfoReqFieldTags = new uint[] {  };
  public static CSPlayerCheckInInfoReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerCheckInInfoReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerCheckInInfoReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerCheckInInfoReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerCheckInInfoReq, CSPlayerCheckInInfoReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerCheckInInfoReq__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerCheckInInfoReqFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerCheckInInfoReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerCheckInInfoReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerCheckInInfoReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerCheckInInfoReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerCheckInInfoReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerCheckInInfoReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerCheckInInfoReq result;
    
    private CSPlayerCheckInInfoReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerCheckInInfoReq original = result;
        result = new CSPlayerCheckInInfoReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerCheckInInfoReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerCheckInInfoReq.Descriptor; }
    }
    
    public override CSPlayerCheckInInfoReq DefaultInstanceForType {
      get { return global::CSPlayerCheckInInfoReq.DefaultInstance; }
    }
    
    public override CSPlayerCheckInInfoReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerCheckInInfoReq) {
        return MergeFrom((CSPlayerCheckInInfoReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerCheckInInfoReq other) {
      if (other == global::CSPlayerCheckInInfoReq.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerCheckInInfoReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerCheckInInfoReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSPlayerCheckInInfoReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerCheckInInfoResp : pb::GeneratedMessage<SCPlayerCheckInInfoResp, SCPlayerCheckInInfoResp.Builder> {
  private SCPlayerCheckInInfoResp() { }
  private static readonly SCPlayerCheckInInfoResp defaultInstance = new SCPlayerCheckInInfoResp().MakeReadOnly();
  private static readonly string[] _sCPlayerCheckInInfoRespFieldNames = new string[] { "day", "id", "status" };
  private static readonly uint[] _sCPlayerCheckInInfoRespFieldTags = new uint[] { 16, 8, 24 };
  public static SCPlayerCheckInInfoResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerCheckInInfoResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerCheckInInfoResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerCheckInInfoResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerCheckInInfoResp, SCPlayerCheckInInfoResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerCheckInInfoResp__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int DayFieldNumber = 2;
  private bool hasDay;
  private int day_;
  public bool HasDay {
    get { return hasDay; }
  }
  public int Day {
    get { return day_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerCheckInInfoRespFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[1], Id);
    }
    if (hasDay) {
      output.WriteInt32(2, field_names[0], Day);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[2], Status);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasDay) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Day);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerCheckInInfoResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerCheckInInfoResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerCheckInInfoResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerCheckInInfoResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerCheckInInfoResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerCheckInInfoResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerCheckInInfoResp result;
    
    private SCPlayerCheckInInfoResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerCheckInInfoResp original = result;
        result = new SCPlayerCheckInInfoResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerCheckInInfoResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerCheckInInfoResp.Descriptor; }
    }
    
    public override SCPlayerCheckInInfoResp DefaultInstanceForType {
      get { return global::SCPlayerCheckInInfoResp.DefaultInstance; }
    }
    
    public override SCPlayerCheckInInfoResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerCheckInInfoResp) {
        return MergeFrom((SCPlayerCheckInInfoResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerCheckInInfoResp other) {
      if (other == global::SCPlayerCheckInInfoResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasDay) {
        Day = other.Day;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerCheckInInfoRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerCheckInInfoRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 16: {
            result.hasDay = input.ReadInt32(ref result.day_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasDay {
      get { return result.hasDay; }
    }
    public int Day {
      get { return result.Day; }
      set { SetDay(value); }
    }
    public Builder SetDay(int value) {
      PrepareBuilder();
      result.hasDay = true;
      result.day_ = value;
      return this;
    }
    public Builder ClearDay() {
      PrepareBuilder();
      result.hasDay = false;
      result.day_ = 0;
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
  }
  static SCPlayerCheckInInfoResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerCheckInReq : pb::GeneratedMessage<CSPlayerCheckInReq, CSPlayerCheckInReq.Builder> {
  private CSPlayerCheckInReq() { }
  private static readonly CSPlayerCheckInReq defaultInstance = new CSPlayerCheckInReq().MakeReadOnly();
  private static readonly string[] _cSPlayerCheckInReqFieldNames = new string[] {  };
  private static readonly uint[] _cSPlayerCheckInReqFieldTags = new uint[] {  };
  public static CSPlayerCheckInReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerCheckInReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerCheckInReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerCheckInReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerCheckInReq, CSPlayerCheckInReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerCheckInReq__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerCheckInReqFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerCheckInReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerCheckInReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerCheckInReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerCheckInReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerCheckInReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerCheckInReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerCheckInReq result;
    
    private CSPlayerCheckInReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerCheckInReq original = result;
        result = new CSPlayerCheckInReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerCheckInReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerCheckInReq.Descriptor; }
    }
    
    public override CSPlayerCheckInReq DefaultInstanceForType {
      get { return global::CSPlayerCheckInReq.DefaultInstance; }
    }
    
    public override CSPlayerCheckInReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerCheckInReq) {
        return MergeFrom((CSPlayerCheckInReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerCheckInReq other) {
      if (other == global::CSPlayerCheckInReq.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerCheckInReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerCheckInReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSPlayerCheckInReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerCheckInResp : pb::GeneratedMessage<SCPlayerCheckInResp, SCPlayerCheckInResp.Builder> {
  private SCPlayerCheckInResp() { }
  private static readonly SCPlayerCheckInResp defaultInstance = new SCPlayerCheckInResp().MakeReadOnly();
  private static readonly string[] _sCPlayerCheckInRespFieldNames = new string[] { "result" };
  private static readonly uint[] _sCPlayerCheckInRespFieldTags = new uint[] { 8 };
  public static SCPlayerCheckInResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerCheckInResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerCheckInResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerCheckInResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerCheckInResp, SCPlayerCheckInResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerCheckInResp__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerCheckInRespFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[0], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerCheckInResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerCheckInResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerCheckInResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerCheckInResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerCheckInResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerCheckInResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerCheckInResp result;
    
    private SCPlayerCheckInResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerCheckInResp original = result;
        result = new SCPlayerCheckInResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerCheckInResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerCheckInResp.Descriptor; }
    }
    
    public override SCPlayerCheckInResp DefaultInstanceForType {
      get { return global::SCPlayerCheckInResp.DefaultInstance; }
    }
    
    public override SCPlayerCheckInResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerCheckInResp) {
        return MergeFrom((SCPlayerCheckInResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerCheckInResp other) {
      if (other == global::SCPlayerCheckInResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerCheckInRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerCheckInRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
  }
  static SCPlayerCheckInResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerRenewIconReq : pb::GeneratedMessage<CSPlayerRenewIconReq, CSPlayerRenewIconReq.Builder> {
  private CSPlayerRenewIconReq() { }
  private static readonly CSPlayerRenewIconReq defaultInstance = new CSPlayerRenewIconReq().MakeReadOnly();
  private static readonly string[] _cSPlayerRenewIconReqFieldNames = new string[] { "newIcon" };
  private static readonly uint[] _cSPlayerRenewIconReqFieldTags = new uint[] { 10 };
  public static CSPlayerRenewIconReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerRenewIconReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerRenewIconReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerRenewIconReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerRenewIconReq, CSPlayerRenewIconReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerRenewIconReq__FieldAccessorTable; }
  }
  
  public const int NewIconFieldNumber = 1;
  private bool hasNewIcon;
  private string newIcon_ = "";
  public bool HasNewIcon {
    get { return hasNewIcon; }
  }
  public string NewIcon {
    get { return newIcon_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerRenewIconReqFieldNames;
    if (hasNewIcon) {
      output.WriteString(1, field_names[0], NewIcon);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasNewIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(1, NewIcon);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerRenewIconReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerRenewIconReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerRenewIconReq MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerRenewIconReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerRenewIconReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerRenewIconReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerRenewIconReq result;
    
    private CSPlayerRenewIconReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerRenewIconReq original = result;
        result = new CSPlayerRenewIconReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerRenewIconReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerRenewIconReq.Descriptor; }
    }
    
    public override CSPlayerRenewIconReq DefaultInstanceForType {
      get { return global::CSPlayerRenewIconReq.DefaultInstance; }
    }
    
    public override CSPlayerRenewIconReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerRenewIconReq) {
        return MergeFrom((CSPlayerRenewIconReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerRenewIconReq other) {
      if (other == global::CSPlayerRenewIconReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNewIcon) {
        NewIcon = other.NewIcon;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerRenewIconReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerRenewIconReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasNewIcon = input.ReadString(ref result.newIcon_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNewIcon {
      get { return result.hasNewIcon; }
    }
    public string NewIcon {
      get { return result.NewIcon; }
      set { SetNewIcon(value); }
    }
    public Builder SetNewIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNewIcon = true;
      result.newIcon_ = value;
      return this;
    }
    public Builder ClearNewIcon() {
      PrepareBuilder();
      result.hasNewIcon = false;
      result.newIcon_ = "";
      return this;
    }
  }
  static CSPlayerRenewIconReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerRenewIconResp : pb::GeneratedMessage<SCPlayerRenewIconResp, SCPlayerRenewIconResp.Builder> {
  private SCPlayerRenewIconResp() { }
  private static readonly SCPlayerRenewIconResp defaultInstance = new SCPlayerRenewIconResp().MakeReadOnly();
  private static readonly string[] _sCPlayerRenewIconRespFieldNames = new string[] { "newIcon", "result" };
  private static readonly uint[] _sCPlayerRenewIconRespFieldTags = new uint[] { 18, 8 };
  public static SCPlayerRenewIconResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerRenewIconResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerRenewIconResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerRenewIconResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerRenewIconResp, SCPlayerRenewIconResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerRenewIconResp__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private int result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public int Result {
    get { return result_; }
  }
  
  public const int NewIconFieldNumber = 2;
  private bool hasNewIcon;
  private string newIcon_ = "";
  public bool HasNewIcon {
    get { return hasNewIcon; }
  }
  public string NewIcon {
    get { return newIcon_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerRenewIconRespFieldNames;
    if (hasResult) {
      output.WriteInt32(1, field_names[1], Result);
    }
    if (hasNewIcon) {
      output.WriteString(2, field_names[0], NewIcon);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Result);
    }
    if (hasNewIcon) {
      size += pb::CodedOutputStream.ComputeStringSize(2, NewIcon);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerRenewIconResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerRenewIconResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerRenewIconResp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerRenewIconResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerRenewIconResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerRenewIconResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerRenewIconResp result;
    
    private SCPlayerRenewIconResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerRenewIconResp original = result;
        result = new SCPlayerRenewIconResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerRenewIconResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerRenewIconResp.Descriptor; }
    }
    
    public override SCPlayerRenewIconResp DefaultInstanceForType {
      get { return global::SCPlayerRenewIconResp.DefaultInstance; }
    }
    
    public override SCPlayerRenewIconResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerRenewIconResp) {
        return MergeFrom((SCPlayerRenewIconResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerRenewIconResp other) {
      if (other == global::SCPlayerRenewIconResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        Result = other.Result;
      }
      if (other.HasNewIcon) {
        NewIcon = other.NewIcon;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerRenewIconRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerRenewIconRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasResult = input.ReadInt32(ref result.result_);
            break;
          }
          case 18: {
            result.hasNewIcon = input.ReadString(ref result.newIcon_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public int Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(int value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = 0;
      return this;
    }
    
    public bool HasNewIcon {
      get { return result.hasNewIcon; }
    }
    public string NewIcon {
      get { return result.NewIcon; }
      set { SetNewIcon(value); }
    }
    public Builder SetNewIcon(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasNewIcon = true;
      result.newIcon_ = value;
      return this;
    }
    public Builder ClearNewIcon() {
      PrepareBuilder();
      result.hasNewIcon = false;
      result.newIcon_ = "";
      return this;
    }
  }
  static SCPlayerRenewIconResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerUpLevel : pb::GeneratedMessage<SCPlayerUpLevel, SCPlayerUpLevel.Builder> {
  private SCPlayerUpLevel() { }
  private static readonly SCPlayerUpLevel defaultInstance = new SCPlayerUpLevel().MakeReadOnly();
  private static readonly string[] _sCPlayerUpLevelFieldNames = new string[] { "newLevel", "oldLevel", "pushInfo", "rewards", "unLockBuildId" };
  private static readonly uint[] _sCPlayerUpLevelFieldTags = new uint[] { 16, 8, 42, 26, 32 };
  public static SCPlayerUpLevel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerUpLevel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerUpLevel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerUpLevel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerUpLevel, SCPlayerUpLevel.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerUpLevel__FieldAccessorTable; }
  }
  
  public const int OldLevelFieldNumber = 1;
  private bool hasOldLevel;
  private int oldLevel_;
  public bool HasOldLevel {
    get { return hasOldLevel; }
  }
  public int OldLevel {
    get { return oldLevel_; }
  }
  
  public const int NewLevelFieldNumber = 2;
  private bool hasNewLevel;
  private int newLevel_;
  public bool HasNewLevel {
    get { return hasNewLevel; }
  }
  public int NewLevel {
    get { return newLevel_; }
  }
  
  public const int RewardsFieldNumber = 3;
  private pbc::PopsicleList<global::RewardItem> rewards_ = new pbc::PopsicleList<global::RewardItem>();
  public scg::IList<global::RewardItem> RewardsList {
    get { return rewards_; }
  }
  public int RewardsCount {
    get { return rewards_.Count; }
  }
  public global::RewardItem GetRewards(int index) {
    return rewards_[index];
  }
  
  public const int UnLockBuildIdFieldNumber = 4;
  private bool hasUnLockBuildId;
  private long unLockBuildId_;
  public bool HasUnLockBuildId {
    get { return hasUnLockBuildId; }
  }
  public long UnLockBuildId {
    get { return unLockBuildId_; }
  }
  
  public const int PushInfoFieldNumber = 5;
  private bool hasPushInfo;
  private global::Push_Info pushInfo_;
  public bool HasPushInfo {
    get { return hasPushInfo; }
  }
  public global::Push_Info PushInfo {
    get { return pushInfo_ ?? global::Push_Info.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerUpLevelFieldNames;
    if (hasOldLevel) {
      output.WriteInt32(1, field_names[1], OldLevel);
    }
    if (hasNewLevel) {
      output.WriteInt32(2, field_names[0], NewLevel);
    }
    if (rewards_.Count > 0) {
      output.WriteMessageArray(3, field_names[3], rewards_);
    }
    if (hasUnLockBuildId) {
      output.WriteInt64(4, field_names[4], UnLockBuildId);
    }
    if (hasPushInfo) {
      output.WriteMessage(5, field_names[2], PushInfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasOldLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, OldLevel);
    }
    if (hasNewLevel) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, NewLevel);
    }
    foreach (global::RewardItem element in RewardsList) {
      size += pb::CodedOutputStream.ComputeMessageSize(3, element);
    }
    if (hasUnLockBuildId) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, UnLockBuildId);
    }
    if (hasPushInfo) {
      size += pb::CodedOutputStream.ComputeMessageSize(5, PushInfo);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerUpLevel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerUpLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerUpLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerUpLevel MakeReadOnly() {
    rewards_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerUpLevel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerUpLevel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerUpLevel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerUpLevel result;
    
    private SCPlayerUpLevel PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerUpLevel original = result;
        result = new SCPlayerUpLevel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerUpLevel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerUpLevel.Descriptor; }
    }
    
    public override SCPlayerUpLevel DefaultInstanceForType {
      get { return global::SCPlayerUpLevel.DefaultInstance; }
    }
    
    public override SCPlayerUpLevel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerUpLevel) {
        return MergeFrom((SCPlayerUpLevel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerUpLevel other) {
      if (other == global::SCPlayerUpLevel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasOldLevel) {
        OldLevel = other.OldLevel;
      }
      if (other.HasNewLevel) {
        NewLevel = other.NewLevel;
      }
      if (other.rewards_.Count != 0) {
        result.rewards_.Add(other.rewards_);
      }
      if (other.HasUnLockBuildId) {
        UnLockBuildId = other.UnLockBuildId;
      }
      if (other.HasPushInfo) {
        MergePushInfo(other.PushInfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerUpLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerUpLevelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasOldLevel = input.ReadInt32(ref result.oldLevel_);
            break;
          }
          case 16: {
            result.hasNewLevel = input.ReadInt32(ref result.newLevel_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.rewards_, global::RewardItem.DefaultInstance, extensionRegistry);
            break;
          }
          case 32: {
            result.hasUnLockBuildId = input.ReadInt64(ref result.unLockBuildId_);
            break;
          }
          case 42: {
            global::Push_Info.Builder subBuilder = global::Push_Info.CreateBuilder();
            if (result.hasPushInfo) {
              subBuilder.MergeFrom(PushInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PushInfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasOldLevel {
      get { return result.hasOldLevel; }
    }
    public int OldLevel {
      get { return result.OldLevel; }
      set { SetOldLevel(value); }
    }
    public Builder SetOldLevel(int value) {
      PrepareBuilder();
      result.hasOldLevel = true;
      result.oldLevel_ = value;
      return this;
    }
    public Builder ClearOldLevel() {
      PrepareBuilder();
      result.hasOldLevel = false;
      result.oldLevel_ = 0;
      return this;
    }
    
    public bool HasNewLevel {
      get { return result.hasNewLevel; }
    }
    public int NewLevel {
      get { return result.NewLevel; }
      set { SetNewLevel(value); }
    }
    public Builder SetNewLevel(int value) {
      PrepareBuilder();
      result.hasNewLevel = true;
      result.newLevel_ = value;
      return this;
    }
    public Builder ClearNewLevel() {
      PrepareBuilder();
      result.hasNewLevel = false;
      result.newLevel_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::RewardItem> RewardsList {
      get { return PrepareBuilder().rewards_; }
    }
    public int RewardsCount {
      get { return result.RewardsCount; }
    }
    public global::RewardItem GetRewards(int index) {
      return result.GetRewards(index);
    }
    public Builder SetRewards(int index, global::RewardItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_[index] = value;
      return this;
    }
    public Builder SetRewards(int index, global::RewardItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRewards(global::RewardItem value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rewards_.Add(value);
      return this;
    }
    public Builder AddRewards(global::RewardItem.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rewards_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRewards(scg::IEnumerable<global::RewardItem> values) {
      PrepareBuilder();
      result.rewards_.Add(values);
      return this;
    }
    public Builder ClearRewards() {
      PrepareBuilder();
      result.rewards_.Clear();
      return this;
    }
    
    public bool HasUnLockBuildId {
      get { return result.hasUnLockBuildId; }
    }
    public long UnLockBuildId {
      get { return result.UnLockBuildId; }
      set { SetUnLockBuildId(value); }
    }
    public Builder SetUnLockBuildId(long value) {
      PrepareBuilder();
      result.hasUnLockBuildId = true;
      result.unLockBuildId_ = value;
      return this;
    }
    public Builder ClearUnLockBuildId() {
      PrepareBuilder();
      result.hasUnLockBuildId = false;
      result.unLockBuildId_ = 0L;
      return this;
    }
    
    public bool HasPushInfo {
     get { return result.hasPushInfo; }
    }
    public global::Push_Info PushInfo {
      get { return result.PushInfo; }
      set { SetPushInfo(value); }
    }
    public Builder SetPushInfo(global::Push_Info value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPushInfo = true;
      result.pushInfo_ = value;
      return this;
    }
    public Builder SetPushInfo(global::Push_Info.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPushInfo = true;
      result.pushInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergePushInfo(global::Push_Info value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPushInfo &&
          result.pushInfo_ != global::Push_Info.DefaultInstance) {
          result.pushInfo_ = global::Push_Info.CreateBuilder(result.pushInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.pushInfo_ = value;
      }
      result.hasPushInfo = true;
      return this;
    }
    public Builder ClearPushInfo() {
      PrepareBuilder();
      result.hasPushInfo = false;
      result.pushInfo_ = null;
      return this;
    }
  }
  static SCPlayerUpLevel() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerGuildRequest : pb::GeneratedMessage<CSPlayerGuildRequest, CSPlayerGuildRequest.Builder> {
  private CSPlayerGuildRequest() { }
  private static readonly CSPlayerGuildRequest defaultInstance = new CSPlayerGuildRequest().MakeReadOnly();
  private static readonly string[] _cSPlayerGuildRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSPlayerGuildRequestFieldTags = new uint[] {  };
  public static CSPlayerGuildRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerGuildRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerGuildRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerGuildRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerGuildRequest, CSPlayerGuildRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerGuildRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerGuildRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerGuildRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerGuildRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerGuildRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerGuildRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerGuildRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerGuildRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerGuildRequest result;
    
    private CSPlayerGuildRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerGuildRequest original = result;
        result = new CSPlayerGuildRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerGuildRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerGuildRequest.Descriptor; }
    }
    
    public override CSPlayerGuildRequest DefaultInstanceForType {
      get { return global::CSPlayerGuildRequest.DefaultInstance; }
    }
    
    public override CSPlayerGuildRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerGuildRequest) {
        return MergeFrom((CSPlayerGuildRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerGuildRequest other) {
      if (other == global::CSPlayerGuildRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerGuildRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerGuildRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSPlayerGuildRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerGuildResponse : pb::GeneratedMessage<SCPlayerGuildResponse, SCPlayerGuildResponse.Builder> {
  private SCPlayerGuildResponse() { }
  private static readonly SCPlayerGuildResponse defaultInstance = new SCPlayerGuildResponse().MakeReadOnly();
  private static readonly string[] _sCPlayerGuildResponseFieldNames = new string[] { "guild" };
  private static readonly uint[] _sCPlayerGuildResponseFieldTags = new uint[] { 10 };
  public static SCPlayerGuildResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerGuildResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerGuildResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerGuildResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerGuildResponse, SCPlayerGuildResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerGuildResponse__FieldAccessorTable; }
  }
  
  public const int GuildFieldNumber = 1;
  private bool hasGuild;
  private string guild_ = "";
  public bool HasGuild {
    get { return hasGuild; }
  }
  public string Guild {
    get { return guild_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerGuildResponseFieldNames;
    if (hasGuild) {
      output.WriteString(1, field_names[0], Guild);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGuild) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Guild);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerGuildResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerGuildResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerGuildResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerGuildResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerGuildResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerGuildResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerGuildResponse result;
    
    private SCPlayerGuildResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerGuildResponse original = result;
        result = new SCPlayerGuildResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerGuildResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerGuildResponse.Descriptor; }
    }
    
    public override SCPlayerGuildResponse DefaultInstanceForType {
      get { return global::SCPlayerGuildResponse.DefaultInstance; }
    }
    
    public override SCPlayerGuildResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerGuildResponse) {
        return MergeFrom((SCPlayerGuildResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerGuildResponse other) {
      if (other == global::SCPlayerGuildResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGuild) {
        Guild = other.Guild;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerGuildResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerGuildResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasGuild = input.ReadString(ref result.guild_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGuild {
      get { return result.hasGuild; }
    }
    public string Guild {
      get { return result.Guild; }
      set { SetGuild(value); }
    }
    public Builder SetGuild(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGuild = true;
      result.guild_ = value;
      return this;
    }
    public Builder ClearGuild() {
      PrepareBuilder();
      result.hasGuild = false;
      result.guild_ = "";
      return this;
    }
  }
  static SCPlayerGuildResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerGuildUpdateRequest : pb::GeneratedMessage<CSPlayerGuildUpdateRequest, CSPlayerGuildUpdateRequest.Builder> {
  private CSPlayerGuildUpdateRequest() { }
  private static readonly CSPlayerGuildUpdateRequest defaultInstance = new CSPlayerGuildUpdateRequest().MakeReadOnly();
  private static readonly string[] _cSPlayerGuildUpdateRequestFieldNames = new string[] { "guild" };
  private static readonly uint[] _cSPlayerGuildUpdateRequestFieldTags = new uint[] { 10 };
  public static CSPlayerGuildUpdateRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerGuildUpdateRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerGuildUpdateRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerGuildUpdateRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerGuildUpdateRequest, CSPlayerGuildUpdateRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerGuildUpdateRequest__FieldAccessorTable; }
  }
  
  public const int GuildFieldNumber = 1;
  private bool hasGuild;
  private string guild_ = "";
  public bool HasGuild {
    get { return hasGuild; }
  }
  public string Guild {
    get { return guild_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerGuildUpdateRequestFieldNames;
    if (hasGuild) {
      output.WriteString(1, field_names[0], Guild);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasGuild) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Guild);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerGuildUpdateRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerGuildUpdateRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerGuildUpdateRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerGuildUpdateRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerGuildUpdateRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerGuildUpdateRequest result;
    
    private CSPlayerGuildUpdateRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerGuildUpdateRequest original = result;
        result = new CSPlayerGuildUpdateRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerGuildUpdateRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerGuildUpdateRequest.Descriptor; }
    }
    
    public override CSPlayerGuildUpdateRequest DefaultInstanceForType {
      get { return global::CSPlayerGuildUpdateRequest.DefaultInstance; }
    }
    
    public override CSPlayerGuildUpdateRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerGuildUpdateRequest) {
        return MergeFrom((CSPlayerGuildUpdateRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerGuildUpdateRequest other) {
      if (other == global::CSPlayerGuildUpdateRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGuild) {
        Guild = other.Guild;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerGuildUpdateRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerGuildUpdateRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasGuild = input.ReadString(ref result.guild_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGuild {
      get { return result.hasGuild; }
    }
    public string Guild {
      get { return result.Guild; }
      set { SetGuild(value); }
    }
    public Builder SetGuild(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGuild = true;
      result.guild_ = value;
      return this;
    }
    public Builder ClearGuild() {
      PrepareBuilder();
      result.hasGuild = false;
      result.guild_ = "";
      return this;
    }
  }
  static CSPlayerGuildUpdateRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSPlayerFeedbackRequest : pb::GeneratedMessage<CSPlayerFeedbackRequest, CSPlayerFeedbackRequest.Builder> {
  private CSPlayerFeedbackRequest() { }
  private static readonly CSPlayerFeedbackRequest defaultInstance = new CSPlayerFeedbackRequest().MakeReadOnly();
  private static readonly string[] _cSPlayerFeedbackRequestFieldNames = new string[] { "content", "email", "feedbackType", "information", "platform", "release" };
  private static readonly uint[] _cSPlayerFeedbackRequestFieldTags = new uint[] { 10, 42, 32, 50, 18, 26 };
  public static CSPlayerFeedbackRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSPlayerFeedbackRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSPlayerFeedbackRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSPlayerFeedbackRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSPlayerFeedbackRequest, CSPlayerFeedbackRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSPlayerFeedbackRequest__FieldAccessorTable; }
  }
  
  public const int ContentFieldNumber = 1;
  private bool hasContent;
  private string content_ = "";
  public bool HasContent {
    get { return hasContent; }
  }
  public string Content {
    get { return content_; }
  }
  
  public const int PlatformFieldNumber = 2;
  private bool hasPlatform;
  private string platform_ = "";
  public bool HasPlatform {
    get { return hasPlatform; }
  }
  public string Platform {
    get { return platform_; }
  }
  
  public const int ReleaseFieldNumber = 3;
  private bool hasRelease;
  private string release_ = "";
  public bool HasRelease {
    get { return hasRelease; }
  }
  public string Release {
    get { return release_; }
  }
  
  public const int FeedbackTypeFieldNumber = 4;
  private bool hasFeedbackType;
  private global::FeedbackType feedbackType_ = global::FeedbackType.ALL;
  public bool HasFeedbackType {
    get { return hasFeedbackType; }
  }
  public global::FeedbackType FeedbackType {
    get { return feedbackType_; }
  }
  
  public const int EmailFieldNumber = 5;
  private bool hasEmail;
  private string email_ = "";
  public bool HasEmail {
    get { return hasEmail; }
  }
  public string Email {
    get { return email_; }
  }
  
  public const int InformationFieldNumber = 6;
  private bool hasInformation;
  private string information_ = "";
  public bool HasInformation {
    get { return hasInformation; }
  }
  public string Information {
    get { return information_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSPlayerFeedbackRequestFieldNames;
    if (hasContent) {
      output.WriteString(1, field_names[0], Content);
    }
    if (hasPlatform) {
      output.WriteString(2, field_names[4], Platform);
    }
    if (hasRelease) {
      output.WriteString(3, field_names[5], Release);
    }
    if (hasFeedbackType) {
      output.WriteEnum(4, field_names[2], (int) FeedbackType, FeedbackType);
    }
    if (hasEmail) {
      output.WriteString(5, field_names[1], Email);
    }
    if (hasInformation) {
      output.WriteString(6, field_names[3], Information);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasContent) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Content);
    }
    if (hasPlatform) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Platform);
    }
    if (hasRelease) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Release);
    }
    if (hasFeedbackType) {
      size += pb::CodedOutputStream.ComputeEnumSize(4, (int) FeedbackType);
    }
    if (hasEmail) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Email);
    }
    if (hasInformation) {
      size += pb::CodedOutputStream.ComputeStringSize(6, Information);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSPlayerFeedbackRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSPlayerFeedbackRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSPlayerFeedbackRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSPlayerFeedbackRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSPlayerFeedbackRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSPlayerFeedbackRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSPlayerFeedbackRequest result;
    
    private CSPlayerFeedbackRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSPlayerFeedbackRequest original = result;
        result = new CSPlayerFeedbackRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSPlayerFeedbackRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSPlayerFeedbackRequest.Descriptor; }
    }
    
    public override CSPlayerFeedbackRequest DefaultInstanceForType {
      get { return global::CSPlayerFeedbackRequest.DefaultInstance; }
    }
    
    public override CSPlayerFeedbackRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSPlayerFeedbackRequest) {
        return MergeFrom((CSPlayerFeedbackRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSPlayerFeedbackRequest other) {
      if (other == global::CSPlayerFeedbackRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasContent) {
        Content = other.Content;
      }
      if (other.HasPlatform) {
        Platform = other.Platform;
      }
      if (other.HasRelease) {
        Release = other.Release;
      }
      if (other.HasFeedbackType) {
        FeedbackType = other.FeedbackType;
      }
      if (other.HasEmail) {
        Email = other.Email;
      }
      if (other.HasInformation) {
        Information = other.Information;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSPlayerFeedbackRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSPlayerFeedbackRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasContent = input.ReadString(ref result.content_);
            break;
          }
          case 18: {
            result.hasPlatform = input.ReadString(ref result.platform_);
            break;
          }
          case 26: {
            result.hasRelease = input.ReadString(ref result.release_);
            break;
          }
          case 32: {
            object unknown;
            if(input.ReadEnum(ref result.feedbackType_, out unknown)) {
              result.hasFeedbackType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(4, (ulong)(int)unknown);
            }
            break;
          }
          case 42: {
            result.hasEmail = input.ReadString(ref result.email_);
            break;
          }
          case 50: {
            result.hasInformation = input.ReadString(ref result.information_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasContent {
      get { return result.hasContent; }
    }
    public string Content {
      get { return result.Content; }
      set { SetContent(value); }
    }
    public Builder SetContent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasContent = true;
      result.content_ = value;
      return this;
    }
    public Builder ClearContent() {
      PrepareBuilder();
      result.hasContent = false;
      result.content_ = "";
      return this;
    }
    
    public bool HasPlatform {
      get { return result.hasPlatform; }
    }
    public string Platform {
      get { return result.Platform; }
      set { SetPlatform(value); }
    }
    public Builder SetPlatform(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlatform = true;
      result.platform_ = value;
      return this;
    }
    public Builder ClearPlatform() {
      PrepareBuilder();
      result.hasPlatform = false;
      result.platform_ = "";
      return this;
    }
    
    public bool HasRelease {
      get { return result.hasRelease; }
    }
    public string Release {
      get { return result.Release; }
      set { SetRelease(value); }
    }
    public Builder SetRelease(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRelease = true;
      result.release_ = value;
      return this;
    }
    public Builder ClearRelease() {
      PrepareBuilder();
      result.hasRelease = false;
      result.release_ = "";
      return this;
    }
    
    public bool HasFeedbackType {
     get { return result.hasFeedbackType; }
    }
    public global::FeedbackType FeedbackType {
      get { return result.FeedbackType; }
      set { SetFeedbackType(value); }
    }
    public Builder SetFeedbackType(global::FeedbackType value) {
      PrepareBuilder();
      result.hasFeedbackType = true;
      result.feedbackType_ = value;
      return this;
    }
    public Builder ClearFeedbackType() {
      PrepareBuilder();
      result.hasFeedbackType = false;
      result.feedbackType_ = global::FeedbackType.ALL;
      return this;
    }
    
    public bool HasEmail {
      get { return result.hasEmail; }
    }
    public string Email {
      get { return result.Email; }
      set { SetEmail(value); }
    }
    public Builder SetEmail(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEmail = true;
      result.email_ = value;
      return this;
    }
    public Builder ClearEmail() {
      PrepareBuilder();
      result.hasEmail = false;
      result.email_ = "";
      return this;
    }
    
    public bool HasInformation {
      get { return result.hasInformation; }
    }
    public string Information {
      get { return result.Information; }
      set { SetInformation(value); }
    }
    public Builder SetInformation(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasInformation = true;
      result.information_ = value;
      return this;
    }
    public Builder ClearInformation() {
      PrepareBuilder();
      result.hasInformation = false;
      result.information_ = "";
      return this;
    }
  }
  static CSPlayerFeedbackRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCPlayerFeedbackResponse : pb::GeneratedMessage<SCPlayerFeedbackResponse, SCPlayerFeedbackResponse.Builder> {
  private SCPlayerFeedbackResponse() { }
  private static readonly SCPlayerFeedbackResponse defaultInstance = new SCPlayerFeedbackResponse().MakeReadOnly();
  private static readonly string[] _sCPlayerFeedbackResponseFieldNames = new string[] { "nextAvailableTime", "status", "timeLeft" };
  private static readonly uint[] _sCPlayerFeedbackResponseFieldTags = new uint[] { 16, 10, 24 };
  public static SCPlayerFeedbackResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCPlayerFeedbackResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCPlayerFeedbackResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCPlayerFeedbackResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCPlayerFeedbackResponse, SCPlayerFeedbackResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCPlayerFeedbackResponse__FieldAccessorTable; }
  }
  
  public const int StatusFieldNumber = 1;
  private bool hasStatus;
  private global::ResponseStatus status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public global::ResponseStatus Status {
    get { return status_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int NextAvailableTimeFieldNumber = 2;
  private bool hasNextAvailableTime;
  private long nextAvailableTime_;
  public bool HasNextAvailableTime {
    get { return hasNextAvailableTime; }
  }
  public long NextAvailableTime {
    get { return nextAvailableTime_; }
  }
  
  public const int TimeLeftFieldNumber = 3;
  private bool hasTimeLeft;
  private int timeLeft_;
  public bool HasTimeLeft {
    get { return hasTimeLeft; }
  }
  public int TimeLeft {
    get { return timeLeft_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCPlayerFeedbackResponseFieldNames;
    if (hasStatus) {
      output.WriteMessage(1, field_names[1], Status);
    }
    if (hasNextAvailableTime) {
      output.WriteInt64(2, field_names[0], NextAvailableTime);
    }
    if (hasTimeLeft) {
      output.WriteInt32(3, field_names[2], TimeLeft);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Status);
    }
    if (hasNextAvailableTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, NextAvailableTime);
    }
    if (hasTimeLeft) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, TimeLeft);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCPlayerFeedbackResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCPlayerFeedbackResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCPlayerFeedbackResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCPlayerFeedbackResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCPlayerFeedbackResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCPlayerFeedbackResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCPlayerFeedbackResponse result;
    
    private SCPlayerFeedbackResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCPlayerFeedbackResponse original = result;
        result = new SCPlayerFeedbackResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCPlayerFeedbackResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCPlayerFeedbackResponse.Descriptor; }
    }
    
    public override SCPlayerFeedbackResponse DefaultInstanceForType {
      get { return global::SCPlayerFeedbackResponse.DefaultInstance; }
    }
    
    public override SCPlayerFeedbackResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCPlayerFeedbackResponse) {
        return MergeFrom((SCPlayerFeedbackResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCPlayerFeedbackResponse other) {
      if (other == global::SCPlayerFeedbackResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStatus) {
        MergeStatus(other.Status);
      }
      if (other.HasNextAvailableTime) {
        NextAvailableTime = other.NextAvailableTime;
      }
      if (other.HasTimeLeft) {
        TimeLeft = other.TimeLeft;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCPlayerFeedbackResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCPlayerFeedbackResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasStatus) {
              subBuilder.MergeFrom(Status);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Status = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasNextAvailableTime = input.ReadInt64(ref result.nextAvailableTime_);
            break;
          }
          case 24: {
            result.hasTimeLeft = input.ReadInt32(ref result.timeLeft_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStatus {
     get { return result.hasStatus; }
    }
    public global::ResponseStatus Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder SetStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStatus &&
          result.status_ != global::ResponseStatus.DefaultInstance) {
          result.status_ = global::ResponseStatus.CreateBuilder(result.status_).MergeFrom(value).BuildPartial();
      } else {
        result.status_ = value;
      }
      result.hasStatus = true;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = null;
      return this;
    }
    
    public bool HasNextAvailableTime {
      get { return result.hasNextAvailableTime; }
    }
    public long NextAvailableTime {
      get { return result.NextAvailableTime; }
      set { SetNextAvailableTime(value); }
    }
    public Builder SetNextAvailableTime(long value) {
      PrepareBuilder();
      result.hasNextAvailableTime = true;
      result.nextAvailableTime_ = value;
      return this;
    }
    public Builder ClearNextAvailableTime() {
      PrepareBuilder();
      result.hasNextAvailableTime = false;
      result.nextAvailableTime_ = 0L;
      return this;
    }
    
    public bool HasTimeLeft {
      get { return result.hasTimeLeft; }
    }
    public int TimeLeft {
      get { return result.TimeLeft; }
      set { SetTimeLeft(value); }
    }
    public Builder SetTimeLeft(int value) {
      PrepareBuilder();
      result.hasTimeLeft = true;
      result.timeLeft_ = value;
      return this;
    }
    public Builder ClearTimeLeft() {
      PrepareBuilder();
      result.hasTimeLeft = false;
      result.timeLeft_ = 0;
      return this;
    }
  }
  static SCPlayerFeedbackResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCAchievementUnlockResponse : pb::GeneratedMessage<SCAchievementUnlockResponse, SCAchievementUnlockResponse.Builder> {
  private SCAchievementUnlockResponse() { }
  private static readonly SCAchievementUnlockResponse defaultInstance = new SCAchievementUnlockResponse().MakeReadOnly();
  private static readonly string[] _sCAchievementUnlockResponseFieldNames = new string[] { "id" };
  private static readonly uint[] _sCAchievementUnlockResponseFieldTags = new uint[] { 8 };
  public static SCAchievementUnlockResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCAchievementUnlockResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCAchievementUnlockResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCAchievementUnlockResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCAchievementUnlockResponse, SCAchievementUnlockResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCAchievementUnlockResponse__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCAchievementUnlockResponseFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCAchievementUnlockResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCAchievementUnlockResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCAchievementUnlockResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCAchievementUnlockResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCAchievementUnlockResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCAchievementUnlockResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCAchievementUnlockResponse result;
    
    private SCAchievementUnlockResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCAchievementUnlockResponse original = result;
        result = new SCAchievementUnlockResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCAchievementUnlockResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCAchievementUnlockResponse.Descriptor; }
    }
    
    public override SCAchievementUnlockResponse DefaultInstanceForType {
      get { return global::SCAchievementUnlockResponse.DefaultInstance; }
    }
    
    public override SCAchievementUnlockResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCAchievementUnlockResponse) {
        return MergeFrom((SCAchievementUnlockResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCAchievementUnlockResponse other) {
      if (other == global::SCAchievementUnlockResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCAchievementUnlockResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCAchievementUnlockResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
  }
  static SCAchievementUnlockResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCActivityNewResponse : pb::GeneratedMessage<SCActivityNewResponse, SCActivityNewResponse.Builder> {
  private SCActivityNewResponse() { }
  private static readonly SCActivityNewResponse defaultInstance = new SCActivityNewResponse().MakeReadOnly();
  private static readonly string[] _sCActivityNewResponseFieldNames = new string[] { "haveNew" };
  private static readonly uint[] _sCActivityNewResponseFieldTags = new uint[] { 8 };
  public static SCActivityNewResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCActivityNewResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCActivityNewResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCActivityNewResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCActivityNewResponse, SCActivityNewResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCActivityNewResponse__FieldAccessorTable; }
  }
  
  public const int HaveNewFieldNumber = 1;
  private bool hasHaveNew;
  private int haveNew_;
  public bool HasHaveNew {
    get { return hasHaveNew; }
  }
  public int HaveNew {
    get { return haveNew_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCActivityNewResponseFieldNames;
    if (hasHaveNew) {
      output.WriteInt32(1, field_names[0], HaveNew);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasHaveNew) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, HaveNew);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCActivityNewResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCActivityNewResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCActivityNewResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCActivityNewResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCActivityNewResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCActivityNewResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCActivityNewResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCActivityNewResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCActivityNewResponse result;
    
    private SCActivityNewResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCActivityNewResponse original = result;
        result = new SCActivityNewResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCActivityNewResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCActivityNewResponse.Descriptor; }
    }
    
    public override SCActivityNewResponse DefaultInstanceForType {
      get { return global::SCActivityNewResponse.DefaultInstance; }
    }
    
    public override SCActivityNewResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCActivityNewResponse) {
        return MergeFrom((SCActivityNewResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCActivityNewResponse other) {
      if (other == global::SCActivityNewResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasHaveNew) {
        HaveNew = other.HaveNew;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCActivityNewResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCActivityNewResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasHaveNew = input.ReadInt32(ref result.haveNew_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasHaveNew {
      get { return result.hasHaveNew; }
    }
    public int HaveNew {
      get { return result.HaveNew; }
      set { SetHaveNew(value); }
    }
    public Builder SetHaveNew(int value) {
      PrepareBuilder();
      result.hasHaveNew = true;
      result.haveNew_ = value;
      return this;
    }
    public Builder ClearHaveNew() {
      PrepareBuilder();
      result.hasHaveNew = false;
      result.haveNew_ = 0;
      return this;
    }
  }
  static SCActivityNewResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneReconnectRequest : pb::GeneratedMessage<CSSceneReconnectRequest, CSSceneReconnectRequest.Builder> {
  private CSSceneReconnectRequest() { }
  private static readonly CSSceneReconnectRequest defaultInstance = new CSSceneReconnectRequest().MakeReadOnly();
  private static readonly string[] _cSSceneReconnectRequestFieldNames = new string[] { "endTime", "sceneId", "startTime" };
  private static readonly uint[] _cSSceneReconnectRequestFieldTags = new uint[] { 24, 8, 16 };
  public static CSSceneReconnectRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneReconnectRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneReconnectRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneReconnectRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneReconnectRequest, CSSceneReconnectRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneReconnectRequest__FieldAccessorTable; }
  }
  
  public const int SceneIdFieldNumber = 1;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int StartTimeFieldNumber = 2;
  private bool hasStartTime;
  private long startTime_;
  public bool HasStartTime {
    get { return hasStartTime; }
  }
  public long StartTime {
    get { return startTime_; }
  }
  
  public const int EndTimeFieldNumber = 3;
  private bool hasEndTime;
  private long endTime_;
  public bool HasEndTime {
    get { return hasEndTime; }
  }
  public long EndTime {
    get { return endTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneReconnectRequestFieldNames;
    if (hasSceneId) {
      output.WriteInt64(1, field_names[1], SceneId);
    }
    if (hasStartTime) {
      output.WriteInt64(2, field_names[2], StartTime);
    }
    if (hasEndTime) {
      output.WriteInt64(3, field_names[0], EndTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SceneId);
    }
    if (hasStartTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, StartTime);
    }
    if (hasEndTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, EndTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneReconnectRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneReconnectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneReconnectRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneReconnectRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneReconnectRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneReconnectRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneReconnectRequest result;
    
    private CSSceneReconnectRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneReconnectRequest original = result;
        result = new CSSceneReconnectRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneReconnectRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneReconnectRequest.Descriptor; }
    }
    
    public override CSSceneReconnectRequest DefaultInstanceForType {
      get { return global::CSSceneReconnectRequest.DefaultInstance; }
    }
    
    public override CSSceneReconnectRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneReconnectRequest) {
        return MergeFrom((CSSceneReconnectRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneReconnectRequest other) {
      if (other == global::CSSceneReconnectRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneReconnectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneReconnectRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 16: {
            result.hasStartTime = input.ReadInt64(ref result.startTime_);
            break;
          }
          case 24: {
            result.hasEndTime = input.ReadInt64(ref result.endTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasStartTime {
      get { return result.hasStartTime; }
    }
    public long StartTime {
      get { return result.StartTime; }
      set { SetStartTime(value); }
    }
    public Builder SetStartTime(long value) {
      PrepareBuilder();
      result.hasStartTime = true;
      result.startTime_ = value;
      return this;
    }
    public Builder ClearStartTime() {
      PrepareBuilder();
      result.hasStartTime = false;
      result.startTime_ = 0L;
      return this;
    }
    
    public bool HasEndTime {
      get { return result.hasEndTime; }
    }
    public long EndTime {
      get { return result.EndTime; }
      set { SetEndTime(value); }
    }
    public Builder SetEndTime(long value) {
      PrepareBuilder();
      result.hasEndTime = true;
      result.endTime_ = value;
      return this;
    }
    public Builder ClearEndTime() {
      PrepareBuilder();
      result.hasEndTime = false;
      result.endTime_ = 0L;
      return this;
    }
  }
  static CSSceneReconnectRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneReconnectResponse : pb::GeneratedMessage<SCSceneReconnectResponse, SCSceneReconnectResponse.Builder> {
  private SCSceneReconnectResponse() { }
  private static readonly SCSceneReconnectResponse defaultInstance = new SCSceneReconnectResponse().MakeReadOnly();
  private static readonly string[] _sCSceneReconnectResponseFieldNames = new string[] { "responseStatus" };
  private static readonly uint[] _sCSceneReconnectResponseFieldTags = new uint[] { 10 };
  public static SCSceneReconnectResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneReconnectResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneReconnectResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneReconnectResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneReconnectResponse, SCSceneReconnectResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneReconnectResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneReconnectResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[0], ResponseStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneReconnectResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneReconnectResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneReconnectResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneReconnectResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneReconnectResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneReconnectResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneReconnectResponse result;
    
    private SCSceneReconnectResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneReconnectResponse original = result;
        result = new SCSceneReconnectResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneReconnectResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneReconnectResponse.Descriptor; }
    }
    
    public override SCSceneReconnectResponse DefaultInstanceForType {
      get { return global::SCSceneReconnectResponse.DefaultInstance; }
    }
    
    public override SCSceneReconnectResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneReconnectResponse) {
        return MergeFrom((SCSceneReconnectResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneReconnectResponse other) {
      if (other == global::SCSceneReconnectResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneReconnectResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneReconnectResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
  }
  static SCSceneReconnectResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSSceneDifficultyReq : pb::GeneratedMessage<CSSceneDifficultyReq, CSSceneDifficultyReq.Builder> {
  private CSSceneDifficultyReq() { }
  private static readonly CSSceneDifficultyReq defaultInstance = new CSSceneDifficultyReq().MakeReadOnly();
  private static readonly string[] _cSSceneDifficultyReqFieldNames = new string[] { "bigIds" };
  private static readonly uint[] _cSSceneDifficultyReqFieldTags = new uint[] { 8 };
  public static CSSceneDifficultyReq DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSSceneDifficultyReq DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSSceneDifficultyReq ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSSceneDifficultyReq__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSSceneDifficultyReq, CSSceneDifficultyReq.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSSceneDifficultyReq__FieldAccessorTable; }
  }
  
  public const int BigIdsFieldNumber = 1;
  private pbc::PopsicleList<long> bigIds_ = new pbc::PopsicleList<long>();
  public scg::IList<long> BigIdsList {
    get { return pbc::Lists.AsReadOnly(bigIds_); }
  }
  public int BigIdsCount {
    get { return bigIds_.Count; }
  }
  public long GetBigIds(int index) {
    return bigIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSSceneDifficultyReqFieldNames;
    if (bigIds_.Count > 0) {
      output.WriteInt64Array(1, field_names[0], bigIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (long element in BigIdsList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * bigIds_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSSceneDifficultyReq ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSSceneDifficultyReq ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSSceneDifficultyReq MakeReadOnly() {
    bigIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSSceneDifficultyReq prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSSceneDifficultyReq, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSSceneDifficultyReq cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSSceneDifficultyReq result;
    
    private CSSceneDifficultyReq PrepareBuilder() {
      if (resultIsReadOnly) {
        CSSceneDifficultyReq original = result;
        result = new CSSceneDifficultyReq();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSSceneDifficultyReq MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSSceneDifficultyReq.Descriptor; }
    }
    
    public override CSSceneDifficultyReq DefaultInstanceForType {
      get { return global::CSSceneDifficultyReq.DefaultInstance; }
    }
    
    public override CSSceneDifficultyReq BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSSceneDifficultyReq) {
        return MergeFrom((CSSceneDifficultyReq) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSSceneDifficultyReq other) {
      if (other == global::CSSceneDifficultyReq.DefaultInstance) return this;
      PrepareBuilder();
      if (other.bigIds_.Count != 0) {
        result.bigIds_.Add(other.bigIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSSceneDifficultyReqFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSSceneDifficultyReqFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt64Array(tag, field_name, result.bigIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<long> BigIdsList {
      get { return PrepareBuilder().bigIds_; }
    }
    public int BigIdsCount {
      get { return result.BigIdsCount; }
    }
    public long GetBigIds(int index) {
      return result.GetBigIds(index);
    }
    public Builder SetBigIds(int index, long value) {
      PrepareBuilder();
      result.bigIds_[index] = value;
      return this;
    }
    public Builder AddBigIds(long value) {
      PrepareBuilder();
      result.bigIds_.Add(value);
      return this;
    }
    public Builder AddRangeBigIds(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.bigIds_.Add(values);
      return this;
    }
    public Builder ClearBigIds() {
      PrepareBuilder();
      result.bigIds_.Clear();
      return this;
    }
  }
  static CSSceneDifficultyReq() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SceneDifficultyInfo : pb::GeneratedMessage<SceneDifficultyInfo, SceneDifficultyInfo.Builder> {
  private SceneDifficultyInfo() { }
  private static readonly SceneDifficultyInfo defaultInstance = new SceneDifficultyInfo().MakeReadOnly();
  private static readonly string[] _sceneDifficultyInfoFieldNames = new string[] { "bigId", "difficulty", "exp" };
  private static readonly uint[] _sceneDifficultyInfoFieldTags = new uint[] { 8, 16, 24 };
  public static SceneDifficultyInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SceneDifficultyInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SceneDifficultyInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SceneDifficultyInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SceneDifficultyInfo, SceneDifficultyInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SceneDifficultyInfo__FieldAccessorTable; }
  }
  
  public const int BigIdFieldNumber = 1;
  private bool hasBigId;
  private long bigId_;
  public bool HasBigId {
    get { return hasBigId; }
  }
  public long BigId {
    get { return bigId_; }
  }
  
  public const int DifficultyFieldNumber = 2;
  private bool hasDifficulty;
  private int difficulty_;
  public bool HasDifficulty {
    get { return hasDifficulty; }
  }
  public int Difficulty {
    get { return difficulty_; }
  }
  
  public const int ExpFieldNumber = 3;
  private bool hasExp;
  private int exp_;
  public bool HasExp {
    get { return hasExp; }
  }
  public int Exp {
    get { return exp_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sceneDifficultyInfoFieldNames;
    if (hasBigId) {
      output.WriteInt64(1, field_names[0], BigId);
    }
    if (hasDifficulty) {
      output.WriteInt32(2, field_names[1], Difficulty);
    }
    if (hasExp) {
      output.WriteInt32(3, field_names[2], Exp);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasBigId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, BigId);
    }
    if (hasDifficulty) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, Difficulty);
    }
    if (hasExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Exp);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SceneDifficultyInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SceneDifficultyInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SceneDifficultyInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SceneDifficultyInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SceneDifficultyInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SceneDifficultyInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SceneDifficultyInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SceneDifficultyInfo result;
    
    private SceneDifficultyInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        SceneDifficultyInfo original = result;
        result = new SceneDifficultyInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SceneDifficultyInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SceneDifficultyInfo.Descriptor; }
    }
    
    public override SceneDifficultyInfo DefaultInstanceForType {
      get { return global::SceneDifficultyInfo.DefaultInstance; }
    }
    
    public override SceneDifficultyInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SceneDifficultyInfo) {
        return MergeFrom((SceneDifficultyInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SceneDifficultyInfo other) {
      if (other == global::SceneDifficultyInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBigId) {
        BigId = other.BigId;
      }
      if (other.HasDifficulty) {
        Difficulty = other.Difficulty;
      }
      if (other.HasExp) {
        Exp = other.Exp;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sceneDifficultyInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sceneDifficultyInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBigId = input.ReadInt64(ref result.bigId_);
            break;
          }
          case 16: {
            result.hasDifficulty = input.ReadInt32(ref result.difficulty_);
            break;
          }
          case 24: {
            result.hasExp = input.ReadInt32(ref result.exp_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBigId {
      get { return result.hasBigId; }
    }
    public long BigId {
      get { return result.BigId; }
      set { SetBigId(value); }
    }
    public Builder SetBigId(long value) {
      PrepareBuilder();
      result.hasBigId = true;
      result.bigId_ = value;
      return this;
    }
    public Builder ClearBigId() {
      PrepareBuilder();
      result.hasBigId = false;
      result.bigId_ = 0L;
      return this;
    }
    
    public bool HasDifficulty {
      get { return result.hasDifficulty; }
    }
    public int Difficulty {
      get { return result.Difficulty; }
      set { SetDifficulty(value); }
    }
    public Builder SetDifficulty(int value) {
      PrepareBuilder();
      result.hasDifficulty = true;
      result.difficulty_ = value;
      return this;
    }
    public Builder ClearDifficulty() {
      PrepareBuilder();
      result.hasDifficulty = false;
      result.difficulty_ = 0;
      return this;
    }
    
    public bool HasExp {
      get { return result.hasExp; }
    }
    public int Exp {
      get { return result.Exp; }
      set { SetExp(value); }
    }
    public Builder SetExp(int value) {
      PrepareBuilder();
      result.hasExp = true;
      result.exp_ = value;
      return this;
    }
    public Builder ClearExp() {
      PrepareBuilder();
      result.hasExp = false;
      result.exp_ = 0;
      return this;
    }
  }
  static SceneDifficultyInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCSceneDifficultyResp : pb::GeneratedMessage<SCSceneDifficultyResp, SCSceneDifficultyResp.Builder> {
  private SCSceneDifficultyResp() { }
  private static readonly SCSceneDifficultyResp defaultInstance = new SCSceneDifficultyResp().MakeReadOnly();
  private static readonly string[] _sCSceneDifficultyRespFieldNames = new string[] { "infos" };
  private static readonly uint[] _sCSceneDifficultyRespFieldTags = new uint[] { 10 };
  public static SCSceneDifficultyResp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCSceneDifficultyResp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCSceneDifficultyResp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCSceneDifficultyResp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCSceneDifficultyResp, SCSceneDifficultyResp.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCSceneDifficultyResp__FieldAccessorTable; }
  }
  
  public const int InfosFieldNumber = 1;
  private pbc::PopsicleList<global::SceneDifficultyInfo> infos_ = new pbc::PopsicleList<global::SceneDifficultyInfo>();
  public scg::IList<global::SceneDifficultyInfo> InfosList {
    get { return infos_; }
  }
  public int InfosCount {
    get { return infos_.Count; }
  }
  public global::SceneDifficultyInfo GetInfos(int index) {
    return infos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCSceneDifficultyRespFieldNames;
    if (infos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], infos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::SceneDifficultyInfo element in InfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCSceneDifficultyResp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCSceneDifficultyResp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCSceneDifficultyResp MakeReadOnly() {
    infos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCSceneDifficultyResp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCSceneDifficultyResp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCSceneDifficultyResp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCSceneDifficultyResp result;
    
    private SCSceneDifficultyResp PrepareBuilder() {
      if (resultIsReadOnly) {
        SCSceneDifficultyResp original = result;
        result = new SCSceneDifficultyResp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCSceneDifficultyResp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCSceneDifficultyResp.Descriptor; }
    }
    
    public override SCSceneDifficultyResp DefaultInstanceForType {
      get { return global::SCSceneDifficultyResp.DefaultInstance; }
    }
    
    public override SCSceneDifficultyResp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCSceneDifficultyResp) {
        return MergeFrom((SCSceneDifficultyResp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCSceneDifficultyResp other) {
      if (other == global::SCSceneDifficultyResp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.infos_.Count != 0) {
        result.infos_.Add(other.infos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCSceneDifficultyRespFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCSceneDifficultyRespFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.infos_, global::SceneDifficultyInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::SceneDifficultyInfo> InfosList {
      get { return PrepareBuilder().infos_; }
    }
    public int InfosCount {
      get { return result.InfosCount; }
    }
    public global::SceneDifficultyInfo GetInfos(int index) {
      return result.GetInfos(index);
    }
    public Builder SetInfos(int index, global::SceneDifficultyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.infos_[index] = value;
      return this;
    }
    public Builder SetInfos(int index, global::SceneDifficultyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.infos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddInfos(global::SceneDifficultyInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.infos_.Add(value);
      return this;
    }
    public Builder AddInfos(global::SceneDifficultyInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.infos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeInfos(scg::IEnumerable<global::SceneDifficultyInfo> values) {
      PrepareBuilder();
      result.infos_.Add(values);
      return this;
    }
    public Builder ClearInfos() {
      PrepareBuilder();
      result.infos_.Clear();
      return this;
    }
  }
  static SCSceneDifficultyResp() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSJigsawReconnectRequest : pb::GeneratedMessage<CSJigsawReconnectRequest, CSJigsawReconnectRequest.Builder> {
  private CSJigsawReconnectRequest() { }
  private static readonly CSJigsawReconnectRequest defaultInstance = new CSJigsawReconnectRequest().MakeReadOnly();
  private static readonly string[] _cSJigsawReconnectRequestFieldNames = new string[] { "endTime", "sceneId", "startTime" };
  private static readonly uint[] _cSJigsawReconnectRequestFieldTags = new uint[] { 24, 8, 16 };
  public static CSJigsawReconnectRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSJigsawReconnectRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSJigsawReconnectRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSJigsawReconnectRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSJigsawReconnectRequest, CSJigsawReconnectRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSJigsawReconnectRequest__FieldAccessorTable; }
  }
  
  public const int SceneIdFieldNumber = 1;
  private bool hasSceneId;
  private long sceneId_;
  public bool HasSceneId {
    get { return hasSceneId; }
  }
  public long SceneId {
    get { return sceneId_; }
  }
  
  public const int StartTimeFieldNumber = 2;
  private bool hasStartTime;
  private long startTime_;
  public bool HasStartTime {
    get { return hasStartTime; }
  }
  public long StartTime {
    get { return startTime_; }
  }
  
  public const int EndTimeFieldNumber = 3;
  private bool hasEndTime;
  private long endTime_;
  public bool HasEndTime {
    get { return hasEndTime; }
  }
  public long EndTime {
    get { return endTime_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSJigsawReconnectRequestFieldNames;
    if (hasSceneId) {
      output.WriteInt64(1, field_names[1], SceneId);
    }
    if (hasStartTime) {
      output.WriteInt64(2, field_names[2], StartTime);
    }
    if (hasEndTime) {
      output.WriteInt64(3, field_names[0], EndTime);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasSceneId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, SceneId);
    }
    if (hasStartTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, StartTime);
    }
    if (hasEndTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, EndTime);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSJigsawReconnectRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSJigsawReconnectRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSJigsawReconnectRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSJigsawReconnectRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSJigsawReconnectRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSJigsawReconnectRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSJigsawReconnectRequest result;
    
    private CSJigsawReconnectRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSJigsawReconnectRequest original = result;
        result = new CSJigsawReconnectRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSJigsawReconnectRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSJigsawReconnectRequest.Descriptor; }
    }
    
    public override CSJigsawReconnectRequest DefaultInstanceForType {
      get { return global::CSJigsawReconnectRequest.DefaultInstance; }
    }
    
    public override CSJigsawReconnectRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSJigsawReconnectRequest) {
        return MergeFrom((CSJigsawReconnectRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSJigsawReconnectRequest other) {
      if (other == global::CSJigsawReconnectRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSceneId) {
        SceneId = other.SceneId;
      }
      if (other.HasStartTime) {
        StartTime = other.StartTime;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSJigsawReconnectRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSJigsawReconnectRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSceneId = input.ReadInt64(ref result.sceneId_);
            break;
          }
          case 16: {
            result.hasStartTime = input.ReadInt64(ref result.startTime_);
            break;
          }
          case 24: {
            result.hasEndTime = input.ReadInt64(ref result.endTime_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSceneId {
      get { return result.hasSceneId; }
    }
    public long SceneId {
      get { return result.SceneId; }
      set { SetSceneId(value); }
    }
    public Builder SetSceneId(long value) {
      PrepareBuilder();
      result.hasSceneId = true;
      result.sceneId_ = value;
      return this;
    }
    public Builder ClearSceneId() {
      PrepareBuilder();
      result.hasSceneId = false;
      result.sceneId_ = 0L;
      return this;
    }
    
    public bool HasStartTime {
      get { return result.hasStartTime; }
    }
    public long StartTime {
      get { return result.StartTime; }
      set { SetStartTime(value); }
    }
    public Builder SetStartTime(long value) {
      PrepareBuilder();
      result.hasStartTime = true;
      result.startTime_ = value;
      return this;
    }
    public Builder ClearStartTime() {
      PrepareBuilder();
      result.hasStartTime = false;
      result.startTime_ = 0L;
      return this;
    }
    
    public bool HasEndTime {
      get { return result.hasEndTime; }
    }
    public long EndTime {
      get { return result.EndTime; }
      set { SetEndTime(value); }
    }
    public Builder SetEndTime(long value) {
      PrepareBuilder();
      result.hasEndTime = true;
      result.endTime_ = value;
      return this;
    }
    public Builder ClearEndTime() {
      PrepareBuilder();
      result.hasEndTime = false;
      result.endTime_ = 0L;
      return this;
    }
  }
  static CSJigsawReconnectRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCJigsawReconnectResponse : pb::GeneratedMessage<SCJigsawReconnectResponse, SCJigsawReconnectResponse.Builder> {
  private SCJigsawReconnectResponse() { }
  private static readonly SCJigsawReconnectResponse defaultInstance = new SCJigsawReconnectResponse().MakeReadOnly();
  private static readonly string[] _sCJigsawReconnectResponseFieldNames = new string[] { "responseStatus" };
  private static readonly uint[] _sCJigsawReconnectResponseFieldTags = new uint[] { 10 };
  public static SCJigsawReconnectResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCJigsawReconnectResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCJigsawReconnectResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCJigsawReconnectResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCJigsawReconnectResponse, SCJigsawReconnectResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCJigsawReconnectResponse__FieldAccessorTable; }
  }
  
  public const int ResponseStatusFieldNumber = 1;
  private bool hasResponseStatus;
  private global::ResponseStatus responseStatus_;
  public bool HasResponseStatus {
    get { return hasResponseStatus; }
  }
  public global::ResponseStatus ResponseStatus {
    get { return responseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCJigsawReconnectResponseFieldNames;
    if (hasResponseStatus) {
      output.WriteMessage(1, field_names[0], ResponseStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, ResponseStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCJigsawReconnectResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCJigsawReconnectResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCJigsawReconnectResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCJigsawReconnectResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCJigsawReconnectResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCJigsawReconnectResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCJigsawReconnectResponse result;
    
    private SCJigsawReconnectResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCJigsawReconnectResponse original = result;
        result = new SCJigsawReconnectResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCJigsawReconnectResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCJigsawReconnectResponse.Descriptor; }
    }
    
    public override SCJigsawReconnectResponse DefaultInstanceForType {
      get { return global::SCJigsawReconnectResponse.DefaultInstance; }
    }
    
    public override SCJigsawReconnectResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCJigsawReconnectResponse) {
        return MergeFrom((SCJigsawReconnectResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCJigsawReconnectResponse other) {
      if (other == global::SCJigsawReconnectResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResponseStatus) {
        MergeResponseStatus(other.ResponseStatus);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCJigsawReconnectResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCJigsawReconnectResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResponseStatus) {
              subBuilder.MergeFrom(ResponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ResponseStatus = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResponseStatus {
     get { return result.hasResponseStatus; }
    }
    public global::ResponseStatus ResponseStatus {
      get { return result.ResponseStatus; }
      set { SetResponseStatus(value); }
    }
    public Builder SetResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = value;
      return this;
    }
    public Builder SetResponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResponseStatus = true;
      result.responseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResponseStatus &&
          result.responseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.responseStatus_ = global::ResponseStatus.CreateBuilder(result.responseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.responseStatus_ = value;
      }
      result.hasResponseStatus = true;
      return this;
    }
    public Builder ClearResponseStatus() {
      PrepareBuilder();
      result.hasResponseStatus = false;
      result.responseStatus_ = null;
      return this;
    }
  }
  static SCJigsawReconnectResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ServiceConfigInfo : pb::GeneratedMessage<ServiceConfigInfo, ServiceConfigInfo.Builder> {
  private ServiceConfigInfo() { }
  private static readonly ServiceConfigInfo defaultInstance = new ServiceConfigInfo().MakeReadOnly();
  private static readonly string[] _serviceConfigInfoFieldNames = new string[] { "key", "value" };
  private static readonly uint[] _serviceConfigInfoFieldTags = new uint[] { 10, 18 };
  public static ServiceConfigInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ServiceConfigInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ServiceConfigInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_ServiceConfigInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ServiceConfigInfo, ServiceConfigInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_ServiceConfigInfo__FieldAccessorTable; }
  }
  
  public const int KeyFieldNumber = 1;
  private bool hasKey;
  private string key_ = "";
  public bool HasKey {
    get { return hasKey; }
  }
  public string Key {
    get { return key_; }
  }
  
  public const int ValueFieldNumber = 2;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _serviceConfigInfoFieldNames;
    if (hasKey) {
      output.WriteString(1, field_names[0], Key);
    }
    if (hasValue) {
      output.WriteString(2, field_names[1], Value);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasKey) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Key);
    }
    if (hasValue) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Value);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static ServiceConfigInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ServiceConfigInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ServiceConfigInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ServiceConfigInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ServiceConfigInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ServiceConfigInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ServiceConfigInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ServiceConfigInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ServiceConfigInfo result;
    
    private ServiceConfigInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ServiceConfigInfo original = result;
        result = new ServiceConfigInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ServiceConfigInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ServiceConfigInfo.Descriptor; }
    }
    
    public override ServiceConfigInfo DefaultInstanceForType {
      get { return global::ServiceConfigInfo.DefaultInstance; }
    }
    
    public override ServiceConfigInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ServiceConfigInfo) {
        return MergeFrom((ServiceConfigInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ServiceConfigInfo other) {
      if (other == global::ServiceConfigInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_serviceConfigInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _serviceConfigInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasKey = input.ReadString(ref result.key_);
            break;
          }
          case 18: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasKey {
      get { return result.hasKey; }
    }
    public string Key {
      get { return result.Key; }
      set { SetKey(value); }
    }
    public Builder SetKey(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKey = true;
      result.key_ = value;
      return this;
    }
    public Builder ClearKey() {
      PrepareBuilder();
      result.hasKey = false;
      result.key_ = "";
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
  }
  static ServiceConfigInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGetServiceConfigRequest : pb::GeneratedMessage<CSGetServiceConfigRequest, CSGetServiceConfigRequest.Builder> {
  private CSGetServiceConfigRequest() { }
  private static readonly CSGetServiceConfigRequest defaultInstance = new CSGetServiceConfigRequest().MakeReadOnly();
  private static readonly string[] _cSGetServiceConfigRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSGetServiceConfigRequestFieldTags = new uint[] {  };
  public static CSGetServiceConfigRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGetServiceConfigRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGetServiceConfigRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSGetServiceConfigRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGetServiceConfigRequest, CSGetServiceConfigRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSGetServiceConfigRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGetServiceConfigRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGetServiceConfigRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetServiceConfigRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGetServiceConfigRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGetServiceConfigRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGetServiceConfigRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGetServiceConfigRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGetServiceConfigRequest result;
    
    private CSGetServiceConfigRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGetServiceConfigRequest original = result;
        result = new CSGetServiceConfigRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGetServiceConfigRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGetServiceConfigRequest.Descriptor; }
    }
    
    public override CSGetServiceConfigRequest DefaultInstanceForType {
      get { return global::CSGetServiceConfigRequest.DefaultInstance; }
    }
    
    public override CSGetServiceConfigRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGetServiceConfigRequest) {
        return MergeFrom((CSGetServiceConfigRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGetServiceConfigRequest other) {
      if (other == global::CSGetServiceConfigRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGetServiceConfigRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGetServiceConfigRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSGetServiceConfigRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGetServiceConfigResponse : pb::GeneratedMessage<SCGetServiceConfigResponse, SCGetServiceConfigResponse.Builder> {
  private SCGetServiceConfigResponse() { }
  private static readonly SCGetServiceConfigResponse defaultInstance = new SCGetServiceConfigResponse().MakeReadOnly();
  private static readonly string[] _sCGetServiceConfigResponseFieldNames = new string[] { "info" };
  private static readonly uint[] _sCGetServiceConfigResponseFieldTags = new uint[] { 10 };
  public static SCGetServiceConfigResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGetServiceConfigResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGetServiceConfigResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCGetServiceConfigResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGetServiceConfigResponse, SCGetServiceConfigResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCGetServiceConfigResponse__FieldAccessorTable; }
  }
  
  public const int InfoFieldNumber = 1;
  private pbc::PopsicleList<global::ServiceConfigInfo> info_ = new pbc::PopsicleList<global::ServiceConfigInfo>();
  public scg::IList<global::ServiceConfigInfo> InfoList {
    get { return info_; }
  }
  public int InfoCount {
    get { return info_.Count; }
  }
  public global::ServiceConfigInfo GetInfo(int index) {
    return info_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGetServiceConfigResponseFieldNames;
    if (info_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], info_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::ServiceConfigInfo element in InfoList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGetServiceConfigResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetServiceConfigResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGetServiceConfigResponse MakeReadOnly() {
    info_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGetServiceConfigResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGetServiceConfigResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGetServiceConfigResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGetServiceConfigResponse result;
    
    private SCGetServiceConfigResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGetServiceConfigResponse original = result;
        result = new SCGetServiceConfigResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGetServiceConfigResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGetServiceConfigResponse.Descriptor; }
    }
    
    public override SCGetServiceConfigResponse DefaultInstanceForType {
      get { return global::SCGetServiceConfigResponse.DefaultInstance; }
    }
    
    public override SCGetServiceConfigResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGetServiceConfigResponse) {
        return MergeFrom((SCGetServiceConfigResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGetServiceConfigResponse other) {
      if (other == global::SCGetServiceConfigResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.info_.Count != 0) {
        result.info_.Add(other.info_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGetServiceConfigResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGetServiceConfigResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.info_, global::ServiceConfigInfo.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ServiceConfigInfo> InfoList {
      get { return PrepareBuilder().info_; }
    }
    public int InfoCount {
      get { return result.InfoCount; }
    }
    public global::ServiceConfigInfo GetInfo(int index) {
      return result.GetInfo(index);
    }
    public Builder SetInfo(int index, global::ServiceConfigInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.info_[index] = value;
      return this;
    }
    public Builder SetInfo(int index, global::ServiceConfigInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.info_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddInfo(global::ServiceConfigInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.info_.Add(value);
      return this;
    }
    public Builder AddInfo(global::ServiceConfigInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.info_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeInfo(scg::IEnumerable<global::ServiceConfigInfo> values) {
      PrepareBuilder();
      result.info_.Add(values);
      return this;
    }
    public Builder ClearInfo() {
      PrepareBuilder();
      result.info_.Clear();
      return this;
    }
  }
  static SCGetServiceConfigResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGetServiceConfigSingleRequest : pb::GeneratedMessage<CSGetServiceConfigSingleRequest, CSGetServiceConfigSingleRequest.Builder> {
  private CSGetServiceConfigSingleRequest() { }
  private static readonly CSGetServiceConfigSingleRequest defaultInstance = new CSGetServiceConfigSingleRequest().MakeReadOnly();
  private static readonly string[] _cSGetServiceConfigSingleRequestFieldNames = new string[] { "key" };
  private static readonly uint[] _cSGetServiceConfigSingleRequestFieldTags = new uint[] { 10 };
  public static CSGetServiceConfigSingleRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGetServiceConfigSingleRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGetServiceConfigSingleRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSGetServiceConfigSingleRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGetServiceConfigSingleRequest, CSGetServiceConfigSingleRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSGetServiceConfigSingleRequest__FieldAccessorTable; }
  }
  
  public const int KeyFieldNumber = 1;
  private bool hasKey;
  private string key_ = "";
  public bool HasKey {
    get { return hasKey; }
  }
  public string Key {
    get { return key_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGetServiceConfigSingleRequestFieldNames;
    if (hasKey) {
      output.WriteString(1, field_names[0], Key);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasKey) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Key);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetServiceConfigSingleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGetServiceConfigSingleRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGetServiceConfigSingleRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGetServiceConfigSingleRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGetServiceConfigSingleRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGetServiceConfigSingleRequest result;
    
    private CSGetServiceConfigSingleRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGetServiceConfigSingleRequest original = result;
        result = new CSGetServiceConfigSingleRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGetServiceConfigSingleRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGetServiceConfigSingleRequest.Descriptor; }
    }
    
    public override CSGetServiceConfigSingleRequest DefaultInstanceForType {
      get { return global::CSGetServiceConfigSingleRequest.DefaultInstance; }
    }
    
    public override CSGetServiceConfigSingleRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGetServiceConfigSingleRequest) {
        return MergeFrom((CSGetServiceConfigSingleRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGetServiceConfigSingleRequest other) {
      if (other == global::CSGetServiceConfigSingleRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasKey) {
        Key = other.Key;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGetServiceConfigSingleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGetServiceConfigSingleRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasKey = input.ReadString(ref result.key_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasKey {
      get { return result.hasKey; }
    }
    public string Key {
      get { return result.Key; }
      set { SetKey(value); }
    }
    public Builder SetKey(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKey = true;
      result.key_ = value;
      return this;
    }
    public Builder ClearKey() {
      PrepareBuilder();
      result.hasKey = false;
      result.key_ = "";
      return this;
    }
  }
  static CSGetServiceConfigSingleRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGetServiceConfigSingleResponse : pb::GeneratedMessage<SCGetServiceConfigSingleResponse, SCGetServiceConfigSingleResponse.Builder> {
  private SCGetServiceConfigSingleResponse() { }
  private static readonly SCGetServiceConfigSingleResponse defaultInstance = new SCGetServiceConfigSingleResponse().MakeReadOnly();
  private static readonly string[] _sCGetServiceConfigSingleResponseFieldNames = new string[] { "value" };
  private static readonly uint[] _sCGetServiceConfigSingleResponseFieldTags = new uint[] { 10 };
  public static SCGetServiceConfigSingleResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGetServiceConfigSingleResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGetServiceConfigSingleResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCGetServiceConfigSingleResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGetServiceConfigSingleResponse, SCGetServiceConfigSingleResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCGetServiceConfigSingleResponse__FieldAccessorTable; }
  }
  
  public const int ValueFieldNumber = 1;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGetServiceConfigSingleResponseFieldNames;
    if (hasValue) {
      output.WriteString(1, field_names[0], Value);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasValue) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Value);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetServiceConfigSingleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGetServiceConfigSingleResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGetServiceConfigSingleResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGetServiceConfigSingleResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGetServiceConfigSingleResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGetServiceConfigSingleResponse result;
    
    private SCGetServiceConfigSingleResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGetServiceConfigSingleResponse original = result;
        result = new SCGetServiceConfigSingleResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGetServiceConfigSingleResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGetServiceConfigSingleResponse.Descriptor; }
    }
    
    public override SCGetServiceConfigSingleResponse DefaultInstanceForType {
      get { return global::SCGetServiceConfigSingleResponse.DefaultInstance; }
    }
    
    public override SCGetServiceConfigSingleResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGetServiceConfigSingleResponse) {
        return MergeFrom((SCGetServiceConfigSingleResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGetServiceConfigSingleResponse other) {
      if (other == global::SCGetServiceConfigSingleResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasValue) {
        Value = other.Value;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGetServiceConfigSingleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGetServiceConfigSingleResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
  }
  static SCGetServiceConfigSingleResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GetPathInfo : pb::GeneratedMessage<GetPathInfo, GetPathInfo.Builder> {
  private GetPathInfo() { }
  private static readonly GetPathInfo defaultInstance = new GetPathInfo().MakeReadOnly();
  private static readonly string[] _getPathInfoFieldNames = new string[] { "id", "path", "plat", "status", "version" };
  private static readonly uint[] _getPathInfoFieldTags = new uint[] { 8, 18, 42, 24, 34 };
  public static GetPathInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GetPathInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GetPathInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_GetPathInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GetPathInfo, GetPathInfo.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_GetPathInfo__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private long id_;
  public bool HasId {
    get { return hasId; }
  }
  public long Id {
    get { return id_; }
  }
  
  public const int PathFieldNumber = 2;
  private bool hasPath;
  private string path_ = "";
  public bool HasPath {
    get { return hasPath; }
  }
  public string Path {
    get { return path_; }
  }
  
  public const int StatusFieldNumber = 3;
  private bool hasStatus;
  private int status_;
  public bool HasStatus {
    get { return hasStatus; }
  }
  public int Status {
    get { return status_; }
  }
  
  public const int VersionFieldNumber = 4;
  private bool hasVersion;
  private string version_ = "";
  public bool HasVersion {
    get { return hasVersion; }
  }
  public string Version {
    get { return version_; }
  }
  
  public const int PlatFieldNumber = 5;
  private bool hasPlat;
  private string plat_ = "";
  public bool HasPlat {
    get { return hasPlat; }
  }
  public string Plat {
    get { return plat_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _getPathInfoFieldNames;
    if (hasId) {
      output.WriteInt64(1, field_names[0], Id);
    }
    if (hasPath) {
      output.WriteString(2, field_names[1], Path);
    }
    if (hasStatus) {
      output.WriteInt32(3, field_names[3], Status);
    }
    if (hasVersion) {
      output.WriteString(4, field_names[4], Version);
    }
    if (hasPlat) {
      output.WriteString(5, field_names[2], Plat);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, Id);
    }
    if (hasPath) {
      size += pb::CodedOutputStream.ComputeStringSize(2, Path);
    }
    if (hasStatus) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, Status);
    }
    if (hasVersion) {
      size += pb::CodedOutputStream.ComputeStringSize(4, Version);
    }
    if (hasPlat) {
      size += pb::CodedOutputStream.ComputeStringSize(5, Plat);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static GetPathInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetPathInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetPathInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GetPathInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GetPathInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetPathInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GetPathInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GetPathInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GetPathInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GetPathInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GetPathInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GetPathInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GetPathInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GetPathInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GetPathInfo result;
    
    private GetPathInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        GetPathInfo original = result;
        result = new GetPathInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GetPathInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GetPathInfo.Descriptor; }
    }
    
    public override GetPathInfo DefaultInstanceForType {
      get { return global::GetPathInfo.DefaultInstance; }
    }
    
    public override GetPathInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GetPathInfo) {
        return MergeFrom((GetPathInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GetPathInfo other) {
      if (other == global::GetPathInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasStatus) {
        Status = other.Status;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasPlat) {
        Plat = other.Plat;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_getPathInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _getPathInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadInt64(ref result.id_);
            break;
          }
          case 18: {
            result.hasPath = input.ReadString(ref result.path_);
            break;
          }
          case 24: {
            result.hasStatus = input.ReadInt32(ref result.status_);
            break;
          }
          case 34: {
            result.hasVersion = input.ReadString(ref result.version_);
            break;
          }
          case 42: {
            result.hasPlat = input.ReadString(ref result.plat_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    public long Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    public Builder SetId(long value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0L;
      return this;
    }
    
    public bool HasPath {
      get { return result.hasPath; }
    }
    public string Path {
      get { return result.Path; }
      set { SetPath(value); }
    }
    public Builder SetPath(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPath = true;
      result.path_ = value;
      return this;
    }
    public Builder ClearPath() {
      PrepareBuilder();
      result.hasPath = false;
      result.path_ = "";
      return this;
    }
    
    public bool HasStatus {
      get { return result.hasStatus; }
    }
    public int Status {
      get { return result.Status; }
      set { SetStatus(value); }
    }
    public Builder SetStatus(int value) {
      PrepareBuilder();
      result.hasStatus = true;
      result.status_ = value;
      return this;
    }
    public Builder ClearStatus() {
      PrepareBuilder();
      result.hasStatus = false;
      result.status_ = 0;
      return this;
    }
    
    public bool HasVersion {
      get { return result.hasVersion; }
    }
    public string Version {
      get { return result.Version; }
      set { SetVersion(value); }
    }
    public Builder SetVersion(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasVersion = true;
      result.version_ = value;
      return this;
    }
    public Builder ClearVersion() {
      PrepareBuilder();
      result.hasVersion = false;
      result.version_ = "";
      return this;
    }
    
    public bool HasPlat {
      get { return result.hasPlat; }
    }
    public string Plat {
      get { return result.Plat; }
      set { SetPlat(value); }
    }
    public Builder SetPlat(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlat = true;
      result.plat_ = value;
      return this;
    }
    public Builder ClearPlat() {
      PrepareBuilder();
      result.hasPlat = false;
      result.plat_ = "";
      return this;
    }
  }
  static GetPathInfo() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGetPathConfigRequest : pb::GeneratedMessage<CSGetPathConfigRequest, CSGetPathConfigRequest.Builder> {
  private CSGetPathConfigRequest() { }
  private static readonly CSGetPathConfigRequest defaultInstance = new CSGetPathConfigRequest().MakeReadOnly();
  private static readonly string[] _cSGetPathConfigRequestFieldNames = new string[] { "plat" };
  private static readonly uint[] _cSGetPathConfigRequestFieldTags = new uint[] { 10 };
  public static CSGetPathConfigRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGetPathConfigRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGetPathConfigRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSGetPathConfigRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGetPathConfigRequest, CSGetPathConfigRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSGetPathConfigRequest__FieldAccessorTable; }
  }
  
  public const int PlatFieldNumber = 1;
  private bool hasPlat;
  private string plat_ = "";
  public bool HasPlat {
    get { return hasPlat; }
  }
  public string Plat {
    get { return plat_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGetPathConfigRequestFieldNames;
    if (hasPlat) {
      output.WriteString(1, field_names[0], Plat);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPlat) {
      size += pb::CodedOutputStream.ComputeStringSize(1, Plat);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGetPathConfigRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetPathConfigRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGetPathConfigRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGetPathConfigRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGetPathConfigRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGetPathConfigRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGetPathConfigRequest result;
    
    private CSGetPathConfigRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGetPathConfigRequest original = result;
        result = new CSGetPathConfigRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGetPathConfigRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGetPathConfigRequest.Descriptor; }
    }
    
    public override CSGetPathConfigRequest DefaultInstanceForType {
      get { return global::CSGetPathConfigRequest.DefaultInstance; }
    }
    
    public override CSGetPathConfigRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGetPathConfigRequest) {
        return MergeFrom((CSGetPathConfigRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGetPathConfigRequest other) {
      if (other == global::CSGetPathConfigRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlat) {
        Plat = other.Plat;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGetPathConfigRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGetPathConfigRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasPlat = input.ReadString(ref result.plat_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlat {
      get { return result.hasPlat; }
    }
    public string Plat {
      get { return result.Plat; }
      set { SetPlat(value); }
    }
    public Builder SetPlat(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlat = true;
      result.plat_ = value;
      return this;
    }
    public Builder ClearPlat() {
      PrepareBuilder();
      result.hasPlat = false;
      result.plat_ = "";
      return this;
    }
  }
  static CSGetPathConfigRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGetPathConfigResponse : pb::GeneratedMessage<SCGetPathConfigResponse, SCGetPathConfigResponse.Builder> {
  private SCGetPathConfigResponse() { }
  private static readonly SCGetPathConfigResponse defaultInstance = new SCGetPathConfigResponse().MakeReadOnly();
  private static readonly string[] _sCGetPathConfigResponseFieldNames = new string[] { "infos" };
  private static readonly uint[] _sCGetPathConfigResponseFieldTags = new uint[] { 10 };
  public static SCGetPathConfigResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGetPathConfigResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGetPathConfigResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCGetPathConfigResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGetPathConfigResponse, SCGetPathConfigResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCGetPathConfigResponse__FieldAccessorTable; }
  }
  
  public const int InfosFieldNumber = 1;
  private bool hasInfos;
  private global::GetPathInfo infos_;
  public bool HasInfos {
    get { return hasInfos; }
  }
  public global::GetPathInfo Infos {
    get { return infos_ ?? global::GetPathInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGetPathConfigResponseFieldNames;
    if (hasInfos) {
      output.WriteMessage(1, field_names[0], Infos);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasInfos) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Infos);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGetPathConfigResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetPathConfigResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGetPathConfigResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGetPathConfigResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGetPathConfigResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGetPathConfigResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGetPathConfigResponse result;
    
    private SCGetPathConfigResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGetPathConfigResponse original = result;
        result = new SCGetPathConfigResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGetPathConfigResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGetPathConfigResponse.Descriptor; }
    }
    
    public override SCGetPathConfigResponse DefaultInstanceForType {
      get { return global::SCGetPathConfigResponse.DefaultInstance; }
    }
    
    public override SCGetPathConfigResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGetPathConfigResponse) {
        return MergeFrom((SCGetPathConfigResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGetPathConfigResponse other) {
      if (other == global::SCGetPathConfigResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasInfos) {
        MergeInfos(other.Infos);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGetPathConfigResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGetPathConfigResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::GetPathInfo.Builder subBuilder = global::GetPathInfo.CreateBuilder();
            if (result.hasInfos) {
              subBuilder.MergeFrom(Infos);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Infos = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasInfos {
     get { return result.hasInfos; }
    }
    public global::GetPathInfo Infos {
      get { return result.Infos; }
      set { SetInfos(value); }
    }
    public Builder SetInfos(global::GetPathInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasInfos = true;
      result.infos_ = value;
      return this;
    }
    public Builder SetInfos(global::GetPathInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasInfos = true;
      result.infos_ = builderForValue.Build();
      return this;
    }
    public Builder MergeInfos(global::GetPathInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasInfos &&
          result.infos_ != global::GetPathInfo.DefaultInstance) {
          result.infos_ = global::GetPathInfo.CreateBuilder(result.infos_).MergeFrom(value).BuildPartial();
      } else {
        result.infos_ = value;
      }
      result.hasInfos = true;
      return this;
    }
    public Builder ClearInfos() {
      PrepareBuilder();
      result.hasInfos = false;
      result.infos_ = null;
      return this;
    }
  }
  static SCGetPathConfigResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSClientLogRequest : pb::GeneratedMessage<CSClientLogRequest, CSClientLogRequest.Builder> {
  private CSClientLogRequest() { }
  private static readonly CSClientLogRequest defaultInstance = new CSClientLogRequest().MakeReadOnly();
  private static readonly string[] _cSClientLogRequestFieldNames = new string[] { "event_name", "params", "playerId", "value4sum" };
  private static readonly uint[] _cSClientLogRequestFieldTags = new uint[] { 10, 26, 32, 21 };
  public static CSClientLogRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSClientLogRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSClientLogRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSClientLogRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSClientLogRequest, CSClientLogRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSClientLogRequest__FieldAccessorTable; }
  }
  
  public const int EventNameFieldNumber = 1;
  private bool hasEventName;
  private string eventName_ = "";
  public bool HasEventName {
    get { return hasEventName; }
  }
  public string EventName {
    get { return eventName_; }
  }
  
  public const int Value4SumFieldNumber = 2;
  private bool hasValue4Sum;
  private float value4Sum_;
  public bool HasValue4Sum {
    get { return hasValue4Sum; }
  }
  public float Value4Sum {
    get { return value4Sum_; }
  }
  
  public const int ParamsFieldNumber = 3;
  private bool hasParams;
  private string params_ = "";
  public bool HasParams {
    get { return hasParams; }
  }
  public string Params {
    get { return params_; }
  }
  
  public const int PlayerIdFieldNumber = 4;
  private bool hasPlayerId;
  private long playerId_;
  public bool HasPlayerId {
    get { return hasPlayerId; }
  }
  public long PlayerId {
    get { return playerId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSClientLogRequestFieldNames;
    if (hasEventName) {
      output.WriteString(1, field_names[0], EventName);
    }
    if (hasValue4Sum) {
      output.WriteFloat(2, field_names[3], Value4Sum);
    }
    if (hasParams) {
      output.WriteString(3, field_names[1], Params);
    }
    if (hasPlayerId) {
      output.WriteInt64(4, field_names[2], PlayerId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasEventName) {
      size += pb::CodedOutputStream.ComputeStringSize(1, EventName);
    }
    if (hasValue4Sum) {
      size += pb::CodedOutputStream.ComputeFloatSize(2, Value4Sum);
    }
    if (hasParams) {
      size += pb::CodedOutputStream.ComputeStringSize(3, Params);
    }
    if (hasPlayerId) {
      size += pb::CodedOutputStream.ComputeInt64Size(4, PlayerId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSClientLogRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSClientLogRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSClientLogRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSClientLogRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSClientLogRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSClientLogRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSClientLogRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSClientLogRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSClientLogRequest result;
    
    private CSClientLogRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSClientLogRequest original = result;
        result = new CSClientLogRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSClientLogRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSClientLogRequest.Descriptor; }
    }
    
    public override CSClientLogRequest DefaultInstanceForType {
      get { return global::CSClientLogRequest.DefaultInstance; }
    }
    
    public override CSClientLogRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSClientLogRequest) {
        return MergeFrom((CSClientLogRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSClientLogRequest other) {
      if (other == global::CSClientLogRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventName) {
        EventName = other.EventName;
      }
      if (other.HasValue4Sum) {
        Value4Sum = other.Value4Sum;
      }
      if (other.HasParams) {
        Params = other.Params;
      }
      if (other.HasPlayerId) {
        PlayerId = other.PlayerId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSClientLogRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSClientLogRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasEventName = input.ReadString(ref result.eventName_);
            break;
          }
          case 21: {
            result.hasValue4Sum = input.ReadFloat(ref result.value4Sum_);
            break;
          }
          case 26: {
            result.hasParams = input.ReadString(ref result.params_);
            break;
          }
          case 32: {
            result.hasPlayerId = input.ReadInt64(ref result.playerId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventName {
      get { return result.hasEventName; }
    }
    public string EventName {
      get { return result.EventName; }
      set { SetEventName(value); }
    }
    public Builder SetEventName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEventName = true;
      result.eventName_ = value;
      return this;
    }
    public Builder ClearEventName() {
      PrepareBuilder();
      result.hasEventName = false;
      result.eventName_ = "";
      return this;
    }
    
    public bool HasValue4Sum {
      get { return result.hasValue4Sum; }
    }
    public float Value4Sum {
      get { return result.Value4Sum; }
      set { SetValue4Sum(value); }
    }
    public Builder SetValue4Sum(float value) {
      PrepareBuilder();
      result.hasValue4Sum = true;
      result.value4Sum_ = value;
      return this;
    }
    public Builder ClearValue4Sum() {
      PrepareBuilder();
      result.hasValue4Sum = false;
      result.value4Sum_ = 0F;
      return this;
    }
    
    public bool HasParams {
      get { return result.hasParams; }
    }
    public string Params {
      get { return result.Params; }
      set { SetParams(value); }
    }
    public Builder SetParams(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasParams = true;
      result.params_ = value;
      return this;
    }
    public Builder ClearParams() {
      PrepareBuilder();
      result.hasParams = false;
      result.params_ = "";
      return this;
    }
    
    public bool HasPlayerId {
      get { return result.hasPlayerId; }
    }
    public long PlayerId {
      get { return result.PlayerId; }
      set { SetPlayerId(value); }
    }
    public Builder SetPlayerId(long value) {
      PrepareBuilder();
      result.hasPlayerId = true;
      result.playerId_ = value;
      return this;
    }
    public Builder ClearPlayerId() {
      PrepareBuilder();
      result.hasPlayerId = false;
      result.playerId_ = 0L;
      return this;
    }
  }
  static CSClientLogRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SceneRewardComprise : pb::GeneratedMessage<SceneRewardComprise, SceneRewardComprise.Builder> {
  private SceneRewardComprise() { }
  private static readonly SceneRewardComprise defaultInstance = new SceneRewardComprise().MakeReadOnly();
  private static readonly string[] _sceneRewardCompriseFieldNames = new string[] { "outputCash", "outputCoin", "outputExp", "outputVit", "type" };
  private static readonly uint[] _sceneRewardCompriseFieldTags = new uint[] { 24, 16, 40, 32, 8 };
  public static SceneRewardComprise DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SceneRewardComprise DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SceneRewardComprise ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SceneRewardComprise__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SceneRewardComprise, SceneRewardComprise.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SceneRewardComprise__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int OutputCoinFieldNumber = 2;
  private bool hasOutputCoin;
  private int outputCoin_;
  public bool HasOutputCoin {
    get { return hasOutputCoin; }
  }
  public int OutputCoin {
    get { return outputCoin_; }
  }
  
  public const int OutputCashFieldNumber = 3;
  private bool hasOutputCash;
  private int outputCash_;
  public bool HasOutputCash {
    get { return hasOutputCash; }
  }
  public int OutputCash {
    get { return outputCash_; }
  }
  
  public const int OutputVitFieldNumber = 4;
  private bool hasOutputVit;
  private int outputVit_;
  public bool HasOutputVit {
    get { return hasOutputVit; }
  }
  public int OutputVit {
    get { return outputVit_; }
  }
  
  public const int OutputExpFieldNumber = 5;
  private bool hasOutputExp;
  private int outputExp_;
  public bool HasOutputExp {
    get { return hasOutputExp; }
  }
  public int OutputExp {
    get { return outputExp_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sceneRewardCompriseFieldNames;
    if (hasType) {
      output.WriteInt32(1, field_names[4], Type);
    }
    if (hasOutputCoin) {
      output.WriteInt32(2, field_names[1], OutputCoin);
    }
    if (hasOutputCash) {
      output.WriteInt32(3, field_names[0], OutputCash);
    }
    if (hasOutputVit) {
      output.WriteInt32(4, field_names[3], OutputVit);
    }
    if (hasOutputExp) {
      output.WriteInt32(5, field_names[2], OutputExp);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
    }
    if (hasOutputCoin) {
      size += pb::CodedOutputStream.ComputeInt32Size(2, OutputCoin);
    }
    if (hasOutputCash) {
      size += pb::CodedOutputStream.ComputeInt32Size(3, OutputCash);
    }
    if (hasOutputVit) {
      size += pb::CodedOutputStream.ComputeInt32Size(4, OutputVit);
    }
    if (hasOutputExp) {
      size += pb::CodedOutputStream.ComputeInt32Size(5, OutputExp);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SceneRewardComprise ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SceneRewardComprise ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SceneRewardComprise ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SceneRewardComprise ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SceneRewardComprise MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SceneRewardComprise prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SceneRewardComprise, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SceneRewardComprise cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SceneRewardComprise result;
    
    private SceneRewardComprise PrepareBuilder() {
      if (resultIsReadOnly) {
        SceneRewardComprise original = result;
        result = new SceneRewardComprise();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SceneRewardComprise MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SceneRewardComprise.Descriptor; }
    }
    
    public override SceneRewardComprise DefaultInstanceForType {
      get { return global::SceneRewardComprise.DefaultInstance; }
    }
    
    public override SceneRewardComprise BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SceneRewardComprise) {
        return MergeFrom((SceneRewardComprise) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SceneRewardComprise other) {
      if (other == global::SceneRewardComprise.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasOutputCoin) {
        OutputCoin = other.OutputCoin;
      }
      if (other.HasOutputCash) {
        OutputCash = other.OutputCash;
      }
      if (other.HasOutputVit) {
        OutputVit = other.OutputVit;
      }
      if (other.HasOutputExp) {
        OutputExp = other.OutputExp;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sceneRewardCompriseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sceneRewardCompriseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 16: {
            result.hasOutputCoin = input.ReadInt32(ref result.outputCoin_);
            break;
          }
          case 24: {
            result.hasOutputCash = input.ReadInt32(ref result.outputCash_);
            break;
          }
          case 32: {
            result.hasOutputVit = input.ReadInt32(ref result.outputVit_);
            break;
          }
          case 40: {
            result.hasOutputExp = input.ReadInt32(ref result.outputExp_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasOutputCoin {
      get { return result.hasOutputCoin; }
    }
    public int OutputCoin {
      get { return result.OutputCoin; }
      set { SetOutputCoin(value); }
    }
    public Builder SetOutputCoin(int value) {
      PrepareBuilder();
      result.hasOutputCoin = true;
      result.outputCoin_ = value;
      return this;
    }
    public Builder ClearOutputCoin() {
      PrepareBuilder();
      result.hasOutputCoin = false;
      result.outputCoin_ = 0;
      return this;
    }
    
    public bool HasOutputCash {
      get { return result.hasOutputCash; }
    }
    public int OutputCash {
      get { return result.OutputCash; }
      set { SetOutputCash(value); }
    }
    public Builder SetOutputCash(int value) {
      PrepareBuilder();
      result.hasOutputCash = true;
      result.outputCash_ = value;
      return this;
    }
    public Builder ClearOutputCash() {
      PrepareBuilder();
      result.hasOutputCash = false;
      result.outputCash_ = 0;
      return this;
    }
    
    public bool HasOutputVit {
      get { return result.hasOutputVit; }
    }
    public int OutputVit {
      get { return result.OutputVit; }
      set { SetOutputVit(value); }
    }
    public Builder SetOutputVit(int value) {
      PrepareBuilder();
      result.hasOutputVit = true;
      result.outputVit_ = value;
      return this;
    }
    public Builder ClearOutputVit() {
      PrepareBuilder();
      result.hasOutputVit = false;
      result.outputVit_ = 0;
      return this;
    }
    
    public bool HasOutputExp {
      get { return result.hasOutputExp; }
    }
    public int OutputExp {
      get { return result.OutputExp; }
      set { SetOutputExp(value); }
    }
    public Builder SetOutputExp(int value) {
      PrepareBuilder();
      result.hasOutputExp = true;
      result.outputExp_ = value;
      return this;
    }
    public Builder ClearOutputExp() {
      PrepareBuilder();
      result.hasOutputExp = false;
      result.outputExp_ = 0;
      return this;
    }
  }
  static SceneRewardComprise() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Push_Info : pb::GeneratedMessage<Push_Info, Push_Info.Builder> {
  private Push_Info() { }
  private static readonly Push_Info defaultInstance = new Push_Info().MakeReadOnly();
  private static readonly string[] _pushInfoFieldNames = new string[] { "buyed", "endTime", "pushId", "type" };
  private static readonly uint[] _pushInfoFieldTags = new uint[] { 32, 24, 16, 8 };
  public static Push_Info DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Push_Info DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Push_Info ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_Push_Info__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Push_Info, Push_Info.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_Push_Info__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private int type_;
  public bool HasType {
    get { return hasType; }
  }
  public int Type {
    get { return type_; }
  }
  
  public const int PushIdFieldNumber = 2;
  private bool hasPushId;
  private long pushId_;
  public bool HasPushId {
    get { return hasPushId; }
  }
  public long PushId {
    get { return pushId_; }
  }
  
  public const int EndTimeFieldNumber = 3;
  private bool hasEndTime;
  private long endTime_;
  public bool HasEndTime {
    get { return hasEndTime; }
  }
  public long EndTime {
    get { return endTime_; }
  }
  
  public const int BuyedFieldNumber = 4;
  private bool hasBuyed;
  private bool buyed_;
  public bool HasBuyed {
    get { return hasBuyed; }
  }
  public bool Buyed {
    get { return buyed_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _pushInfoFieldNames;
    if (hasType) {
      output.WriteInt32(1, field_names[3], Type);
    }
    if (hasPushId) {
      output.WriteInt64(2, field_names[2], PushId);
    }
    if (hasEndTime) {
      output.WriteInt64(3, field_names[1], EndTime);
    }
    if (hasBuyed) {
      output.WriteBool(4, field_names[0], Buyed);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasType) {
      size += pb::CodedOutputStream.ComputeInt32Size(1, Type);
    }
    if (hasPushId) {
      size += pb::CodedOutputStream.ComputeInt64Size(2, PushId);
    }
    if (hasEndTime) {
      size += pb::CodedOutputStream.ComputeInt64Size(3, EndTime);
    }
    if (hasBuyed) {
      size += pb::CodedOutputStream.ComputeBoolSize(4, Buyed);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static Push_Info ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Push_Info ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Push_Info ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Push_Info ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Push_Info ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Push_Info ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Push_Info ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Push_Info ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Push_Info ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Push_Info ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Push_Info MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Push_Info prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Push_Info, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Push_Info cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Push_Info result;
    
    private Push_Info PrepareBuilder() {
      if (resultIsReadOnly) {
        Push_Info original = result;
        result = new Push_Info();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Push_Info MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Push_Info.Descriptor; }
    }
    
    public override Push_Info DefaultInstanceForType {
      get { return global::Push_Info.DefaultInstance; }
    }
    
    public override Push_Info BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Push_Info) {
        return MergeFrom((Push_Info) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Push_Info other) {
      if (other == global::Push_Info.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasPushId) {
        PushId = other.PushId;
      }
      if (other.HasEndTime) {
        EndTime = other.EndTime;
      }
      if (other.HasBuyed) {
        Buyed = other.Buyed;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_pushInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _pushInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasType = input.ReadInt32(ref result.type_);
            break;
          }
          case 16: {
            result.hasPushId = input.ReadInt64(ref result.pushId_);
            break;
          }
          case 24: {
            result.hasEndTime = input.ReadInt64(ref result.endTime_);
            break;
          }
          case 32: {
            result.hasBuyed = input.ReadBool(ref result.buyed_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
      get { return result.hasType; }
    }
    public int Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(int value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasPushId {
      get { return result.hasPushId; }
    }
    public long PushId {
      get { return result.PushId; }
      set { SetPushId(value); }
    }
    public Builder SetPushId(long value) {
      PrepareBuilder();
      result.hasPushId = true;
      result.pushId_ = value;
      return this;
    }
    public Builder ClearPushId() {
      PrepareBuilder();
      result.hasPushId = false;
      result.pushId_ = 0L;
      return this;
    }
    
    public bool HasEndTime {
      get { return result.hasEndTime; }
    }
    public long EndTime {
      get { return result.EndTime; }
      set { SetEndTime(value); }
    }
    public Builder SetEndTime(long value) {
      PrepareBuilder();
      result.hasEndTime = true;
      result.endTime_ = value;
      return this;
    }
    public Builder ClearEndTime() {
      PrepareBuilder();
      result.hasEndTime = false;
      result.endTime_ = 0L;
      return this;
    }
    
    public bool HasBuyed {
      get { return result.hasBuyed; }
    }
    public bool Buyed {
      get { return result.Buyed; }
      set { SetBuyed(value); }
    }
    public Builder SetBuyed(bool value) {
      PrepareBuilder();
      result.hasBuyed = true;
      result.buyed_ = value;
      return this;
    }
    public Builder ClearBuyed() {
      PrepareBuilder();
      result.hasBuyed = false;
      result.buyed_ = false;
      return this;
    }
  }
  static Push_Info() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSGetPushRequest : pb::GeneratedMessage<CSGetPushRequest, CSGetPushRequest.Builder> {
  private CSGetPushRequest() { }
  private static readonly CSGetPushRequest defaultInstance = new CSGetPushRequest().MakeReadOnly();
  private static readonly string[] _cSGetPushRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSGetPushRequestFieldTags = new uint[] {  };
  public static CSGetPushRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSGetPushRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSGetPushRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSGetPushRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSGetPushRequest, CSGetPushRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSGetPushRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSGetPushRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSGetPushRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSGetPushRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSGetPushRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSGetPushRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSGetPushRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSGetPushRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSGetPushRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSGetPushRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSGetPushRequest result;
    
    private CSGetPushRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSGetPushRequest original = result;
        result = new CSGetPushRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSGetPushRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSGetPushRequest.Descriptor; }
    }
    
    public override CSGetPushRequest DefaultInstanceForType {
      get { return global::CSGetPushRequest.DefaultInstance; }
    }
    
    public override CSGetPushRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSGetPushRequest) {
        return MergeFrom((CSGetPushRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSGetPushRequest other) {
      if (other == global::CSGetPushRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSGetPushRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSGetPushRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSGetPushRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCGetPushResponse : pb::GeneratedMessage<SCGetPushResponse, SCGetPushResponse.Builder> {
  private SCGetPushResponse() { }
  private static readonly SCGetPushResponse defaultInstance = new SCGetPushResponse().MakeReadOnly();
  private static readonly string[] _sCGetPushResponseFieldNames = new string[] { "infos" };
  private static readonly uint[] _sCGetPushResponseFieldTags = new uint[] { 10 };
  public static SCGetPushResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCGetPushResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCGetPushResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCGetPushResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCGetPushResponse, SCGetPushResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCGetPushResponse__FieldAccessorTable; }
  }
  
  public const int InfosFieldNumber = 1;
  private pbc::PopsicleList<global::Push_Info> infos_ = new pbc::PopsicleList<global::Push_Info>();
  public scg::IList<global::Push_Info> InfosList {
    get { return infos_; }
  }
  public int InfosCount {
    get { return infos_.Count; }
  }
  public global::Push_Info GetInfos(int index) {
    return infos_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCGetPushResponseFieldNames;
    if (infos_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], infos_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    foreach (global::Push_Info element in InfosList) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, element);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCGetPushResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCGetPushResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCGetPushResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCGetPushResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCGetPushResponse MakeReadOnly() {
    infos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCGetPushResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCGetPushResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCGetPushResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCGetPushResponse result;
    
    private SCGetPushResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCGetPushResponse original = result;
        result = new SCGetPushResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCGetPushResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCGetPushResponse.Descriptor; }
    }
    
    public override SCGetPushResponse DefaultInstanceForType {
      get { return global::SCGetPushResponse.DefaultInstance; }
    }
    
    public override SCGetPushResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCGetPushResponse) {
        return MergeFrom((SCGetPushResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCGetPushResponse other) {
      if (other == global::SCGetPushResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.infos_.Count != 0) {
        result.infos_.Add(other.infos_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCGetPushResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCGetPushResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.infos_, global::Push_Info.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Push_Info> InfosList {
      get { return PrepareBuilder().infos_; }
    }
    public int InfosCount {
      get { return result.InfosCount; }
    }
    public global::Push_Info GetInfos(int index) {
      return result.GetInfos(index);
    }
    public Builder SetInfos(int index, global::Push_Info value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.infos_[index] = value;
      return this;
    }
    public Builder SetInfos(int index, global::Push_Info.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.infos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddInfos(global::Push_Info value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.infos_.Add(value);
      return this;
    }
    public Builder AddInfos(global::Push_Info.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.infos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeInfos(scg::IEnumerable<global::Push_Info> values) {
      PrepareBuilder();
      result.infos_.Add(values);
      return this;
    }
    public Builder ClearInfos() {
      PrepareBuilder();
      result.infos_.Clear();
      return this;
    }
  }
  static SCGetPushResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSBuyPushRequest : pb::GeneratedMessage<CSBuyPushRequest, CSBuyPushRequest.Builder> {
  private CSBuyPushRequest() { }
  private static readonly CSBuyPushRequest defaultInstance = new CSBuyPushRequest().MakeReadOnly();
  private static readonly string[] _cSBuyPushRequestFieldNames = new string[] { "pushId" };
  private static readonly uint[] _cSBuyPushRequestFieldTags = new uint[] { 8 };
  public static CSBuyPushRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSBuyPushRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSBuyPushRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSBuyPushRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSBuyPushRequest, CSBuyPushRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSBuyPushRequest__FieldAccessorTable; }
  }
  
  public const int PushIdFieldNumber = 1;
  private bool hasPushId;
  private long pushId_;
  public bool HasPushId {
    get { return hasPushId; }
  }
  public long PushId {
    get { return pushId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSBuyPushRequestFieldNames;
    if (hasPushId) {
      output.WriteInt64(1, field_names[0], PushId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPushId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PushId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSBuyPushRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSBuyPushRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSBuyPushRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSBuyPushRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSBuyPushRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSBuyPushRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSBuyPushRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSBuyPushRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSBuyPushRequest result;
    
    private CSBuyPushRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSBuyPushRequest original = result;
        result = new CSBuyPushRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSBuyPushRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSBuyPushRequest.Descriptor; }
    }
    
    public override CSBuyPushRequest DefaultInstanceForType {
      get { return global::CSBuyPushRequest.DefaultInstance; }
    }
    
    public override CSBuyPushRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSBuyPushRequest) {
        return MergeFrom((CSBuyPushRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSBuyPushRequest other) {
      if (other == global::CSBuyPushRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPushId) {
        PushId = other.PushId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSBuyPushRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSBuyPushRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPushId = input.ReadInt64(ref result.pushId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPushId {
      get { return result.hasPushId; }
    }
    public long PushId {
      get { return result.PushId; }
      set { SetPushId(value); }
    }
    public Builder SetPushId(long value) {
      PrepareBuilder();
      result.hasPushId = true;
      result.pushId_ = value;
      return this;
    }
    public Builder ClearPushId() {
      PrepareBuilder();
      result.hasPushId = false;
      result.pushId_ = 0L;
      return this;
    }
  }
  static CSBuyPushRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCBuyPushResponse : pb::GeneratedMessage<SCBuyPushResponse, SCBuyPushResponse.Builder> {
  private SCBuyPushResponse() { }
  private static readonly SCBuyPushResponse defaultInstance = new SCBuyPushResponse().MakeReadOnly();
  private static readonly string[] _sCBuyPushResponseFieldNames = new string[] { "pushId", "reponseStatus" };
  private static readonly uint[] _sCBuyPushResponseFieldTags = new uint[] { 8, 18 };
  public static SCBuyPushResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCBuyPushResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCBuyPushResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCBuyPushResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCBuyPushResponse, SCBuyPushResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCBuyPushResponse__FieldAccessorTable; }
  }
  
  public const int PushIdFieldNumber = 1;
  private bool hasPushId;
  private long pushId_;
  public bool HasPushId {
    get { return hasPushId; }
  }
  public long PushId {
    get { return pushId_; }
  }
  
  public const int ReponseStatusFieldNumber = 2;
  private bool hasReponseStatus;
  private global::ResponseStatus reponseStatus_;
  public bool HasReponseStatus {
    get { return hasReponseStatus; }
  }
  public global::ResponseStatus ReponseStatus {
    get { return reponseStatus_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCBuyPushResponseFieldNames;
    if (hasPushId) {
      output.WriteInt64(1, field_names[0], PushId);
    }
    if (hasReponseStatus) {
      output.WriteMessage(2, field_names[1], ReponseStatus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasPushId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, PushId);
    }
    if (hasReponseStatus) {
      size += pb::CodedOutputStream.ComputeMessageSize(2, ReponseStatus);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCBuyPushResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCBuyPushResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCBuyPushResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCBuyPushResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCBuyPushResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCBuyPushResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCBuyPushResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCBuyPushResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCBuyPushResponse result;
    
    private SCBuyPushResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCBuyPushResponse original = result;
        result = new SCBuyPushResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCBuyPushResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCBuyPushResponse.Descriptor; }
    }
    
    public override SCBuyPushResponse DefaultInstanceForType {
      get { return global::SCBuyPushResponse.DefaultInstance; }
    }
    
    public override SCBuyPushResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCBuyPushResponse) {
        return MergeFrom((SCBuyPushResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCBuyPushResponse other) {
      if (other == global::SCBuyPushResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPushId) {
        PushId = other.PushId;
      }
      if (other.HasReponseStatus) {
        MergeReponseStatus(other.ReponseStatus);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCBuyPushResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCBuyPushResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPushId = input.ReadInt64(ref result.pushId_);
            break;
          }
          case 18: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasReponseStatus) {
              subBuilder.MergeFrom(ReponseStatus);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ReponseStatus = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPushId {
      get { return result.hasPushId; }
    }
    public long PushId {
      get { return result.PushId; }
      set { SetPushId(value); }
    }
    public Builder SetPushId(long value) {
      PrepareBuilder();
      result.hasPushId = true;
      result.pushId_ = value;
      return this;
    }
    public Builder ClearPushId() {
      PrepareBuilder();
      result.hasPushId = false;
      result.pushId_ = 0L;
      return this;
    }
    
    public bool HasReponseStatus {
     get { return result.hasReponseStatus; }
    }
    public global::ResponseStatus ReponseStatus {
      get { return result.ReponseStatus; }
      set { SetReponseStatus(value); }
    }
    public Builder SetReponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = value;
      return this;
    }
    public Builder SetReponseStatus(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReponseStatus = true;
      result.reponseStatus_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReponseStatus(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReponseStatus &&
          result.reponseStatus_ != global::ResponseStatus.DefaultInstance) {
          result.reponseStatus_ = global::ResponseStatus.CreateBuilder(result.reponseStatus_).MergeFrom(value).BuildPartial();
      } else {
        result.reponseStatus_ = value;
      }
      result.hasReponseStatus = true;
      return this;
    }
    public Builder ClearReponseStatus() {
      PrepareBuilder();
      result.hasReponseStatus = false;
      result.reponseStatus_ = null;
      return this;
    }
  }
  static SCBuyPushResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCombineInfoRequest : pb::GeneratedMessage<CSCombineInfoRequest, CSCombineInfoRequest.Builder> {
  private CSCombineInfoRequest() { }
  private static readonly CSCombineInfoRequest defaultInstance = new CSCombineInfoRequest().MakeReadOnly();
  private static readonly string[] _cSCombineInfoRequestFieldNames = new string[] {  };
  private static readonly uint[] _cSCombineInfoRequestFieldTags = new uint[] {  };
  public static CSCombineInfoRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCombineInfoRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCombineInfoRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSCombineInfoRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCombineInfoRequest, CSCombineInfoRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSCombineInfoRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCombineInfoRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCombineInfoRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCombineInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCombineInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCombineInfoRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCombineInfoRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCombineInfoRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCombineInfoRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCombineInfoRequest result;
    
    private CSCombineInfoRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCombineInfoRequest original = result;
        result = new CSCombineInfoRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCombineInfoRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCombineInfoRequest.Descriptor; }
    }
    
    public override CSCombineInfoRequest DefaultInstanceForType {
      get { return global::CSCombineInfoRequest.DefaultInstance; }
    }
    
    public override CSCombineInfoRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCombineInfoRequest) {
        return MergeFrom((CSCombineInfoRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCombineInfoRequest other) {
      if (other == global::CSCombineInfoRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCombineInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCombineInfoRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CSCombineInfoRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCombineInfoResponse : pb::GeneratedMessage<SCCombineInfoResponse, SCCombineInfoResponse.Builder> {
  private SCCombineInfoResponse() { }
  private static readonly SCCombineInfoResponse defaultInstance = new SCCombineInfoResponse().MakeReadOnly();
  private static readonly string[] _sCCombineInfoResponseFieldNames = new string[] { "combineId", "count", "countLimit" };
  private static readonly uint[] _sCCombineInfoResponseFieldTags = new uint[] { 8, 16, 24 };
  public static SCCombineInfoResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCombineInfoResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCombineInfoResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCCombineInfoResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCombineInfoResponse, SCCombineInfoResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCCombineInfoResponse__FieldAccessorTable; }
  }
  
  public const int CombineIdFieldNumber = 1;
  private pbc::PopsicleList<long> combineId_ = new pbc::PopsicleList<long>();
  public scg::IList<long> CombineIdList {
    get { return pbc::Lists.AsReadOnly(combineId_); }
  }
  public int CombineIdCount {
    get { return combineId_.Count; }
  }
  public long GetCombineId(int index) {
    return combineId_[index];
  }
  
  public const int CountFieldNumber = 2;
  private pbc::PopsicleList<int> count_ = new pbc::PopsicleList<int>();
  public scg::IList<int> CountList {
    get { return pbc::Lists.AsReadOnly(count_); }
  }
  public int CountCount {
    get { return count_.Count; }
  }
  public int GetCount(int index) {
    return count_[index];
  }
  
  public const int CountLimitFieldNumber = 3;
  private pbc::PopsicleList<int> countLimit_ = new pbc::PopsicleList<int>();
  public scg::IList<int> CountLimitList {
    get { return pbc::Lists.AsReadOnly(countLimit_); }
  }
  public int CountLimitCount {
    get { return countLimit_.Count; }
  }
  public int GetCountLimit(int index) {
    return countLimit_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCombineInfoResponseFieldNames;
    if (combineId_.Count > 0) {
      output.WriteInt64Array(1, field_names[0], combineId_);
    }
    if (count_.Count > 0) {
      output.WriteInt32Array(2, field_names[1], count_);
    }
    if (countLimit_.Count > 0) {
      output.WriteInt32Array(3, field_names[2], countLimit_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    {
      int dataSize = 0;
      foreach (long element in CombineIdList) {
        dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * combineId_.Count;
    }
    {
      int dataSize = 0;
      foreach (int element in CountList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * count_.Count;
    }
    {
      int dataSize = 0;
      foreach (int element in CountLimitList) {
        dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
      }
      size += dataSize;
      size += 1 * countLimit_.Count;
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCombineInfoResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCombineInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCombineInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCombineInfoResponse MakeReadOnly() {
    combineId_.MakeReadOnly();
    count_.MakeReadOnly();
    countLimit_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCombineInfoResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCombineInfoResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCombineInfoResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCombineInfoResponse result;
    
    private SCCombineInfoResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCombineInfoResponse original = result;
        result = new SCCombineInfoResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCombineInfoResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCombineInfoResponse.Descriptor; }
    }
    
    public override SCCombineInfoResponse DefaultInstanceForType {
      get { return global::SCCombineInfoResponse.DefaultInstance; }
    }
    
    public override SCCombineInfoResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCombineInfoResponse) {
        return MergeFrom((SCCombineInfoResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCombineInfoResponse other) {
      if (other == global::SCCombineInfoResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.combineId_.Count != 0) {
        result.combineId_.Add(other.combineId_);
      }
      if (other.count_.Count != 0) {
        result.count_.Add(other.count_);
      }
      if (other.countLimit_.Count != 0) {
        result.countLimit_.Add(other.countLimit_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCombineInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCombineInfoResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadInt64Array(tag, field_name, result.combineId_);
            break;
          }
          case 18:
          case 16: {
            input.ReadInt32Array(tag, field_name, result.count_);
            break;
          }
          case 26:
          case 24: {
            input.ReadInt32Array(tag, field_name, result.countLimit_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<long> CombineIdList {
      get { return PrepareBuilder().combineId_; }
    }
    public int CombineIdCount {
      get { return result.CombineIdCount; }
    }
    public long GetCombineId(int index) {
      return result.GetCombineId(index);
    }
    public Builder SetCombineId(int index, long value) {
      PrepareBuilder();
      result.combineId_[index] = value;
      return this;
    }
    public Builder AddCombineId(long value) {
      PrepareBuilder();
      result.combineId_.Add(value);
      return this;
    }
    public Builder AddRangeCombineId(scg::IEnumerable<long> values) {
      PrepareBuilder();
      result.combineId_.Add(values);
      return this;
    }
    public Builder ClearCombineId() {
      PrepareBuilder();
      result.combineId_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> CountList {
      get { return PrepareBuilder().count_; }
    }
    public int CountCount {
      get { return result.CountCount; }
    }
    public int GetCount(int index) {
      return result.GetCount(index);
    }
    public Builder SetCount(int index, int value) {
      PrepareBuilder();
      result.count_[index] = value;
      return this;
    }
    public Builder AddCount(int value) {
      PrepareBuilder();
      result.count_.Add(value);
      return this;
    }
    public Builder AddRangeCount(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.count_.Add(values);
      return this;
    }
    public Builder ClearCount() {
      PrepareBuilder();
      result.count_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> CountLimitList {
      get { return PrepareBuilder().countLimit_; }
    }
    public int CountLimitCount {
      get { return result.CountLimitCount; }
    }
    public int GetCountLimit(int index) {
      return result.GetCountLimit(index);
    }
    public Builder SetCountLimit(int index, int value) {
      PrepareBuilder();
      result.countLimit_[index] = value;
      return this;
    }
    public Builder AddCountLimit(int value) {
      PrepareBuilder();
      result.countLimit_.Add(value);
      return this;
    }
    public Builder AddRangeCountLimit(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.countLimit_.Add(values);
      return this;
    }
    public Builder ClearCountLimit() {
      PrepareBuilder();
      result.countLimit_.Clear();
      return this;
    }
  }
  static SCCombineInfoResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CSCombineRequest : pb::GeneratedMessage<CSCombineRequest, CSCombineRequest.Builder> {
  private CSCombineRequest() { }
  private static readonly CSCombineRequest defaultInstance = new CSCombineRequest().MakeReadOnly();
  private static readonly string[] _cSCombineRequestFieldNames = new string[] { "combineId" };
  private static readonly uint[] _cSCombineRequestFieldTags = new uint[] { 8 };
  public static CSCombineRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CSCombineRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CSCombineRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_CSCombineRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CSCombineRequest, CSCombineRequest.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_CSCombineRequest__FieldAccessorTable; }
  }
  
  public const int CombineIdFieldNumber = 1;
  private bool hasCombineId;
  private long combineId_;
  public bool HasCombineId {
    get { return hasCombineId; }
  }
  public long CombineId {
    get { return combineId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _cSCombineRequestFieldNames;
    if (hasCombineId) {
      output.WriteInt64(1, field_names[0], CombineId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasCombineId) {
      size += pb::CodedOutputStream.ComputeInt64Size(1, CombineId);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static CSCombineRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CSCombineRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CSCombineRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CSCombineRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CSCombineRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CSCombineRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CSCombineRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CSCombineRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CSCombineRequest result;
    
    private CSCombineRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CSCombineRequest original = result;
        result = new CSCombineRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CSCombineRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CSCombineRequest.Descriptor; }
    }
    
    public override CSCombineRequest DefaultInstanceForType {
      get { return global::CSCombineRequest.DefaultInstance; }
    }
    
    public override CSCombineRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CSCombineRequest) {
        return MergeFrom((CSCombineRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CSCombineRequest other) {
      if (other == global::CSCombineRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCombineId) {
        CombineId = other.CombineId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cSCombineRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cSCombineRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCombineId = input.ReadInt64(ref result.combineId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCombineId {
      get { return result.hasCombineId; }
    }
    public long CombineId {
      get { return result.CombineId; }
      set { SetCombineId(value); }
    }
    public Builder SetCombineId(long value) {
      PrepareBuilder();
      result.hasCombineId = true;
      result.combineId_ = value;
      return this;
    }
    public Builder ClearCombineId() {
      PrepareBuilder();
      result.hasCombineId = false;
      result.combineId_ = 0L;
      return this;
    }
  }
  static CSCombineRequest() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SCCombineResponse : pb::GeneratedMessage<SCCombineResponse, SCCombineResponse.Builder> {
  private SCCombineResponse() { }
  private static readonly SCCombineResponse defaultInstance = new SCCombineResponse().MakeReadOnly();
  private static readonly string[] _sCCombineResponseFieldNames = new string[] { "result", "success" };
  private static readonly uint[] _sCCombineResponseFieldTags = new uint[] { 10, 16 };
  public static SCCombineResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SCCombineResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SCCombineResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Msg.internal__static_SCCombineResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SCCombineResponse, SCCombineResponse.Builder> InternalFieldAccessors {
    get { return global::Msg.internal__static_SCCombineResponse__FieldAccessorTable; }
  }
  
  public const int ResultFieldNumber = 1;
  private bool hasResult;
  private global::ResponseStatus result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public global::ResponseStatus Result {
    get { return result_ ?? global::ResponseStatus.DefaultInstance; }
  }
  
  public const int SuccessFieldNumber = 2;
  private bool hasSuccess;
  private bool success_;
  public bool HasSuccess {
    get { return hasSuccess; }
  }
  public bool Success {
    get { return success_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    CalcSerializedSize();
    string[] field_names = _sCCombineResponseFieldNames;
    if (hasResult) {
      output.WriteMessage(1, field_names[0], Result);
    }
    if (hasSuccess) {
      output.WriteBool(2, field_names[1], Success);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      return CalcSerializedSize();
    }
  }
  
  private int CalcSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;
    
    size = 0;
    if (hasResult) {
      size += pb::CodedOutputStream.ComputeMessageSize(1, Result);
    }
    if (hasSuccess) {
      size += pb::CodedOutputStream.ComputeBoolSize(2, Success);
    }
    size += UnknownFields.SerializedSize;
    memoizedSerializedSize = size;
    return size;
  }
  public static SCCombineResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SCCombineResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SCCombineResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SCCombineResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SCCombineResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SCCombineResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SCCombineResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SCCombineResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SCCombineResponse result;
    
    private SCCombineResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        SCCombineResponse original = result;
        result = new SCCombineResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SCCombineResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SCCombineResponse.Descriptor; }
    }
    
    public override SCCombineResponse DefaultInstanceForType {
      get { return global::SCCombineResponse.DefaultInstance; }
    }
    
    public override SCCombineResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SCCombineResponse) {
        return MergeFrom((SCCombineResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SCCombineResponse other) {
      if (other == global::SCCombineResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasResult) {
        MergeResult(other.Result);
      }
      if (other.HasSuccess) {
        Success = other.Success;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_sCCombineResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _sCCombineResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ResponseStatus.Builder subBuilder = global::ResponseStatus.CreateBuilder();
            if (result.hasResult) {
              subBuilder.MergeFrom(Result);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Result = subBuilder.BuildPartial();
            break;
          }
          case 16: {
            result.hasSuccess = input.ReadBool(ref result.success_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasResult {
     get { return result.hasResult; }
    }
    public global::ResponseStatus Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder SetResult(global::ResponseStatus.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = builderForValue.Build();
      return this;
    }
    public Builder MergeResult(global::ResponseStatus value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasResult &&
          result.result_ != global::ResponseStatus.DefaultInstance) {
          result.result_ = global::ResponseStatus.CreateBuilder(result.result_).MergeFrom(value).BuildPartial();
      } else {
        result.result_ = value;
      }
      result.hasResult = true;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = null;
      return this;
    }
    
    public bool HasSuccess {
      get { return result.hasSuccess; }
    }
    public bool Success {
      get { return result.Success; }
      set { SetSuccess(value); }
    }
    public Builder SetSuccess(bool value) {
      PrepareBuilder();
      result.hasSuccess = true;
      result.success_ = value;
      return this;
    }
    public Builder ClearSuccess() {
      PrepareBuilder();
      result.hasSuccess = false;
      result.success_ = false;
      return this;
    }
  }
  static SCCombineResponse() {
    object.ReferenceEquals(global::Msg.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
